### YamlMime:ManagedReference
items:
- uid: System.Web.Security.Roles
  id: Roles
  children:
  - System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  - System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  - System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  - System.Web.Security.Roles.ApplicationName
  - System.Web.Security.Roles.CacheRolesInCookie
  - System.Web.Security.Roles.CookieName
  - System.Web.Security.Roles.CookiePath
  - System.Web.Security.Roles.CookieProtectionValue
  - System.Web.Security.Roles.CookieRequireSSL
  - System.Web.Security.Roles.CookieSlidingExpiration
  - System.Web.Security.Roles.CookieTimeout
  - System.Web.Security.Roles.CreatePersistentCookie
  - System.Web.Security.Roles.CreateRole(System.String)
  - System.Web.Security.Roles.DeleteCookie
  - System.Web.Security.Roles.DeleteRole(System.String)
  - System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.Roles.Domain
  - System.Web.Security.Roles.Enabled
  - System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  - System.Web.Security.Roles.GetAllRoles
  - System.Web.Security.Roles.GetRolesForUser
  - System.Web.Security.Roles.GetRolesForUser(System.String)
  - System.Web.Security.Roles.GetUsersInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  - System.Web.Security.Roles.MaxCachedResults
  - System.Web.Security.Roles.Provider
  - System.Web.Security.Roles.Providers
  - System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  - System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  - System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  - System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.Roles.RoleExists(System.String)
  langs:
  - csharp
  name: Roles
  nameWithType: Roles
  fullName: System.Web.Security.Roles
  type: Class
  summary: "Gerencia a associação do usuário em funções para autorização de verificação em um aplicativo ASP.NET. Essa classe não pode ser herdada."
  remarks: "Gerenciamento de função do ASP.NET permite que você gerencie a autorização para seu aplicativo com base em grupos de usuários, conhecidos como funções. Ao atribuir usuários a funções, você pode controlar o acesso a partes diferentes recursos de seu aplicativo Web com base na função em vez de, ou além de, especificando a autorização com base no nome de usuário. Por exemplo, um aplicativo do funcionário pode ter funções como gerentes, funcionários, diretores e assim por diante, onde diferentes privilégios forem especificados para cada função.       Os usuários podem pertencer a mais de uma função. Por exemplo, se seu site for um fórum de discussão, alguns usuários podem ser a função de membros e moderadores. Você pode definir cada função para ter privilégios diferentes no site, e um usuário que está em ambas as funções, em seguida, teria dois conjuntos de privilégios.       Para habilitar o gerenciamento de função para seu aplicativo ASP.NET, use o elemento do `system.web` seção no arquivo Web. config para seu aplicativo, conforme mostrado no exemplo a seguir.      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;&quot; />     </connectionStrings>        <system.web>       <authentication mode=&quot;Forms&quot; >         <forms loginUrl=&quot;login.aspx&quot;         name=&quot;.ASPXFORMSAUTH&quot; />       </authentication>        <roleManager defaultProvider=&quot;SqlProvider&quot;        enabled=&quot;true&quot;       cacheRolesInCookie=&quot;true&quot;       cookieName=&quot;.ASPROLES&quot;       cookieTimeout=&quot;30&quot;       cookiePath=&quot;/&quot;       cookieRequireSSL=&quot;false&quot;       cookieSlidingExpiration=&quot;true&quot;       cookieProtection=&quot;All&quot; >       <providers>         <add           name=&quot;SqlProvider&quot;           type=&quot;System.Web.Security.SqlRoleProvider&quot;           connectionStringName=&quot;SqlServices&quot;           applicationName=&quot;SampleApplication&quot; />         </providers>       </roleManager>     </system.web>   </configuration>   ```Você pode especificar regras de autorização no arquivo de configuração para o aplicativo Web ou por meio de programação em seu código. Por exemplo, a seção a seguir de um arquivo Web. config requer que os usuários façam logon (negando a usuários anônimos) e, em seguida, permite que somente usuários na função de administradores tenham acesso.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```Se você usar o `authorization` seção no arquivo Web. config de seu aplicativo para especificar a autorização baseada em funções, usuários do seu aplicativo deve fornecer uma identidade de usuário autenticado. Você pode autenticar os usuários usando a autenticação do Windows ou formulários. Usuários anônimos não podem ser atribuídos a uma função. Funções podem ser usadas de forma independente ou em conjunto com o ASP.NET <xref:System.Web.Security.Membership>classes.</xref:System.Web.Security.Membership>       Para verificar a associação de função por meio de programação, você pode usar a classe de funções ou <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>propriedade com o <xref:System.Web.Security.Roles.IsUserInRole%2A>método, ou você pode usar o <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>propriedade com o <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName>método.</xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Web.Security.Roles.IsUserInRole%2A> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> Para o código de exemplo que verifica a associação de função programaticamente, consulte a seção de exemplo neste tópico.       A classe de funções também permite que você criar e excluir funções e adicionar usuários ou remover usuários das funções.      > [!NOTE] > Se você tiver configurado seu aplicativo para usar o <xref:System.Web.Security.WindowsTokenRoleProvider>classe, você não pode modificar funções ou associação de função.</xref:System.Web.Security.WindowsTokenRoleProvider> O <xref:System.Web.Security.WindowsTokenRoleProvider>apenas grupos de associação classverifies na segurança do Windows.</xref:System.Web.Security.WindowsTokenRoleProvider> Nesse caso, você deve usar o gerenciamento de contas de usuário do Windows em vez de funções do ASP.NET para criar e excluir grupos e gerenciar a associação de grupo.       Você pode armazenar informações de função em várias fontes de dados.      -Você pode usar o <xref:System.Web.Security.WindowsTokenRoleProvider>classe para recuperar informações de função com base na associação de grupos do Windows.</xref:System.Web.Security.WindowsTokenRoleProvider>      -Você pode armazenar informações de função em um banco de dados do SQL Server usando a <xref:System.Web.Security.SqlRoleProvider>classe.</xref:System.Web.Security.SqlRoleProvider>      -Se você tiver informações de função existente, ou armazenar informações de função em e recuperar informações de função de uma fonte de dados que não sejam Windows, um repositório de autorização ou o SQL Server, você pode implementar um provedor de função personalizada, criando uma classe que herda a <xref:System.Web.Security.RoleProvider>classe abstrata.</xref:System.Web.Security.RoleProvider> Para obter mais informações, consulte [implementando um provedor de função](~/add/includes/ajax-current-ext-md.md).       Se o navegador do usuário aceitar cookies, você pode armazenar informações da função de usuário em um cookie no computador do usuário. Em cada solicitação de página, o ASP.NET lê as informações de função de usuário do cookie. Isso pode melhorar o desempenho do aplicativo, reduzindo a quantidade de comunicação necessária com a fonte de dados para recuperar informações de função. Se as informações de função para um usuário são muito longos para armazenar em um cookie, o ASP.NET armazena apenas as informações de função usadas recentemente no cookie e, em seguida, procura informações de função adicionais na fonte de dados conforme necessário. Se o navegador do usuário não dá suporte a cookies ou os cookies estão desabilitados, informações de função não é armazenado em cache em um cookie.       Você pode melhorar a confiabilidade dos nomes de função em cache em um cookie, especificando um <xref:System.Web.Security.Roles.CookieProtectionValue%2A>propriedade ao configurar as funções do ASP.NET.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> O padrão <xref:System.Web.Security.Roles.CookieProtectionValue%2A>é `All`, que criptografa os nomes de função no cookie e valida que o conteúdo do cookie não foram alterado.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>"
  example:
  - "The following example shows the Web.config file for an application configured to use both ASP.NET membership and ASP.NET roles and to use the <xref:System.Web.Security.SqlRoleProvider> to store membership and role information in a SQL Server database. Users are authenticated with forms authentication and only users in the Administrators role are allowed access to the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n    <authorization>  \n      <deny users=\"?\" />  \n      <allow roles=\"Administrators\" />  \n      <deny users=\"*\" />  \n    </authorization>  \n  \n    <membership defaultProvider=\"AspNetSqlProvider\" userIsOnlineTimeWindow=\"15\">  \n    </membership>  \n  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n  \n      <providers>  \n        <clear />  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"SampleApplication\" />  \n        </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example programmatically checks whether the logged-on user is in the Administrators role before allowing the user to view other users' roles.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static class Roles
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  id: AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adiciona os usuários especificados para a função especificada."
  remarks: "O método AddUsersToRole chama o provedor de função padrão para associar os usuários especificados com a função especificada na fonte de dados.       Se seu aplicativo usa o <xref:System.Web.Security.SqlRoleProvider>classe, as atualizações de banco de dados que são executadas durante a chamada para o <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>método são feitas em uma transação.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se um erro for encontrado, como um nome de usuário que já está em uma função especificada, a transação é revertida e nenhuma atualização será executada.      > [!NOTE] > Nomes de usuário e nomes de função não podem conter vírgulas."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_7_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_7_1.aspx)]"
  syntax:
    content: public static void AddUsersToRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de usuário para adicionar à função especificada."
    - id: roleName
      type: System.String
      description: "A função para adicionar os nomes de usuário especificado."
  overload: System.Web.Security.Roles.AddUsersToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - um dos elementos no <code>usernames</code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - um dos elementos no <code>usernames</code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code>usernames</code> contém um elemento duplicado."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adiciona os usuários especificados para as funções especificadas."
  remarks: "O método AddUsersToRoles chama o provedor de função padrão para associar os usuários especificados com as funções especificadas na fonte de dados.       Se seu aplicativo usa o <xref:System.Web.Security.SqlRoleProvider>classe, as atualizações de banco de dados que são executadas durante a chamada para o <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>método são feitas em uma transação.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se um erro for encontrado, como um nome de usuário que já está em uma função especificada, a transação é revertida e nenhuma atualização será executada.      > [!NOTE] > Nomes de usuário e nomes de função não podem conter vírgulas."
  example:
  - "The following code example adds one or more users to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_21_1.aspx)]\n [!code-cs[System.Web.Security.Roles#1](~/add/codesnippet/csharp/m-system.web.security.ro_21_1.aspx)]"
  syntax:
    content: public static void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de usuário para adicionar às funções especificadas."
    - id: roleNames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de função para adicionar os nomes de usuário especificado."
  overload: System.Web.Security.Roles.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uma das funções na <code> roleNames </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - um dos usuários em <code> usernames </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code> roleNames </code> contém um elemento duplicado.       - ou - <code> usernames </code> contém um elemento duplicado."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  id: AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adiciona o usuário especificado para a função especificada."
  remarks: "O método AddUserToRole chama o provedor de função padrão para associar o usuário especificado com a função especificada na fonte de dados.      > [!NOTE] > Nomes de usuário e nomes de função não podem conter vírgulas."
  example:
  - "The following code example adds a user to a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#2](~/add/codesnippet/csharp/m-system.web.security.ro_19_1.aspx)]\n [!code-vb[System.Web.Security.Roles#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_19_1.aspx)]"
  syntax:
    content: public static void AddUserToRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "O nome de usuário para adicionar à função especificada."
    - id: roleName
      type: System.String
      description: "A função para adicionar o nome de usuário especificado ao."
  overload: System.Web.Security.Roles.AddUserToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code>username</code> é uma cadeia de caracteres vazia ou contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado.       - ou - usuário já está atribuído à função especificada."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  id: AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adiciona o usuário especificado para as funções especificadas."
  remarks: "O método AddUserToRoles chama o provedor de função padrão para associar o usuário especificado com as funções especificadas na fonte de dados.       Se seu aplicativo usa o <xref:System.Web.Security.SqlRoleProvider>classe, as atualizações de banco de dados que são executadas durante a chamada ao método AddUserToRoles são feitas em uma transação.</xref:System.Web.Security.SqlRoleProvider> Se um erro for encontrado, como um nome de usuário que já está em uma função especificada, a transação é revertida e nenhuma atualização será executada.      > [!NOTE] > Nomes de usuário e nomes de função não podem conter vírgulas."
  example:
  - "The following code example adds a user to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_20_1.aspx)]\n [!code-cs[System.Web.Security.Roles#3](~/add/codesnippet/csharp/m-system.web.security.ro_20_1.aspx)]"
  syntax:
    content: public static void AddUserToRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "O nome de usuário para adicionar às funções especificadas."
    - id: roleNames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de funções para adicionar o nome de usuário especificado para."
  overload: System.Web.Security.Roles.AddUserToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uma das funções na <code> roleNames </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code> username </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code> roleNames </code> contém um elemento duplicado."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém ou define o nome do aplicativo para armazenar e recuperar informações de função."
  remarks: "A propriedade ApplicationName é usada pelo <xref:System.Web.Security.Roles>classe para associar usuários e funções diferentes aplicativos.</xref:System.Web.Security.Roles> Isso permite que vários aplicativos usam a mesma fonte de dados para armazenar informações de usuário e função sem exibir conflitos entre nomes duplicados ou nomes de função duplicada. Vários aplicativos ASP.NET podem usar a mesma fonte de dados, especificando o mesmo valor na propriedade ApplicationName. Você pode definir a propriedade ApplicationName programaticamente, ou você pode defini-lo declarativamente no arquivo de configuração para o aplicativo Web usando o `applicationName` atributo.       Se seu aplicativo Web é usando o <xref:System.Web.Security.SqlRoleProvider>classe e um valor não for especificado para o `applicationName` atributo no arquivo de configuração, o <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>valor da propriedade atual <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>propriedade é usada.</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> </xref:System.Web.Security.SqlRoleProvider>      > [!CAUTION] > Como uma instância do provedor de função única padrão é usada para todas as solicitações atendidas por um <xref:System.Web.HttpApplication>do objeto, você pode ter várias solicitações de execução simultaneamente e a tentativa de definir o valor da propriedade ApplicationName.</xref:System.Web.HttpApplication> A propriedade ApplicationName não é thread-safe para várias gravações e alterar o valor da propriedade ApplicationName pode resultar em comportamento inesperado para vários usuários de um aplicativo. Evite escrever código para permitir que os usuários definir a propriedade ApplicationName, a menos que necessário. Um exemplo de um aplicativo em que pode ser necessário definir a propriedade ApplicationName é um aplicativo administrativo que gerencia os dados de função para vários aplicativos. Esse aplicativo deve ser um aplicativo de usuário único e não é um aplicativo Web."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `applicationName` attribute to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: "O nome do aplicativo para armazenar e recuperar informações de função."
  overload: System.Web.Security.Roles.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CacheRolesInCookie
  id: CacheRolesInCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica se as funções do usuário atual são armazenadas em um cookie."
  remarks: "Quando a propriedade CacheRolesInCookie é definida como `true` no arquivo Web. config, informações de função para cada usuário são armazenadas em um cookie. Quando o gerenciamento de função verifica para ver se um usuário está em uma função específica, o cookie de funções é verificado antes do provedor de função é chamado para verificar a lista de funções na fonte de dados. O cookie é atualizado dinamicamente para armazenar em cache os nomes de função validados mais recentemente.       Você pode melhorar a confiabilidade dos nomes de função em cache em um cookie, especificando um <xref:System.Web.Security.Roles.CookieProtectionValue%2A>propriedade ao configurar as funções do ASP.NET.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> O padrão <xref:System.Web.Security.Roles.CookieProtectionValue%2A>é `All`, que criptografa os nomes de função no cookie e valida que o conteúdo do cookie não foram alterado.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>      > [!NOTE] > Como nomes de função podem ser armazenados em cache além da fonte de dados, é possível que alterações para o gerenciamento de função na fonte de dados não deve ser refletidas nos valores armazenados em cache. Nesse caso, o usuário deve fechar e reabrir o navegador para limpar o valor do cookie em cache."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cacheRolesInCookie` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n   </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CacheRolesInCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as funções do usuário atual são armazenadas em cache em um cookie. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CacheRolesInCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieName
  id: CookieName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém o nome do cookie em que os nomes de função são armazenados em cache."
  remarks: "Você pode especificar o nome do cookie em funções são armazenadas em cache para seu aplicativo, definindo o `cookieName` atributo no arquivo Web. config para seu aplicativo ASP.NET. Isso é útil quando você deseja identificar exclusivamente um cookie para o seu aplicativo ou quando um cookie é compartilhado entre vários aplicativos, como um cookie de domínio."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookieName` attribute to .ASPROLES.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookieName { get; }
    return:
      type: System.String
      description: "O nome do cookie em que os nomes de função são armazenados em cache. O padrão é. ASPXROLES."
  overload: System.Web.Security.Roles.CookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookiePath
  id: CookiePath
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém o caminho para o cookie de nomes de função em cache."
  remarks: "Você pode especificar o caminho do cookie em funções são armazenadas em cache para seu aplicativo, definindo o `cookiePath` atributo no arquivo Web. config para seu aplicativo ASP.NET. Para obter mais informações sobre caminhos de cookie, consulte <xref:System.Web.HttpCookie.Path%2A>.</xref:System.Web.HttpCookie.Path%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookiePath` attribute to /MyApplication.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookiePath { get; }
    return:
      type: System.String
      description: "O caminho do cookie em que os nomes de função são armazenados em cache. O padrão é /."
  overload: System.Web.Security.Roles.CookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieProtectionValue
  id: CookieProtectionValue
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica como os nomes de função armazenadas em cache em um cookie são protegidos."
  remarks: "Você pode especificar a proteção do cookie em funções são armazenadas em cache para seu aplicativo, definindo o `cookieProtection` atributo no arquivo Web. config para seu aplicativo ASP.NET. O `cookieProtection` atributo toma uma <xref:System.Web.Security.CookieProtection>valor de enumeração que indica se os nomes de função são criptografados, validado, ambos ou nenhum deles.</xref:System.Web.Security.CookieProtection>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieProtection` attribute to `Encrypted`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static System.Web.Security.CookieProtection CookieProtectionValue { get; }
    return:
      type: System.Web.Security.CookieProtection
      description: "Uma da <xref href=&quot;System.Web.Security.CookieProtection&quot;> </xref> valores de enumeração que indica como os nomes das funções que são armazenados em cache em um cookie são protegidos. O padrão é <xref uid=&quot;langword_csharp_All&quot; name=&quot;All&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieProtectionValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieRequireSSL
  id: CookieRequireSSL
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica se o cookie de nomes de função requer SSL a fim de ser retornado para o servidor."
  remarks: "Você pode especificar se o SSL (Secure Sockets Layer) é necessária para retornar o cookie de nomes de função para o servidor em seu aplicativo, definindo o `cookieRequireSSL` atributo no arquivo Web. config para seu aplicativo ASP.NET. Para obter mais informações, consulte <xref:System.Web.HttpCookie.Secure%2A>.</xref:System.Web.HttpCookie.Secure%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieRequireSSL` to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieRequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o SSL é necessário para retornar o cookie de nomes de função para o servidor. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieRequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  id: CookieSlidingExpiration
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Indica se a data de expiração do cookie de nomes de função e a hora serão reinicializadas periodicamente."
  remarks: "Você pode especificar se a data de expiração do cookie de nomes de função e hora será redefinida com cada resposta usando o `cookieSlidingExpiration` atributo no arquivo Web. config para seu aplicativo ASP.NET. Se `true`, a expiração do cookie será inicialmente definida como a data e hora atuais mais o <xref:System.Web.Security.Roles.CookieTimeout%2A>em minutos.</xref:System.Web.Security.Roles.CookieTimeout%2A> Enquanto o usuário continua a usar ativamente o aplicativo ASP.NET, a data de expiração do cookie serão atualizados automaticamente se há menos da metade do <xref:System.Web.Security.Roles.CookieTimeout%2A>restantes.</xref:System.Web.Security.Roles.CookieTimeout%2A> Para obter mais informações, consulte o <xref:System.Web.HttpCookie.Expires%2A>propriedade.</xref:System.Web.HttpCookie.Expires%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieSlidingExpiration property to `false`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"false\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieSlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a data de expiração do cookie de nomes de função e a hora serão redefinidas periodicamente; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieSlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieTimeout
  id: CookieTimeout
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém o número de minutos antes de expira o cookie de funções."
  remarks: "A propriedade CookieTimeout é usada quando o <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>é de propriedade `true` e especifica o tempo de vida em minutos para o cookie de funções.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> Para definir o valor de CookieTimeout, adicione o `cookieTimeout` de atributos para o elemento no arquivo Web. config para o aplicativo ASP.NET e especificar um valor inteiro.       Se <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>é `false`, essa propriedade será ignorada.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieTimeout property to 30 minutes.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n  <add  \n    name=\"SqlProvider\"  \n    type=\"System.Web.Security.SqlRoleProvider\"  \n    connectionStringName=\"SqlServices\"  \n    applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static int CookieTimeout { get; }
    return:
      type: System.Int32
      description: "Um inteiro que especifica o número de minutos antes do cookie de funções expira. O padrão é 30 minutos."
  overload: System.Web.Security.Roles.CookieTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreatePersistentCookie
  id: CreatePersistentCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica se o cookie de nomes de função é baseada em sessão ou persistente."
  remarks: "O valor da propriedade CreatePersistentCookie é definido na configuração de um aplicativo ASP.NET usando o `createPersistentCookie` atributo do elemento de configuração.       Quando `false`, o cookie de nomes de função é um cookie de sessão, ou seja, o cookie é perdido quando o navegador for fechado. Quando `true`, o cookie de nomes de função é um cookie persistente que está disponível em várias sessões do navegador. A data de expiração do cookie persistente e a hora estão definidas para a data e hora atuais mais o <xref:System.Web.Security.Roles.CookieTimeout%2A>valor em minutos.</xref:System.Web.Security.Roles.CookieTimeout%2A>"
  syntax:
    content: public static bool CreatePersistentCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cookie de nomes de função é um cookie persistente. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CreatePersistentCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Adiciona uma nova função para a fonte de dados."
  remarks: "O método CreateRole adiciona um nome de função para a fonte de dados. Chamadas de CreateRole a <xref:System.Web.Security.RoleProvider.CreateRole%2A>método do provedor de função padrão para adicionar a função especificada para a fonte de dados.</xref:System.Web.Security.RoleProvider.CreateRole%2A>      > [!NOTE] > Nomes de função não podem conter vírgulas."
  example:
  - "The following code example creates a new role in the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_12_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_12_1.aspx)]"
  syntax:
    content: public static void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "O nome da função a ser criada."
  overload: System.Web.Security.Roles.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia.       - ou - <code>roleName</code> contém uma vírgula."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteCookie
  id: DeleteCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Exclui o cookie onde os nomes de função são armazenados em cache."
  remarks: "O método DeleteCookie limpa o conteúdo do cookie é usado para nomes de função de cache. Para obter mais informações sobre o cache de nomes de função, consulte <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example calls the DeleteCookie method to clear any cached role names when a user logs in. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.Roles#5](~/add/codesnippet/visualbasic/m-system.web.security.ro_1_1.aspx)]\n [!code-cs[System.Web.Security.Roles#5](~/add/codesnippet/csharp/m-system.web.security.ro_1_1.aspx)]"
  syntax:
    content: public static void DeleteCookie ();
    parameters: []
  overload: System.Web.Security.Roles.DeleteCookie*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  id: DeleteRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Remove uma função da fonte de dados."
  remarks: "O método DeleteRole remove um nome de função da fonte de dados. Chamadas de DeleteRole a <xref:System.Web.Security.RoleProvider.DeleteRole%2A>método do provedor de função padrão para remover a função especificada da fonte de dados.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Se a função identificado pelo `roleName` parâmetro tem um ou mais membros, em seguida, uma exceção será lançada e a função não será excluída."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_9_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "O nome da função a ser excluída."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> roleName </code> foi excluído da fonte de dados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>tem um ou mais membros.       - ou - gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Remove uma função da fonte de dados."
  remarks: "O método DeleteRole remove um nome de função da fonte de dados. Chamadas de DeleteRole a <xref:System.Web.Security.RoleProvider.DeleteRole%2A>método do provedor de função padrão para remover a função especificada da fonte de dados.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Se `throwOnPopulatedRole` é `true`, em seguida, uma exceção será lançada e a função não será excluída se a função identificado pelo `roleName` parâmetro tem um ou mais membros. Se `throwOnPopulatedRole` é `false`, em seguida, a função será excluída se ela estiver vazia ou não."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "O nome da função a ser excluída."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, lança uma exceção `roleName` tem um ou mais membros."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> roleName </code> foi excluído da fonte de dados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>tem um ou mais membros e <code>throwOnPopulatedRole</code> é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.       - ou - gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.Domain
  id: Domain
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém o valor do domínio do cookie de nomes de função."
  remarks: "O valor da propriedade de domínio é definido na configuração de um aplicativo ASP.NET usando o `domain` atributo do elemento de configuração.       Se nenhum valor for especificado na configuração para o atributo de domínio, a propriedade de domínio retornará `null` e o domínio do cookie de nomes de função padrão é o comportamento do <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A>propriedade.</xref:System.Web.HttpCookie.Domain%2A></xref:System.Web.HttpCookie>"
  syntax:
    content: public static string Domain { get; }
    return:
      type: System.String
      description: "O <xref:System.Web.HttpCookie.Domain*>do cookie de nomes de função.</xref:System.Web.HttpCookie.Domain*>"
  overload: System.Web.Security.Roles.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Enabled
  id: Enabled
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém ou define um valor que indica se o gerenciamento de função está habilitado para o aplicativo Web atual."
  remarks: ''
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `enabled` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o gerenciamento de função está ativado. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém uma lista de usuários em uma função especificada em que o nome de usuário contém o nome de usuário especificado para corresponder."
  remarks: "FindUsersInRole retorna uma lista de usuários em uma função onde o nome de usuário contém uma correspondência de fornecido `usernameToMatch` configurado `applicationName`. Por exemplo, se o `usernameToMatch` parâmetro for definido como &quot;usuário&quot; e, em seguida, os usuários &quot;Usuário1&quot;, &quot;Usuário2&quot;, &quot;usuário3&quot;, e assim por diante são retornados. Os usuários são retornados em ordem alfabética por nome de usuário.       O <xref:System.Web.Security.SqlRoleProvider>executa a pesquisa usando uma cláusula LIKE em relação a `usernameToMatch` parâmetro.</xref:System.Web.Security.SqlRoleProvider> Todos os curingas são suportados pelo SQL Server em que as cláusulas podem ser usadas no `usernameToMatch` o valor do parâmetro."
  example:
  - "The following code example uses the FindUsersInRole method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/m-system.web.security.ro_16_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/m-system.web.security.ro_16_1.aspx)]"
  syntax:
    content: public static string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "A função na qual pesquisar."
    - id: usernameToMatch
      type: System.String
      description: "O nome de usuário a ser pesquisado."
    return:
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres que contém os nomes de todos os usuários cujo nome de usuário corresponde <code> usernameToMatch </code> e que são membros da função especificada."
  overload: System.Web.Security.Roles.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code>usernameToMatch</code> é uma cadeia de caracteres vazia."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém uma lista de todas as funções para o aplicativo."
  remarks: "As chamadas de método GetAllRoles o <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName>método do provedor de função padrão para obter uma lista de todas as funções da fonte de dados para um aplicativo.</xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> Somente as funções para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade são recuperadas.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetAllRoles method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_18_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_18_1.aspx)]"
  syntax:
    content: public static string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres que contém os nomes de todas as funções armazenadas na fonte de dados para o aplicativo."
  overload: System.Web.Security.Roles.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser
  id: GetRolesForUser
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém uma lista das funções que o usuário conectado no momento é no."
  remarks: "O método GetRolesForUser chama o <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>método do provedor de função padrão para recuperar da fonte de dados, as funções que o usuário conectado no momento está.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> O usuário conectado no momento é identificado pelo <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>propriedade <xref:System.Web.HttpContext?displayProperty=fullName>, ou <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>ambientes de hospedagem não HTTP.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Se nenhum usuário estiver conectado, uma exceção será lançada. Somente as funções para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade são recuperadas.</xref:System.Web.Security.Roles.ApplicationName%2A>       Se <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>é `true`, em seguida, os resultados do método GetRolesForUser podem ser retornados do cache de função em vez do provedor de função especificado.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the GetRolesForUser method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_14_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_14_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser ();
    parameters: []
    return:
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres que contém os nomes de todas as funções que o usuário conectado no momento é no."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Não há nenhum usuário de logon atual."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém uma lista das funções de usuário."
  remarks: "O método GetRolesForUser chama o <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>método do provedor de função padrão para recuperar da fonte de dados, as funções que o usuário está.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> Somente as funções para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade são recuperadas.</xref:System.Web.Security.Roles.ApplicationName%2A>       Se `username` é igual ao usuário atual conectado e <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>é `true`, os resultados do GetRolesForUser método pode ser retornado da função de cache em vez de especificado <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_15_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_15_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "O usuário para retornar uma lista de funções."
    return:
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres que contém os nomes de todas as funções que o usuário especificado está em."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém uma lista de usuários na função especificada."
  remarks: "As chamadas de método GetUsersInRole o <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A>método do provedor de função padrão para recuperar os nomes de usuário associados a uma função da fonte de dados.</xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> Somente as funções para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade são recuperadas.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetUsersInRole method to get a list of the users in a particular role and binds the results to a <xref:System.Web.UI.WebControls.GridView> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_10_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_10_1.aspx)]"
  syntax:
    content: public static string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "A função para obter a lista de usuários."
    return:
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres que contém os nomes de todos os usuários que são membros da função especificada."
  overload: System.Web.Security.Roles.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  id: IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica se o usuário conectado no momento está na função especificada. A API é destinada apenas para ser chamado dentro do contexto de um thread de solicitação do ASP.NET e, nesse caso use sancionadas é thread-safe."
  remarks: "As chamadas de método IsUserInRole o <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName>método do provedor de função padrão para determinar se o usuário conectado no momento está associado uma função da fonte de dados para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> O usuário conectado no momento é identificado pelo <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>propriedade <xref:System.Web.HttpContext?displayProperty=fullName>, ou <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>ambientes de hospedagem não HTTP.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Se nenhum usuário estiver conectado, uma exceção será lançada. Somente as funções para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade são recuperadas.</xref:System.Web.Security.Roles.ApplicationName%2A>       Se <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>é `true`, em seguida, `roleName` podem ser verificados em relação o cache de funções em vez do provedor de função especificado.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_2_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "O nome da função onde procurar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o usuário conectado no momento está na função especificada. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - não há nenhum usuário de logon atual."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica se o usuário especificado está na função especificada. A API é destinada apenas para ser chamado dentro do contexto de um thread de solicitação do ASP.NET e, nesse caso use sancionadas é thread-safe."
  remarks: "As chamadas de método IsUserInRole o <xref:System.Web.Security.RoleProvider.IsUserInRole%2A>método do provedor de função padrão para determinar se um nome de usuário está associado uma função da fonte de dados para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A>       Se `username` é igual ao usuário atual conectado e o <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>é o valor da propriedade `true`, `roleName` podem ser verificados em relação o cache de função em vez de especificado <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether a user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_11_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_11_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "O nome do usuário a ser pesquisado."
    - id: roleName
      type: System.String
      description: "O nome da função onde procurar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o usuário especificado está na função especificada. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code>username</code> contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.MaxCachedResults
  id: MaxCachedResults
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém o número máximo de nomes de função a ser armazenado em cache para um usuário."
  remarks: "A propriedade MaxCachedResults é definida usando o `maxCachedResults` atributo de configuração. O valor de `maxCachedResults` atributo de configuração deve ser definido como um valor inteiro maior que zero."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `maxCachedResults` attribute to 10.  \n  \n```  \n<roleManager  \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\"   \n  maxCachedResults=\"10\" />  \n```"
  syntax:
    content: public static int MaxCachedResults { get; }
    return:
      type: System.Int32
      description: "O número máximo de nomes de função a ser armazenado em cache para um usuário. O padrão é 25."
  overload: System.Web.Security.Roles.MaxCachedResults*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Provider
  id: Provider
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém o provedor de função padrão para o aplicativo."
  remarks: "A propriedade do provedor permite referenciar diretamente o provedor de função padrão para um aplicativo. Isso é normalmente usado para acessar membros de provedor de função personalizados que não fazem parte de <xref:System.Web.Security.RoleProvider>classe abstrata.</xref:System.Web.Security.RoleProvider>       Por exemplo, a <xref:System.Web.Security.WindowsTokenRoleProvider>classe inclui uma sobrecarga de <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>método que permite que você determine se um usuário está em uma função comum do Windows usando um <xref:System.Security.Principal.WindowsBuiltInRole>valor de enumeração.</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> Uma referência para o <xref:System.Web.Security.WindowsTokenRoleProvider>de classe para um aplicativo pode ser obtido usando a propriedade de provedor e pode ser convertido como um <xref:System.Web.Security.WindowsTokenRoleProvider>para fazer referência ao <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>sobrecarregar.</xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> </xref:System.Web.Security.WindowsTokenRoleProvider>       Se vários provedores de função são configurados para um aplicativo, você pode acessar os provedores de função diferente usando o <xref:System.Web.Security.Roles.Providers%2A>coleção.</xref:System.Web.Security.Roles.Providers%2A>"
  example:
  - "The following code example casts the default role provider as a <xref:System.Web.Security.WindowsTokenRoleProvider> and checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.WindowsTokenRoleProvider>.  \n  \n [!code-cs[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/csharp/p-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/visualbasic/p-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProvider Provider { get; }
    return:
      type: System.Web.Security.RoleProvider
      description: "O provedor de função padrão para o aplicativo, que é exposto como uma classe que herda a <xref:System.Web.Security.RoleProvider>classe abstrata.</xref:System.Web.Security.RoleProvider>"
  overload: System.Web.Security.Roles.Provider*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.Providers
  id: Providers
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém uma coleção de provedores de função para o aplicativo ASP.NET."
  remarks: "A propriedade provedores faz referência a todos os provedores de função habilitados para um aplicativo, incluindo quaisquer provedores adicionada no arquivo Web. config. Você pode controlar qual função provedores estão disponíveis para um aplicativo usando o `providers` elemento da seção no arquivo Web. config para seu aplicativo.       O exemplo a seguir mostra uma seção que remove quaisquer provedores existentes (como aquelas especificadas no arquivo Machine. config) e adiciona um <xref:System.Web.Security.SqlRoleProvider>instância como o provedor de função para o aplicativo.</xref:System.Web.Security.SqlRoleProvider>      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;&quot; />     </connectionStrings>        <system.web>       <roleManager defaultProvider=&quot;SqlProvider&quot;          enabled=&quot;true&quot;         cacheRolesInCookie=&quot;true&quot;         cookieName=&quot;.ASPROLES&quot;         cookieTimeout=&quot;30&quot;         cookiePath=&quot;/&quot;         cookieRequireSSL=&quot;false&quot;         cookieSlidingExpiration=&quot;true&quot;         cookieProtection=&quot;Encrypted&quot;>            <providers>           <clear/>           <add             name=&quot;SqlProvider&quot;             type=&quot;System.Web.Security.SqlRoleProvider&quot;             connectionStringName=&quot;SqlServices&quot;             applicationName=&quot;MyApplication&quot; />            </providers>          </roleManager>     </system.web>   </configuration>   ```Você pode obter uma referência com rigidez de tipos para um provedor da coleção de provedores por indexação o provedor de função por nome e convertê-la como o tipo desejado.       Você pode obter uma referência para o provedor padrão para um aplicativo usando o <xref:System.Web.Security.Roles.Provider%2A>propriedade.</xref:System.Web.Security.Roles.Provider%2A>"
  example:
  - "The following code example lists the providers enabled for an application and their respective types.  \n  \n [!code-cs[System.Web.Security.Roles#7](~/add/codesnippet/csharp/p-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.Roles#7](~/add/codesnippet/visualbasic/p-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProviderCollection Providers { get; }
    return:
      type: System.Web.Security.RoleProviderCollection
      description: "Um <xref href=&quot;System.Web.Security.RoleProviderCollection&quot;> </xref> que contém os provedores de função configurados para o aplicativo ASP.NET."
  overload: System.Web.Security.Roles.Providers*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  id: RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Remove o usuário especificado da função especificada."
  remarks: "O método RemoveUserFromRole chama o provedor de função padrão para remover o usuário especificado da função especificada na fonte de dados."
  example:
  - "The following code example removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_5_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "O usuário a ser removido da função especificada."
    - id: roleName
      type: System.String
      description: "A função para remover o usuário especificado."
  overload: System.Web.Security.Roles.RemoveUserFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>não é uma cadeia de caracteres vazia ou contém uma vírgula (,) <code>username</code> é uma cadeia de caracteres vazia ou contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  id: RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Remove o usuário especificado das funções especificadas."
  remarks: "O método RemoveUserFromRoles chama o provedor de função padrão para remover o usuário especificado das funções especificadas na fonte de dados.       Se o aplicativo está configurado para usar o <xref:System.Web.Security.SqlRoleProvider>classe, as atualizações de banco de dados que são executadas durante a chamada ao método RemoveUserFromRoles são feitas em uma transação.</xref:System.Web.Security.SqlRoleProvider> Se um erro for encontrado, como um nome de usuário que não está em uma função especificada, a transação é revertida e nenhuma atualização será executada."
  example:
  - "The following code example uses the RemoveUserFromRoles method to remove a user from one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#10](~/add/codesnippet/visualbasic/m-system.web.security.ro_17_1.aspx)]\n [!code-cs[System.Web.Security.Roles#10](~/add/codesnippet/csharp/m-system.web.security.ro_17_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "O usuário remover das funções especificadas."
    - id: roleNames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de função para remover o usuário especificado."
  overload: System.Web.Security.Roles.RemoveUserFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uma das funções na <code> roleNames </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code> username </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code> roleNames </code> contém um elemento duplicado."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  id: RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Remove os usuários especificados da função especificada."
  remarks: "O método RemoveUsersFromRole chama o provedor de função padrão para remover os usuários especificados da função especificada na fonte de dados.       Se o aplicativo usa o <xref:System.Web.Security.SqlRoleProvider>classe, as atualizações de banco de dados que são executadas durante a chamada para o <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>método são feitas em uma transação.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se um erro for encontrado, como um nome de usuário que não está em uma função especificada, a transação é revertida e nenhuma atualização será executada."
  example:
  - "The following code example uses the RemoveUsersFromRole method to remove one or more users from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#9](~/add/codesnippet/csharp/m-system.web.security.ro_13_1.aspx)]\n [!code-vb[System.Web.Security.Roles#9](~/add/codesnippet/visualbasic/m-system.web.security.ro_13_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de usuário para remover das funções especificadas."
    - id: roleName
      type: System.String
      description: "O nome da função para remover os usuários especificados."
  overload: System.Web.Security.Roles.RemoveUsersFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - nomes de um usuário em <code>usernames</code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - nomes de um usuário em <code>usernames</code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code>usernames</code> contém um elemento duplicado."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Remove os nomes de usuários especificados das funções especificadas."
  remarks: "O método RemoveUsersFromRoles chama o provedor de função padrão para remover os usuários especificados das funções especificadas na fonte de dados.       Se o aplicativo usa o <xref:System.Web.Security.SqlRoleProvider>classe, as atualizações de banco de dados que são executadas durante a chamada para o <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>método são feitas em uma transação.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se um erro for encontrado, como um nome de usuário que não está em uma função especificada, a transação é revertida e nenhuma atualização será executada."
  example:
  - "The following code example uses the RemoveUsersFromRoles method to remove one or more users from one or more roles based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#8](~/add/codesnippet/csharp/6dafcb6b-2398-4825-9291-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#8](~/add/codesnippet/visualbasic/6dafcb6b-2398-4825-9291-_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de usuário para remover das funções especificadas."
    - id: roleNames
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres de nomes de função para remover os usuários especificados."
  overload: System.Web.Security.Roles.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uma das funções especificadas no <code> roleNames </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.       - ou - um dos usuários especificados na <code> usernames </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uma das funções especificadas no <code> roleNames </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - um dos usuários especificados na <code> usernames </code> é uma cadeia de caracteres vazia ou contém uma vírgula (,).       - ou - <code> roleNames </code> contém um elemento duplicado.       - ou - <code> usernames </code> contém um elemento duplicado."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
- uid: System.Web.Security.Roles.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Obtém um valor que indica se o nome da função especificada já existe na fonte de dados de função."
  remarks: "As chamadas de método RoleExists o `RoleExists` método do provedor de função padrão para determinar se um nome de função existe na fonte de dados para o aplicativo especificado no <xref:System.Web.Security.Roles.ApplicationName%2A>propriedade.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the RoleExists method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "O nome da função a ser pesquisado na fonte de dados."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o nome da função já existe na fonte de dados; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>é uma cadeia de caracteres vazia ou contém uma vírgula (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gerenciamento de função não está habilitado."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
- uid: System.Web.Security.Roles.ApplicationName
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.Roles.CookieName
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
- uid: System.Web.Security.CookieProtection
  parent: System.Web.Security
  isExternal: false
  name: CookieProtection
  nameWithType: CookieProtection
  fullName: System.Web.Security.CookieProtection
- uid: System.Web.Security.Roles.CookieRequireSSL
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.Roles.CreatePersistentCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
- uid: System.Web.Security.Roles.DeleteCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
- uid: System.Web.Security.Roles.Domain
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
- uid: System.Web.Security.Roles.Enabled
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
- uid: System.Web.Security.Roles.GetAllRoles
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
- uid: System.Web.Security.Roles.GetRolesForUser
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
- uid: System.Web.Security.Roles.MaxCachedResults
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: true
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.Web.Security.Roles.Providers
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
- uid: System.Web.Security.RoleProviderCollection
  parent: System.Web.Security
  isExternal: false
  name: RoleProviderCollection
  nameWithType: RoleProviderCollection
  fullName: System.Web.Security.RoleProviderCollection
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.Roles.RoleExists(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
- uid: System.Web.Security.Roles.AddUsersToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole
  nameWithType: Roles.AddUsersToRole
- uid: System.Web.Security.Roles.AddUsersToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles
  nameWithType: Roles.AddUsersToRoles
- uid: System.Web.Security.Roles.AddUserToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole
  nameWithType: Roles.AddUserToRole
- uid: System.Web.Security.Roles.AddUserToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles
  nameWithType: Roles.AddUserToRoles
- uid: System.Web.Security.Roles.ApplicationName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
- uid: System.Web.Security.Roles.CookieName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
- uid: System.Web.Security.Roles.CookieRequireSSL*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
- uid: System.Web.Security.Roles.CreatePersistentCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole
  nameWithType: Roles.CreateRole
- uid: System.Web.Security.Roles.DeleteCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie
  nameWithType: Roles.DeleteCookie
- uid: System.Web.Security.Roles.DeleteRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole
  nameWithType: Roles.DeleteRole
- uid: System.Web.Security.Roles.Domain*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
- uid: System.Web.Security.Roles.Enabled*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole
  nameWithType: Roles.FindUsersInRole
- uid: System.Web.Security.Roles.GetAllRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles
  nameWithType: Roles.GetAllRoles
- uid: System.Web.Security.Roles.GetRolesForUser*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser
  nameWithType: Roles.GetRolesForUser
- uid: System.Web.Security.Roles.GetUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole
  nameWithType: Roles.GetUsersInRole
- uid: System.Web.Security.Roles.IsUserInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole
  nameWithType: Roles.IsUserInRole
- uid: System.Web.Security.Roles.MaxCachedResults*
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
- uid: System.Web.Security.Roles.Providers*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
- uid: System.Web.Security.Roles.RemoveUserFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole
  nameWithType: Roles.RemoveUserFromRole
- uid: System.Web.Security.Roles.RemoveUserFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles
  nameWithType: Roles.RemoveUserFromRoles
- uid: System.Web.Security.Roles.RemoveUsersFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole
  nameWithType: Roles.RemoveUsersFromRole
- uid: System.Web.Security.Roles.RemoveUsersFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: Roles.RemoveUsersFromRoles
- uid: System.Web.Security.Roles.RoleExists*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists
  nameWithType: Roles.RoleExists
