### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Routing.IRequestReplyRouter
  id: IRequestReplyRouter
  children:
  - System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)
  - System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(System.IAsyncResult)
  langs:
  - csharp
  name: IRequestReplyRouter
  nameWithType: IRequestReplyRouter
  fullName: System.ServiceModel.Routing.IRequestReplyRouter
  type: Interface
  summary: "Define a interface necessária para processar mensagens de canais de solicitação-resposta."
  remarks: "Este contrato tem as seguintes configurações:-as sessões são permitidas."
  syntax:
    content: >-
      [System.ServiceModel.ServiceContract(Namespace="http://schemas.microsoft.com/netfx/2009/05/routing", SessionMode=System.ServiceModel.SessionMode.Allowed)]

      public interface IRequestReplyRouter
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)
  id: BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Routing.IRequestReplyRouter
  langs:
  - csharp
  name: BeginProcessRequest(Message,AsyncCallback,Object)
  nameWithType: IRequestReplyRouter.BeginProcessRequest(Message,AsyncCallback,Object)
  fullName: System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(Message,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel.Routing
  namespace: System.ServiceModel.Routing
  summary: "Inicia o processamento assíncrono da mensagem."
  syntax:
    content: public IAsyncResult BeginProcessRequest (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "A mensagem a ser processado."
    - id: callback
      type: System.AsyncCallback
      description: "Um representante de retorno de chamada assíncrono que é invocado quando o processamento da mensagem foi concluída."
    - id: state
      type: System.Object
      description: "Um objeto de estado definido pelo usuário que é passado para o procedimento de retorno de chamada."
    return:
      type: System.IAsyncResult
      description: "Um resultado assíncrono que pode ser usado para pesquisar ou aguarde resultados ou ambos; Esse valor também é necessário ao invocar <xref:System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest*>.</xref:System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest*>"
  overload: System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(System.IAsyncResult)
  id: EndProcessRequest(System.IAsyncResult)
  parent: System.ServiceModel.Routing.IRequestReplyRouter
  langs:
  - csharp
  name: EndProcessRequest(IAsyncResult)
  nameWithType: IRequestReplyRouter.EndProcessRequest(IAsyncResult)
  fullName: System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel.Routing
  namespace: System.ServiceModel.Routing
  summary: "Conclui a execução assíncrona de processamento de mensagens."
  syntax:
    content: public System.ServiceModel.Channels.Message EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "O resultado assíncrono retornado pela chamada para <xref:System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest*>.</xref:System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest*>"
    return:
      type: System.ServiceModel.Channels.Message
      description: "A resposta."
  overload: System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Routing.IRequestReplyRouter
  isExternal: false
  name: BeginProcessRequest(Message,AsyncCallback,Object)
  nameWithType: IRequestReplyRouter.BeginProcessRequest(Message,AsyncCallback,Object)
  fullName: System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(Message,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(System.IAsyncResult)
  parent: System.ServiceModel.Routing.IRequestReplyRouter
  isExternal: false
  name: EndProcessRequest(IAsyncResult)
  nameWithType: IRequestReplyRouter.EndProcessRequest(IAsyncResult)
  fullName: System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(IAsyncResult)
- uid: System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest*
  parent: System.ServiceModel.Routing.IRequestReplyRouter
  isExternal: false
  name: BeginProcessRequest
  nameWithType: IRequestReplyRouter.BeginProcessRequest
- uid: System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest*
  parent: System.ServiceModel.Routing.IRequestReplyRouter
  isExternal: false
  name: EndProcessRequest
  nameWithType: IRequestReplyRouter.EndProcessRequest
