### YamlMime:ManagedReference
items:
- uid: System.Web.UI.AsyncPostBackTrigger
  id: AsyncPostBackTrigger
  children:
  - System.Web.UI.AsyncPostBackTrigger.#ctor
  - System.Web.UI.AsyncPostBackTrigger.ControlID
  - System.Web.UI.AsyncPostBackTrigger.EventName
  - System.Web.UI.AsyncPostBackTrigger.HasTriggered
  - System.Web.UI.AsyncPostBackTrigger.Initialize
  - System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  - System.Web.UI.AsyncPostBackTrigger.ToString
  langs:
  - csharp
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger
  fullName: System.Web.UI.AsyncPostBackTrigger
  type: Class
  summary: "Define um controle e o evento opcional do controle como um disparador de controle de postback assíncrono que faz com que um <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> controle para atualizar."
  remarks: "Use o controle de AsyncPostBackTrigger para ativar os controles para os gatilhos para ser um <xref:System.Web.UI.UpdatePanel>controle.</xref:System.Web.UI.UpdatePanel> Controles que são gatilhos para um painel de atualização causam uma atualização do conteúdo do painel após um postback assíncrono. Definir um controle de disparador assíncrona é útil nas seguintes situações: - para controles que estão fora de um painel.      -Para controles que estão dentro de um painel quando o <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>é de propriedade `false`.</xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>      -Para controles que estão dentro de painéis aninhados, para fazer com que uma atualização de painéis do pai.       O controle que referencia o controle AsyncPostBackTrigger deve ser no mesmo contêiner de nomeação, como o painel de atualização para as quais ele é um gatilho. Não há suporte para gatilhos que são baseados em controles em outros contêineres de nomenclatura.       Adicionar AsyncPostBackTrigger controles usando a **Coleção UpdatePanelTrigger** caixa de diálogo no designer ou criando uma `Triggers` elemento declarativamente no <xref:System.Web.UI.UpdatePanel>controle.</xref:System.Web.UI.UpdatePanel> O <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A>propriedade é necessária, mas o <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>propriedade é opcional.</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> </xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A> Se o <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>propriedade não for especificada, o <xref:System.ComponentModel.DefaultEventAttribute>atributo do controle é usado para determinar o evento padrão.</xref:System.ComponentModel.DefaultEventAttribute> </xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> Por exemplo, o evento padrão para o <xref:System.Web.UI.WebControls.Button>controle é o <xref:System.Web.UI.WebControls.Button.Click>evento.</xref:System.Web.UI.WebControls.Button.Click> </xref:System.Web.UI.WebControls.Button> O <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>propriedade diferencia maiusculas de minúsculas.</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>       Você também pode referenciar um contêiner de nomenclatura como um disparador. Nesse caso, todos os controles filho no contêiner que causam um postback são considerados gatilhos para o <xref:System.Web.UI.UpdatePanel>controle.</xref:System.Web.UI.UpdatePanel>       Não há suporte para adicionar programaticamente AsyncPostBackTrigger controles. Para registrar programaticamente um controle de postagem, use o <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>método o <xref:System.Web.UI.ScriptManager>controle.</xref:System.Web.UI.ScriptManager> </xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Em seguida, chamar o <xref:System.Web.UI.UpdatePanel.Update%2A>método do <xref:System.Web.UI.UpdatePanel>controlar quando o controle envia de volta.</xref:System.Web.UI.UpdatePanel> </xref:System.Web.UI.UpdatePanel.Update%2A>       Se você definir um controle usando <xref:System.Web.UI.PostBackTrigger>e AsyncPostBackTrigger, uma exceção será lançada.</xref:System.Web.UI.PostBackTrigger>"
  example:
  - "The following example shows how to add an AsyncPostBackTrigger control declaratively. A <xref:System.Web.UI.WebControls.Button> control that is outside an <xref:System.Web.UI.UpdatePanel> control lets users enter a search term to find in the `Products` table of the Northwind database. A <xref:System.Web.UI.WebControls.GridView> control that is inside the <xref:System.Web.UI.UpdatePanel> control shows the results. The <xref:System.Web.UI.WebControls.Button> control is specified as an asynchronous trigger for the <xref:System.Web.UI.UpdatePanel> control.  \n  \n [!code-vb[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/visualbasic/t-system.web.ui.asyncpos_1.aspx)]\n [!code-cs[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/csharp/t-system.web.ui.asyncpos_1.aspx)]"
  syntax:
    content: 'public class AsyncPostBackTrigger : System.Web.UI.UpdatePanelControlTrigger'
  inheritance:
  - System.Object
  - System.Web.UI.UpdatePanelTrigger
  - System.Web.UI.UpdatePanelControlTrigger
  implements: []
  inheritedMembers:
  - System.Web.UI.UpdatePanelControlTrigger.FindTargetControl(System.Boolean)
  - System.Web.UI.UpdatePanelTrigger.Owner
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  id: '#ctor'
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Inicializa uma nova instância de um <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> classe."
  remarks: "Adicionar <xref:System.Web.UI.AsyncPostBackTrigger>controla usando o **Coleção UpdatePanelTrigger** caixa de diálogo no designer ou criando uma `Triggers` elemento declarativamente no <xref:System.Web.UI.UpdatePanel>controle.</xref:System.Web.UI.UpdatePanel> </xref:System.Web.UI.AsyncPostBackTrigger>       Adicionando <xref:System.Web.UI.AsyncPostBackTrigger>controles programaticamente não tem suporte.</xref:System.Web.UI.AsyncPostBackTrigger>"
  syntax:
    content: public AsyncPostBackTrigger ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  id: ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Obtém ou define o nome do controle que dispara um postback assíncrono para um <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> controle."
  syntax:
    content: public string ControlID { get; set; }
    return:
      type: System.String
      description: "Uma ID de controle de servidor."
  overload: System.Web.UI.AsyncPostBackTrigger.ControlID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  id: EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Obtém ou define o evento de controle de postagem que dispara um <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> controle a ser atualizado."
  remarks: "A propriedade EventName é opcional. Se não for especificado, o <xref:System.ComponentModel.DefaultEventAttribute>atributo do controle é usado para determinar o evento padrão.</xref:System.ComponentModel.DefaultEventAttribute> A tabela a seguir lista os eventos padrão para alguns controles comuns do ASP.NET 2.0.      | Controle | Evento padrão |   |-------------|-------------------|   | <xref:System.Web.UI.WebControls.Button>| <xref:System.Web.UI.WebControls.Button.Click>|   | <xref:System.Web.UI.WebControls.Calendar>| <xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|   | <xref:System.Web.UI.WebControls.CheckBox>| <xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|   | <xref:System.Web.UI.WebControls.GridView>| <xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|   | <xref:System.Web.UI.WebControls.TextBox>| <xref:System.Web.UI.WebControls.TextBox.TextChanged>|</xref:System.Web.UI.WebControls.TextBox.TextChanged></xref:System.Web.UI.WebControls.TextBox></xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged></xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.CheckBox.CheckedChanged></xref:System.Web.UI.WebControls.CheckBox></xref:System.Web.UI.WebControls.Calendar.SelectionChanged></xref:System.Web.UI.WebControls.Calendar></xref:System.Web.UI.WebControls.Button.Click></xref:System.Web.UI.WebControls.Button>"
  syntax:
    content: public string EventName { get; set; }
    return:
      type: System.String
      description: "O nome do evento. O valor padrão é <xref:System.String>.</xref:System.String>"
  overload: System.Web.UI.AsyncPostBackTrigger.EventName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  id: HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Retorna um valor que indica se o gatilho foi invocado."
  remarks: "Os desenvolvedores de controle podem substituir o método HasTriggered para fornecer lógica personalizada para determinar se o disparador foi invocado. Para ver um gatilho personalizado no `Triggers` elemento o <xref:System.Web.UI.UpdatePanel>controle, você pode adicionar uma diretiva para a página ou o elemento do arquivo Web. config.</xref:System.Web.UI.UpdatePanel>"
  syntax:
    content: protected override bool HasTriggered ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o gatilho foi chamado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  id: Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Inicializa o <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> controlar e determina se o evento que é chamado no gatilho existe e se é válido."
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.Initialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No <xref href=\"System.Web.UI.ScriptManager\"></xref> control was found on the page.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property is not found for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property does not match a standard event handler signature."
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  id: OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Gera o evento que irá disparar um postback e atualização de um <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref> controle."
  syntax:
    content: public void OnEvent (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "O remetente do evento."
    - id: e
      type: System.EventArgs
      description: "Os dados do evento."
  overload: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  id: ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "Retorna uma representação de cadeia de caracteres do atual <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> controle."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o atual <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref> controle."
  overload: System.Web.UI.AsyncPostBackTrigger.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.UpdatePanelControlTrigger
  isExternal: false
  name: System.Web.UI.UpdatePanelControlTrigger
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
- uid: System.Web.UI.AsyncPostBackTrigger.EventName*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered
  nameWithType: AsyncPostBackTrigger.HasTriggered
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize
  nameWithType: AsyncPostBackTrigger.Initialize
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent
  nameWithType: AsyncPostBackTrigger.OnEvent
- uid: System.Web.UI.AsyncPostBackTrigger.ToString*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString
  nameWithType: AsyncPostBackTrigger.ToString
