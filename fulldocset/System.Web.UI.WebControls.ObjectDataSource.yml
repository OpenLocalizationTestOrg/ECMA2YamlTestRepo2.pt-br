### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ObjectDataSource
  id: ObjectDataSource
  children:
  - System.Web.UI.WebControls.ObjectDataSource.#ctor
  - System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  - System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  - System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  - System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  - System.Web.UI.WebControls.ObjectDataSource.Delete
  - System.Web.UI.WebControls.ObjectDataSource.Deleted
  - System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  - System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  - System.Web.UI.WebControls.ObjectDataSource.Deleting
  - System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  - System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  - System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  - System.Web.UI.WebControls.ObjectDataSource.Filtering
  - System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  - System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  - System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  - System.Web.UI.WebControls.ObjectDataSource.Insert
  - System.Web.UI.WebControls.ObjectDataSource.Inserted
  - System.Web.UI.WebControls.ObjectDataSource.Inserting
  - System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  - System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  - System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  - System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  - System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  - System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  - System.Web.UI.WebControls.ObjectDataSource.Select
  - System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  - System.Web.UI.WebControls.ObjectDataSource.Selected
  - System.Web.UI.WebControls.ObjectDataSource.Selecting
  - System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  - System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  - System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  - System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  - System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  - System.Web.UI.WebControls.ObjectDataSource.TypeName
  - System.Web.UI.WebControls.ObjectDataSource.Update
  - System.Web.UI.WebControls.ObjectDataSource.Updated
  - System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  - System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  - System.Web.UI.WebControls.ObjectDataSource.Updating
  langs:
  - csharp
  name: ObjectDataSource
  nameWithType: ObjectDataSource
  fullName: System.Web.UI.WebControls.ObjectDataSource
  type: Class
  summary: "Representa um objeto comercial que fornece dados a controles associados a dados em várias camadas arquiteturas de aplicativo da Web."
  remarks: "Neste tópico:- [Introdução](#introduction)      -   [finalidade](#purpose)      -   [recuperando dados](#retrieving_data)      -   [executando operações de dados](#performing_data_operations)      -   [filtrando dados](#filtering_data)      -   [cache](#caching)      -   [recursos](#features)      -   [exibição dados](#data_view)      -   [usando LINQ to SQL](#using_linq_to_sql)      -   [sintaxe declarativa](#declarative_syntax) <a name=&quot;introduction&quot;> </a> # # controle ObjectDataSource uma introdução funciona com uma classe que você criar.       Criar métodos que recuperam e atualizam dados e fornecer os nomes desses métodos para o controle ObjectDataSource na marcação. Durante o processamento de postback ou de renderização, ObjectDataSource chama os métodos que você especificou.       Não há nenhum processamento visual do controle ObjectDataSource. Como resultado, o ObjectDataSource não suporta recursos visuais, como o <xref:System.Web.UI.DataSourceControl.EnableTheming%2A>ou <xref:System.Web.UI.DataSourceControl.SkinID%2A>propriedade.</xref:System.Web.UI.DataSourceControl.SkinID%2A> </xref:System.Web.UI.DataSourceControl.EnableTheming%2A>      <a name=&quot;purpose&quot;></a># # Prática de design de aplicativo muito comum finalidade A é separar a camada de apresentação da lógica de negócios e para encapsular a lógica de negócios em objetos de negócios. Esses objetos comerciais formam uma camada distinta entre a camada de apresentação e a camada de dados, resultando em uma arquitetura de aplicativo de três camadas. O controle ObjectDataSource permite aos desenvolvedores usar um controle de fonte de dados do ASP.NET, mantendo sua arquitetura de aplicativo de três camadas.       O controle ObjectDataSource usa reflexão para criar instâncias de objetos de negócios e chamar os métodos para recuperar, atualizar, inserir e excluir dados neles. O <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade identifica o nome da classe que o ObjectDataSource funciona com.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> O controle ObjectDataSource cria e destrói a uma instância da classe para cada chamada de método; ele não contém o objeto na memória para o tempo de vida da solicitação da Web. Isso é uma consideração séria se o objeto comercial que você use requer muitos recursos ou caro de criar e destruir. Usar um objeto caro não pode ser uma opção de design ideal, mas você pode controlar o ciclo de vida do objeto usando o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>eventos.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      > [!NOTE] > Os métodos que são identificados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, e <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>Propriedades podem ser métodos de instância ou `static` (`Shared` no Visual Basic) métodos.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Se os métodos são `static` (`Shared` no Visual Basic), não é possível criar uma instância do objeto comercial e o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>os eventos não são gerados.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      <a name=&quot;retrieving_data&quot;></a># # Recuperando dados para recuperar dados de um objeto comercial, definir o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade para o nome do método que recupera dados.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Se o método não retornar um <xref:System.Collections.IEnumerable>ou <xref:System.Data.DataSet>do objeto, o objeto é encapsulado pelo tempo de execução em um <xref:System.Collections.IEnumerable>coleção.</xref:System.Collections.IEnumerable> </xref:System.Data.DataSet> </xref:System.Collections.IEnumerable> Se a assinatura do método tiver parâmetros, você pode adicionar <xref:System.Web.UI.WebControls.Parameter>objetos para o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>coleção e, em seguida, associá-las para os valores que você deseja passar para o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.Parameter> Para o controle ObjectDataSource para usar os parâmetros, os parâmetros devem coincidir com os nomes e tipos dos parâmetros na assinatura do método. Para obter mais informações, consulte [usando parâmetros com o controle ObjectDataSource](~/add/includes/ajax-current-ext-md.md).       O controle ObjectDataSource recupera dados sempre que o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Esse método fornece acesso programático para o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> O método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade é chamada automaticamente por todos os controles que estão associados a ObjectDataSource quando seus `DataBind` método é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Se você definir o `DataSourceID` propriedade de um controle associado a dados, o controle automaticamente associa aos dados da fonte de dados, conforme necessário. Definindo o `DataSourceID` propriedade é o método recomendado para associar um controle ObjectDataSource para um controle associado a dados. Como alternativa, você pode definir o `DataSource` propriedade, mas, em seguida, você deve chamar explicitamente o `DataBind` método do controle associado a dados. Você pode chamar o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método programaticamente a qualquer momento para recuperar dados.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       Para obter mais informações sobre controles de associação de dados de associação para controles de fonte de dados, consulte [associando a dados usando um controle de fonte de dados](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7).      <a name=&quot;performing_data_operations&quot;></a># # Executar dependendo de operações de dados nos recursos do objeto comercial que controlam o ObjectDataSource funciona com, você pode executar operações de dados, como atualizações, inserções e exclusões. Para executar essas operações de dados, defina o nome do método apropriado e quaisquer parâmetros associados para a operação que você deseja executar. Por exemplo, para uma operação de atualização, defina o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade para o nome do método de objeto comercial que executa as atualizações e adicionar qualquer necessária parâmetros para o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Se o controle ObjectDataSource está associado um controle associado a dados, os parâmetros serão adicionados pelo controle associado a dados. Nesse caso, você precisa garantir que os nomes de parâmetro do método corresponderem aos nomes de campo no controle associado a dados. A atualização é executada quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>método é chamado explicitamente por seu código ou automaticamente por um controle associado a dados.</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> O mesmo padrão geral é seguido para <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>e <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>operações.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> Objetos de negócios são assumidos para executar estes tipos de um registro de operações de dados por vez, em vez de em lote.      <a name=&quot;filtering_data&quot;></a># # Filtragem de dados que o controle ObjectDataSource pode filtrar os dados recuperados com o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade, se os dados são retornados como um <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>objeto.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Você pode definir o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>propriedade para uma expressão de filtragem usando um formato de sintaxe de cadeia de caracteres e associar valores na expressão para parâmetros que são especificados no <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>      <a name=&quot;caching&quot;></a># # Cache embora ObjectDataSource não retém a instância do objeto comercial em várias solicitações, ele pode armazenar em cache o resultado de chamar o método identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Enquanto os dados são armazenados em cache, chamadas subsequentes para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método retornar os dados armazenados em cache em vez de criar o objeto de negócios e chamar sua <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>usando reflexão.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> O cache permite que você evite criar o objeto e chamando seu método de dados às custas de memória no servidor Web. ObjectDataSource automaticamente os dados em cache quando o <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>estiver definida como `true`e o <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>propriedade é definida como o número de segundos que o cache armazena os dados antes do cache é descartado.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> Você também pode especificar um <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>propriedade e um opcional <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> O controle ObjectDataSource permite armazenar em cache todos os tipos de dados, mas você não deve armazenar em cache objetos que reter recursos ou o estado que não pode ser compartilhado para várias solicitações de serviço (por exemplo, um aberto <xref:System.Data.SqlClient.SqlDataReader>objeto), pois a mesma instância do objeto será usada para várias solicitações de serviço.</xref:System.Data.SqlClient.SqlDataReader>      <a name=&quot;features&quot;></a># # Apresenta a seguinte tabela descreve os recursos do controle ObjectDataSource.      | Recurso | Requisitos de |   |----------------|------------------|   | Selecionar | Defina a propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>como o nome do método de objeto comercial que seleciona dados e incluir quaisquer parâmetros necessários na coleção <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>programaticamente ou usando um controle associado a dados. |   | Classificando | Defina a propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>como o nome do parâmetro no método <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>que executa os critérios de classificação. |   | Filtragem | Definir o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>propriedade para uma expressão de filtragem e, opcionalmente, adicione quaisquer parâmetros para o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>coleção para filtrar os dados quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> O método especificado pela propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>deve retornar um <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>. |   | Paginação | Paginação de fonte de dados é suportada se o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>método contém parâmetros para o índice do primeiro registro para recuperar e o número máximo de registros a serem recuperados.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Os nomes desses parâmetros devem ser definidos a <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>e <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>Propriedades, respectivamente.</xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> Um controle associado a dados pode ser capaz de executar a paginação em si, mesmo que o controle ObjectDataSource não oferecem suporte à paginação diretamente no método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> O requisito para o controle associado a dados poder fazer isso é que o método especificado pela propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>retorna um objeto que implementa a interface <xref:System.Collections.ICollection>. |   | Atualizando | Defina a propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>como o nome do método de objeto comercial que atualiza os dados e inclui quaisquer parâmetros necessários na coleção <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>. |   | Excluindo | Defina a propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>como o nome do método do objeto comercial ou função que exclui dados e inclui quaisquer parâmetros necessários na coleção <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>. |   | Inserindo | Defina a propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>como o nome do método do objeto comercial ou a função que insere dados e inclui quaisquer parâmetros necessários na coleção <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>. |   | Cache | Defina a propriedade <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>como `true`e o <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>e propriedades de <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>de acordo com o comportamento de cache desejado para os dados armazenados em cache. |      > [!NOTE] > Quando você usa a classe ObjectDataSource para atualizar ou inserir dados, cadeias de caracteres que são inseridas no cliente não são automaticamente convertidas do formato de cultura do cliente para o formato de cultura do servidor.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Collections.ICollection> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Por exemplo, a cultura do cliente pode especificar DD/MM/AAAA como o formato de data e o formato de data no servidor pode ser DD/MM/AAAA. Nesse caso, 5 de outubro de 2009 deve ser inserido em um <xref:System.Web.UI.WebControls.TextBox>controle como 10/5/2009, mas será interpretada como 10 de maio de 2009.</xref:System.Web.UI.WebControls.TextBox> 15 de outubro de 2009 deve ser inserido como 15/10/2009 e deve ser rejeitado como uma data inválida.      <a name=&quot;data_view&quot;></a># # Dados visualizar como com todos os controles de fonte de dados, o controle ObjectDataSource está associado uma classe de exibição de fonte de dados. Enquanto o controle ObjectDataSource é a interface que o desenvolvedor de página usa para trabalhar com dados, a <xref:System.Web.UI.WebControls.ObjectDataSourceView>classe é a interface que os controles de associação de dados funcionam com.</xref:System.Web.UI.WebControls.ObjectDataSourceView> Além disso, a <xref:System.Web.UI.WebControls.ObjectDataSourceView>classe descreve os recursos do controle de fonte de dados e executa o trabalho real.</xref:System.Web.UI.WebControls.ObjectDataSourceView> O controle ObjectDataSource tem apenas um associado <xref:System.Web.UI.WebControls.ObjectDataSourceView>, e sempre é denominada `DefaultView`.</xref:System.Web.UI.WebControls.ObjectDataSourceView> Enquanto o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto é exposto pelo <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>método, muitas das suas propriedades e métodos são encapsulados e expostos diretamente pelo controle ObjectDataSource.</xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> Nos bastidores, o <xref:System.Web.UI.WebControls.ObjectDataSourceView>object realiza todas as operações de dados, incluindo a recuperação, inserindo, atualizando, excluindo, filtragem e classificar os dados.</xref:System.Web.UI.WebControls.ObjectDataSourceView> Para obter mais informações, consulte <xref:System.Web.UI.WebControls.ObjectDataSourceView>.</xref:System.Web.UI.WebControls.ObjectDataSourceView>      <a name=&quot;using_linq_to_sql&quot;></a># # Usando LINQ to SQL você pode usar o controle ObjectDataSource com uma classe LINQ to SQL. Para fazer isso, você definir a <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade com o nome da classe de contexto de dados.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Você também definir o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, e <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>métodos para os métodos na classe de contexto de dados que executam as operações correspondentes.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Você deve criar um manipulador de eventos para o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>evento para cancelar o descarte da classe de contexto de dados.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Esta etapa é necessária porque LINQ to SQL dá suporte à execução adiada, enquanto o controle ObjectDataSource tenta descartar o contexto de dados após a operação de seleção. Para obter mais informações sobre como criar LINQ para classes SQL, consulte [como: criar Classes LINQ to SQL em um projeto Web](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081). Para obter um exemplo de como cancelar o descarte de uma classe de contexto de dados, consulte o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>      ## Usar o Entity Framework você também pode usar o controle ObjectDataSource com o Entity Framework. Para obter mais informações, consulte [usando o Entity Framework e o controle ObjectDataSource](http://go.microsoft.com/fwlink/?LinkId=209117).      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConvertNullToDBNull=&quot;True|False&quot;       DataObjectTypeName=&quot;string&quot;       DeleteMethod=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnablePaging=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertMethod=&quot;string&quot;       MaximumRowsParameterName=&quot;string&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnObjectCreated=&quot;ObjectCreated event handler&quot;       OnObjectCreating=&quot;ObjectCreating event handler&quot;       OnObjectDisposing=&quot;ObjectDisposing event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       runat=&quot;server&quot;       SelectCountMethod=&quot;string&quot;       SelectMethod=&quot;string&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       StartRowIndexParameterName=&quot;string&quot;       TypeName=&quot;string&quot;       UpdateMethod=&quot;string&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  \n  \n This section shows an ObjectDataSource in markup in an .aspx page and it shows the business objects that it works with. The example is the .aspx page. It contains a <xref:System.Web.UI.WebControls.GridView> control that is bound to an ObjectDataSource control. The ObjectDataSource control markup specifies the name of the business object and the name of the business object method to call in order to retrieve data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following example shows the business object that the ObjectDataSource control in the .aspx page uses. (Many other ObjectDataSource code examples use this business object also.) The example consists of the following two basic classes:  \n  \n-   The `EmployeeLogic` class is the business logic class that the ObjectDataSource uses.  \n  \n-   The `NorthwindEmployee` class defines the data object that is returned by the `GetAllEmployees` method of the `EmployeeLogic` class.  \n  \n An additional `NorthwindDataException` class is provided as a convenience.  \n  \n This set of example classes works with the Northwind Traders database, which is available with Microsoft SQL Server and Microsoft Access. For a complete working example, you must compile and use these classes with the .aspx page example that is provided. For information about how to install the Northwind Traders database, see [How to: Install Sample Databases](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("TypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class ObjectDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> classe."
  syntax:
    content: public ObjectDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> classe com o nome do tipo especificado e o nome do método de recuperação de dados."
  remarks: "O valor de `typeName` parâmetro pode ser um tipo parcialmente qualificado para o código que está localizado no diretório Bin ou App_Code ou um nome de tipo totalmente qualificado para o código que é registrado no cache de assembly global. Se você usar o cache de assembly global, você deve adicionar a referência apropriada para o `assemblies` seção do arquivo de configuração Machine. config ou Web. config."
  syntax:
    content: public ObjectDataSource (string typeName, string selectMethod);
    parameters:
    - id: typeName
      type: System.String
      description: "O nome da classe que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> funciona com."
    - id: selectMethod
      type: System.String
      description: "O nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> invoca para recuperar dados."
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o período de tempo, em segundos, que o controle de fonte de dados armazena em cache os dados recuperados com o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte ao cache de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Enquanto os dados em cache, chamadas para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recuperar dados do cache em vez de negócios do objeto que o <xref:System.Web.UI.WebControls.ObjectDataSource>funciona com.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Quando o cache expira, o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recupera dados de objeto comercial e armazena em cache os dados novamente.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       O <xref:System.Web.UI.WebControls.ObjectDataSource>controle automaticamente os dados em cache quando o <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>estiver definida como `true` e a propriedade CacheDuration é definida como um valor maior que 0, que indica o número de segundos que o cache armazena os dados antes da entrada de cache é descartada.</xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Um valor de 0 indica um cache infinitamente longo.       O cache é controlado por uma combinação da duração e o <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>configuração.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Se o <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>estiver definida como o <xref:System.Web.UI.DataSourceCacheExpiry>valor, o <xref:System.Web.UI.WebControls.ObjectDataSource>armazena em cache os dados na primeira chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método e armazena-o na memória para, no máximo, a quantidade de tempo que é especificado pela propriedade CacheDuration.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> Os dados podem ser liberados antes da hora de duração, se a memória necessária. O cache, em seguida, é atualizado durante a próxima chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Se o <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>está definida como <xref:System.Web.UI.DataSourceCacheExpiry>valor, o controle de fonte de dados armazena dados em cache na primeira chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método, mas redefine a janela de tempo para o qual ela mantém o cache em cada chamada subsequente para a <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> O cache expira se não houver nenhuma atividade de uma vez que é igual à propriedade CacheDuration desde a última chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports caching. To enable caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the CacheDuration and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_2.cs)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "O número de segundos que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> armazena em cache os resultados de uma <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>invocação de propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> O padrão é 0. O valor não pode ser negativo."
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o comportamento de expiração de cache que, quando combinados com a duração, descreve o comportamento do cache que usa o controle de fonte de dados."
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte ao cache de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Enquanto os dados em cache, chamadas para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recuperar dados do cache em vez de negócios do objeto que o <xref:System.Web.UI.WebControls.ObjectDataSource>funciona com.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Quando o cache expira, o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recupera dados de objeto comercial e armazena em cache os dados novamente.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       O <xref:System.Web.UI.WebControls.ObjectDataSource>controle automaticamente os dados em cache quando o <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>estiver definida como `true` e <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>propriedade é definida como um valor maior que 0, que indica o número de segundos que o cache armazena os dados antes da entrada de cache é descartada.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Um valor de 0 indica um período de cache infinitamente longo.       O cache é controlado por uma combinação da duração e a configuração CacheExpirationPolicy. Se a propriedade CacheExpirationPolicy é definida como o <xref:System.Web.UI.DataSourceCacheExpiry>valor, o <xref:System.Web.UI.WebControls.ObjectDataSource>armazena em cache os dados na primeira chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método e mantém na memória para, no máximo, a quantidade de tempo que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> Os dados podem ser liberados antes da hora de duração, se a memória necessária. O cache, em seguida, é atualizado durante a próxima chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Se a propriedade CacheExpirationPolicy é definida como o <xref:System.Web.UI.DataSourceCacheExpiry>valor, o controle de fonte de dados armazena dados em cache na primeira chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método, mas redefine a janela de tempo para o qual ela mantém o cache para cada chamada subsequente para a <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> O cache expira se não houver nenhuma atividade para uma hora que é igual do <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>propriedade desde a última chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports filtering and caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering and caching. To enable filtering and caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, caching is enabled because the `EmployeeLogic` object returns data as a <xref:System.Data.DataSet>, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and CacheExpirationPolicy properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList>. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_2.cs)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "Uma da <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref> valores. O padrão é <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define uma dependência de chave definidas pelo usuário que está vinculada a dados de todos os objetos de cache que são criados pelo controle da fonte de dados."
  remarks: "A propriedade CacheKeyDependency pode ser definida como qualquer valor de cadeia de caracteres arbitrária.       Todos os objetos de cache explicitamente expirados quando a chave tiver expirada. Isso permite que você invalidar entradas de cache que são criadas pelo <xref:System.Web.UI.WebControls.ObjectDataSource>de sua própria página de código por meio de programação.</xref:System.Web.UI.WebControls.ObjectDataSource>       O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte ao cache de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Enquanto os dados em cache, chamadas para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recuperar dados do cache em vez de negócios do objeto que o <xref:System.Web.UI.WebControls.ObjectDataSource>funciona com.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Quando o cache expira, o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recupera dados de objeto comercial e armazena em cache os dados novamente.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       O <xref:System.Web.UI.WebControls.ObjectDataSource>controle automaticamente os dados em cache quando o <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>estiver definida como `true` e <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>propriedade é definida como um valor maior que 0, que indica o número de segundos que o cache armazena os dados antes da entrada de cache é descartada.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Um valor de 0 indica um cache infinitamente longo.       Você pode definir a propriedade CacheKeyDependency para criar uma dependência entre todas as entradas de cache que são criados pelo <xref:System.Web.UI.WebControls.ObjectDataSource>controle e a chave.</xref:System.Web.UI.WebControls.ObjectDataSource> Você pode expirar todas as entradas de cache programaticamente a qualquer momento por meio da expiração da chave. Expirar a chave usando o <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>método com o valor atual de CacheKeyDependency como o parâmetro.</xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>       Uma entrada de cache exclusivo é criada para cada combinação da <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, e <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> Vários <xref:System.Web.UI.WebControls.ObjectDataSource>controles podem usar as mesmas entradas de cache em cenários em que eles carregam dados usando o mesmo tipo de método e parâmetros.</xref:System.Web.UI.WebControls.ObjectDataSource>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The CacheKeyDependency property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the CacheKeyDependency value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the CacheKeyDependency value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_3.cs)]"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "Uma chave que identifica todos os objetos de cache criado pelo <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que determina se ou não apenas os novos valores são passados para o <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref> método ou valores novos e antigos são passados para o <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref> método."
  remarks: "Essa propriedade determina se os parâmetros para os valores novos e antigos são aplicados para o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Por exemplo, se o método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade retorna um <xref:System.Data.DataTable>controle com as colunas `Name` e `Number`, e a propriedade ConflictDetection é definida como o <xref:System.Web.UI.ConflictOptions>campo, os parâmetros são criados para `Name` e `Number` para o `Update` método.</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Se a propriedade ConflictDetection é definida como o <xref:System.Web.UI.ConflictOptions>valor, os parâmetros são criados para `Name`, `Number`, `original_Name`, e `original_Number`.</xref:System.Web.UI.ConflictOptions> (O nome exato dos parâmetros para os valores originais depende do <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>propriedade.)</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> O <xref:System.Web.UI.WebControls.ObjectDataSource>determina se o método é especificado no <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade tem parâmetros que correspondam.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       Controle de simultaneidade é uma técnica de repositórios de dados usam para controlar como os dados é lida e alterados no repositório quando vários clientes estão acessando e manipulando os mesmos dados. Por exemplo, um cliente lê os dados e apresenta-as para um usuário, enquanto outro cliente lê os mesmos dados e apresenta-as para um usuário diferente. Se ambos os usuários atualizam os dados e enviá-lo para o armazenamento de dados, um resultado inesperado poderá ocorrer, porque ambos os clientes podem fornecer valores diferentes para os mesmos dados. Isso é considerado um conflito. Definindo a propriedade ConflictDetection o <xref:System.Web.UI.ConflictOptions>valor, o `Update` método pode comparar os valores antigos e novos para a fonte de dados original para detectar conflitos e tratá-los conforme necessário.</xref:System.Web.UI.ConflictOptions>       A propriedade ConflictDetection delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>propriedade do <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "Uma da <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref> valores. O padrão é <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  id: ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> valores que são passados para uma atualização, inserção ou operação de exclusão são automaticamente convertidos de <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para o <xref href=&quot;System.DBNull.Value&quot;> </xref> valor pelo <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle."
  remarks: "Convertendo não `null` para o <xref:System.DBNull.Value>valor pode resultar em erros em tempo de execução.</xref:System.DBNull.Value> Use a propriedade ConvertNullToDBNull para indicar se <xref:System.Web.UI.WebControls.Parameter>valores que são passados para uma atualização, inserção ou operação de exclusão são automaticamente convertidos de `null` para o <xref:System.DBNull.Value>valor pelo <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.DBNull.Value> </xref:System.Web.UI.WebControls.Parameter>"
  syntax:
    content: public bool ConvertNullToDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, se houver <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> valores em <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> objetos passados para o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle são automaticamente convertidos para <xref href=&quot;System.DBNull.Value&quot;> </xref> valores; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  id: DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome de uma classe que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> usa o controle para um parâmetro em uma atualização, inserir ou excluir a operação de dados, em vez de passar valores individuais do controle associado a dados."
  remarks: "Em vez de especificar vários parâmetros que são passados para o <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, e <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>métodos, você pode criar um objeto que agrega vários valores de campo de dados.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> Este um objeto é passado para os métodos, em vez de vários parâmetros.       O comportamento padrão de um <xref:System.Web.UI.WebControls.ObjectDataSource>controle que está associado a um controle associado a dados é que o controle de associação de dados cria um <xref:System.Web.UI.WebControls.Parameter>objeto para cada parâmetro na fonte de dados.</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.ObjectDataSource> Se o objeto de negócios tem muitos campos, o método resultante também tem muitos campos. Propriedade DataObjectTypeName permite que você especifique um tipo que tem uma propriedade para cada campo de dados. Em seguida, em vez de passar vários parâmetros para o método, o tempo de execução cria um objeto e define todas as suas propriedades. Este um objeto é adicionado à coleção de parâmetros para a chamada do método.       O tipo especificado pela propriedade DataObjectTypeName deve ter um construtor padrão que não tem parâmetros, portanto, o <xref:System.Web.UI.WebControls.ObjectDataSource>controle pode criar uma instância do tipo.</xref:System.Web.UI.WebControls.ObjectDataSource> O tipo também deve ter as propriedades configuráveis que permitem a <xref:System.Web.UI.WebControls.ObjectDataSource>controle para preencher o objeto com valores que são passados do controle associado a dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Os nomes de propriedades sobre o <xref:System.Web.UI.WebControls.ObjectDataSource>controle devem corresponder exatamente aos nomes de parâmetro de valores que são passados pelo controle associado a dados.</xref:System.Web.UI.WebControls.ObjectDataSource>       Quando a propriedade DataObjectTypeName é definida e o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado um controle associado a dados, os métodos que são especificados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>e <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>propriedades devem ter um parâmetro do tipo especificado na propriedade DataObjectTypeName.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Se o <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>estiver definida como o <xref:System.Web.UI.ConflictOptions>de valor, o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade deve ter um parâmetro do tipo especificado na propriedade DataObjectTypeName.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> Se o <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>estiver definida como o <xref:System.Web.UI.ConflictOptions>de valor, o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade deve ter dois parâmetros do tipo especificado na propriedade DataObjectTypeName.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> O primeiro parâmetro contém os valores originais. o segundo parâmetro contém os novos valores.       Propriedade DataObjectTypeName delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado a <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>"
  example:
  - "The section contains two code examples. The first code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The second code example shows the Web page that uses the two classes that are used in the first code example.  \n  \n The following code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The select method of the `AggregateData` class returns a <xref:System.Data.DataTable> object with two columns named `Name` and `Number`. Similarly, the `NewData` class defines two read/write properties, `Name` and `Number`. The `Insert` method of the `AggregateData` class takes one parameter of type `NewData`. The `TypeName` property of the <xref:System.Web.UI.WebControls.ObjectDataSource> is set to `AggregateData` and the DataObjectTypeName property is set to `NewData`.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_1.cs)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_1.vb)]  \n  \n The following code example shows the Web page that uses the two classes that are used in the preceding code example.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_2.aspx)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_2.aspx)]"
  syntax:
    content: public string DataObjectTypeName { get; set; }
    return:
      type: System.String
      description: "Um nome de classe parcial ou totalmente qualificado que identifica o tipo do objeto que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> pode usar como um parâmetro para um <> </> *>, <> </> *>, ou um <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>operação.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Executa uma operação de exclusão, chamando o método que é identificado pelo <> </> *> propriedade com os parâmetros que estão na <> </> *> coleção."
  remarks: "Antes da operação de exclusão é executada, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>evento para examinar os valores dos parâmetros e executar qualquer pré-processamento antes de uma operação de exclusão.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> Para executar uma operação de exclusão, o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto usa reflexão para criar uma instância do objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> Depois, ele chama o método que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>propriedade, usando qualquer associados <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Se os parâmetros de exclusão vêm de um controle associado a dados, o nome dos parâmetros é criado de acordo com o <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Após a operação de exclusão, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>evento para examinar quaisquer exceções, valores de retorno e parâmetros de saída e para executar qualquer pós-processamento.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>       O método Delete delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>método do <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>      ## Controles associados a dados quando o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado com um controle associado a dados, como o <xref:System.Web.UI.WebControls.GridView>controle, não é necessário chamar o método Delete do código de página.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O método Delete é invocado diretamente pelo controle associado a dados, em vez disso.       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "Um valor que representa o número de linhas excluídas do armazenamento de dados subjacente, se o <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>propriedade do <xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&quot;> </xref> é definido no <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource.Deleted&quot;> </xref> evento; caso contrário, -1.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando um <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "Manipular o evento excluído para examinar os valores dos parâmetros de saída ou um valor de retorno ou para determinar se uma exceção foi acionada após um <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> O valor de retorno, parâmetros de saída e propriedades de tratamento de exceção estão disponíveis no <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>objeto que está associado com o evento.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       Você pode usar o <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>propriedade do <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>objeto para retornar o número de linhas que foram excluídos do <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> Para fazer isso, defina o <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> Se você retornar o número de linhas excluídas do método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>propriedade, o valor está disponível na <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  id: DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle invoca para excluir dados."
  remarks: "O objeto comercial é assumido como para excluir um registro de dados por vez, em vez de em um lote.       A propriedade DeleteMethod delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>       Certifique-se de que os nomes de parâmetro é configurado para o <xref:System.Web.UI.WebControls.ObjectDataSource>controlar o <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>coleção correspondem aos nomes de coluna que são retornados pelo método select.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## O método que é identificado pela propriedade DeleteMethod pode ser um método de instância de tempo de vida do objeto ou um `static` (`Shared` no Visual Basic) método. Se é um método de instância, o objeto comercial é criado e destruído cada vez que a propriedade DeleteMethod é chamada. Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>eventos para trabalhar com o objeto de negócios antes que a propriedade DeleteMethod seja chamada.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> Você também pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>evento que é gerado depois que a propriedade DeleteMethod é chamada.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Se o objeto de negócios implementa o <xref:System.IDisposable>interface, o <xref:System.IDisposable.Dispose%2A>método é chamado antes do objeto é destruído.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> Se o método for uma `static` (`Shared` no Visual Basic) método, o objeto comercial nunca é criado e você não pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>eventos.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## Parâmetros de mesclagem são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>coleção de três fontes: - no controle associado a dados, em tempo de execução.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>      -Na `DeleteParameters` elemento declarativamente.      -Na `Deleting` método declarativamente.       Primeiro, os parâmetros que são gerados de controles associados a dados são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Por exemplo, se o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado a um <xref:System.Web.UI.WebControls.GridView>controle que tem as colunas `Name` e `Number`, parâmetros de `Name` e `Number` são adicionados à coleção.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O nome exato do parâmetro depende do <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> O tipo de dados desses parâmetros é `string`. Em seguida, os parâmetros listados no `DeleteParameters` elemento são adicionadas. Se um parâmetro a `DeleteParameters` elemento foi encontrado com o mesmo nome como um parâmetro que já está no <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>coleção, o parâmetro existente é modificada para corresponder ao parâmetro especificado no `DeleteParameters` elemento.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> Normalmente, isso é usado para modificar o tipo de dados no parâmetro. Por fim, você pode adicionar e remover parâmetros programaticamente o <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>evento que ocorre antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>método é executado.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> O método é resolvido depois que os parâmetros são mesclados. Resolução de método é abordada na próxima seção.      ## Método resolução quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>método for chamado, os campos de dados do controle associado a dados, os parâmetros que foram criados declarativamente no `DeleteParameters` elemento e os parâmetros que foram adicionados a <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>manipulador de eventos são mescladas.</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> (Para obter mais informações, consulte a seção anterior). O <xref:System.Web.UI.WebControls.ObjectDataSource>objeto, em seguida, tenta encontrar um método a ser chamado.</xref:System.Web.UI.WebControls.ObjectDataSource> Primeiro, ele procura por um ou mais métodos com o nome especificado na propriedade DeleteMethod. Se nenhuma correspondência for encontrada, um <xref:System.InvalidOperationException>exceção será lançada.</xref:System.InvalidOperationException> Se uma correspondência for encontrada, ele procurará a correspondência de nomes de parâmetro. Por exemplo, suponha que o tipo especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade tem dois métodos chamados `DeleteARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Um `DeleteARecord` tem um parâmetro, `ID`e o outro `DeleteARecord` tem dois parâmetros, `Name` e `Number`. Se o <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>coleção tem apenas um parâmetro denominado `ID`, o `DeleteARecord` método com apenas o `ID` parâmetro é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> O tipo do parâmetro não é verificado na resolução de métodos. Não importa a ordem dos parâmetros.       Se o <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade for definida, o método é resolvido de maneira diferente.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> O <xref:System.Web.UI.WebControls.ObjectDataSource>procura por um método com o nome especificado na propriedade DeleteMethod que recebe um parâmetro do tipo que está especificado no <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Nesse caso, o nome do parâmetro não importa."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindDataException` delegate.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_2.cs)]"
  syntax:
    content: public string DeleteMethod { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> usa para excluir dados. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que contém os parâmetros que são usados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>método.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  remarks: "Os nomes e tipos dos parâmetros que estão contidos na coleção DeleteParameters devem corresponder a nomes e tipos dos parâmetros no <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>assinatura do método.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> Os nomes de parâmetro são afetados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>propriedade e são diferencia maiusculas de minúsculas.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Os parâmetros na coleção dependem dos dados que estão no controle associado a dados, os parâmetros que são especificados declarativamente e os parâmetros que são adicionados por meio de programação. Para obter mais informações, consulte &quot;Parâmetro funde&quot; <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>e [usando parâmetros com o controle ObjectDataSource](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>       O recupera de propriedade DeleteParameters o <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>propriedade contido pelo <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use the DeleteParameters property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event is called with two parameters. One parameter, `EmpID`, comes from the <xref:System.Web.UI.WebControls.DataGrid> control, and is based on the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The other parameter comes from the declarative DeleteParameters property. The `EmployeeLogic` class overloads the `DeleteEmployee` method. One overload takes a `NorthwindEmployee` parameter, and the other takes an <xref:System.Int32> parameter named `anID`. In the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, the entries in the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property are adjusted to include only one parameter named `anID` with the value from `original_EmpID`. When the event handler exists, the matching `DeleteEmployee` method is called.  \n  \n The following code example shows the Web page that displays the <xref:System.Web.UI.WebControls.DataGrid> control and handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> que contém os parâmetros usados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>método.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de um <xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>operação.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "Manipular o evento de exclusão para realizar a inicialização adicional que é específica para seu aplicativo, para validar os valores de parâmetros, ou para alterar o parâmetro de valores antes do <xref:System.Web.UI.WebControls.ObjectDataSource>controle executa a operação de exclusão.</xref:System.Web.UI.WebControls.ObjectDataSource> Os parâmetros estão disponíveis como um <xref:System.Collections.IDictionary>coleção que é acessada pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>propriedade, que é exposta pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       Você pode cancelar a operação de exclusão, definindo o <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>para `true`.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle tem o cache de dados habilitada."
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte ao cache de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Enquanto os dados em cache, chamadas para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recuperar dados do cache em vez de <xref:System.Web.UI.WebControls.ObjectDataSource>Criando uma instância do objeto comercial e chamando seu método de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Quando o cache expira, o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método recupera dados de objeto comercial e armazena em cache os dados novamente.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       O <xref:System.Web.UI.WebControls.ObjectDataSource>controle automaticamente os dados em cache quando a propriedade EnableCaching é definida como `true` e <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>propriedade é definida como um valor maior que 0, que indica o número de segundos que o cache armazena os dados antes da entrada de cache é descartada.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Um valor de 0 indica um cache infinitamente longo."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_3.cs)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cache de dados está habilitado para o controle de fonte de dados; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A propriedade EnableCaching é definida como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> quando o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>propriedade retorna um <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  id: EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o controle de fonte de dados oferece suporte à paginação por meio do conjunto de dados que ela recupera."
  remarks: "Paginação pelo <xref:System.Web.UI.WebControls.ObjectDataSource>controle é manipulado ao configurar o EnablePaging <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, e <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>Propriedades da <xref:System.Web.UI.WebControls.ObjectDataSource>e definir um método de seleção no objeto comercial com os parâmetros corretos.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Quando a propriedade EnablePaging é definida como `true`, o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>coleção inclui dois parâmetros adicionais para a primeira linha que é solicitada e o número de linhas que são solicitadas.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> Esses dois parâmetros são nomeados conforme definido pelo <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>e <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> O `Select` método deve retornar o número solicitado de linhas, iniciando no índice especificado. Porque os dados não podem se dividem uniformemente pelo tamanho da página, a última página pode conter menos linhas. Assim, o número de linhas que são solicitadas é, na verdade, o número máximo de linhas retornadas.       Quando a paginação está habilitada para o controle de associação de dados associado, o controle de associação de dados chama o `Select` método com o índice inicial e o número de linhas que são necessários. Além disso, se o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>estiver definida, o controle de associação de dados chama o método antes de processar os controles de pager.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> Por exemplo, se um <xref:System.Web.UI.WebControls.GridView>controle tem paginação habilitada com um tamanho de página de 5 e o método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>propriedade retorna 20, apenas 4 páginas serão exibidas no pager.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.GridView>       A propriedade EnablePaging delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose EnablePaging property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_3.vb)]"
  syntax:
    content: public bool EnablePaging { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o controle de fonte de dados oferece suporte à paginação de dados recupera; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define uma expressão de filtragem é aplicada quando o método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>propriedade é chamada.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte à filtragem de dados somente quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método retorna um <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>objeto.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       A sintaxe que é usada para a propriedade FilterExpression é uma expressão de cadeia de caracteres – estilo de formato. A sintaxe de expressão de filtro é a mesma sintaxe que é aceito pelo <xref:System.Data.DataColumn.Expression%2A>propriedade.</xref:System.Data.DataColumn.Expression%2A> Se você adicionar parâmetros para o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>coleção, você também pode incluir espaços reservados de cadeia de caracteres de formato.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Por exemplo, incluir `&quot;{0}&quot;` na expressão para substituir valores de parâmetro. Os espaços reservados são substituídos de acordo com o índice do parâmetro no <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       Você pode incluir parâmetros na propriedade FilterExpression. Se o tipo do parâmetro é um tipo de cadeia de caracteres ou caractere, coloque o parâmetro entre aspas. Aspas não serão necessárias se o parâmetro é um tipo numérico.       O <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>coleção contém os parâmetros que são avaliados para os espaços reservados que são encontrados na propriedade FilterExpression.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       A propriedade FilterExpression delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>      > [!NOTE] > Você deve validar qualquer valor de parâmetro de filtro que você recebe do cliente. O tempo de execução simplesmente substitui o valor do parâmetro na expressão de filtro e são aplicados para a <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>objeto que é retornado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Se você estiver usando a propriedade FilterExpression como uma medida de segurança para limitar o número de itens que são retornados, você deve validar os valores de parâmetro antes da filtragem ocorre."
  example:
  - "The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, enter the full name of the employee in the <xref:System.Web.UI.WebControls.TextBox>, and then click the **Submit** button.  \n  \n The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_2.vb)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa uma expressão de filtragem é aplicada quando os dados são recuperados usando o método ou função identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A propriedade FilterExpression foi definida e o <xref:System.Web.UI.WebControls.ObjectDataSource.Select*>método não retorna um <xref href=&quot;System.Data.DataSet&quot;> </xref> ou <xref href=&quot;System.Data.DataTable&quot;> </xref>.</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de uma operação de filtro."
  remarks: "Manipular o evento de filtragem para executar operações de validação em valores de parâmetro de filtro antes do <xref:System.Web.UI.WebControls.ObjectDataSource>controle executa uma operação de filtro.</xref:System.Web.UI.WebControls.ObjectDataSource> Você pode cancelar a operação selecionada, definindo o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>para `true`.</xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> O evento é gerado apenas se o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>está definida.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       O evento de filtragem delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>eventos do <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado a <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>      > [!IMPORTANT] > Você deve validar qualquer valor de parâmetro de filtro que você recebe do cliente. O tempo de execução simplesmente substitui o valor do parâmetro na expressão de filtro e são aplicados para a <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>objeto que é retornado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> Se você estiver usando o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>a propriedade como uma medida de segurança para limitar o número de itens que são retornados, você deve validar os valores de parâmetro antes da filtragem ocorre.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém uma coleção de parâmetros que estão associados a quaisquer espaços reservados de parâmetros no <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>cadeia de caracteres.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte à filtragem de dados somente quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método retorna um <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>objeto.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       A sintaxe usada para o <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>é uma expressão de cadeia de caracteres – estilo de formato.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> A sintaxe de expressão de filtro é a mesma sintaxe que é aceito pelo <xref:System.Data.DataColumn.Expression%2A>propriedade.</xref:System.Data.DataColumn.Expression%2A> Se você adicionar parâmetros à coleção FilterParameters, você também pode incluir espaços reservados de cadeia de caracteres de formato. Por exemplo, incluir `&quot;{0}&quot;` na expressão para substituir valores de parâmetro. Os espaços reservados são substituídos acordo com o índice do parâmetro na coleção FilterParameters.       Você pode incluir parâmetros de <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> Se o parâmetro é um tipo de cadeia de caracteres ou caractere, coloque o parâmetro entre aspas. Aspas não serão necessárias se o parâmetro é um tipo numérico.       A FilterParameters propriedade recupera o <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>propriedade contido pelo <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> object to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of a middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  \n  \n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> object that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n> [!IMPORTANT]\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> que contém um conjunto de parâmetros associados a quaisquer espaços reservados de parâmetros encontrados no <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Definir o <> </> *> propriedade e o <> </> *> método não retorna um <xref href=&quot;System.Data.DataSet&quot;> </xref> ou <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Recupera a exibição da fonte de dados nomeada que está associada com o controle de fonte de dados."
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte à exibição da fonte de dados de apenas um.</xref:System.Web.UI.WebControls.ObjectDataSource> Assim como acontece com todos os objetos de exibição de fonte de dados, o <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado com os dados de controle de origem define seus recursos, executa todo o trabalho que é necessário para recuperar dados de armazenamento de dados subjacentes e executa operações como classificação, inserção, exclusão e atualização.</xref:System.Web.UI.WebControls.ObjectDataSourceView>       O método GetView destina-se a ser chamado por controles de associação de dados, não pelo código da página."
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "O nome do modo de exibição para recuperar. Porque o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> oferece suporte a apenas um modo de exibição, `viewName` será ignorado."
    return:
      type: System.Web.UI.DataSourceView
      description: "O <xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceView&quot;> </xref> chamado <xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;> </xref> que está associado a <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Especificado <code> viewName </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou algo diferente de <xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Recupera uma coleção de nomes que representa a lista de objetos de exibição que estão associados a <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> objeto."
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte a apenas um modo de exibição, denominado `DefaultView`, em seus dados subjacentes.</xref:System.Web.UI.WebControls.ObjectDataSource> O método GetViewNames retorna uma coleção de elemento único desse nome de um modo de exibição.       O método GetViewNames destina-se a ser chamado por controles de associação de dados, não pelo código da página."
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém os nomes das exibições associadas a <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Executa uma operação de inserção, chamando o método que é identificado pelo <> </> *> propriedade e todos os parâmetros de <> </> *> coleção."
  remarks: "Antes da operação de inserção é executada, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>evento para examinar os valores dos parâmetros e executar qualquer pré-processamento antes de uma operação de inserção.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> Para executar uma operação de inserção, o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto usa reflexão para criar uma instância do objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> Depois, ele chama o método que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>propriedade, usando qualquer associados <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Após a operação de inserção, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>evento para examinar quaisquer exceções, valores de retorno e parâmetros de saída e para executar qualquer pós-processamento.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>       O método de inserção delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>método do <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado a <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>      ## Controles associados a dados quando o <xref:System.Web.UI.WebControls.ObjectDataSource>objeto está associado com um controle associado a dados, como o <xref:System.Web.UI.WebControls.GridView>controle, não é necessário chamar o método de inserção de código da página.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O método de inserção é invocado diretamente pelo controle associado a dados em vez disso."
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "Um valor que representa o número de linhas inseridas para o armazenamento de dados subjacente."
  overload: System.Web.UI.WebControls.ObjectDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando um <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "Manipular o evento Inserted para examinar os valores dos parâmetros de saída ou um valor de retorno ou para determinar se uma exceção foi acionada após um <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> O valor de retorno, parâmetros de saída e propriedades de tratamento de exceção estão disponíveis no <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>objeto que está associado com o evento.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de um <xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>operação.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "Manipular o evento inserindo para realizar a inicialização adicional que é específica para seu aplicativo, para validar os valores de parâmetros, ou para alterar o parâmetro de valores antes do <xref:System.Web.UI.WebControls.ObjectDataSource>controle executa a operação de inserção.</xref:System.Web.UI.WebControls.ObjectDataSource> Os parâmetros estão disponíveis como um <xref:System.Collections.IDictionary>coleção que é acessada pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>propriedade, que é exposta pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  id: InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle invoca para inserir dados."
  remarks: "O objeto comercial é assumido como para inserir um registro de dados por vez, em vez de em um lote.       A propriedade InsertMethod delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>objeto.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>      ## O método que é identificado pela propriedade InsertMethod pode ser um método de instância de tempo de vida do objeto ou um `static` (`Shared` no Visual Basic) método. Se é um método de instância, o objeto comercial é criado e destruído cada vez que o método especificado pela propriedade InsertMethod é chamado. Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>eventos para trabalhar com o objeto de negócios antes que a propriedade InsertMethod seja chamada.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> Você também pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>evento é gerado após o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>propriedade é chamada.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Se o objeto de negócios implementa o <xref:System.IDisposable>interface, o <xref:System.IDisposable.Dispose%2A>método é chamado antes do objeto é destruído.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> Se o método for `static` (`Shared` no Visual Basic), o objeto comercial nunca é criado e você não pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>eventos.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## Parâmetros de mesclagem são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>coleção de três fontes: - no controle associado a dados, em tempo de execução.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>      -Na `InsertParameters` elemento declarativamente.      -Na `Inserting` método, por meio de programação.       Primeiro, os parâmetros que são gerados de controles associados a dados são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Por exemplo, se o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado a um <xref:System.Web.UI.WebControls.GridView>controle que tem as colunas `Name` e `Number`, os parâmetros para `Name` e `Number` são adicionados à coleção.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O tipo de dados desses parâmetros é `string`. Em seguida, os parâmetros listados no `InsertParameters` elemento são adicionadas. Se um parâmetro a `InsertParameters` elemento foi encontrado com o mesmo nome como um parâmetro que já está no <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>coleção, o parâmetro existente é modificada para corresponder ao parâmetro especificado no `InsertParameters` elemento.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> Normalmente, isso é usado para modificar o tipo de dados no parâmetro. Por fim, você pode adicionar e remover parâmetros programaticamente o <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>evento que ocorre antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>método é executado.</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> O método é resolvido depois que os parâmetros são mesclados. Resolução de método é abordada na próxima seção.      > [!IMPORTANT] > Você deve validar o valor do parâmetro que você recebe do cliente. O tempo de execução simplesmente substitui o valor de parâmetro para a propriedade InsertMethod.      ## Método resolução quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>método for chamado, os campos de dados do controle associado a dados, os parâmetros que foram criados declarativamente no `InsertParameters` elemento e os parâmetros que foram adicionados a <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>manipulador de eventos são mescladas.</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> (Para obter mais informações, consulte a seção anterior). O <xref:System.Web.UI.WebControls.ObjectDataSource>objeto, em seguida, tenta encontrar um método a ser chamado.</xref:System.Web.UI.WebControls.ObjectDataSource> Primeiro, ele procura por um ou mais métodos com o nome especificado na propriedade InsertMethod. Se nenhuma correspondência for encontrada, um <xref:System.InvalidOperationException>exceção será lançada.</xref:System.InvalidOperationException> Se uma correspondência for encontrada, ele procurará a correspondência de nomes de parâmetro. Por exemplo, suponha que um tipo que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade tem dois métodos chamados `InsertARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Um `InsertARecord` tem um parâmetro, `ID`e o outro `InsertARecord` tem dois parâmetros, `Name` e `Number`. Se o <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>coleção tem apenas um parâmetro denominado `ID`, o `InsertARecord` método com apenas o `ID` parâmetro é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> O tipo do parâmetro não é verificado na resolução de métodos. Não importa a ordem dos parâmetros.       Se o <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade for definida, o método é resolvido de maneira diferente.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> O <xref:System.Web.UI.WebControls.ObjectDataSource>procura por um método com o nome especificado na propriedade InsertMethod que recebe um parâmetro do tipo que está especificado no <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Nesse caso, o nome do parâmetro não importa."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_2.cs)]"
  syntax:
    content: public string InsertMethod { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> usa para inserir dados. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que contém os parâmetros que são usados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  remarks: "Os nomes e tipos dos parâmetros que estão contidos na coleção InsertParameters devem corresponder a nomes e tipos dos parâmetros que estão na <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>assinatura da propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> Os nomes de parâmetros diferenciam maiusculas de minúsculas. Ao trabalhar com controles de associação de dados que fornecem os parâmetros, como o <xref:System.Web.UI.WebControls.GridView>e <xref:System.Web.UI.WebControls.DetailsView>controles, o <xref:System.Web.UI.WebControls.ObjectDataSource>controle mescla automaticamente os parâmetros que são explicitamente especificados na coleção com os parâmetros que são fornecidos pelo controle de associação de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> Isso é importante porque os controles de associação de dados sempre fornecem os parâmetros como <xref:System.String>tipos e se a assinatura do método inclui numérico ou tipos de data, você deve explicitamente incluir um parâmetro na coleção InsertParameters com o tipo correto.</xref:System.String> Caso contrário, o <xref:System.Web.UI.WebControls.ObjectDataSource>controle tentará converter os parâmetros de acordo com o tipo é definido pelos parâmetros na coleção.</xref:System.Web.UI.WebControls.ObjectDataSource> Para obter mais informações, consulte [usando parâmetros com o controle ObjectDataSource](~/add/includes/ajax-current-ext-md.md).       A coleção InsertParameters propriedade recupera o <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>propriedade está contida pelo <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado a <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays text boxes in which you can enter data for a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n If you click the **Insert** button, the operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it is passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an <xref:System.Int32>, not as a string.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method of the object has a method signature that includes parameters, the InsertParameters collection must contain parameters that have names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n> [!IMPORTANT]\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_1.aspx)]  \n  \n The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  \n  \n To run the example, you must have the `NorthwindEmployee` class that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. This example illustrates only how to connect the <xref:System.Web.UI.WebControls.ObjectDataSource> to a business object method that gets data for a new database record by using parameters. The example does not add records to the database, because the `Save` method of the `NorthwindEmployee` class does not include code to update the database.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> que contém os parâmetros usados pelo método identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Carrega o estado de exibição salvo anteriormente do <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle."
  remarks: "Esse método é usado basicamente pela infraestrutura do .NET Framework e não se destina a ser usado diretamente no seu código. No entanto, os desenvolvedores de controle podem substituir este método para especificar como um controle de servidor personalizado restaura o estado de exibição. Para obter mais informações, consulte [visão geral do gerenciamento de estado ASP.NET](~/add/includes/ajax-current-ext-md.md).       O método LoadViewState é usado para carregar o estado de exibição salvo anteriormente do <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource>"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "Um objeto que contém os valores de estado de exibição salvo para o controle."
  overload: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  id: MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do parâmetro de método de recuperação de dados do objeto business, é usado para indicar o número de registros a serem recuperados para suporte à paginação de fonte de dados."
  remarks: "A propriedade MaximumRowsParameterName é usada para oferecer suporte a paginação de fonte de dados. Para obter informações sobre como a paginação tem suporte pelo <xref:System.Web.UI.WebControls.ObjectDataSource>controle, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       A propriedade MaximumRowsParameterName delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The MaximumRowsParameterName property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_3.vb)]"
  syntax:
    content: public string MaximumRowsParameterName { get; set; }
    return:
      type: System.String
      description: "O nome do <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>parâmetro que é usado para indicar o número de registros a serem recuperados.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> O padrão é `&quot;maximumRows&quot;`."
  overload: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  id: ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre após o objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>propriedade é criada.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "Manipular o evento ObjectCreated para chamar outros métodos no objeto comercial, definir propriedades ou executar outra inicialização específico para o objeto de negócios antes do <xref:System.Web.UI.WebControls.ObjectDataSource>objeto chama o método de dados de objeto comercial para executar uma operação de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Uma referência ao objeto é acessada pelo <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>propriedade, que é exposta pelo <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       Se o método que é identificado para executar a operação de dados é `static` (`Shared` no Visual Basic), o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>e eventos de ObjectCreated nunca são gerados.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  id: ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes do objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>propriedade é criada.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "Se o método que é identificado para executar a operação de dados é `static` (`Shared` no Visual Basic), o ObjectCreating e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>os eventos nunca são gerados.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>       O <xref:System.Web.UI.WebControls.ObjectDataSource>controle chama automaticamente o construtor padrão de um objeto comercial para criar uma instância dela usando reflexão.</xref:System.Web.UI.WebControls.ObjectDataSource> Manipular o evento ObjectCreating para chamar outro construtor explicitamente e defina a instância do objeto que os resultados para o <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>propriedade associado <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation.  \n  \n> [!NOTE]\n>  In a production application, multiple requests might end up simultaneously using the same instance. Therefore, the object needs to be implemented in a thread-safe manner.  \n  \n This code example demonstrates this pattern. You can handle the ObjectCreating event to check the cache for an object first, and only create an instance of the object, if one is not already cached. Then, handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_2.vb)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  id: ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes do objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>propriedade será descartada.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "O evento ObjectDisposing sempre é gerado antes que a instância do objeto comercial é descartada. Se o objeto de negócios implementa o <xref:System.IDisposable>interface, o <xref:System.IDisposable.Dispose%2A>método é chamado depois que esse evento é gerado.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>       Manipule o evento ObjectDisposing para chamar outros métodos no objeto, definir propriedades ou executar limpeza que é específica para o objeto antes do objeto é destruído. Uma referência ao objeto é acessada pelo <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>propriedade, que é exposta pelo <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       Quando você usa um <xref:System.Web.UI.WebControls.ObjectDataSource>controle com uma classe LINQ to SQL, você deve cancelar o descarte da classe de contexto de dados em um manipulador para o evento ObjectDisposing.</xref:System.Web.UI.WebControls.ObjectDataSource> Esta etapa é necessária porque LINQ to SQL dá suporte à execução adiada, enquanto o <xref:System.Web.UI.WebControls.ObjectDataSource>controle tenta descartar o contexto de dados após a operação Select.</xref:System.Web.UI.WebControls.ObjectDataSource>       Para obter mais informações sobre como manipular eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache for an object first, and only create an instance of it, if one is not already cached. Then, handle the ObjectDisposing event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call the <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_2.vb)]  \n  \n The following example shows how to handle the ObjectDisposing event when using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class.  \n  \n```vb#  \nPublic Sub ExampleObjectDisposing(ByVal sender As Object, _   \n        ByVal e As ObjectDataSourceDisposingEventArgs)  \n    e.Cancel = True  \nEnd Sub  \n```  \n  \n```c#  \npublic void ExampleObjectDisposing(object sender,   \n        ObjectDataSourceDisposingEventArgs e)  \n{  \n    e.Cancel = true;  \n}  \n```"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define uma cadeia de caracteres de formato para aplicar aos nomes dos parâmetros para os valores originais que são passados para o <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref> métodos."
  remarks: "O valor da <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>propriedade é aplicada às chaves primárias apenas, como aqueles que são identificados com a `DataKeyNames` propriedade de um controle associado a dados, ou em Excluir e cenários de atualização onde o <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>está definida como o <xref:System.Web.UI.ConflictOptions>valor e o conjunto de valores originais são passados para o método de dados correspondente.</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>       A seguir estão dois cenários comuns em que você pode alterar o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>propriedade:-você talvez queira alterar a propriedade para diferenciar entre os valores novos e antigos nas atualizações.</xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> Quando o <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>estiver definida como o <xref:System.Web.UI.ConflictOptions>valor parâmetros para os valores originais e novos são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> Sem a cadeia de caracteres de formatação, dois parâmetros com o mesmo nome seriam criados para cada campo de dados. Alterando o nome do parâmetro de valor original, você pode comparar os dados para a fonte de dados original para detectar conflitos e comparar valores de chave.      -Alguns designers visuais implementam um esquema de nomenclatura específico para as chaves e valores originais.       Propriedade OldValuesParameterFormatString delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa uma cadeia de caracteres de formato aplicada aos nomes de qualquer <code> oldValues </code> ou chave parâmetros passados para o <> </> *> ou <> </> *> métodos. O padrão é `&quot;{0}&quot;`, que significa que o nome do parâmetro é o nome do campo."
  overload: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Adiciona um <xref href=&quot;System.Web.UI.Page.LoadComplete&quot;> </xref> manipulador de eventos para a página que contém o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle."
  remarks: "Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter mais informações, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       O método OnInit também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém dados do evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  id: ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um ou define um valor que indica quais informações de cultura são usadas ao converter valores de cadeia de caracteres em tipos de propriedade real para construir um objeto do tipo indicado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>"
  syntax:
    content: public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }
    return:
      type: System.Web.UI.WebControls.ParsingCulture
      description: "As informações de cultura. O valor padrão é <xref href=&quot;System.Web.UI.WebControls.ParsingCulture&quot;> </xref>."
  overload: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Salva o estado do <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "Retorna o estado de exibição atual do controle de servidor; Caso contrário, retornará <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se não houver nenhum estado de exibição associado ao controle."
  overload: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Recupera dados do armazenamento de dados subjacente, chamando o método que é identificado pelo <> </> *> propriedade com os parâmetros no <> </> *> coleção."
  remarks: "O método especificado pode ter qualquer assinatura de método, mas ele deve retornar ou ser derivado de um dos tipos listados na tabela a seguir para o <xref:System.Web.UI.WebControls.ObjectDataSource>controle chamá-lo com êxito.</xref:System.Web.UI.WebControls.ObjectDataSource>      | Tipo de retorno | Ação |   |-----------------|------------|   | <xref:System.Collections.IEnumerable>| O <xref:System.Collections.IEnumerable>é retornado pelo método Select. |   | <xref:System.Data.DataTable>| Um <xref:System.Data.DataView>é criado usando o <xref:System.Data.DataTable>e retornado pelo método Select. |   | <xref:System.Data.DataView>| O <xref:System.Data.DataView>é retornado pelo método Select. |   | <xref:System.Data.DataSet>| O primeiro <xref:System.Data.DataTable>o <xref:System.Data.DataSet>é extraído e um <xref:System.Data.DataView>é criado e retornado pelo método Select. |   | <xref:System.Object>| O objeto é encapsulado em uma coleção de <xref:System.Collections.IEnumerable>de um elemento e retornado pelo método Select. |       O método que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade pode ser um método de instância ou um `static` (`Shared` no Visual Basic) método.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Data.DataView> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataView> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Collections.IEnumerable> </xref:System.Collections.IEnumerable> Se ele é um método de instância, o objeto comercial é criado e destruído cada vez que o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade é chamada, exceto que a mesma instância é usada para chamar o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade e o método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> O método Select retorna um <xref:System.Collections.IEnumerable>interface.</xref:System.Collections.IEnumerable> No entanto, para habilitar o cache e cenários de filtragem, o valor de retorno deve ser um <xref:System.Data.DataSet>objeto.</xref:System.Data.DataSet> Embora a <xref:System.Data.DataSet>classe não implementa a <xref:System.Collections.IEnumerable>interface, o <xref:System.Web.UI.WebControls.ObjectDataSource>controle extrai automaticamente o padrão de <xref:System.Data.DataView>controle, que implementa o <xref:System.Collections.IEnumerable>.</xref:System.Collections.IEnumerable> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Collections.IEnumerable> </xref:System.Data.DataSet>       Antes da operação Select é executada, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>evento para examinar os valores dos parâmetros e executar qualquer pré-processamento antes da operação Select.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Para executar uma operação de recuperação de dados, o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto usa reflexão para criar uma instância do objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> Depois, ele chama o método que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade, usando qualquer associados <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> Após a operação de seleção, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Selected> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>evento para examinar quaisquer exceções, valores de retorno e parâmetros de saída e para executar qualquer pós-processamento.</xref:System.Web.UI.WebControls.ObjectDataSource.Selected>       Se o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade retorna um <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, ou <xref:System.Data.DataView>objeto e o cache é habilitado, o <xref:System.Web.UI.WebControls.ObjectDataSource>recupera e salva os dados em cache durante a operação Select.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> O cache é criado, descartado ou atualizada com base no comportamento de cache que é especificado pela combinação da <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>e <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>       Se o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade retorna um <xref:System.Data.DataSet>ou <xref:System.Data.DataTable>objeto e um <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>propriedade foi especificada, ela é avaliada com qualquer fornecido <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>Propriedades e o filtro resultante é aplicada à lista de dados durante a operação Select.</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>       O método Select delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>método do <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado a <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>      ## Controles associados a dados quando o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado com um controle associado a dados, como o <xref:System.Web.UI.WebControls.GridView>controle, não é necessário chamar o método Select de código da página.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O método Select é invocado diretamente pelo controle associado a dados, em vez disso."
  example:
  - For a code example, see <xref:System.Web.UI.WebControls.ObjectDataSource>.
  syntax:
    content: public System.Collections.IEnumerable Select ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "Um <xref:System.Collections.IEnumerable>lista de linhas de dados.</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  id: SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle invoca para recuperar uma contagem de linhas."
  remarks: "A propriedade SelectCountMethod identifica um método do objeto comercial que é usado para recuperar uma contagem total de linhas, para dar suporte à paginação de fonte de dados. A propriedade SelectCountMethod é avaliada apenas se o <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>está definida como `true`.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>       A propriedade SelectCountMethod delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> Para obter informações sobre como a paginação tem suporte pelo <xref:System.Web.UI.WebControls.ObjectDataSource>controle, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The SelectCountMethod property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the SelectCountMethod property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_3.vb)]"
  syntax:
    content: public string SelectCountMethod { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> usa para recuperar uma contagem de linhas. O método deve retornar um inteiro (<xref:System.Int32>).</xref:System.Int32> O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando um <xref:System.Web.UI.WebControls.ObjectDataSource.Select*>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "Manipular o evento selecionado para examinar os valores dos parâmetros de saída ou um valor de retorno ou para determinar se uma exceção foi acionada após um <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> O valor de retorno, parâmetros de saída e propriedades de tratamento de exceção estão disponíveis no <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>objeto que está associado com o evento.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_1.aspx)]  \n  \n The second example shows handlers for the Selected and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The Selected event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de um <xref:System.Web.UI.WebControls.ObjectDataSource.Select*>operação.</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "Manipular o evento Selecting para realizar a inicialização adicional que é específica para seu aplicativo, para validar os valores de parâmetros, ou para alterar o parâmetro de valores antes do <xref:System.Web.UI.WebControls.ObjectDataSource>controle executa a operação de recuperação de dados.</xref:System.Web.UI.WebControls.ObjectDataSource> Os parâmetros estão disponíveis como um <xref:System.Collections.IDictionary>coleção que é acessada pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>propriedade, que é exposta pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       Este evento pode ser disparado duas vezes para uma única chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método, se o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>está definida.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> O <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>objeto é usado para determinar se select foi chamado para recuperar dados ou recuperar a contagem.</xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  id: SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle invoca para recuperar dados."
  remarks: "O método especificado pode ter qualquer assinatura de método, mas ele deve retornar um dos tipos mostrados na tabela a seguir para o <xref:System.Web.UI.WebControls.ObjectDataSource>controle chamá-lo com êxito.</xref:System.Web.UI.WebControls.ObjectDataSource>      | Tipo de retorno | Ação |   |-----------------|------------|   | <xref:System.Collections.IEnumerable>| O <xref:System.Collections.IEnumerable>é retornado pelo método <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>. |   | <xref:System.Data.DataTable>| Um <xref:System.Data.DataView>é criado usando o <xref:System.Data.DataTable>e retornado pelo método <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>. |   | <xref:System.Data.DataView>| Um <xref:System.Data.DataView>é retornado pelo método <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>. |   | <xref:System.Data.DataSet>| O primeiro <xref:System.Data.DataTable>o <xref:System.Data.DataSet>foram extraído, e um <xref:System.Data.DataView>é criado e retornado pelo método <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>. |   | <xref:System.Object>| O objeto é encapsulado em uma coleção de <xref:System.Collections.IEnumerable>de um elemento e retornado pelo método <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>. |       A propriedade SelectMethod delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable> </xref:System.Collections.IEnumerable>       Quando você usa o <xref:System.Web.UI.WebControls.ObjectDataSource>classe Excluir ou atualizar dados, certifique-se de que os nomes de parâmetro é configurado para o <xref:System.Web.UI.WebControls.ObjectDataSource>controlar o <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>coleção ou <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção correspondem aos nomes de coluna que são retornados pelo método select.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## O método que é identificado pela propriedade SelectMethod pode ser um método de instância de tempo de vida do objeto ou um `static` (`Shared` no Visual Basic) método. Se é um método de instância, o objeto comercial é criado e destruído cada vez que o método que é especificado pela propriedade SelectMethod é chamado. Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>eventos para trabalhar com o objeto de negócios antes do método que é especificado pela propriedade SelectMethod é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> Você também pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>evento é gerado depois que o método que é especificado pela propriedade SelectMethod é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Se o objeto de negócios implementa o <xref:System.IDisposable>interface, o <xref:System.IDisposable.Dispose%2A>método é chamado antes do objeto é destruído.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> Se o método for `static` (`Shared` no Visual Basic), o objeto comercial nunca é criado e você não pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>eventos.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## Parâmetros de mesclagem são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>coleta dessas fontes: - declarativamente no `SelectParameters` elemento.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>      -Programaticamente a partir de `Selecting` método.       Primeiro, os parâmetros listados no `SelectParameters` elemento são adicionadas. Em segundo lugar, parâmetros programaticamente são adicionados e removidos no <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>evento que ocorre antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método é executado.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> O método é resolvido depois que os parâmetros são mesclados. Resolução de método é abordada na próxima seção.      > [!IMPORTANT] > Você deve validar o valor do parâmetro que você recebe do cliente. O tempo de execução simplesmente substitui o valor de parâmetro para a propriedade SelectMethod.      ## Método resolução quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método for chamado, os campos de dados do controle associado a dados, os parâmetros que foram criados declarativamente no `SelectParameters` elemento e os parâmetros que foram adicionados a <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>manipulador de eventos são mescladas.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> (Para obter mais informações, consulte a seção anterior). O <xref:System.Web.UI.WebControls.ObjectDataSource>controlar tenta localizar um método para chamar.</xref:System.Web.UI.WebControls.ObjectDataSource> Primeiro, ele procura por um ou mais métodos com o nome especificado na propriedade SelectMethod. Se nenhuma correspondência for encontrada, um <xref:System.InvalidOperationException>exceção será lançada.</xref:System.InvalidOperationException> Se uma correspondência for encontrada, ele procurará a correspondência de nomes de parâmetro. Por exemplo, suponha que um tipo que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade tem dois métodos chamados `SelectARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Um `SelectARecord` tem um parâmetro, `ID`e o outro `SelectARecord` tem dois parâmetros, `Name` e `Number`. Se o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>coleção tem apenas um parâmetro denominado `ID`, o `SelectARecord` método com apenas o `ID` parâmetro é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> O tipo do parâmetro não é verificado na resolução de métodos. Não importa a ordem dos parâmetros.       Se o <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade for definida, o método é resolvido de maneira diferente.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> O <xref:System.Web.UI.WebControls.ObjectDataSource>procura por um método com o nome especificado na propriedade SelectMethod que recebe um parâmetro do tipo que está especificado no <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Nesse caso, o nome do parâmetro não importa."
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the method that is specified by the SelectMethod property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_540_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_540_1.aspx)]"
  syntax:
    content: public string SelectMethod { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> usa para recuperar dados. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém uma coleção de parâmetros que são usados pelo método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "A propriedade obtém SelectParameters o <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>       Parâmetros de você adicionar à coleção SelectParameters declarativamente usando o `SelectParameters` elemento ou programaticamente no manipulador para o <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> Em tempo de execução, os parâmetros listados no `SelectParameters` elemento são adicionados à coleção primeiro. Os parâmetros na coleção, em seguida, são adicionados ou removidos pelo manipulador para o <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> O <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>é gerado antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método é executado.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       Antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método é executado, os nomes e tipos dos parâmetros que estão contidos na coleção SelectParameters devem corresponder a assinatura do método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Por exemplo, se um método de seleção denominado `GetEmployeesByStateAndAge` leva um `string` e um inteiro como parâmetros, a coleção SelectParameters deve conter dois parâmetros. O primeiro parâmetro deve ser resolvido para uma cadeia de caracteres e o segundo parâmetro deve ser resolvido para um número inteiro. Ambos os parâmetros podem ser especificados na marcação no `SelectParameters` elemento. Como alternativa, eles podem ser podem ser adicionadas a <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>manipulador de eventos, ou um parâmetro pode ser adicionado na marcação e outro pode ser adicionado por meio de programação.</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       Para obter mais informações, consulte [usando parâmetros com o controle ObjectDataSource](~/add/includes/ajax-current-ext-md.md) e <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>      > [!IMPORTANT] > No código para o <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>manipulador de eventos ou método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade, certifique-se de que você valide qualquer valor de parâmetro que é recebida do cliente.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>"
  example:
  - "The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control and display it in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> control retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a `QueryStringParameter` element in markup to create a <xref:System.Web.UI.WebControls.QueryStringParameter> object that will retrieve the value of a specified query-string parameter from the URL and pass it to the `GetEmployee` method.  \n  \n Other parameter classes can be used to retrieve values from other sources, such as control properties, form fields, cookies, ASP.NET profile data, or session state. You can also use a parameter object that is defined in markup in order to pass a hard-coded value to the select method. For more information about parameter classes that are available, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  \n  \n To run this example, you will need the following:  \n  \n-   A Web site that has a connection string named `NorthwindConnection` that connects to the Northwind Traders database. For more information, see the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview.  \n  \n-   The `EmployeeLogic` class that is shown as one of the code examples for the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. The class file must be located in the App_Code folder.  \n  \n-   The sample code can be run as an .aspx page. If you request the page without a query-string parameter, an error message is displayed. If you request the page using a query string such as `?empid=1` after the name of the .aspx file, you will see the details for the requested employee.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1025_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1025_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Uma coleção de parâmetros que são usados pelo método especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do objeto comercial que o <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>usado para especificar uma expressão de classificação para suporte à classificação de fonte de dados de parâmetro.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "A propriedade SortParameterName é usada para oferecer suporte a classificação de fonte de dados. Quando um <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>propriedade é definida no <xref:System.Web.UI.DataSourceSelectArguments>do objeto e passados para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>método, o valor de SortParameterName identifica o nome do parâmetro do <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>método do objeto comercial acordo com a qual os dados são classificados.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceSelectArguments> </xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>       Se o <xref:System.Web.UI.WebControls.ObjectDataSource>está associado um controle associado a dados, os valores que são passados para este take parâmetro o formulário de valores de campo separados por vírgula seguido por `&quot;ASC&quot;` ou `&quot;DESC&quot;`.</xref:System.Web.UI.WebControls.ObjectDataSource> Por exemplo, o valor para uma classificação crescente em `Name` seria `&quot;Name ASC&quot;`.       A propriedade SortParameterName delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to implement a type that supports sorting. The second code example demonstrates how to implement a sort expression.  \n  \n The following code example demonstrates how to implement a type that supports sorting. The `SelectMethod` of the `SortingData` class takes a parameter, `sortExpression`. The string that is passed to `SelectMethod` is used for the <xref:System.Data.DataView.Sort%2A> property of the <xref:System.Data.DataView> object that is returned by `SelectMethod`.  \n  \n [!code-cs[ObjectDataSourceSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_1.cs)]\n [!code-vb[ObjectDataSourceSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_1.vb)]  \n  \n The following code example demonstrates how to implement a sort expression. The code in the Web page creates an instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property is set to `SortingData` and the SortParameterName property is set to `sortExpression`. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true`. When the user clicks the **Sort** button, the field name, `Name` or `Number`, is passed to `SelectMethod` in the sort parameter.  \n  \n [!code-cs[ObjectDataSourceSorting#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_2.aspx)]\n [!code-vb[ObjectDataSourceSorting#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_2.aspx)]"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "O nome do parâmetro de método usado para indicar o parâmetro que é usado para classificar os dados. O padrão é uma cadeia de caracteres vazia."
  overload: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define uma cadeia de caracteres separada por ponto-e-vírgula que indica quais bancos de dados e tabelas a serem usadas para a dependência de cache do Microsoft SQL Server."
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle oferece suporte a uma política de expiração opcional que se baseia o <xref:System.Web.Caching.SqlCacheDependency>objeto para o cache de dados (o serviço deve ser configurado para o servidor de banco de dados).</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource>       SQL Server oferece suporte a dois mecanismos para invalidação do cache: notificação de consulta e. Cada mecanismo tem uma sintaxe diferente para o <xref:System.Web.Caching.SqlCacheDependency>objeto.</xref:System.Web.Caching.SqlCacheDependency>       O <xref:System.Web.UI.WebControls.ObjectDataSource>suporta apenas sondagem.</xref:System.Web.UI.WebControls.ObjectDataSource> O <xref:System.Web.Caching.SqlCacheDependency>cadeia de caracteres é usada para criar um <xref:System.Data.SqlClient.SqlDependency>objeto que é passado para o <xref:System.Data.Common.DbCommand>construtor antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>o método é executado.</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.Common.DbCommand> </xref:System.Data.SqlClient.SqlDependency> </xref:System.Web.Caching.SqlCacheDependency> A cadeia de caracteres SqlCacheDependency identifica bancos de dados e tabelas de acordo com o mesmo formato que é usado pelo `@ Page` diretiva, onde a primeira parte da cadeia de caracteres é uma cadeia de caracteres de conexão para um banco de dados do SQL Server, seguido por um delimitador de vírgula e, finalmente, o nome da tabela de banco de dados (por exemplo, `&quot;connectionstring1:table1&quot;`). Se a propriedade SqlCacheDependency depende de mais de uma tabela, os pares de nome de tabela e de cadeia de caracteres de conexão são separados por ponto e vírgula (por exemplo, `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`).       Para dar suporte à notificação, você deve escrever a lógica de cache na implementação do seu <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>propriedade e manipular a construção do <xref:System.Web.Caching.SqlCacheDependency>objeto em seu código.</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> object. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is expired and a new set of data is retrieved on the next request for the page.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_2.cs)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que indica quais bancos de dados e tabelas para usar para a dependência de cache do SQL Server."
  overload: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  id: StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do que o parâmetro do método de recuperação de dados que é usado para indicar o valor do identificador do primeiro registro para recuperar para suporte à paginação de fonte de dados."
  remarks: "A propriedade StartRowIndexParameterName é usada para oferecer suporte a paginação de fonte de dados. Para obter informações sobre como a paginação tem suporte pelo <xref:System.Web.UI.WebControls.ObjectDataSource>controle, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       A propriedade StartRowIndexParameterName delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the StartRowIndexParameterName property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_3.vb)]"
  syntax:
    content: public string StartRowIndexParameterName { get; set; }
    return:
      type: System.String
      description: "O nome do parâmetro de método de objeto business usado para indicar o primeiro registro para recuperar. O parâmetro deve retornar um valor inteiro. O padrão é `&quot;startRowIndex&quot;`."
  overload: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Rastreia as alterações de estado de exibição para o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controlar de forma que eles podem ser armazenados no <xref href=&quot;System.Web.UI.StateBag&quot;> </xref> objeto."
  remarks: "O método TrackViewState é substituído para marcar o ponto de partida para iniciar o rastreamento e salvar alterações para o controle como parte do estado de exibição para o objeto."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  id: TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome da classe que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> objeto representa."
  remarks: "Para criar uma instância do objeto que o <xref:System.Web.UI.WebControls.ObjectDataSource>controle associa a, o controle usa reflexão para carregar o tipo que é identificado pelo nome do tipo em tempo de execução.</xref:System.Web.UI.WebControls.ObjectDataSource> Portanto, o valor da propriedade TypeName pode ser um tipo parcialmente qualificado para o código que está localizado nos diretórios Bin ou App_Code ou um nome de tipo totalmente qualificado para o código que é registrado no cache de assembly global. Se você usar o cache de assembly global, você deve adicionar a referência apropriada para o `assemblies` seção do arquivo Machine. config ou Web. config.       O tipo deve ter um construtor padrão, a menos que você manipule o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>evento para criar uma instância dele mesmo.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> Uma instância do tipo é criada para cada chamada para o <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, e <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>métodos, se os métodos do tipo são membro.</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> Não é possível criar uma instância se os métodos são `static` (`Shared` no Visual Basic). Se o tipo implementa o <xref:System.IDisposable>interface, o <xref:System.IDisposable.Dispose%2A>método é chamado antes do objeto é destruído.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data by using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_1.aspx)]  \n  \n The following example shows the class that the TypeName property value refers to.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_2.vb)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "Um nome de classe parcial ou totalmente qualificado que identifica o tipo do objeto que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> representa. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Executa uma operação de atualização chamando o método que é identificado pelo <> </> *> propriedade e os parâmetros que estão na <> </> *> coleção."
  remarks: "O objeto comercial é assumido para atualizar um registro de dados por vez, em vez de em um lote.       Antes da operação de atualização é executada, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>evento para examinar os valores dos parâmetros e executar qualquer pré-processamento antes de uma operação de atualização.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> Para executar uma operação de atualização, o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto usa reflexão para criar uma instância do objeto que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> Depois, ele chama o método que é identificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade, usando qualquer associados <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>Propriedades.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Após a conclusão da operação de atualização, o <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>método é chamado para gerar o <xref:System.Web.UI.WebControls.ObjectDataSource.Updated>evento.</xref:System.Web.UI.WebControls.ObjectDataSource.Updated> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.Updated>evento para examinar quaisquer exceções, valores de retorno e parâmetros de saída e para executar qualquer pós-processamento.</xref:System.Web.UI.WebControls.ObjectDataSource.Updated>       O método Update delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>método do <xref:System.Web.UI.WebControls.ObjectDataSourceView>que está associado a <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      > [!IMPORTANT] > Você deve validar o valor do parâmetro que você recebe do cliente. O tempo de execução simplesmente substitui o valor de parâmetro para o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      ## Controles associados a dados quando o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado com um controle associado a dados, como o <xref:System.Web.UI.WebControls.GridView>controle, não é necessário chamar o método Update do código de página.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O método de atualização é chamado diretamente pelo controle associado a dados em vez disso."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the Update operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_2.vb)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "Um valor que representa o número de linhas atualizadas no armazenamento de dados subjacente."
  overload: System.Web.UI.WebControls.ObjectDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando um <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "Manipular o evento Updated para examinar os valores dos parâmetros de saída ou um valor de retorno ou para determinar se uma exceção foi acionada após um <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>operação foi concluída.</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> O valor de retorno, parâmetros de saída e propriedades de tratamento de exceção estão disponíveis no <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>objeto que está associado com o evento.</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  id: UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> controle invoca para atualizar dados."
  remarks: "O <xref:System.Web.UI.WebControls.ObjectDataSource>controle assume que o método que é identificado pela propriedade UpdateMethod executa atualizações uma de cada vez, em vez de em um lote.</xref:System.Web.UI.WebControls.ObjectDataSource>       A propriedade UpdateMethod delega para o <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>propriedade o <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>       Certifique-se de que os nomes de parâmetro é configurado para o <xref:System.Web.UI.WebControls.ObjectDataSource>controlar o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção correspondem aos nomes de coluna que são retornados pelo método select.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## O método que é identificado pela propriedade UpdateMethod pode ser um método de instância de tempo de vida do objeto ou um `static` (`Shared` no Visual Basic) método. Se é um método de instância, o objeto comercial é criado e destruído cada vez que o método que é especificado pela propriedade UpdateMethod é chamado. Você pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>eventos para trabalhar com o objeto de negócios antes de é chamado o método que é especificado pela propriedade UpdateMethod.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> Você também pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>evento é gerado depois que o método que é especificado pela propriedade UpdateMethod é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> Se o objeto de negócios implementa o <xref:System.IDisposable>interface, o <xref:System.IDisposable.Dispose%2A>método é chamado antes do objeto é destruído.</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> Se o método for `static` (`Shared` no Visual Basic), o objeto comercial nunca é criado e você não pode manipular o <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, e <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>eventos.</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## Parâmetros de mesclagem são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção de três fontes: - no controle associado a dados, em tempo de execução.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>      -Na `UpdateParameters` elemento declarativamente.      -Na <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>manipulador de eventos programaticamente.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating>       Primeiro, os parâmetros que são gerados de controles associados a dados são adicionados para o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Por exemplo, se o <xref:System.Web.UI.WebControls.ObjectDataSource>controle está associado a um <xref:System.Web.UI.WebControls.GridView>controle que tem as colunas `Name` e `Number`, os parâmetros para `Name` e `Number` são adicionados à coleção.</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> O nome exato do parâmetro depende do <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> O tipo de dados desses parâmetros é `string`. Em seguida, os parâmetros listados no `UpdateParameters` elemento são adicionadas. Se um parâmetro a `UpdateParameters` elemento foi encontrado com o mesmo nome como um parâmetro que já está no <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção, o parâmetro existente é modificada para corresponder ao parâmetro especificado no `UpdateParameters` elemento.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> Normalmente, isso é usado para modificar o tipo de dados no parâmetro. Por fim, você pode adicionar e remover parâmetros programaticamente o <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>evento que ocorre antes do <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>método é executado.</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Updating> O método é resolvido depois que os parâmetros são mesclados. Resolução de método é abordada na próxima seção.      > [!IMPORTANT] > Você deve validar o valor do parâmetro que você recebe do cliente. O tempo de execução simplesmente substitui o valor de parâmetro para a propriedade UpdateMethod.      ## Método resolução quando o <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>método for chamado, os campos de dados do controle associado a dados, os parâmetros que foram criados declarativamente no `UpdateParameters` elemento e os parâmetros que foram adicionados a <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>manipulador de eventos são mescladas.</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> (Para obter mais informações, consulte a seção anterior). O <xref:System.Web.UI.WebControls.ObjectDataSource>controlar tenta localizar um método para chamar.</xref:System.Web.UI.WebControls.ObjectDataSource> Primeiro, ele procura por um ou mais métodos com o nome especificado na propriedade UpdateMethod. Se nenhuma correspondência for encontrada, um <xref:System.InvalidOperationException>exceção será lançada.</xref:System.InvalidOperationException> Se uma correspondência for encontrada, ele procurará a correspondência de nomes de parâmetro. Por exemplo, suponha que um tipo que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>propriedade tem dois métodos chamados `UpdateARecord`.</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Um `UpdateARecord` tem um parâmetro, `ID`e o outro `UpdateARecord` tem dois parâmetros, `Name` e `Number`. Se o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>coleção tem apenas um parâmetro denominado `ID`, o `UpdateARecord` método com apenas o `ID` parâmetro é chamado.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> O tipo do parâmetro não é verificado na resolução de métodos. Não importa a ordem dos parâmetros.       Se o <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade for definida, o método é resolvido de maneira diferente.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> O <xref:System.Web.UI.WebControls.ObjectDataSource>procura por um método com o nome especificado na propriedade UpdateMethod que recebe um parâmetro do tipo que está especificado no <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> Nesse caso, o nome do parâmetro não importa."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_3.cs)]"
  syntax:
    content: public string UpdateMethod { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o nome do método ou função que o <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref> usa para atualizar dados. O padrão é uma cadeia de caracteres vazia."
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que contém os parâmetros que são usados pelo método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  remarks: "Os nomes e tipos dos parâmetros que estão contidos na coleção UpdateParameters devem corresponder os nomes e tipos dos parâmetros de <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>a assinatura do método.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> Os nomes de parâmetro são afetados pelo <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>propriedade e são diferencia maiusculas de minúsculas.</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> Os parâmetros na coleção dependem dos dados no controle associado a dados, os parâmetros que são especificados declarativamente e os parâmetros que são adicionados por meio de programação. Para obter mais informações, consulte a seção &quot;Parâmetro funde&quot; <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>e [usando parâmetros com o controle ObjectDataSource](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>       A UpdateParameters propriedade recupera o <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>propriedade contido pelo <xref:System.Web.UI.WebControls.ObjectDataSourceView>objeto que está associado com o <xref:System.Web.UI.WebControls.ObjectDataSource>controle.</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>       Para obter mais informações sobre a mesclagem de parâmetro, a vida útil do objeto e a resolução de método, consulte <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      > [!IMPORTANT] > Você deve validar o valor do parâmetro que você recebe do cliente. O tempo de execução simplesmente substitui o valor de parâmetro para o <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> que contém os parâmetros usados pelo método que é especificado pelo <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>propriedade.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de um <xref:System.Web.UI.WebControls.ObjectDataSource.Update*>operação.</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "Manipular o evento de atualização para realizar a inicialização adicional que é específica para seu aplicativo, para validar os valores de parâmetros, ou para alterar o parâmetro de valores antes do <xref:System.Web.UI.WebControls.ObjectDataSource>controle executa a operação de atualização.</xref:System.Web.UI.WebControls.ObjectDataSource> Os parâmetros estão disponíveis como um <xref:System.Collections.IDictionary>coleção que é acessada pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>propriedade, que é exposta pelo <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>objeto.</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and Updating events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The Updating event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
- uid: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceStatusEventHandler
  nameWithType: ObjectDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
- uid: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceMethodEventHandler
  nameWithType: ObjectDataSourceMethodEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
- uid: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceFilteringEventHandler
  nameWithType: ObjectDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
- uid: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceObjectEventHandler
  nameWithType: ObjectDataSourceObjectEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceDisposingEventHandler
  nameWithType: ObjectDataSourceDisposingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ParsingCulture
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParsingCulture
  nameWithType: ParsingCulture
  fullName: System.Web.UI.WebControls.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
- uid: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceSelectingEventHandler
  nameWithType: ObjectDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource
  nameWithType: ObjectDataSource.ObjectDataSource
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete
  nameWithType: ObjectDataSource.Delete
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView
  nameWithType: ObjectDataSource.GetView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: ObjectDataSource.GetViewNames
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert
  nameWithType: ObjectDataSource.Insert
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: ObjectDataSource.LoadViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit
  nameWithType: ObjectDataSource.OnInit
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: ObjectDataSource.SaveViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.Select*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select
  nameWithType: ObjectDataSource.Select
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: ObjectDataSource.TrackViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update
  nameWithType: ObjectDataSource.Update
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
