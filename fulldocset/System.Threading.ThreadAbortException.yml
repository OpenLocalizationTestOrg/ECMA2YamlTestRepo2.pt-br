### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "A exceção que é lançada quando é feita uma chamada para o <xref:System.Threading.Thread.Abort*>método.</xref:System.Threading.Thread.Abort*> Essa classe não pode ser herdada."
  remarks: "Quando é feita uma chamada para o <xref:System.Threading.Thread.Abort%2A>método destruir um thread, o common language runtime lança uma ThreadAbortException.</xref:System.Threading.Thread.Abort%2A> ThreadAbortException é uma exceção especial que pode ser capturada, mas ele automaticamente será gerado novamente no final do `catch` bloco. Quando essa exceção é gerada, o tempo de execução executa todos os `finally` blocos antes de encerrar o thread. Porque o thread pode fazer uma computação não associada a `finally` blocos ou chamada <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>para cancelar a anulação, não há nenhuma garantia de que o thread nunca terminará.</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> Se você quiser esperar até que o thread anulado terminou, você pode chamar o <xref:System.Threading.Thread.Join%2A?displayProperty=fullName>método.</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>é uma chamada de bloqueio que não retorna até que o thread, na verdade, interrompe a execução.</xref:System.Threading.Thread.Join%2A>      > [!NOTE] > Quando o common language runtime (CLR) para o plano de fundo threadsafter encerrar todos os threads de primeiro plano em um executável gerenciado, ele não usa <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> Portanto, você não pode usar ThreadAbortException detectar threads em segundo plano estão sendo encerrados pelo CLR.       ThreadAbortException usa o HRESULT COR_E_THREADABORTED, que tem o valor 0x80131530.      > [!NOTE] > O valor da herdadas <xref:System.Exception.Data%2A>propriedade é sempre `null`.</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Obtém um objeto que contém informações específicas de aplicativo relacionadas a anulação de thread."
  remarks: "O objeto retornado por essa propriedade é especificado por meio de `stateInfo` parâmetro o <xref:System.Threading.Thread.Abort%2A>método.</xref:System.Threading.Thread.Abort%2A> O conteúdo exato e o uso desse objeto é aplicativo definido; ele é normalmente usado para transmitir informações significativas para o thread anulado."
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "Um objeto que contém informações específicas do aplicativo."
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
