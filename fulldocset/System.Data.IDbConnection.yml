### YamlMime:ManagedReference
items:
- uid: System.Data.IDbConnection
  id: IDbConnection
  children:
  - System.Data.IDbConnection.BeginTransaction
  - System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.IDbConnection.ChangeDatabase(System.String)
  - System.Data.IDbConnection.Close
  - System.Data.IDbConnection.ConnectionString
  - System.Data.IDbConnection.ConnectionTimeout
  - System.Data.IDbConnection.CreateCommand
  - System.Data.IDbConnection.Database
  - System.Data.IDbConnection.Open
  - System.Data.IDbConnection.State
  langs:
  - csharp
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
  type: Interface
  summary: "Representa uma conexão aberta com uma fonte de dados e é implementado por provedores de dados .NET Framework que acessam bancos de dados relacionais."
  remarks: "A interface IDbConnection permite que uma classe de herança implementar uma classe de Conexão, que representa uma sessão exclusiva com uma fonte de dados (por exemplo, uma conexão de rede em um servidor). Para obter mais informações sobre classes de Conexão, consulte [conectando a uma fonte de dados](~/add/includes/ajax-current-ext-md.md).       Um aplicativo não cria uma instância da interface IDbConnection diretamente, mas cria uma instância de uma classe que herda IDbConnection.       Classes que herdam IDbConnection devem implementar membros herdados todas as e geralmente definem membros adicionais para adicionar funcionalidade específica do provedor. Por exemplo, a interface IDbConnection define o <xref:System.Data.IDbConnection.ConnectionTimeout%2A>propriedade.</xref:System.Data.IDbConnection.ConnectionTimeout%2A> Por sua vez, a <xref:System.Data.SqlClient.SqlConnection>classe herda essa propriedade e também define o <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A>propriedade.</xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> </xref:System.Data.SqlClient.SqlConnection>"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection>. The <xref:System.Data.SqlClient.SqlConnection> is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>, and closes the connection. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a Transact-SQL INSERT statement.  \n  \n [!code-cs[Classic WebData SqlConnection Example#1](~/add/codesnippet/csharp/t-system.data.idbconnect_1.cs)]\n [!code-vb[Classic WebData SqlConnection Example#1](~/add/codesnippet/visualbasic/t-system.data.idbconnect_1.vb)]"
  syntax:
    content: 'public interface IDbConnection : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: IDbConnection.BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicia uma transação de banco de dados."
  remarks: "Depois que a transação for concluída, você deve confirmar ou reverter a transação usando explicitamente a <xref:System.Data.IDbTransaction.Commit%2A>ou <xref:System.Data.IDbTransaction.Rollback%2A>métodos.</xref:System.Data.IDbTransaction.Rollback%2A> </xref:System.Data.IDbTransaction.Commit%2A>"
  syntax:
    content: public System.Data.IDbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.IDbTransaction
      description: "Um objeto que representa a nova transação."
  overload: System.Data.IDbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Começa uma transação de banco de dados com especificado <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> valor."
  remarks: "Assim que a transação for concluída, você deve confirmar ou reverter a transação usando explicitamente a <xref:System.Data.IDbTransaction.Commit%2A>ou <xref:System.Data.IDbTransaction.Rollback%2A>métodos.</xref:System.Data.IDbTransaction.Rollback%2A> </xref:System.Data.IDbTransaction.Commit%2A>"
  syntax:
    content: public System.Data.IDbTransaction BeginTransaction (System.Data.IsolationLevel il);
    parameters:
    - id: il
      type: System.Data.IsolationLevel
      description: "Uma da <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> valores."
    return:
      type: System.Data.IDbTransaction
      description: "Um objeto que representa a nova transação."
  overload: System.Data.IDbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: IDbConnection.ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Altera o banco de dados atual para um aberto <xref uid=&quot;langword_csharp_Connection&quot; name=&quot;Connection&quot; href=&quot;&quot;> </xref> objeto."
  syntax:
    content: public void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "O nome do banco de dados a ser usado no lugar do banco de dados atual."
  overload: System.Data.IDbConnection.ChangeDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Close
  id: Close
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: IDbConnection.Close()
  fullName: System.Data.IDbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fecha a conexão ao banco de dados."
  remarks: "O método Close reverte qualquer transação pendente. Ele libera a conexão ao pool de conexão ou fecha a conexão se o pool de conexão está desabilitado.       Um aplicativo pode chamar `Close` mais de uma vez sem gerar uma exceção."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.IDbConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define a cadeia de caracteres usada para abrir um banco de dados."
  remarks: "O `ConnectionString` propriedade pode ser definida apenas enquanto a conexão é fechada."
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbConnection>, sets its <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>, and displays its <xref:System.Data.OleDb.OleDbConnection.State%2A>.  \n  \n [!code-cs[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.idbconnect_0_1.cs)]\n [!code-vb[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.idbconnect_0_1.vb)]"
  syntax:
    content: public string ConnectionString { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém as configurações de conexão."
  overload: System.Data.IDbConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o tempo de espera durante a tentativa de estabelecer uma conexão antes de encerrar a tentativa e gerar um erro."
  remarks: "Um valor de 0 indica nenhum limite para o tempo de espera, em vez de nenhum tempo de espera e deve ser evitado em um <xref:System.Data.IDbConnection.ConnectionString%2A>porque isso causaria a tentativa de conexão aguardar indefinidamente.</xref:System.Data.IDbConnection.ConnectionString%2A>"
  syntax:
    content: public int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "O tempo (em segundos) de espera para uma conexão abrir. O valor padrão é 15 segundos."
  overload: System.Data.IDbConnection.ConnectionTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: IDbConnection.CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Cria e retorna um objeto de comando associado com a conexão."
  syntax:
    content: public System.Data.IDbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.IDbCommand
      description: "Um objeto de comando associado com a conexão."
  overload: System.Data.IDbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Database
  id: Database
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Database
  nameWithType: IDbConnection.Database
  fullName: System.Data.IDbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o nome do banco de dados atual ou o banco de dados a ser usado depois que uma conexão é aberta."
  remarks: "O `Database` propriedade pode ser atualizada dinamicamente usando a <xref:System.Data.IDbConnection.ChangeDatabase%2A>método ou passando uma instrução SQL usando um dos métodos Execute.</xref:System.Data.IDbConnection.ChangeDatabase%2A> (Inicialmente o banco de dados é definido por meio da cadeia de conexão.) Se você alterar o banco de dados atual usando uma instrução SQL ou o `ChangeDatabase` método, uma mensagem informativa é enviada e, em seguida, a propriedade é atualizada."
  syntax:
    content: public string Database { get; }
    return:
      type: System.String
      description: "O nome do banco de dados atual ou o nome do banco de dados a ser usado uma vez uma conexão está aberta. O valor padrão é uma cadeia de caracteres vazia."
  overload: System.Data.IDbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Open
  id: Open
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: IDbConnection.Open()
  fullName: System.Data.IDbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Abre uma conexão de banco de dados com as configurações especificadas pelo <xref uid=&quot;langword_csharp_ConnectionString&quot; name=&quot;ConnectionString&quot; href=&quot;&quot;> </xref> propriedade do objeto de Conexão específica do provedor."
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.Data.IDbConnection.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.State
  id: State
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: State
  nameWithType: IDbConnection.State
  fullName: System.Data.IDbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o estado atual da conexão."
  remarks: "As alterações de estado permitidos são: - na `Closed` para `Open`, usando o `Open` método do objeto de Conexão.      -From `Open` para `Closed`, usando o `Close` método ou o `Dispose` método do objeto de Conexão."
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbConnection>, sets its <xref:System.Data.IDbConnection.ConnectionString%2A>, and displays its State.  \n  \n [!code-cs[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.idbconnect_1_1.cs)]\n [!code-vb[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.idbconnect_1_1.vb)]"
  syntax:
    content: public System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "Uma da <xref href=&quot;System.Data.ConnectionState&quot;> </xref> valores."
  overload: System.Data.IDbConnection.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.IDbConnection.BeginTransaction
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: IDbConnection.BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: IDbConnection.ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbConnection.Close
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close()
  nameWithType: IDbConnection.Close()
  fullName: System.Data.IDbConnection.Close()
- uid: System.Data.IDbConnection.ConnectionString
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
- uid: System.Data.IDbConnection.ConnectionTimeout
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbConnection.CreateCommand
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: IDbConnection.CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.IDbConnection.Database
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  nameWithType: IDbConnection.Database
  fullName: System.Data.IDbConnection.Database
- uid: System.Data.IDbConnection.Open
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open()
  nameWithType: IDbConnection.Open()
  fullName: System.Data.IDbConnection.Open()
- uid: System.Data.IDbConnection.State
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  nameWithType: IDbConnection.State
  fullName: System.Data.IDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.IDbConnection.BeginTransaction*
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: IDbConnection.BeginTransaction
- uid: System.Data.IDbConnection.ChangeDatabase*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: IDbConnection.ChangeDatabase
- uid: System.Data.IDbConnection.Close*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close
  nameWithType: IDbConnection.Close
- uid: System.Data.IDbConnection.ConnectionString*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
- uid: System.Data.IDbConnection.ConnectionTimeout*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
- uid: System.Data.IDbConnection.CreateCommand*
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: IDbConnection.CreateCommand
- uid: System.Data.IDbConnection.Database*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  nameWithType: IDbConnection.Database
- uid: System.Data.IDbConnection.Open*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open
  nameWithType: IDbConnection.Open
- uid: System.Data.IDbConnection.State*
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  nameWithType: IDbConnection.State
