### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionManager
  id: TransactionManager
  children:
  - System.Transactions.TransactionManager.DefaultTimeout
  - System.Transactions.TransactionManager.DistributedTransactionStarted
  - System.Transactions.TransactionManager.HostCurrentCallback
  - System.Transactions.TransactionManager.MaximumTimeout
  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  langs:
  - csharp
  name: TransactionManager
  nameWithType: TransactionManager
  fullName: System.Transactions.TransactionManager
  type: Class
  summary: "Contém métodos usados para gerenciamento de transações. Essa classe não pode ser herdada."
  remarks: "Essa classe contém propriedades estáticas e métodos usados para obter informações sobre o padrão de opções de transação. Ele também contém vários métodos estáticos usados para a recuperação de um recurso durável quando o recurso durável falhar. Nenhuma ação especial é necessária de um recurso durável se Microsoft Distributed Transaction coordenador (MSDTC) falhar."
  syntax:
    content: public static class TransactionManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DefaultTimeout
  id: DefaultTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém o intervalo de tempo limite padrão para novas transações."
  remarks: "O intervalo de tempo limite de uma transação é a hora em que a transação deve ser concluída. Se o Gerenciador de transações não ouvido todos os participantes da transação no intervalo de tempo limite, ele anula a transação.       Esse valor pode ser definido na `DefaultSettingsSection` do arquivo de configuração."
  syntax:
    content: public static TimeSpan DefaultTimeout { get; }
    return:
      type: System.TimeSpan
      description: "Um <xref:System.TimeSpan>valor que especifica o intervalo de tempo limite de novas transações.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.DefaultTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  id: DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Indica que uma transação distribuída foi iniciada."
  remarks: "**Cuidado** inscrever-se para esse evento degrada o desempenho de transações distribuídas todos os. Transações locais não são monitoradas como o desempenho é afetado ainda mais.       **Observação** esse método usa <xref:System.Security.Permissions.SecurityAction>impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;
    return:
      type: System.Transactions.TransactionStartedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  id: HostCurrentCallback
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém ou define uma fábrica de transação personalizado."
  remarks: '**Observação** esse método usa <xref:System.Security.Permissions.SecurityAction>impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }
    return:
      type: System.Transactions.HostCurrentTransactionCallback
      description: "Um <xref href=&quot;System.Transactions.HostCurrentTransactionCallback&quot;> </xref> que contém uma fábrica de transação personalizado."
  overload: System.Transactions.TransactionManager.HostCurrentCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.MaximumTimeout
  id: MaximumTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém o intervalo de tempo limite máximo padrão para novas transações."
  remarks: "Para obter uma explicação do intervalo de tempo limite, consulte a documentação para o <xref:System.Transactions.TransactionManager.DefaultTimeout%2A>propriedade.</xref:System.Transactions.TransactionManager.DefaultTimeout%2A>       Esse valor pode ser definido na `MachineSettingsSection` do arquivo de configuração."
  syntax:
    content: public static TimeSpan MaximumTimeout { get; }
    return:
      type: System.TimeSpan
      description: "Um <xref:System.TimeSpan>valor que especifica o intervalo de tempo limite máximo permitido quando a criação de novas transações.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.MaximumTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  id: RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Notifica o Gerenciador de transações que um Gerenciador de recursos de recuperação de falha foi finalizada reenlisting em todas as transações não resolvidas."
  remarks: "Todos os gerenciadores de recursos durável devem fazer a recuperação quando eles são primeiro iniciados chamando o <xref:System.Transactions.TransactionManager.Reenlist%2A>método para cada transação pendente.</xref:System.Transactions.TransactionManager.Reenlist%2A>  Somente quando todos os reenlistments terminar ao Gerenciador de recursos deve chamar RecoveryComplete.       Para obter mais informações sobre a recuperação, consulte [executar recuperação](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Observação** esse método usa <xref:System.Security.Permissions.SecurityAction>impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static void RecoveryComplete (Guid resourceManagerIdentifier);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "Um <xref:System.Guid>que identifica exclusivamente o recurso a ser recuperado do.</xref:System.Guid>"
  overload: System.Transactions.TransactionManager.RecoveryComplete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>resourceManagerIdentifier</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Reenlists um participante permanente em uma transação."
  remarks: "Um Gerenciador de recursos facilita a resolução de inscrições duráveis em uma transação, reenlisting o participante da transação após falha de recurso.       O `resourceManagerIdentifier` parâmetro é usado para rotular consistentemente o participante de uma transação em caso de falha de recurso.  Ao chamar o método Reenlist, o Gerenciador de recursos deve fornecer as mesmas `resourceManagerIdentifier` como ele é usado quando chamado originalmente o <xref:System.Transactions.Transaction.EnlistDurable%2A>método durante a inscrição, ou um <xref:System.Transactions.TransactionException>é gerada.</xref:System.Transactions.TransactionException> </xref:System.Transactions.Transaction.EnlistDurable%2A>       Quando um participante é reenlisted usando esse método, os métodos de fase 2 da <xref:System.Transactions.IEnlistmentNotification>que correspondam ao resultado da transação (isto é, <xref:System.Transactions.IEnlistmentNotification.Commit%2A>, <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>ou <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>) são chamados conforme apropriado.</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A> </xref:System.Transactions.IEnlistmentNotification>       Depois que os participantes são reenlisted com êxito, você deve chamar <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>para concluir a recuperação.</xref:System.Transactions.TransactionManager.RecoveryComplete%2A>       Você só deve chamar esse método quando um Gerenciador de recursos for reiniciado de falha. Além disso, você só deve reinscrevê registradas por um Gerenciador de recursos durante a fase de preparação inicial de uma confirmação de duas fases de transações não resolvidas. Qualquer tentativa de chamar esse método em momentos inválidos pode produzir resultados incorretos.       Se o Gerenciador de transações falha e o Gerenciador de recursos executa recuperação apenas um curto período de tempo após você chamou o <xref:System.Transactions.PreparingEnlistment.Prepared%2A>método em uma inscrição na fase 1 do protocolo 2PC, o Gerenciador de recursos ou pode receber a <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>ou <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>retorno de chamada.</xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.PreparingEnlistment.Prepared%2A>       Para obter mais informações sobre a recuperação, consulte [executar recuperação](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Observação** esse método usa <xref:System.Security.Permissions.SecurityAction>impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static System.Transactions.Enlistment Reenlist (Guid resourceManagerIdentifier, byte[] recoveryInformation, System.Transactions.IEnlistmentNotification enlistmentNotification);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "Um <xref:System.Guid>que identifica exclusivamente o Gerenciador de recursos.</xref:System.Guid>"
    - id: recoveryInformation
      type: System.Byte[]
      description: "Contém informações adicionais de informações de recuperação."
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "Um objeto de recurso que implementa <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref> para receber notificações."
    return:
      type: System.Transactions.Enlistment
      description: "Um <xref href=&quot;System.Transactions.Enlistment&quot;> </xref> que descreve a inscrição."
  overload: System.Transactions.TransactionManager.Reenlist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>recoveryInformation</code>não é válido.       - ou - informações do Gerenciador de transações em <code>recoveryInformation</code> não coincide com o Gerenciador de transações configurado.       - ou - <code>RecoveryInformation</code> não é reconhecido pelo <xref href=&quot;System.Transactions&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Transactions.TransactionManager.RecoveryComplete*>já foi chamado especificado <code> resourceManagerIdentifier </code>.</xref:System.Transactions.TransactionManager.RecoveryComplete*> O realistamento é rejeitado."
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "O <code> resourceManagerIdentifier </code> não coincide com o conteúdo das informações de recuperação especificado na <code> recoveryInformation </code>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.TransactionManager.DefaultTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
- uid: System.Transactions.TransactionStartedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionStartedEventHandler
  nameWithType: TransactionStartedEventHandler
  fullName: System.Transactions.TransactionStartedEventHandler
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
- uid: System.Transactions.HostCurrentTransactionCallback
  parent: System.Transactions
  isExternal: false
  name: HostCurrentTransactionCallback
  nameWithType: HostCurrentTransactionCallback
  fullName: System.Transactions.HostCurrentTransactionCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.TransactionManager.DefaultTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
- uid: System.Transactions.TransactionManager.HostCurrentCallback*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete
  nameWithType: TransactionManager.RecoveryComplete
- uid: System.Transactions.TransactionManager.Reenlist*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist
  nameWithType: TransactionManager.Reenlist
