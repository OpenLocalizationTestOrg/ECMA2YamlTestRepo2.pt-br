### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "Fornece métodos para enviar pressionamentos de teclas para um aplicativo."
  remarks: "Use SendKeys para enviar pressionamentos de teclas e combinações para o aplicativo ativo de pressionamento de tecla. Essa classe não pode ser instanciada. Para enviar um pressionamento de tecla a uma classe e continuar imediatamente com o fluxo do programa, use <xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> Para aguardar até que todos os processos iniciados pelo pressionamento de tecla, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>.</xref:System.Windows.Forms.SendKeys.SendWait%2A>       Cada chave é representado por um ou mais caracteres. Para especificar um caractere de teclado única, use o caractere em si. Por exemplo, para representar a letra A, passe na cadeia de caracteres &quot;A&quot; para o método. Para representar a mais de um caractere, acrescente cada caractere adicional para o anterior. Para representar as letras A, B e C, especifique o parâmetro como &quot;ABC&quot;.       O sinal de adição (+), acento circunflexo (^), sinal de porcentagem (%), til (~) e parênteses () têm significado especial para SendKeys. Para especificar um desses caracteres, coloque-o entre chaves ({}). Por exemplo, para especificar o sinal de adição, use &quot;{+}&quot;. Para especificar caracteres de chave, use &quot;{{}&quot; e &quot;{}}&quot;. Colchetes ([]) não tenham nenhum significado especial para SendKeys, mas você deve colocá-los entre chaves. Em outros aplicativos, colchetes têm um significado especial que pode ser significativo quando ocorre a troca dinâmica de dados (DDE).      > [!CAUTION] > Se seu aplicativo destina para uso internacional com uma variedade de teclados, o uso de <xref:System.Windows.Forms.SendKeys.Send%2A>pode produzir resultados imprevisíveis e deve ser evitado.</xref:System.Windows.Forms.SendKeys.Send%2A>       Para especificar caracteres que não são exibidos quando você pressiona uma tecla, como ENTER ou TAB e as chaves que representam ações em vez de caracteres, use os códigos na tabela a seguir.      | Chave | Código |   |---------|----------|   | BACKSPACE | {BACKSPACE}, {BS} ou {BKSP} |   | QUEBRAR | {QUEBRAR} |   | CAPS LOCK | {CAPSLOCK} |   | DEL ou DELETE | {EXCLUIR} ou {DEL} |   | SETA PARA BAIXO | {PARA BAIXO} |   | TÉRMINO | {FINAL} |   | INSIRA | {Inserir} ou ~ |   | ESC | {ESC} |   | AJUDA | {AJUDA} |   | PÁGINA INICIAL | {HOME} |   | INS ou inserir | {Inserir} ou {INS} |   | SETA PARA A ESQUERDA | {LEFT} |   | NUM LOCK | {NUMLOCK} |   | PÁGINA PARA BAIXO | {PGDN} |   | PÁGINA PARA CIMA | {PGUP} |   | TELA DE IMPRESSÃO | {PRTSC} (reservado para uso futuro) |   | SETA PARA A DIREITA | {RIGHT} |   | BLOQUEIO DE ROLAGEM | {SCROLLLOCK} |   | GUIA | {GUIA} |   | SETA PARA CIMA | {ATÉ} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Adicionar teclado | {ADICIONAR} |   | Teclado subtrair | {SUBTRAIR} |   | Teclado multiplicar | {MULTIPLICAR} |   | Divisão do teclado | {DIVIDIR} |       Para especificar chaves combinadas com qualquer combinação de teclas ALT, SHIFT e CTRL, preceda o código de chave com um ou mais dos seguintes códigos de erro.      | Chave | Código |   |---------|----------|   | SHIFT | + |   | CTRL | ^ |   | ALT | % |       Para especificar que qualquer combinação de SHIFT, CTRL e ALT deve ser mantida pressionado enquanto pressionadas várias outras chaves, coloque o código para essas chaves entre parênteses. Por exemplo, para especificar para manter pressionada a tecla SHIFT enquanto E e C são pressionados, use &quot;+ (EC)&quot;. Para especificar para manter pressionada a tecla SHIFT enquanto E é pressionado, seguido de C sem turno, use &quot;+ EC&quot;.       Para especificar teclas de repetição, use o formato {número da chave}. Você deve colocar um espaço entre a chave e o número. Por exemplo, {LEFT 42} significa pressione a tecla de seta para a esquerda 42 vezes; {h 10} significa pressione que h 10 vezes.      > [!NOTE] > Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.      > [!NOTE] > SendKeys a classe foi atualizada para o .NET Framework 3.0 ativar seu uso em aplicativos que são executados no Windows Vista. A segurança avançada do Windows Vista (conhecido como controle de conta de usuário ou UAC) impede que a implementação anterior funcione conforme o esperado.   >> A classe de SendKeys é suscetível a problemas de atraso, que alguns desenvolvedores tiveram que contornar. A implementação atualizada ainda é suscetível a problemas de tempo, mas é ligeiramente mais rápida e pode exigir alterações para as soluções alternativas. A classe SendKeys tenta usar a implementação anterior pela primeira vez e se isso falhar, usa a nova implementação. Como resultado, a classe SendKeys pode se comportar de maneira diferente em diferentes sistemas operacionais. Além disso, quando a classe SendKeys usa a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A>método não aguardará por mensagens a serem processadas quando elas são enviadas para outro processo.</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> Se seu aplicativo depende de um comportamento consistente independentemente do sistema operacional, você pode forçar a classe SendKeys para usar a nova implementação adicionando a seguinte configuração de aplicativo ao seu arquivo App. config.   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Para forçar a classe SendKeys para usar a implementação anterior, use o valor `&quot;JournalHook&quot;` em vez disso."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processa todas as mensagens do Windows atualmente na fila de mensagem."
  remarks: "Use liberação de espera para o aplicativo processe pressionamentos de tecla e outras mensagens de sistema operacional que estão na fila de mensagem. Isso é equivalente a chamar <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>até que existem mais chaves para processar.</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      > [!NOTE] > Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos."
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Envia pressionamentos de tecla para o aplicativo ativo."
  remarks: "Cada chave é representado por um ou mais caracteres. Para especificar um caractere de teclado única, use o caractere em si. Por exemplo, para representar a letra A, passe na cadeia de caracteres &quot;A&quot; para o método. Para representar a mais de um caractere, acrescente cada caractere adicional para o anterior. Para representar as letras A, B e C, especifique o parâmetro como &quot;ABC&quot;.       O sinal de adição (+), acento circunflexo (^), sinal de porcentagem (%), til (~) e parênteses () têm um significado especial para <xref:System.Windows.Forms.SendKeys>.</xref:System.Windows.Forms.SendKeys> Para especificar um desses caracteres, coloque-o entre chaves ({}). Por exemplo, para especificar o sinal de adição, use &quot;{+}&quot;. Para especificar caracteres de chave, use &quot;{{}&quot; e &quot;{}}&quot;. Colchetes ([]) não tenham nenhum significado especial para <xref:System.Windows.Forms.SendKeys>, mas você deve colocá-los entre chaves.</xref:System.Windows.Forms.SendKeys> Em outros aplicativos, colchetes têm um significado especial que pode ser significativo quando ocorre a troca dinâmica de dados (DDE).      > [!CAUTION] > Se seu aplicativo destina para uso internacional com uma variedade de teclados, o uso de envio pode produzir resultados imprevisíveis e deve ser evitado.       Para especificar caracteres que não são exibidos quando você pressiona uma tecla, como ENTER ou TAB e as chaves que representam ações em vez de caracteres, use os códigos na tabela a seguir.      | Chave | Código |   |---------|----------|   | BACKSPACE | {BACKSPACE}, {BS} ou {BKSP} |   | QUEBRAR | {QUEBRAR} |   | CAPS LOCK | {CAPSLOCK} |   | DEL ou DELETE | {EXCLUIR} ou {DEL} |   | SETA PARA BAIXO | {PARA BAIXO} |   | TÉRMINO | {FINAL} |   | INSIRA | {Inserir} ou ~ |   | ESC | {ESC} |   | AJUDA | {AJUDA} |   | PÁGINA INICIAL | {HOME} |   | INS ou inserir | {Inserir} ou {INS} |   | SETA PARA A ESQUERDA | {LEFT} |   | NUM LOCK | {NUMLOCK} |   | PÁGINA PARA BAIXO | {PGDN} |   | PÁGINA PARA CIMA | {PGUP} |   | TELA DE IMPRESSÃO | {PRTSC} (reservado para uso futuro) |   | SETA PARA A DIREITA | {RIGHT} |   | BLOQUEIO DE ROLAGEM | {SCROLLLOCK} |   | GUIA | {GUIA} |   | SETA PARA CIMA | {ATÉ} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Adicionar teclado | {ADICIONAR} |   | Teclado subtrair | {SUBTRAIR} |   | Teclado multiplicar | {MULTIPLICAR} |   | Divisão do teclado | {DIVIDIR} |       Para especificar chaves combinadas com qualquer combinação de teclas ALT, SHIFT e CTRL, preceda o código de chave com um ou mais dos seguintes códigos de erro.      | Chave | Código |   |---------|----------|   | SHIFT | + |   | CTRL | ^ |   | ALT | % |       Para especificar que qualquer combinação de SHIFT, CTRL e ALT deve ser mantida pressionado enquanto pressionadas várias outras chaves, coloque o código para essas chaves entre parênteses. Por exemplo, para especificar para manter pressionada a tecla SHIFT enquanto E e C são pressionados, use &quot;+ (EC)&quot;. Para especificar para manter pressionada a tecla SHIFT enquanto E é pressionado, seguido de C sem turno, use &quot;+ EC&quot;.       Para especificar teclas de repetição, use o formato {número da chave}. Você deve colocar um espaço entre a chave e o número. Por exemplo, {LEFT 42} significa pressione a tecla de seta para a esquerda 42 vezes; {h 10} significa pressione que h 10 vezes.      > [!NOTE] > Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.      > [!NOTE] > O <xref:System.Windows.Forms.SendKeys>classe foi atualizada para o .NET Framework 3.0 ativar seu uso em aplicativos que são executados no Windows Vista.</xref:System.Windows.Forms.SendKeys> A segurança avançada do Windows Vista (conhecido como controle de conta de usuário ou UAC) impede que a implementação anterior funcione conforme o esperado.   >> De <xref:System.Windows.Forms.SendKeys>classe é suscetível a problemas de atraso, que alguns desenvolvedores tiveram que contornar.</xref:System.Windows.Forms.SendKeys> A implementação atualizada ainda é suscetível a problemas de tempo, mas é ligeiramente mais rápida e pode exigir alterações para as soluções alternativas. O <xref:System.Windows.Forms.SendKeys>classe tenta usar a implementação anterior primeiro e, se isso falhar, usa a nova implementação.</xref:System.Windows.Forms.SendKeys> Como resultado, o <xref:System.Windows.Forms.SendKeys>classe comporte de forma diferente em diferentes sistemas operacionais.</xref:System.Windows.Forms.SendKeys> Além disso, quando o <xref:System.Windows.Forms.SendKeys>classe usa a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A>método não aguardará por mensagens a serem processadas quando elas são enviadas para outro processo.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> Se seu aplicativo depende de um comportamento consistente independentemente do sistema operacional, você poderá forçar o <xref:System.Windows.Forms.SendKeys>classe para usar a nova implementação adicionando a seguinte configuração de aplicativo ao seu arquivo App. config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Para forçar o <xref:System.Windows.Forms.SendKeys>classe para usar a implementação anterior, use o valor `&quot;JournalHook&quot;` em vez disso.</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A cadeia de caracteres de pressionamentos de teclas a enviar."
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não é um aplicativo ativo para enviar pressionamentos de teclas para."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>não representam pressionamentos de tecla válidos"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Envia as chaves especificadas para o aplicativo ativo e, em seguida, aguarda mensagens a serem processadas."
  remarks: "Use SendWait para enviar pressionamentos de tecla ou combinações de teclas para o aplicativo ativo e aguarde até que as mensagens de pressionamento de tecla a ser processado. Você pode usar esse método para enviar pressionamentos de teclas para um aplicativo e aguarde até que todos os processos que são iniciados por pressionamentos de teclas para ser concluída. Isso pode ser importante se o outro aplicativo deve terminar antes que o aplicativo pode continuar.      > [!NOTE] > Porque não há nenhum método gerenciado para ativar outro aplicativo, você pode usar essa classe dentro do aplicativo atual ou usar métodos nativos do Windows, como `FindWindow` e `SetForegroundWindow`, para forçar foco em outros aplicativos.      > [!NOTE] > O <xref:System.Windows.Forms.SendKeys>classe foi atualizada para o .NET Framework 3.0 ativar seu uso em aplicativos que são executados no Windows Vista.</xref:System.Windows.Forms.SendKeys> A segurança avançada do Windows Vista (conhecido como controle de conta de usuário ou UAC) impede que a implementação anterior funcione conforme o esperado.   >> De <xref:System.Windows.Forms.SendKeys>classe é suscetível a problemas de atraso, que alguns desenvolvedores tiveram que contornar.</xref:System.Windows.Forms.SendKeys> A implementação atualizada ainda é suscetível a problemas de tempo, mas é ligeiramente mais rápida e pode exigir alterações para as soluções alternativas. O <xref:System.Windows.Forms.SendKeys>classe tenta usar a implementação anterior primeiro e, se isso falhar, usa a nova implementação.</xref:System.Windows.Forms.SendKeys> Como resultado, o <xref:System.Windows.Forms.SendKeys>classe comporte de forma diferente em diferentes sistemas operacionais.</xref:System.Windows.Forms.SendKeys> Além disso, quando o <xref:System.Windows.Forms.SendKeys>classe usa a nova implementação, o método SendWait não aguardará por mensagens a serem processadas quando elas são enviadas para outro processo.</xref:System.Windows.Forms.SendKeys>   >> Se seu aplicativo depende de um comportamento consistente independentemente do sistema operacional, você poderá forçar o <xref:System.Windows.Forms.SendKeys>classe para usar a nova implementação adicionando a seguinte configuração de aplicativo ao seu arquivo App. config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Para forçar o <xref:System.Windows.Forms.SendKeys>classe para usar a implementação anterior, use o valor `&quot;JournalHook&quot;` em vez disso.</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A cadeia de caracteres de pressionamentos de teclas a enviar."
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
