### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.DirectorySecurity
  id: DirectorySecurity
  children:
  - System.Security.AccessControl.DirectorySecurity.#ctor
  - System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  langs:
  - csharp
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
  type: Class
  summary: "Representa o controle de acesso e auditoria de segurança para um diretório. Essa classe não pode ser herdada."
  remarks: "A classe DirectorySecurity Especifica os direitos de acesso para um diretório de sistema e como as tentativas de acesso são auditadas. Essa classe representa os direitos de acesso e auditoria como um conjunto de regras. Cada regra de acesso é representada por um <xref:System.Security.AccessControl.FileSystemAccessRule>do objeto, enquanto cada regra de auditoria é representada por um <xref:System.Security.AccessControl.FileSystemAuditRule>objeto.</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       A classe DirectorySecurity é uma abstração do sistema de segurança de arquivos do Windows subjacente. Nesse sistema, cada diretório tem uma lista de controle de acesso discricionário (DACL) que controla o acesso ao diretório e uma lista de controle de acesso sistema (SACL), que especifica as tentativas de controle de acesso são auditadas. O <xref:System.Security.AccessControl.FileSystemAccessRule>e <xref:System.Security.AccessControl.FileSystemAuditRule>classes são abstrações das entradas de controle de acesso (ACEs) que compõem as DACLs e SACLs.</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       A classe DirectorySecurity oculta muitos dos detalhes de DACLs e SACLs; Você não precisa se preocupar sobre ACE ordenação ou DACLS null.       Use o <xref:System.Security.AccessControl.FileSecurity>classe para recuperar, adicionar ou alterar as regras de acesso que representam a DACL e SACL de um arquivo.</xref:System.Security.AccessControl.FileSecurity>       As tabelas a seguir lista os métodos que você pode usar para acessar e manter a segurança do diretório.      | Tarefa | Métodos |   |----------|-------------|   | Adicionar regras |<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|   | Remover regras |<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|   | Recuperar o controle de acesso para um diretório |<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|   | Manter o controle de acesso para um diretório |<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName></xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName></xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|</xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>"
  example:
  - "The following code example uses the DirectorySecurity class to add and then remove an access control list (ACL) entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/t-system.security.access_1_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/t-system.security.access_1_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/t-system.security.access_1_1.vb)]"
  syntax:
    content: 'public sealed class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  - System.Security.AccessControl.FileSystemSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AccessRightType
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.DirectorySecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.DirectorySecurity
  langs:
  - csharp
  name: DirectorySecurity()
  nameWithType: DirectorySecurity.DirectorySecurity()
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> classe."
  remarks: "Use este construtor quando você deseja criar um vazio <xref:System.Security.AccessControl.DirectorySecurity>objeto que não seja baseado em um diretório existente.</xref:System.Security.AccessControl.DirectorySecurity> Em seguida, você pode preencher o objeto com informações de controle de acesso e aplicá-la a um diretório."
  syntax:
    content: public DirectorySecurity ();
    parameters: []
  overload: System.Security.AccessControl.DirectorySecurity.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operacional atual não é o Microsoft Windows 2000 ou posterior."
  platform:
  - net462
- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.DirectorySecurity
  langs:
  - csharp
  name: DirectorySecurity(String,AccessControlSections)
  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> classe a partir de um diretório especificado usando os valores especificados do <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> enumeração."
  remarks: "Este construtor recupera as informações de controle de acesso para o diretório especificado e, em seguida, cria um <xref:System.Security.AccessControl.DirectorySecurity>objeto que encapsula informações.</xref:System.Security.AccessControl.DirectorySecurity> Em seguida, você pode inspecionar, adicionar ou excluir as informações de controle de acesso para o diretório especificado."
  syntax:
    content: public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "O local de um diretório para criar um <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> de objeto."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Uma da <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> valores que especifica o tipo de acesso controlam as informações de ACL (lista) para recuperar."
  overload: System.Security.AccessControl.DirectorySecurity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> name </code> parâmetro é uma cadeia de caracteres de comprimento zero, contém somente espaços em branco ou contém um ou mais caracteres inválidos, conforme definido pelo <xref:System.IO.Path.InvalidPathChars>.</xref:System.IO.Path.InvalidPathChars>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido, (por exemplo, é uma unidade não mapeada)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O arquivo especificado no <code> name </code> parâmetro não foi encontrado."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ocorreu um erro de e/s ao abrir o diretório."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <code> name </code> parâmetro está em um formato inválido."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operacional atual não é o Microsoft Windows 2000 ou posterior."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome do arquivo ou ambos excederem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas baseadas em Windows, caminhos devem ter menos de 248 caracteres e nomes de arquivo devem ter menos de 260 caracteres."
  - type: System.Security.AccessControl.PrivilegeNotHeldException
    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException
    description: "A conta do sistema atual não tem privilégios administrativos."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "O diretório não pôde ser encontrado."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O <code> name </code> parâmetro especificado um diretório é somente leitura.       - ou - não há suporte para esta operação na plataforma atual.       - ou - o chamador não tem a permissão necessária."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.FileSystemSecurity
  isExternal: false
  name: System.Security.AccessControl.FileSystemSecurity
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.Security.AccessControl.PrivilegeNotHeldException
  parent: System.Security.AccessControl
  isExternal: false
  name: PrivilegeNotHeldException
  nameWithType: PrivilegeNotHeldException
  fullName: System.Security.AccessControl.PrivilegeNotHeldException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.Security.AccessControl.DirectorySecurity.#ctor
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity()
  nameWithType: DirectorySecurity.DirectorySecurity()
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()
- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity(String,AccessControlSections)
  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.DirectorySecurity.#ctor*
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity.DirectorySecurity
