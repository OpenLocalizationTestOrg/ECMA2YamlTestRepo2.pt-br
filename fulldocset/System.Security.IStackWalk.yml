### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Gerencia a movimentação da pilha que determina se todos os chamadores na pilha de chamadas têm as permissões necessárias para acessar um recurso protegido."
  remarks: "Código parcialmente confiável sempre apresenta um risco de segurança. Às vezes, podem ser manipulado para executar ações em nome de um código mal-intencionado que não tem permissão para acessar um recurso. Dessa forma, o código mal-intencionado pode alcançar maior acesso de segurança que ele deve ter permissão.       O common language runtime ajuda a proteger o código gerenciado contra esses ataques executando um exame da pilha em todas as chamadas. A movimentação da pilha requer que todo o código na pilha de chamadas tem permissão para acessar um recurso protegido. Porque o código de tentativa de ataque sempre será em algum lugar na pilha de chamadas, será possível exceder suas próprias permissões de segurança."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Declara que o código de chamada pode acessar o recurso identificado pelo objeto de permissão atual, mesmo que os chamadores mais acima na pilha não recebeu permissão para acessar o recurso."
  remarks: "Chamar Assert interrompe a verificação de permissão chamadores mais acima na pilha de chamadas. Portanto, mesmo se esses chamadores não tem as permissões necessárias, eles ainda podem acessar recursos. Uma asserção é eficaz somente se o código que chama Assert passa na verificação de segurança para a permissão que está declarando.       Uma chamada para Assert é eficaz até que o código de chamada retorna ao chamador ou uma chamada subsequente para Assert renderiza a declaração anterior ineficazes. Além disso, <xref:System.Security.CodeAccessPermission.RevertAssert%2A>ou <xref:System.Security.CodeAccessPermission.RevertAll%2A>Remove uma asserção pendente.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Assert é ignorado para uma permissão concedida não porque uma solicitação de permissão não terá êxito. No entanto, se inferior na pilha de chamadas de código chama <xref:System.Security.IStackWalk.Demand%2A>para essa permissão, um <xref:System.Security.SecurityException>é gerada quando a movimentação da pilha atinge o código que tentou chamar Assert.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Isso acontece porque o código que chamou Assert não foi concedido a permissão, mesmo que tentou Assert-lo.      > [!CAUTION] > Como chamar Assert remove o requisito de que todo o código da cadeia de chamada deve ter permissão para acessar o recurso especificado, ele pode abrir vulnerabilidades de segurança se usado incorretamente ou inadequadamente. Portanto, ele deve ser usado com cuidado."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O código de chamada não tem <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina o tempo de execução se todos os chamadores na pilha de chamadas tiverem a permissão especificada pelo objeto de permissão atual."
  remarks: "Normalmente, esse método é usado pelas bibliotecas seguras para garantir que os chamadores tem permissão para acessar um recurso. Por exemplo, uma classe de arquivo em uma biblioteca de classe seguro chama procura necessários <xref:System.Security.Permissions.FileIOPermission>antes de executar uma operação de arquivo solicitada pelo chamador.</xref:System.Security.Permissions.FileIOPermission>       As permissões do código que chama esse método não são examinadas; a seleção começa o chamador imediato do código e continua na pilha. Demanda é realizada somente se nenhuma <xref:System.Security.SecurityException>é gerado.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Um chamador superior na pilha de chamadas não tem a permissão especificada pelo objeto de permissão atual.       - ou - chamou um chamador na pilha de chamadas <xref:System.Security.IStackWalk.Deny*>no objeto da permissão atual.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Faz com que cada <xref:System.Security.IStackWalk.Demand*>para o objeto atual que passa pelo código de chamada falhe.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Esse método impede que os chamadores mais acima na pilha de chamadas acessando o recurso protegido por meio do código que chama esse método, mesmo que os chamadores tiverem permissão para acessá-lo. A pilha de chamadas é representada geralmente como crescimento para baixo, para que os métodos superiores na pilha de chamadas chamam métodos inferior na pilha de chamadas.       Deny pode limitar a responsabilidade do programador ou ajudar a evitar vulnerabilidades de segurança acidental, pois ajuda a impedir que o método que chama Deny sejam usados para acessar o recurso protegido pela permissão negada. Se um método chama negar uma permissão e se um <xref:System.Security.IStackWalk.Demand%2A>para essa permissão é invocado por um chamador inferior na pilha de chamadas, essa verificação de segurança falharão quando atingir a negar.</xref:System.Security.IStackWalk.Demand%2A>       Negar é ignorado para uma permissão concedida não porque uma solicitação de permissão não terá êxito."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Faz com que cada <xref:System.Security.IStackWalk.Demand*>para todos os objetos, exceto o atual que passa pelo código de chamada falhe, mesmo se superior na pilha de chamadas de código tem permissão para acessar outros recursos.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly é semelhante ao <xref:System.Security.IStackWalk.Deny%2A>, ambos causam movimentações de pilha falha em caso contrário, eles conseguirão.</xref:System.Security.IStackWalk.Deny%2A> A diferença é que <xref:System.Security.IStackWalk.Deny%2A>Especifica permissões que fará com que a pilha de percorrer falha, mas PermitOnly Especifica as permissões somente que fazem com que a movimentação da pilha falha.</xref:System.Security.IStackWalk.Deny%2A> Chame este método para garantir que seu código pode ser usado para acessar somente os recursos especificados.       PermitOnly é ignorado para uma permissão concedida não porque uma solicitação de permissão não terá êxito. No entanto, se o código inferior na chamada de pilha mais tarde chamadas <xref:System.Security.IStackWalk.Demand%2A>para essa permissão, um <xref:System.Security.SecurityException>é gerada quando a movimentação da pilha atinge o código que tentou chamar PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Isso ocorre porque o código que chamou PermitOnly não recebeu a permissão, mesmo que ela chamou PermitOnly para essa permissão. A pilha de chamadas é representada geralmente como crescimento para baixo, para que os métodos superiores na pilha de chamadas chamam métodos inferior na pilha de chamadas."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
