### YamlMime:ManagedReference
items:
- uid: System.Collections.Hashtable
  id: Hashtable
  children:
  - System.Collections.Hashtable.#ctor
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  - System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  - System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.Add(System.Object,System.Object)
  - System.Collections.Hashtable.Clear
  - System.Collections.Hashtable.Clone
  - System.Collections.Hashtable.comparer
  - System.Collections.Hashtable.Contains(System.Object)
  - System.Collections.Hashtable.ContainsKey(System.Object)
  - System.Collections.Hashtable.ContainsValue(System.Object)
  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  - System.Collections.Hashtable.Count
  - System.Collections.Hashtable.EqualityComparer
  - System.Collections.Hashtable.GetEnumerator
  - System.Collections.Hashtable.GetHash(System.Object)
  - System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.hcp
  - System.Collections.Hashtable.IsFixedSize
  - System.Collections.Hashtable.IsReadOnly
  - System.Collections.Hashtable.IsSynchronized
  - System.Collections.Hashtable.Item(System.Object)
  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  - System.Collections.Hashtable.Keys
  - System.Collections.Hashtable.OnDeserialization(System.Object)
  - System.Collections.Hashtable.Remove(System.Object)
  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - System.Collections.Hashtable.SyncRoot
  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Hashtable.Values
  langs:
  - csharp
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
  type: Class
  summary: "Representa uma coleção de pares chave/valor que são organizados com base no código hash da chave.       Para procurar o código-fonte do .NET Framework para este tipo, consulte o [fonte de referência](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)."
  remarks: "> [!NOTE]> Para exibir o código-fonte do .NET Framework para este tipo, consulte o [fonte de referência](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd). Percorra o código-fonte online, baixe a referência para exibição offline e percorrer as fontes (incluindo atualizações e patches) durante a depuração; consulte [instruções](http://referencesource.microsoft.com/).       Cada elemento é um par chave/valor armazenado em um <xref:System.Collections.DictionaryEntry>objeto.</xref:System.Collections.DictionaryEntry> Uma chave não pode ser `null`, mas pode ser um valor.       Os objetos usados como chaves por uma tabela de hash são necessárias para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>método (ou o <xref:System.Collections.IHashCodeProvider>interface) e o <xref:System.Object.Equals%2A?displayProperty=fullName>método (ou o <xref:System.Collections.IComparer>interface).</xref:System.Collections.IComparer> </xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> A implementação de métodos e interfaces deve lidar com diferenciação de maiusculas e minúsculas do mesmo modo; Caso contrário, a tabela de hash pode funcionar incorretamente. Por exemplo, ao criar uma tabela de hash, você deve usar o <xref:System.Collections.CaseInsensitiveHashCodeProvider>classe (ou qualquer maiusculas de minúsculas <xref:System.Collections.IHashCodeProvider>implementação) com o <xref:System.Collections.CaseInsensitiveComparer>classe (ou qualquer maiusculas de minúsculas <xref:System.Collections.IComparer>implementação).</xref:System.Collections.IComparer> </xref:System.Collections.CaseInsensitiveComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.CaseInsensitiveHashCodeProvider>       Além disso, esses métodos devem produzir os mesmos resultados quando chamado com os mesmos parâmetros, enquanto a chave existe na tabela de hash. Uma alternativa é usar um construtor de tabela de hash com um <xref:System.Collections.IEqualityComparer>parâmetro.</xref:System.Collections.IEqualityComparer> Se a igualdade de chave foram igualdade de referência simplesmente, a implementação herdada do <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>seria suficiente.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Objetos de chave devem ser imutáveis, desde que eles são usados como chaves na tabela de hash.       Quando um elemento é adicionado à tabela de hash, o elemento é colocado em um recipiente com base no código hash da chave. Pesquisas subsequentes da chave usam o código hash da chave para pesquisar em apenas um bucket específico, reduzindo o número de comparações de chave necessários para localizar um elemento substancialmente.       O fator de carga de uma tabela de hash determina a taxa máxima de elementos para buckets. Fatores de menor carga causam vezes mais rápido médio pesquisa às custas de maior consumo de memória. O fator de carga padrão de 1.0 geralmente fornece o melhor equilíbrio entre a velocidade e tamanho. Um fator de carga diferentes também pode ser especificado quando a tabela de hash é criada.       À medida que elementos são adicionados a uma tabela de hash, o fator de carga real da tabela de hash aumenta. Quando o fator de carga real atinge o fator de carga especificado, o número de buckets na tabela de hash é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes de tabela de hash.       Cada objeto de chave da tabela de hash deve fornecer sua própria função de hash, que pode ser acessada por meio da chamada <xref:System.Collections.Hashtable.GetHash%2A>.</xref:System.Collections.Hashtable.GetHash%2A> No entanto, qualquer objeto que implementa <xref:System.Collections.IHashCodeProvider>pode ser passado para um construtor de tabela de hash, e essa função hash é usada para todos os objetos na tabela.</xref:System.Collections.IHashCodeProvider>       A capacidade de uma tabela de hash é o número de elementos que pode manter a tabela de hash. Como os elementos são adicionados a uma tabela de hash, a capacidade é aumentada automaticamente conforme necessário por meio de realocação.       Para objetos de tabela de hash muito grandes, você pode aumentar a capacidade máxima para 2 bilhões de elementos em um sistema de 64 bits definindo o `enabled` atributo do elemento de configuração para `true` no ambiente de tempo de execução.       O `foreach` instrução de linguagem c# (`For Each` no Visual Basic) retorna um objeto do tipo dos elementos na coleção. Como cada elemento da tabela de hash é um par chave/valor, o tipo de elemento não é o tipo de chave ou o tipo do valor. Em vez disso, o tipo de elemento é <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Por exemplo: [!code-cpp [System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)][!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)][!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb) ] o `foreach` instrução é um wrapper em torno de enumerador, que só permite ler, gravar não à coleção.           Como a serialização e desserialização de um enumerador para uma tabela de hash pode fazer com que os elementos para se tornar reordenadas, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A>      > [!NOTE] > Porque as chaves podem ser herdadas e seu comportamento é alterado, a exclusividade absoluta não pode ser garantida pelo comparações que usam o <xref:System.Type.Equals%2A>método.</xref:System.Type.Equals%2A>"
  example:
  - "The following example shows how to create, initialize and perform various functions to a Hashtable and how to print out its keys and values.  \n  \n [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/cpp/t-system.collections.has_2.cpp)]\n [!code-cs[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/csharp/t-system.collections.has_2.cs)]\n [!code-vb[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/visualbasic/t-system.collections.has_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor
  id: '#ctor'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial padrão, carregar fator, provedor de código de hash e comparação."
  remarks: "Capacidade de uma tabela de hash é usada para calcular o número ideal de buckets de tabela de hash com base no fator de carga. A capacidade é aumentada automaticamente conforme necessário.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é uma operação de (1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_4_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_4_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_4_1.vb)]"
  syntax:
    content: public Hashtable ();
    parameters: []
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando os elementos do dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. O novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e usa o fator de carga padrão, o provedor de código de hash e o comparador."
  remarks: "A capacidade inicial é definida como o número de elementos no dicionário de origem. A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Os elementos da nova <xref:System.Collections.Hashtable>são classificados na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é um O (`n`) operação, onde `n` é o número de elementos de `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.has_1_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.has_1_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.has_1_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto a ser copiado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial padrão e carregar fator e especificado <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "Capacidade de uma tabela de hash é usada para calcular o número ideal de buckets de tabela de hash com base no fator de carga. A capacidade é aumentada automaticamente conforme necessário.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O <xref:System.Collections.IEqualityComparer>objeto inclui o provedor de código de hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é usado no <xref:System.Collections.Hashtable>construtor, os objetos usados como chaves no <xref:System.Collections.Hashtable>objeto não é necessário substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.</xref:System.Collections.IEqualityComparer>       Este construtor é uma operação de (1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_5_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_5_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_5_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o provedor de código de hash e o comparador para usar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão e o comparador padrão. O provedor de código de hash padrão é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador padrão é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> usando a capacidade inicial especificada e o fator de carga padrão, o provedor de código de hash e comparador de classe."
  remarks: "Especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é um O (`n`) operação, onde `n` é `capacity`."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.has_2_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.has_2_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.has_2_1.vb)]"
  syntax:
    content: public Hashtable (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto pode conter inicialmente."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando os elementos do dicionário especificado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. O novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e usa o fator de carga padrão e especificado <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "A capacidade inicial é definida como o número de elementos no dicionário de origem. A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O <xref:System.Collections.IEqualityComparer>objeto inclui o provedor de código de hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é usado no <xref:System.Collections.Hashtable>construtor, os objetos usados como chaves no <xref:System.Collections.Hashtable>objeto não é necessário substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.</xref:System.Collections.IEqualityComparer>       Os elementos da nova <xref:System.Collections.Hashtable>são classificados na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é um O (`n`) operação, onde `n` é o número de elementos de `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/81cd87de-02b7-42cc-8fdd-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/81cd87de-02b7-42cc-8fdd-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/81cd87de-02b7-42cc-8fdd-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto a ser copiado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o provedor de código de hash e o comparador para usar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão e o comparador padrão. O provedor de código de hash padrão é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador padrão é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  id: '#ctor(System.Collections.IDictionary,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando os elementos do dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. O novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e usa o fator de carga especificado e o provedor de código de hash padrão e o comparador."
  remarks: "A capacidade inicial é definida como o número de elementos no dicionário de origem. A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória. Um fator de carga de 1,0 é o melhor equilíbrio entre a velocidade e tamanho.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Os elementos da nova <xref:System.Collections.Hashtable>são classificados na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é um O (`n`) operação, onde `n` é o número de elementos de `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/fb1cfbc8-7454-4619-a6e7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/fb1cfbc8-7454-4619-a6e7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/fb1cfbc8-7454-4619-a6e7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto a ser copiado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo entre 0,1 e 1,0 é multiplicado pelo valor padrão que fornece o melhor desempenho. O resultado é a taxa máxima de elementos para buckets."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>é menor que 0,1.       - ou - <code>loadFactor</code> é maior do que 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial padrão e carregar fator e o provedor de código de hash especificado e o comparador."
  remarks: "Capacidade de uma tabela de hash é usada para calcular o número ideal de buckets de tabela de hash com base no fator de carga. A capacidade é aumentada automaticamente conforme necessário.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O provedor de código personalizado de hash e o comparador personalizado habilitar cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.       Este construtor é uma operação de (1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/1ff65986-0234-4702-94b7-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/1ff65986-0234-4702-94b7-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/1ff65986-0234-4702-94b7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> códigos de objeto que fornece o hash de todas as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a ser usado para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o comparador padrão, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial especificada e <xref:System.Collections.IEqualityComparer>e o fator de carga padrão.</xref:System.Collections.IEqualityComparer>"
  remarks: "Especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O <xref:System.Collections.IEqualityComparer>objeto inclui o provedor de código de hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é usado no <xref:System.Collections.Hashtable>construtor, os objetos usados como chaves no <xref:System.Collections.Hashtable>não precisa substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.</xref:System.Collections.IEqualityComparer>       Este construtor é um O (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/5067e9ac-cd98-4da8-9418-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/5067e9ac-cd98-4da8-9418-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/5067e9ac-cd98-4da8-9418-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto pode conter inicialmente."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o provedor de código de hash e o comparador para usar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão e o comparador padrão. O provedor de código de hash padrão é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador padrão é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial especificada e carregar fator e o provedor de código de hash padrão e o comparador."
  remarks: "Especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória. Um fator de carga de 1,0 é o melhor equilíbrio entre a velocidade e tamanho.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é um O (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/m-system.collections.has_8_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/m-system.collections.has_8_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/m-system.collections.has_8_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto pode conter inicialmente."
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo entre 0,1 e 1,0 é multiplicado pelo valor padrão que fornece o melhor desempenho. O resultado é a taxa máxima de elementos para buckets."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero.       - ou - <code>loadFactor</code> é menor que 0,1.       - ou - <code>loadFactor</code> é maior do que 1.0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>capacity</code>está causando um estouro."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe que pode ser serializado usando especificado <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> e <xref:System.Runtime.Serialization.StreamingContext>objetos.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Capacidade de uma tabela de hash é usada para calcular o número ideal de buckets de tabela de hash com base no fator de carga. A capacidade é aumentada automaticamente conforme necessário.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Como a serialização e desserialização de um enumerador para um <xref:System.Collections.Hashtable>pode fazer com que os elementos para se tornar reordenadas, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Um <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto que contém as informações necessárias para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Um <xref:System.Runtime.Serialization.StreamingContext>objeto que contém a origem e destino do fluxo serializado associado a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando os elementos do dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. O novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e usa o fator de carga padrão e o provedor de código de hash especificado e o comparador. Esta API está obsoleta. Para obter uma alternativa, consulte &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;."
  remarks: "A capacidade inicial é definida como o número de elementos no dicionário de origem. A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O provedor de código personalizado de hash e o comparador personalizado habilitar cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.       Os elementos da nova <xref:System.Collections.Hashtable>são classificados na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é um O (`n`) operação, onde `n` é o número de elementos de `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/9a30e378-7c34-4854-b12f-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/9a30e378-7c34-4854-b12f-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/9a30e378-7c34-4854-b12f-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto a ser copiado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> códigos de objeto que fornece o hash de todas as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a ser usado para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o comparador padrão, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando os elementos do dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. O novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e usa o fator de carga especificado e <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "A capacidade inicial é definida como o número de elementos no dicionário de origem. A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória. Um fator de carga de 1,0 é o melhor equilíbrio entre a velocidade e tamanho.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O <xref:System.Collections.IEqualityComparer>objeto inclui o provedor de código de hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é usado no <xref:System.Collections.Hashtable>construtor, os objetos usados como chaves no <xref:System.Collections.Hashtable>objeto não é necessário substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.</xref:System.Collections.IEqualityComparer>       Os elementos da nova <xref:System.Collections.Hashtable>são classificados na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é um O (`n`) operação, onde `n` é o número de elementos de `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/a92f83be-9de4-470a-8cbb-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/a92f83be-9de4-470a-8cbb-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/a92f83be-9de4-470a-8cbb-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto a ser copiado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo entre 0,1 e 1,0 é multiplicado pelo valor padrão que fornece o melhor desempenho. O resultado é a taxa máxima de elementos para buckets."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o provedor de código de hash e o comparador para usar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão e o comparador padrão. O provedor de código de hash padrão é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador padrão é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>é menor que 0,1.       - ou - <code>loadFactor</code> é maior do que 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial especificada, o provedor de código de hash, comparador e o fator de carga padrão."
  remarks: "Especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O provedor de código personalizado de hash e o comparador personalizado habilitar cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.       Este construtor é um O (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/2154dba0-3cc6-41f7-aa9b-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/2154dba0-3cc6-41f7-aa9b-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/2154dba0-3cc6-41f7-aa9b-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto pode conter inicialmente."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> códigos de objeto que fornece o hash de todas as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a ser usado para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o comparador padrão, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial especificada, o fator de carga e <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "Especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória. Um fator de carga de 1,0 é o melhor equilíbrio entre a velocidade e tamanho.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O <xref:System.Collections.IEqualityComparer>objeto inclui o provedor de código de hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é usado no <xref:System.Collections.Hashtable>construtor, os objetos usados como chaves no <xref:System.Collections.Hashtable>não precisa substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.</xref:System.Collections.IEqualityComparer>       Este construtor é um O (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/30b60c47-7bce-44a2-8d17-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/30b60c47-7bce-44a2-8d17-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/30b60c47-7bce-44a2-8d17-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto pode conter inicialmente."
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo entre 0,1 e 1,0 é multiplicado pelo valor padrão que fornece o melhor desempenho. O resultado é a taxa máxima de elementos para buckets."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o provedor de código de hash e o comparador para usar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão e o comparador padrão. O provedor de código de hash padrão é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador padrão é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero.       - ou - <code>loadFactor</code> é menor que 0,1.       - ou - <code>loadFactor</code> é maior do que 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando os elementos do dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. O novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e usa o fator de carga especificado, o provedor de código de hash e o comparador."
  remarks: "A capacidade inicial é definida como o número de elementos no dicionário de origem. A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória. Um fator de carga de 1,0 é o melhor equilíbrio entre a velocidade e tamanho.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves de <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O provedor de código personalizado de hash e o comparador personalizado habilitar cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.       Os elementos da nova <xref:System.Collections.Hashtable>são classificados na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é um O (`n`) operação, onde `n` é o número de elementos de `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/c67b166f-bc6a-49e5-9bd7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/c67b166f-bc6a-49e5-9bd7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/c67b166f-bc6a-49e5-9bd7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto a ser copiado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo entre 0,1 e 1,0 é multiplicado pelo valor padrão que fornece o melhor desempenho. O resultado é a taxa máxima de elementos para buckets."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> códigos de objeto que fornece o hash de todas as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a ser usado para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o comparador padrão, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>é menor que 0,1.       - ou - <code>loadFactor</code> é maior do que 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando a capacidade inicial especificada, carregar fator, provedor de código de hash e comparação."
  remarks: "Especificando a capacidade inicial elimina a necessidade de executar várias operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentado, conforme necessário, com base no fator de carga.       O fator de carga é a taxa máxima de elementos para buckets. Um fator de carga menor significa que a pesquisa mais rápida às custas de maior consumo de memória. Um fator de carga de 1,0 é o melhor equilíbrio entre a velocidade e tamanho.       Quando o fator de carga real atinge o fator de carga especificado, o número de buckets é automaticamente aumentado para o menor número primo maior que duas vezes o número atual de recipientes.       O provedor de código hash dispensa códigos hash para chaves em <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O provedor de código de hash padrão é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Todas as chaves em um <xref:System.Collections.Hashtable>devem ser exclusivos.</xref:System.Collections.Hashtable> O comparador padrão é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O provedor de código personalizado de hash e o comparador personalizado habilitar cenários como fazer pesquisas com cadeias de caracteres de maiusculas e minúsculas.       Este construtor é um O (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/86ed2545-c9ee-4654-a1a4-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/86ed2545-c9ee-4654-a1a4-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/86ed2545-c9ee-4654-a1a4-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto pode conter inicialmente."
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo entre 0,1 e 1,0 é multiplicado pelo valor padrão que fornece o melhor desempenho. O resultado é a taxa máxima de elementos para buckets."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> códigos de objeto que fornece o hash de todas as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o provedor de código de hash padrão, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a ser usado para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para usar o comparador padrão, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero.       - ou - <code>loadFactor</code> é menor que 0,1.       - ou - <code>loadFactor</code> é maior do que 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adiciona um elemento com a chave especificada e o valor para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Uma chave não pode ser `null`, mas pode ser um valor.       Um objeto que não tem nenhuma correlação entre seu estado e seu valor de código de hash, normalmente, não deve ser usado como chave. Por exemplo, objetos de cadeia de caracteres são melhores que objetos de StringBuilder para uso como chaves.       Você também pode usar o <xref:System.Collections.Hashtable.Item%2A>propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no <xref:System.Collections.Hashtable>; por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Item%2A> No entanto, se a chave especificada já existe no <xref:System.Collections.Hashtable>, a definição de <xref:System.Collections.Hashtable.Item%2A>propriedade substitui o valor antigo.</xref:System.Collections.Hashtable.Item%2A> </xref:System.Collections.Hashtable> Por outro lado, o método Add não modifica os elementos existentes.       Se <xref:System.Collections.Hashtable.Count%2A>é menor que a capacidade do <xref:System.Collections.Hashtable>, esse método é uma operação de (1).</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Count%2A> Se a capacidade precisa ser aumentado para acomodar o novo elemento, esse método se torna um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Add Example#1](~/add/codesnippet/cpp/m-system.collections.has_6_1.cpp)]\n [!code-cs[Classic Hashtable.Add Example#1](~/add/codesnippet/csharp/m-system.collections.has_6_1.cs)]\n [!code-vb[Classic Hashtable.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_6_1.vb)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento a ser adicionado."
    - id: value
      type: System.Object
      description: "O valor do elemento a ser adicionado. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Um elemento com a mesma chave já existe no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é somente leitura.       - ou - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clear
  id: Clear
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove todos os elementos do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "<xref:System.Collections.Hashtable.Count%2A>é definido como zero, e referências a outros objetos de elementos da coleção também são liberadas.</xref:System.Collections.Hashtable.Count%2A> A capacidade permanece inalterada.       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.has_10_1.cpp)]\n [!code-vb[Classic Hashtable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_10_1.vb)]\n [!code-cs[Classic Hashtable.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.has_10_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Hashtable.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é somente leitura."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clone
  id: Clone
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cria uma cópia superficial do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Uma cópia superficial de uma coleção copia apenas os elementos da coleção, se eles são tipos de referência ou tipos de valor, mas não copia os objetos que se referem as referências a. As referências na nova coleção apontam para os mesmos objetos que as referências na coleção original apontem para.       Em contraste, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciado por elementos.       O <xref:System.Collections.Hashtable>clone tem a mesma contagem, a mesma capacidade, a mesma <xref:System.Collections.IHashCodeProvider>implementação e a mesma <xref:System.Collections.IComparer>implementação original <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.IComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.Hashtable>       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Uma cópia superficial do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.comparer
  id: comparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o <xref:System.Collections.IComparer>a ser usado para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  remarks: "Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: protected System.Collections.IComparer comparer { get; set; }
    return:
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>a ser usado para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  overload: System.Collections.Hashtable.comparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade é definida como um valor, mas a tabela de hash foi criada usando um <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém uma chave específica."
  remarks: "Contém implementa <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Ele se comporta exatamente como <xref:System.Collections.Hashtable.ContainsKey%2A>.</xref:System.Collections.Hashtable.ContainsKey%2A>       Esse método é uma operação de (1).       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_12_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_12_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave a ser localizado no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um elemento com a chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém uma chave específica."
  remarks: "Esse método se comporta exatamente como <xref:System.Collections.Hashtable.Contains%2A>.</xref:System.Collections.Hashtable.Contains%2A>       Esse método é uma operação de (1).       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_7_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_7_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_7_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave a ser localizado no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um elemento com a chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um valor específico."
  remarks: "Os valores dos elementos do <xref:System.Collections.Hashtable>são comparados com o valor especificado usando o <xref:System.Object.Equals%2A?displayProperty=fullName>método.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.Hashtable>       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_9_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_9_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_9_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O valor a ser localizado no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um elemento com especificado <code> value </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> elementos para um unidimensional <xref:System.Array>instância no índice especificado.</xref:System.Array>"
  remarks: "Os elementos são copiados para o <xref:System.Array>na mesma ordem em que o enumerador que itera por meio de <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Array>       Para copiar somente as chaves de <xref:System.Collections.Hashtable>, use `Hashtable.Keys.CopyTo`.</xref:System.Collections.Hashtable>       Para copiar somente os valores no <xref:System.Collections.Hashtable>, use `Hashtable.Values.CopyTo`.</xref:System.Collections.Hashtable>       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.  \n  \n [!code-cs[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.has_0_1.cs)]\n [!code-vb[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_0_1.vb)]\n [!code-cpp[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.has_0_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino do <xref:System.Collections.DictionaryEntry>objetos copiados do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> O <xref:System.Array>devem ter a indexação com base em zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "O índice de base zero no `array` no qual a cópia começa."
  overload: System.Collections.Hashtable.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       o número de elementos na origem - ou - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é maior que o espaço disponível do <code>arrayIndex</code> até o final do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da fonte de <xref href=&quot;System.Collections.Hashtable&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Count
  id: Count
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o número de pares chave/valor contidos no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "O número de pares chave/valor contidos no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.EqualityComparer
  id: EqualityComparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o <xref:System.Collections.IEqualityComparer>a ser usado para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  remarks: "O <xref:System.Collections.IEqualityComparer>inclui o provedor de código de hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é usado no <xref:System.Collections.Hashtable>construtor, os objetos usados como chaves no <xref:System.Collections.Hashtable>não precisa substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: protected System.Collections.IEqualityComparer EqualityComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>a ser usado para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Hashtable.EqualityComparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade é definida como um valor, mas a tabela de hash foi criada usando um <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> e <xref:System.Collections.IComparer>.</xref:System.Collections.IComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retorna um <xref:System.Collections.IDictionaryEnumerator>que itera por meio de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Portanto, usando `foreach` é recomendada, em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. <xref:System.Collections.IEnumerator.Reset%2A>também traz o enumerador de volta para essa posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição, <xref:System.Collections.IEnumerator.Current%2A>é indefinido.</xref:System.Collections.IEnumerator.Current%2A> Portanto, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A>retornado `false`, <xref:System.Collections.IEnumerator.Current%2A>é indefinido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido pelo <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente e seu comportamento é indefinido.       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de segurança do thread.  Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração.  Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.       Esse método é uma operação de (1).       Como a serialização e desserialização de um enumerador para um <xref:System.Collections.Hashtable>pode fazer com que os elementos para se tornar reordenadas, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  example:
  - "The following example compares the use of GetEnumerator and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable Example#2](~/add/codesnippet/cpp/m-system.collections.has_3_1.cpp)]\n [!code-cs[Classic Hashtable Example#2](~/add/codesnippet/csharp/m-system.collections.has_3_1.cs)]\n [!code-vb[Classic Hashtable Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_3_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Hashtable&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Hashtable.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.GetHash(System.Object)
  id: GetHash(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retorna o código hash para a chave especificada."
  remarks: "Se a tabela de hash foi criada com um determinado <xref:System.Collections.IHashCodeProvider>implementação, esse método usa esse provedor de código hash; caso contrário, ele usa o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>implementação de `key`.</xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider>       Esse método é uma operação de (1)."
  syntax:
    content: protected virtual int GetHash (object key);
    parameters:
    - id: key
      type: System.Object
      description: "O <xref:System.Object>para o qual um código hash a ser retornado.</xref:System.Object>"
    return:
      type: System.Int32
      description: "O código hash para <code> key </code>."
  overload: System.Collections.Hashtable.GetHash*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface e retorna os dados necessários para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Um <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto que contém as informações necessárias para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Um <xref:System.Runtime.Serialization.StreamingContext>objeto que contém a origem e destino do fluxo serializado associado a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A coleção foi modificada."
  platform:
  - net462
- uid: System.Collections.Hashtable.hcp
  id: hcp
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o objeto que pode dispensador códigos hash."
  remarks: "Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: protected System.Collections.IHashCodeProvider hcp { get; set; }
    return:
      type: System.Collections.IHashCodeProvider
      description: "O objeto que pode dispensador códigos hash."
  overload: System.Collections.Hashtable.hcp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade é definida como um valor, mas a tabela de hash foi criada usando um <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  remarks: "Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos após a criação da coleção, mas permite a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Portanto, se forem feitas alterações à coleção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete as alterações.       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um fixa tamanho; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é somente leitura."
  remarks: "Uma coleção que é somente leitura não permite a adição, remoção ou modificação de elementos após a criação da coleção.       Uma coleção que é somente leitura é simplesmente uma coleção com um wrapper que impede a modificação da coleção; Portanto, se forem feitas alterações à coleção subjacente, a coleção somente leitura reflete as alterações.       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é somente leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o acesso para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é sincronizado (thread-safe)."
  remarks: "Um <xref:System.Collections.Hashtable>pode dar suporte a um gravador e a vários leitores simultaneamente.</xref:System.Collections.Hashtable> Para dar suporte a vários autores, todas as operações devem ser feitas por meio de wrapper retornado pelo <xref:System.Collections.Hashtable.Synchronized%2A>método.</xref:System.Collections.Hashtable.Synchronized%2A>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       O exemplo de código a seguir mostra como bloquear a coleção usando o <xref:System.Collections.Hashtable.SyncRoot%2A>durante toda a enumeração: [!code-cpp [clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)][!code-vb[clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)][!code-cs[clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs) ]     </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.has_1_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.has_1_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.has_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se acessar para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é sincronizado (thread-safe); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o valor associado com a chave especificada."
  remarks: "Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: `myCollection[key]`.       Você também pode usar a propriedade do Item para adicionar novos elementos, definindo o valor de uma chave que não existe no <xref:System.Collections.Hashtable>; por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> No entanto, se a chave especificada já existe na <xref:System.Collections.Hashtable>, definindo a propriedade de Item substitui o valor antigo.</xref:System.Collections.Hashtable> Em contraste, o <xref:System.Collections.Hashtable.Add%2A>método não modifica os elementos existentes.</xref:System.Collections.Hashtable.Add%2A>       Uma chave não pode ser `null`, mas pode ser um valor. Para distinguir entre `null` que é retornado porque a chave especificada não foi encontrada e `null` que é retornado porque o valor da chave especificada é `null`, use o <xref:System.Collections.Hashtable.Contains%2A>método ou o <xref:System.Collections.Hashtable.ContainsKey%2A>método para determinar se a chave existe na lista.</xref:System.Collections.Hashtable.ContainsKey%2A> </xref:System.Collections.Hashtable.Contains%2A>       Recuperar o valor dessa propriedade é uma operação de (1); definindo a propriedade também é uma operação de (1).       A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar o <xref:System.Collections.IList.Item%2A>propriedade.</xref:System.Collections.IList.Item%2A> Visual Basic implementa um Item como uma propriedade padrão, que fornece a mesma funcionalidade de indexação."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "A chave cujo valor a ser obtido ou definido."
    return:
      type: System.Object
      description: "O valor associado com a chave especificada. Se a chave especificada não for encontrada, a tentativa de obtê-lo retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, e a tentativa de definir a ele cria um novo elemento usando a chave especificada."
  overload: System.Collections.Hashtable.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A propriedade é definida e o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é somente leitura.       - ou - a propriedade for definida, <code> key </code> não existe na coleção e o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  id: KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Compara a um determinado <xref:System.Object>com uma chave específica no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Object>"
  remarks: "Se a tabela de hash foi criada com um determinado <xref:System.Collections.IComparer>implementação, esse método usa desse comparador; o que é, <xref:System.Collections.IComparer.Compare%2A>(`item`, `key`).</xref:System.Collections.IComparer.Compare%2A> </xref:System.Collections.IComparer> Caso contrário, ele usa `item.Equals(key)`.       Esse método é uma operação de (1)."
  syntax:
    content: protected virtual bool KeyEquals (object item, object key);
    parameters:
    - id: item
      type: System.Object
      description: "O <xref:System.Object>para comparar com `key`.</xref:System.Object>"
    - id: key
      type: System.Object
      description: "A chave no <xref href=&quot;System.Collections.Hashtable&quot;> </xref> para comparar com `item`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Hashtable.KeyEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>item</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Keys
  id: Keys
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um <xref:System.Collections.ICollection>que contém as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "A ordem das chaves no <xref:System.Collections.ICollection>não for especificado, mas é a mesma ordem que os valores associados a <xref:System.Collections.ICollection>retornado pelo <xref:System.Collections.Hashtable.Values%2A>método.</xref:System.Collections.Hashtable.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       Retornado <xref:System.Collections.ICollection>não é uma cópia estática; em vez disso, o que <xref:System.Collections.ICollection>faz referência a chaves no original <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Portanto, as alterações para o <xref:System.Collections.Hashtable>continuam a ser refletido em <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Hashtable>       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém as chaves de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> de interface e gera o evento de desserialização quando a desserialização foi concluída."
  remarks: "Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Como a serialização e desserialização de um enumerador para um <xref:System.Collections.Hashtable>pode fazer com que os elementos para se tornar reordenadas, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "A origem do evento de desserialização."
  overload: System.Collections.Hashtable.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto associado atual <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é inválido."
  platform:
  - net462
- uid: System.Collections.Hashtable.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove o elemento com a chave especificada do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Se o <xref:System.Collections.Hashtable>não contém um elemento com a chave especificada, o <xref:System.Collections.Hashtable>permanece inalterado.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Nenhuma exceção é lançada.       Esse método é uma operação de (1)."
  example:
  - "The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.has_13_1.cpp)]\n [!code-cs[Classic Hashtable.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.has_13_1.cs)]\n [!code-vb[Classic Hashtable.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_13_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento a ser removido."
  overload: System.Collections.Hashtable.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é somente leitura.       - ou - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  id: Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retorna um wrapper (thread-safe) sincronizado para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "O método Synchronized é thread-safe para vários leitores e gravadores. Além disso, o wrapper sincronizado garante que exista apenas um gravador de gravar em um momento.       Enumerar através de uma coleção intrinsecamente não é um procedimento de thread-safe. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       O exemplo de código a seguir mostra como bloquear a coleção usando o <xref:System.Collections.Hashtable.SyncRoot%2A>durante toda a enumeração: [!code-cpp [clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)][!code-vb[clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)][!code-cs[clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs) ] esse método é uma operação de (1).    </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.has_11_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.has_11_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_11_2.vb)]"
  syntax:
    content: public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);
    parameters:
    - id: table
      type: System.Collections.Hashtable
      description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> para sincronizar."
    return:
      type: System.Collections.Hashtable
      description: "Um sincronizado (thread-safe) wrapper para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.SyncRoot
  id: SyncRoot
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um objeto que pode ser usado para sincronizar o acesso a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Para criar uma versão sincronizada do <xref:System.Collections.Hashtable>, use o <xref:System.Collections.Hashtable.Synchronized%2A>método.</xref:System.Collections.Hashtable.Synchronized%2A> </xref:System.Collections.Hashtable> No entanto, as classes derivadas podem fornecer sua própria versão sincronizada de <xref:System.Collections.Hashtable>usando a propriedade SyncRoot.</xref:System.Collections.Hashtable> O código de sincronização deve executar operações no SyncRoot do <xref:System.Collections.Hashtable>, não diretamente no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Isso garante que a operação correta de coleções que são derivados de outros objetos. Especificamente, ele mantém uma sincronização adequada com outros threads que podem ser simultaneamente modificando o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       O exemplo de código a seguir mostra como bloquear a coleção usando o SyncRoot durante toda a enumeração: [!code-cpp [clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)][!code-vb[clássico Hashtable.IsSynchronized exemplo n º&2;](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)][!code-cs[clássico Hashtable.IsSynchronized exemplo n º&2;    ](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser usado para sincronizar o acesso a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retorna um enumerador que itera por meio de uma coleção."
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Portanto, usando `foreach` é recomendada, em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. <xref:System.Collections.IEnumerator.Reset%2A>também traz o enumerador de volta para essa posição.</xref:System.Collections.IEnumerator.Reset%2A> AT isso posicionar, chamando <xref:System.Collections.IEnumerator.Current%2A>lança uma exceção.</xref:System.Collections.IEnumerator.Current%2A> Portanto, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A>retornado `false`, chamar <xref:System.Collections.IEnumerator.Current%2A>lança uma exceção.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido pelo <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador pode ser invalidado e a próxima chamada ou <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>gera um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>retorna o elemento que está definido como, mesmo se o enumerador já é invalidado.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       Esse método é uma operação de (1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>que pode ser usado para iterar pela coleção.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Values
  id: Values
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um <xref:System.Collections.ICollection>que contém os valores de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "A ordem dos valores no <xref:System.Collections.ICollection>não for especificado, mas é a mesma ordem que as chaves associadas no <xref:System.Collections.ICollection>retornado pelo <xref:System.Collections.Hashtable.Keys%2A>método.</xref:System.Collections.Hashtable.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       Retornado <xref:System.Collections.ICollection>não é uma cópia estática; em vez disso, o que <xref:System.Collections.ICollection>faz referência a valores no original <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Portanto, as alterações para o <xref:System.Collections.Hashtable>continuam a ser refletido em <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Hashtable>       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém os valores de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Hashtable.#ctor
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
- uid: System.Collections.Hashtable.Clear
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
- uid: System.Collections.Hashtable.Clone
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
- uid: System.Collections.Hashtable.comparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
- uid: System.Collections.Hashtable.Contains(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Hashtable.Count
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Hashtable.GetHash(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Hashtable.hcp
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
- uid: System.Collections.Hashtable.Keys
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
- uid: System.Collections.Hashtable.Remove(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.Hashtable.SyncRoot
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Hashtable.Values
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
- uid: System.Collections.Hashtable.#ctor*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable.Hashtable
- uid: System.Collections.Hashtable.Add*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add
  nameWithType: Hashtable.Add
- uid: System.Collections.Hashtable.Clear*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear
  nameWithType: Hashtable.Clear
- uid: System.Collections.Hashtable.Clone*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone
  nameWithType: Hashtable.Clone
- uid: System.Collections.Hashtable.comparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
- uid: System.Collections.Hashtable.Contains*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains
  nameWithType: Hashtable.Contains
- uid: System.Collections.Hashtable.ContainsKey*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey
  nameWithType: Hashtable.ContainsKey
- uid: System.Collections.Hashtable.ContainsValue*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue
  nameWithType: Hashtable.ContainsValue
- uid: System.Collections.Hashtable.CopyTo*
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo
  nameWithType: Hashtable.CopyTo
- uid: System.Collections.Hashtable.Count*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator
  nameWithType: Hashtable.GetEnumerator
- uid: System.Collections.Hashtable.GetHash*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash
  nameWithType: Hashtable.GetHash
- uid: System.Collections.Hashtable.GetObjectData*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData
  nameWithType: Hashtable.GetObjectData
- uid: System.Collections.Hashtable.hcp*
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item
  nameWithType: Hashtable.Item
- uid: System.Collections.Hashtable.KeyEquals*
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals
  nameWithType: Hashtable.KeyEquals
- uid: System.Collections.Hashtable.Keys*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
- uid: System.Collections.Hashtable.OnDeserialization*
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization
  nameWithType: Hashtable.OnDeserialization
- uid: System.Collections.Hashtable.Remove*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove
  nameWithType: Hashtable.Remove
- uid: System.Collections.Hashtable.Synchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized
  nameWithType: Hashtable.Synchronized
- uid: System.Collections.Hashtable.SyncRoot*
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Hashtable.Values*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
