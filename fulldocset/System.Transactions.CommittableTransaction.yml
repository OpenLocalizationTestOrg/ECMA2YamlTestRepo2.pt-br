### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "Descreve uma transação pode ser confirmada."
  remarks: "A classe CommittableTransaction fornece uma maneira explícita para aplicativos usar uma transação, em vez de usar o <xref:System.Transactions.TransactionScope>classe implicitamente.</xref:System.Transactions.TransactionScope> Ao contrário de <xref:System.Transactions.TransactionScope>classe, o gravador de aplicativos precisa chamar especificamente a <xref:System.Transactions.CommittableTransaction.Commit%2A>e <xref:System.Transactions.Transaction.Rollback%2A>métodos para confirmar ou anular a transação.</xref:System.Transactions.Transaction.Rollback%2A> </xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.TransactionScope> No entanto, somente o criador de uma transação pode confirmar a transação. Portanto, as cópias de uma transação pode ser confirmada, obtidos por meio de <xref:System.Transactions.Transaction.Clone%2A>método não são pode ser confirmada.</xref:System.Transactions.Transaction.Clone%2A>      > [!NOTE] > É recomendável que você crie transações implícitas usando o <xref:System.Transactions.TransactionScope>de classe, para que o contexto de transação de ambiente é gerenciado automaticamente para você.</xref:System.Transactions.TransactionScope> Você também deve usar o <xref:System.Transactions.TransactionScope>e <xref:System.Transactions.DependentTransaction>classe para aplicativos que exigem o uso da mesma transação em várias chamadas de função ou várias chamadas de thread.</xref:System.Transactions.DependentTransaction> </xref:System.Transactions.TransactionScope> Para obter mais informações sobre esse modelo, consulte o [implementando um implícita transação usando o escopo da transação](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tópico.       Criar um CommittableTransaction não define automaticamente a transação de ambiente, que é a transação que é executado em seu código. Você pode obter ou definir a transação de ambiente chamando estático <xref:System.Transactions.Transaction.Current%2A>propriedade global <xref:System.Transactions.Transaction>objeto.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> Para obter mais informações sobre transações de ambiente, consulte a seção &quot;Gerenciando transações fluxo usando TransactionScopeOption&quot; o [implementando um implícita transação usando o escopo da transação](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tópico. Se a transação de ambiente não for definida, qualquer operação em um Gerenciador de recursos não é parte da transação. Você precisa definir explicitamente e redefinir a transação de ambiente, para garantir que os gerenciadores de recursos operam sob o contexto de transação à direita.       Até que um CommittableTransaction foi confirmada, todos os recursos envolvidos na transação ainda são bloqueados.       Um objeto CommittableTransaction não pode ser reutilizado. Depois que ele tiver sido confirmado ou revertido, ele não pode ser usado novamente em uma transação ou definido como o contexto de transação de ambiente atual."
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Uma tentativa de criar uma transação em Windows 98, Windows 98 Segunda edição ou Windows Millennium Edition."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> classe com especificado <code> timeout </code> valor."
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A quantidade máxima de tempo que a transação pode existir, antes de ela será anulada."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Uma tentativa de criar uma transação em Windows 98, Windows 98 Segunda edição ou Windows Millennium Edition."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> classe com as opções de transação especificado."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "Um <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> estrutura que descreve as opções de transação a ser usado para a nova transação."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Uma tentativa de criar uma transação em Windows 98, Windows 98 Segunda edição ou Windows Millennium Edition."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>não é válido."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Começa uma tentativa de confirmar a transação de forma assíncrona."
  remarks: "Esse método retorna imediatamente, antes da transação foi concluída. A transação e confirmações em um thread diferente e o `asyncCallback` delegado é invocado quando ele for concluído. Depois que este método é chamado, você não recebe o resultado da transação até que você chame <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</xref:System.Transactions.CommittableTransaction.EndCommit%2A>      > [!NOTE] > O processo de confirmação pode concluído de forma síncrona dentro esta chamada de método."
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "O <xref:System.AsyncCallback>delegado é invocado quando a transação seja concluída.</xref:System.AsyncCallback> Esse parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, caso em que o aplicativo não é notificado da conclusão da transação. Em vez disso, o aplicativo deve usar o <xref:System.IAsyncResult>interface para verificar a conclusão e aguarde adequadamente, ou chame <xref:System.Transactions.CommittableTransaction.EndCommit*>para aguardar a conclusão.</xref:System.Transactions.CommittableTransaction.EndCommit*> </xref:System.IAsyncResult>"
    - id: asyncState
      type: System.Object
      description: "Um objeto, que pode conter informações de estado arbitrários, associadas com a confirmação assíncrona. Este objeto é passado para o retorno de chamada e não seja interpretado pelo <xref href=&quot;System.Transactions&quot;> </xref>. Uma referência nula é permitida."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>interface que pode ser usada pelo chamador para verificar o status da operação assíncrona, ou aguardar a conclusão da operação.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Tenta confirmar a transação."
  remarks: "Quando este método é chamado, todos os objetos que foram registrados para participar de transações são pesquisados e independentemente podem indicar seu voto para confirmar ou reverter a transação. Se qualquer participante votos para reverter a transação, ela será revertida e este método lança um <xref:System.Transactions.TransactionException>exceção.</xref:System.Transactions.TransactionException> Essa é uma ocorrência normal de uma transação e seu código deve detectar e processar essas exceções.       Confirmar e <xref:System.Transactions.CommittableTransaction.EndCommit%2A>bloqueado até que a primeira fase de processamento de transação é concluída.</xref:System.Transactions.CommittableTransaction.EndCommit%2A> A primeira fase termina após todos os gerenciadores de recursos e inscrições na transação tem votou o resultado da transação e o <xref:System.Transactions.TransactionManager>decidiu muito tempo confirmar ou anular a transação.</xref:System.Transactions.TransactionManager> A segunda fase de processamento é sempre assíncrona. Portanto, não há nenhuma garantia de que dados confirmados apenas de dentro de uma determinada transação estarão imediatamente disponíveis posteriormente quando não estiver usando outra transação para exibir esses dados.       Como blocos este método até que a primeira fase de processamento de transação seja concluída, seja extremamente cauteloso ao usar esse método em um aplicativo Windows Form (WinForm) ou um deadlock podem ocorrer. Se você chamar esse método dentro de um evento de controle do WinForm (por exemplo, clicar em um botão) e usar o síncrona <xref:System.Windows.Forms.Control.Invoke%2A>método para direcionar o controle para executar algumas tarefas de interface do usuário (por exemplo, altera cores) no meio de processamento de transação, ocorrerá um deadlock.</xref:System.Windows.Forms.Control.Invoke%2A> Isso ocorre porque o <xref:System.Windows.Forms.Control.Invoke%2A>método é síncrono e bloqueia o thread de trabalho até que o thread de interface do usuário de seu trabalho seja concluído.</xref:System.Windows.Forms.Control.Invoke%2A> No entanto, em nosso cenário, o thread de interface do usuário também está esperando para o thread de trabalho confirmar a transação. O resultado é que nenhum é capaz de continuar e o escopo aguardará indefinidamente para conclusão da confirmação. Você deve usar <xref:System.Windows.Forms.Control.BeginInvoke%2A>em vez de <xref:System.Windows.Forms.Control.Invoke%2A>sempre que possível, porque ele é assíncrona e, portanto, menos propenso a deadlocks.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "Confirmação é chamada em uma transação e a transação se torna <xref href=&quot;System.Transactions.TransactionStatus&quot;> </xref>."
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "É chamada de confirmação e a transação será revertida pela primeira vez."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Termina uma tentativa de confirmar a transação de forma assíncrona."
  remarks: "Você deve chamar esse método em que o representante de retorno de chamada especificado como um parâmetro para o <xref:System.Transactions.CommittableTransaction.BeginCommit%2A>método, quando você terminar de qualquer trabalho de limpeza associado com a confirmação assíncrona.</xref:System.Transactions.CommittableTransaction.BeginCommit%2A> Você também pode chamar esse método antecipada sem esperar que o delegado. Se, no momento em que você chamar esse método, a transação não foi concluída, esse método aguarda sua conclusão.      > [!CAUTION] > O <xref:System.IAsyncResult.CompletedSynchronously%2A>propriedade retornada pelo `asyncResult` é sempre `false`, mesmo que a operação é concluída de forma síncrona.</xref:System.IAsyncResult.CompletedSynchronously%2A>       <xref:System.Transactions.CommittableTransaction.Commit%2A>e bloco EndCommit até que a primeira fase de processamento de transação seja concluída.</xref:System.Transactions.CommittableTransaction.Commit%2A> A primeira fase termina após todos os gerenciadores de recursos e inscrições na transação tem votou o resultado da transação e o <xref:System.Transactions.TransactionManager>decidiu muito tempo confirmar ou anular a transação.</xref:System.Transactions.TransactionManager> A segunda fase de processamento é sempre assíncrona. Portanto, não há nenhuma garantia de que dados confirmados apenas de dentro de uma determinada transação estarão imediatamente disponíveis posteriormente quando não estiver usando outra transação para exibir esses dados."
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "O <xref:System.IAsyncResult>objeto associado com a confirmação assíncrona.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>é chamado e a transação será revertida pela primeira vez.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém o objeto fornecido como o último parâmetro do <xref:System.Transactions.CommittableTransaction.BeginCommit*>chamada de método.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "O objeto fornecido como o último parâmetro do <xref:System.Transactions.CommittableTransaction.BeginCommit*>chamada de método.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém um <xref:System.Threading.WaitHandle>que é usado para aguardar uma operação assíncrona concluir.</xref:System.Threading.WaitHandle>"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "Um <xref:System.Threading.WaitHandle>que é usado para aguardar uma operação assíncrona concluir.</xref:System.Threading.WaitHandle>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém uma indicação se a operação de confirmação assíncrona concluída sincronicamente."
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a operação de confirmação assíncrona é concluída de forma síncrona; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Essa propriedade sempre retorna <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> mesmo se a operação é concluída de forma síncrona."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Obtém uma indicação se a operação de confirmação assíncrona foi concluída."
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a operação for concluída; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
