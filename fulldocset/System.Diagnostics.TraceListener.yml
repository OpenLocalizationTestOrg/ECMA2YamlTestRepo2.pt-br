### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceListener
  id: TraceListener
  children:
  - System.Diagnostics.TraceListener.#ctor
  - System.Diagnostics.TraceListener.#ctor(System.String)
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Close
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.String)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  langs:
  - csharp
  name: TraceListener
  nameWithType: TraceListener
  fullName: System.Diagnostics.TraceListener
  type: Class
  summary: "Fornece o <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> classe base para os ouvintes que monitoram o rastreamento e saída de depuração."
  remarks: "For examples of how to implement a TraceListener, see the <xref:System.Diagnostics.DefaultTraceListener>, <xref:System.Diagnostics.TextWriterTraceListener> and the <xref:System.Diagnostics.EventLogTraceListener> classes.  \n  \n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \n  \n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"TextWriterOutput.log\" />  \n        <remove name=\"Default\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n For more information on using configuration files for tracing, see [\\&lt;system.diagnostics\\&gt;](../Topic/%3Csystem.diagnostics%3E%20Element.md)."
  syntax:
    content: 'public abstract class TraceListener : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para uma instância de <xref:System.Diagnostics.TraceListener>.</xref:System.Diagnostics.TraceListener>      | Propriedade | Valor padrão |   |--------------|-------------------|   | Nome | A cadeia de caracteres vazia (&quot;&quot;). | | Recuar | Zero. |   | IndentSize | Quatro espaços. |"
  syntax:
    content: protected TraceListener ();
    parameters: []
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe usando o nome especificado como o ouvinte."
  syntax:
    content: protected TraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Attributes
  id: Attributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém os atributos de ouvinte de rastreamento personalizada definidos no arquivo de configuração do aplicativo."
  remarks: "Classes que herdam o <xref:System.Diagnostics.TraceListener>classe pode adicionar atributos personalizados, substituindo o <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>método e retornar uma matriz de cadeia de caracteres de nomes de atributo personalizado.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> </xref:System.Diagnostics.TraceListener> A propriedade Attributes identifica os atributos personalizados que são referenciados no arquivo de configuração do aplicativo. Por exemplo, no seguinte trecho do arquivo de configuração o <xref:System.Diagnostics.DelimitedListTraceListener>atributo personalizado &quot;delimitador&quot; é referenciado.</xref:System.Diagnostics.DelimitedListTraceListener> Nesse caso, a propriedade Attributes retorna um <xref:System.Collections.Specialized.StringDictionary>que contém a cadeia de caracteres &quot;delimitador&quot;.</xref:System.Collections.Specialized.StringDictionary>      ```   <listeners>     <add name=&quot;delimitedListener&quot;        type=&quot;System.Diagnostics.DelimitedListTraceListener&quot;        delimiter=&quot;:&quot;        initializeData=&quot;delimitedOutput.txt&quot;        traceOutputOptions=&quot;ProcessId, DateTime&quot; />     <remove name=&quot;Default&quot; />   </listeners>   ```Atributos personalizados não referenciados não são enumerados.  Para obter mais informações, consulte o <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>método.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "Um <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref> que contém os atributos personalizados para o ouvinte de rastreamento."
  overload: System.Diagnostics.TraceListener.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Close
  id: Close
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Quando substituído em uma classe derivada, fecha o fluxo de saída para que ele não recebe a saída de rastreamento ou de depuração."
  remarks: "Use este método quando a saída vai para um arquivo, como <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener> Após uma chamada para esse método, você deve reinicializar o objeto."
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose
  id: Dispose
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  remarks: "Chamar Dispose permite que os recursos usados pelo <xref:System.Diagnostics.TraceListener>para ser realocada para outros fins.</xref:System.Diagnostics.TraceListener> Para obter mais informações sobre Dispose, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público <xref:System.Diagnostics.TraceListener.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.Diagnostics.TraceListener.Dispose%2A> `Dispose`invoca o protegido <xref:System.Diagnostics.TraceListener.Dispose%2A>método com o `disposing` parâmetro definido como `true`.</xref:System.Diagnostics.TraceListener.Dispose%2A> <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Diagnostics.TraceListener>referências.</xref:System.Diagnostics.TraceListener> Este método chama o `Dispose` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emite uma mensagem de erro para o ouvinte, você cria ao implementar o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe."
  remarks: "O comportamento padrão é exibir a mensagem especificada em uma caixa de mensagem quando o aplicativo é executado em um modo de interface do usuário e para o <xref:System.Diagnostics.TraceListener>instâncias em um <xref:System.Diagnostics.TraceListenerCollection>coleção.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> Por padrão, a <xref:System.Diagnostics.TraceListenerCollection>coleção tem uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection> Você pode personalizar esse comportamento adicionando um <xref:System.Diagnostics.TraceListener>a ou remover uma da coleção.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem de emissão."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emite um erro de mensagem e uma mensagem de erro detalhada para o ouvinte criar quando você implementa o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe."
  remarks: "O comportamento padrão é exibir a mensagem e a mensagem detalhada em uma caixa de mensagem quando o aplicativo é executado em um modo de interface do usuário e para o <xref:System.Diagnostics.TraceListener>instâncias em um <xref:System.Diagnostics.TraceListenerCollection>coleção.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> Por padrão, a <xref:System.Diagnostics.TraceListenerCollection>coleção tem uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection> Você pode personalizar esse comportamento adicionando um <xref:System.Diagnostics.TraceListener>a ou remover uma da coleção.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem de emissão."
    - id: detailMessage
      type: System.String
      description: "Uma mensagem detalhada de emissão."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Filter
  id: Filter
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém e define o filtro de rastreamento para o ouvinte de rastreamento."
  remarks: "Um filtro de rastreamento pode ser adicionado a um ouvinte de rastreamento para fornecer uma camada de triagem além do fornecido para a origem de rastreamento por comutadores. Por exemplo, o <xref:System.Diagnostics.EventTypeFilter>pode ser adicionado a um ouvinte de rastreamento para controlar os tipos de eventos que são produzidas pelo ouvinte.</xref:System.Diagnostics.EventTypeFilter>  Os ouvintes que são chamados, porque os comutador critérios são atendidos podem consultar seus filtros, se estiver presente, para determinar se um rastreamento deve ser enviado para a saída."
  example:
  - "The following code example shows how to use the Filter property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/p-system.diagnostics.tra_6_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_6_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceFilter Filter { get; set; }
    return:
      type: System.Diagnostics.TraceFilter
      description: "Um objeto derivado de <xref href=&quot;System.Diagnostics.TraceFilter&quot;> </xref> classe base."
  overload: System.Diagnostics.TraceListener.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Flush
  id: Flush
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Quando substituído em uma classe derivada, libera o buffer de saída."
  syntax:
    content: public virtual void Flush ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém os atributos personalizados que suporte o ouvinte de rastreamento."
  remarks: "Retorna a implementação padrão para GetSupportedAttributes `null`."
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom trace listener.  \n  \n [!code-cs[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_22_1.cs)]\n [!code-vb[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_22_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "Uma matriz de cadeia de caracteres, os atributos personalizados que suporte o ouvinte de rastreamento de nomenclatura ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum atributo personalizado."
  overload: System.Diagnostics.TraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nível de recuo."
  remarks: "A propriedade IndentLevel representa o número de vezes que o recuo especificado pelo <xref:System.Diagnostics.TraceListener.IndentSize%2A>propriedade é aplicada.</xref:System.Diagnostics.TraceListener.IndentSize%2A> Essa propriedade é armazenada em cada thread/por-solicitação."
  syntax:
    content: public int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "O nível de recuo. O padrão é zero."
  overload: System.Diagnostics.TraceListener.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentSize
  id: IndentSize
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o número de espaços em um recuo."
  remarks: "A propriedade é armazenada em cada thread/por-solicitação."
  syntax:
    content: public int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "O número de espaços em um recuo. O padrão é quatro espaços."
  overload: System.Diagnostics.TraceListener.IndentSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Defina a operação falhou porque o valor é menor que zero."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  id: IsThreadSafe
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém um valor que indica se o ouvinte de rastreamento é thread safe."
  remarks: "O valor de IsThreadSafe é usado para determinar se deve usar um bloqueio global ao gravar o ouvinte. Se o valor de IsThreadSafe for `false`, o bloqueio global é usado, independentemente do valor de <xref:System.Diagnostics.Trace.UseGlobalLock%2A>.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> O bloqueio global não é usado somente se o valor de IsThreadSafe é `true` e o valor de <xref:System.Diagnostics.Trace.UseGlobalLock%2A>é `false`.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> O comportamento padrão é usar global sempre que a gravação para o ouvinte de bloqueio."
  syntax:
    content: public virtual bool IsThreadSafe { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ouvinte de rastreamento é thread-safe; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.IsThreadSafe*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Name
  id: Name
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define um nome para este <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  remarks: "O nome pode ser usado para organizar e acessar ouvintes em um <xref:System.Diagnostics.TraceListenerCollection>coleção.</xref:System.Diagnostics.TraceListenerCollection>"
  syntax:
    content: public virtual string Name { get; set; }
    return:
      type: System.String
      description: "Um nome para este <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Diagnostics.TraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.NeedIndent
  id: NeedIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define um valor que indica se recuar a saída."
  remarks: '**Observação** o <xref:System.Diagnostics.TraceListener.WriteIndent%2A>método, chamado pelo <xref:System.Diagnostics.DefaultTraceListener>e <xref:System.Diagnostics.TextWriterTraceListener>classes, define o valor da propriedade NeedIndent `false` para evitar mais tarde, recuos desnecessários.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListener.WriteIndent%2A> Você deve definir a propriedade NeedIndent como `true` cada vez que você deseja recuar a saída de rastreamento.'
  syntax:
    content: protected bool NeedIndent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a saída deve ser recuada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.NeedIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o rastreamento de informações, informações de evento e do objeto de dados para a saída específica do ouvinte."
  remarks: "> [!IMPORTANT]> Esse método não se destina a ser chamado diretamente pelo código do aplicativo, mas por membros do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       As gravações de implementação padrão de `eventCache`, `source`, `eventType` e `id` parâmetros no cabeçalho e rodapé do rastreamento. O `data` parâmetro é escrito como o corpo da mensagem de rastreamento. O `ToString` método do objeto de dados é usado para converter o objeto <xref:System.String>.</xref:System.String>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída, normalmente o nome do aplicativo que gerou o evento de rastreamento."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores que especificam o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: data
      type: System.Object
      description: "Os dados de rastreamento para emitir."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de rastreamento, uma matriz de objetos de dados e informações de evento para a saída específica do ouvinte."
  remarks: "> [!IMPORTANT]> Esse método não se destina a ser chamado diretamente pelo código do aplicativo, mas por membros do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A implementação padrão grava os valores de `source`, `eventType` e `id` parâmetros como um cabeçalho. Os objetos de dados são convertidos em cadeias de caracteres usando o `ToString` método de cada objeto. O `eventCache` dados são gravados como um rodapé, a natureza dos dados de saída seja dependente do valor da <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>propriedade.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída, normalmente o nome do aplicativo que gerou o evento de rastreamento."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores que especificam o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: data
      type: System.Object[]
      description: "Uma matriz de objetos para a emissão de dados."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Informações gravações de rastreamento e eventos para a saída específica do ouvinte."
  remarks: "> [!IMPORTANT]> Esse método não se destina a ser chamado diretamente pelo código do aplicativo, mas por membros do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A implementação padrão grava os valores de `source`, `eventType` e `id` parâmetros como um cabeçalho. O `eventCache` dados são gravados como um rodapé, a natureza dos dados de saída seja dependente do valor da <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>propriedade.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída, normalmente o nome do aplicativo que gerou o evento de rastreamento."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores que especificam o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de uma mensagem e informações de evento para a saída específica do ouvinte de rastreamento."
  remarks: "> [!IMPORTANT]> Esse método não se destina a ser chamado diretamente pelo código do aplicativo, mas por membros do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A implementação padrão grava os valores da `source`, `eventType` e `id` parâmetros como um cabeçalho, seguido de `message` dados. O `eventCache` dados são gravados como um rodapé, a natureza dos dados de saída seja dependente do valor da <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>propriedade.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída, normalmente o nome do aplicativo que gerou o evento de rastreamento."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores que especificam o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de rastreamento, uma matriz formatada de objetos e informações de evento para a saída específica do ouvinte."
  remarks: "> [!IMPORTANT]> Esse método não se destina a ser chamado diretamente pelo código do aplicativo, mas por membros do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       A implementação padrão grava os valores de `source`, `eventType` e `id` parâmetros como um cabeçalho. O `args` matriz de objeto é convertido em uma cadeia de caracteres usando o <xref:System.String.Format%2A>método, passando o `format` cadeia de caracteres e `args` matriz para a cadeia de caracteres de formato como a parte de mensagem de rastreamento.</xref:System.String.Format%2A> O `eventCache` dados são gravados como um rodapé, a natureza dos dados de saída seja dependente do valor da <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>propriedade.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída, normalmente o nome do aplicativo que gerou o evento de rastreamento."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores que especificam o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: format
      type: System.String
      description: "Uma cadeia de caracteres de formato que contém zero ou mais itens de formato, que correspondem aos objetos na `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matriz que contém zero ou mais objetos a serem formatados."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  id: TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define opções de saída de rastreamento."
  remarks: "A propriedade TraceOutputOptions determina o conteúdo opcional de saída de rastreamento. A propriedade pode ser definida no arquivo de configuração ou por meio de programação durante a execução para incluir dados adicionais especificamente para uma seção de código. Por exemplo, você pode definir a propriedade TraceOutputOptions para o ouvinte de rastreamento do console para <xref:System.Diagnostics.TraceOptions?displayProperty=fullName>para adicionar informações de pilha de chamadas para a saída de rastreamento.</xref:System.Diagnostics.TraceOptions?displayProperty=fullName>       O <xref:System.Diagnostics.TraceOptions>enumeração não é usada pelas seguintes classes e métodos:-a <xref:System.Diagnostics.EventLogTraceListener>classe, porque isso pode causar um grande volume de dados a serem gravados no log.</xref:System.Diagnostics.EventLogTraceListener> </xref:System.Diagnostics.TraceOptions>      -A `Write` e `WriteLine` métodos do <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, e <xref:System.Diagnostics.TextWriterTraceListener>classes.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.ConsoleTraceListener>      -O <xref:System.Diagnostics.TraceListener.Write%2A>e os <xref:System.Diagnostics.TraceListener.WriteLine%2A>métodos da <xref:System.Diagnostics.TraceListener>classe quando eles não são substituídos na classe derivada.</xref:System.Diagnostics.TraceListener> </xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example shows the setting of the TraceOutputOptions property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property of a trace source. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#16](~/add/codesnippet/csharp/p-system.diagnostics.tra_9_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#16](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceOptions TraceOutputOptions { get; set; }
    return:
      type: System.Diagnostics.TraceOptions
      description: "Uma combinação bit a bit dos valores de enumeração. O padrão é <xref href=&quot;System.Diagnostics.TraceOptions&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.TraceOutputOptions*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Falha na operação de conjunto, como o valor é inválido."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de rastreamento, uma mensagem, informações de identidade e eventos de atividade relacionada para a saída específica do ouvinte."
  remarks: "> [!IMPORTANT]> Esse método não se destina a ser chamado diretamente pelo código do aplicativo, mas por membros do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>método é usado para a correlação de rastreamento relacionado.</xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> As chamadas de método TraceTransfer o <xref:System.Diagnostics.TraceListener.TraceEvent%2A>método para processar a chamada com o nível de eventType definido como <xref:System.Diagnostics.TraceEventType>e `relatedActivityId` <xref:System.Guid>como uma cadeia de caracteres anexada à mensagem.</xref:System.Guid> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.TraceListener.TraceEvent%2A>"
  syntax:
    content: public virtual void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída, normalmente o nome do aplicativo que gerou o evento de rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: relatedActivityId
      type: System.Guid
      description: "Um <xref:System.Guid>objeto identificando uma atividade relacionada.</xref:System.Guid>"
  overload: System.Diagnostics.TraceListener.TraceTransfer*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o valor do objeto <xref:System.Object.ToString*>método para o ouvinte que você cria ao implementar o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Um <xref:System.Object>cujo nome totalmente qualificado da classe que você deseja gravar.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Quando substituído em uma classe derivada, grava a mensagem especificada para o ouvinte que você criar na classe derivada."
  syntax:
    content: public abstract void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e o valor do objeto <xref:System.Object.ToString*>método para o ouvinte que você cria ao implementar o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "Um <xref:System.Object>cujo nome totalmente qualificado da classe que você deseja gravar.</xref:System.Object>"
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e uma mensagem para o ouvinte criar quando você implementa o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe."
  syntax:
    content: public virtual void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteIndent
  id: WriteIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o recuo para o ouvinte criar quando você implementar essa classe e redefine o <xref:System.Diagnostics.TraceListener.NeedIndent*>propriedade <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.TraceListener.NeedIndent*>"
  remarks: "Esse método grava o recuo e redefine o <xref:System.Diagnostics.TraceListener.NeedIndent%2A>propriedade `false`.</xref:System.Diagnostics.TraceListener.NeedIndent%2A> Chame este método se <xref:System.Diagnostics.TraceListener.NeedIndent%2A>é `true` quando você está substituindo o <xref:System.Diagnostics.TraceListener.Write%2A>e <xref:System.Diagnostics.TraceListener.WriteLine%2A>métodos.</xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A> </xref:System.Diagnostics.TraceListener.NeedIndent%2A> Por padrão, esse método usa espaços em branco para recuo. O tamanho do recuo é determinado pelos valores de <xref:System.Diagnostics.TraceListener.IndentSize%2A>e <xref:System.Diagnostics.TraceListener.IndentLevel%2A>Propriedades.</xref:System.Diagnostics.TraceListener.IndentLevel%2A> </xref:System.Diagnostics.TraceListener.IndentSize%2A> O <xref:System.Diagnostics.TraceListener.IndentLevel%2A>propriedade representa o número de vezes que o recuo do tamanho especificado pelo <xref:System.Diagnostics.TraceListener.IndentSize%2A>propriedade é aplicada.</xref:System.Diagnostics.TraceListener.IndentSize%2A> </xref:System.Diagnostics.TraceListener.IndentLevel%2A> Este método é chamado pelo <xref:System.Diagnostics.DefaultTraceListener>e <xref:System.Diagnostics.TextWriterTraceListener>classes.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener>"
  syntax:
    content: protected virtual void WriteIndent ();
    parameters: []
  overload: System.Diagnostics.TraceListener.WriteIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o valor do objeto <xref:System.Object.ToString*>método para o ouvinte que você cria ao implementar o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe, seguido por um terminador de linha.</xref:System.Object.ToString*>"
  remarks: "O terminador de linha típicas que você pode implementar é um retorno de carro seguido por uma alimentação de linha (\\r)."
  syntax:
    content: public virtual void WriteLine (object o);
    parameters:
    - id: o
      type: System.Object
      description: "Um <xref:System.Object>cujo nome totalmente qualificado da classe que você deseja gravar.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Quando substituído em uma classe derivada, grava uma mensagem para o ouvinte que você criar na classe derivada, seguido por um terminador de linha."
  remarks: "O terminador de linha típicas que você pode implementar é um retorno de carro seguido por uma alimentação de linha (\\r)."
  syntax:
    content: public abstract void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e o valor do objeto <xref:System.Object.ToString*>método para o ouvinte que você cria ao implementar o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe, seguido por um terminador de linha.</xref:System.Object.ToString*>"
  remarks: "O terminador de linha típicas que você pode implementar é um retorno de carro seguido por uma alimentação de linha (\\r)."
  syntax:
    content: public virtual void WriteLine (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "Um <xref:System.Object>cujo nome totalmente qualificado da classe que você deseja gravar.</xref:System.Object>"
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e uma mensagem para o ouvinte criar quando você implementa o <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> classe, seguido por um terminador de linha."
  remarks: "O terminador de linha típicas que você pode implementar é um retorno de carro seguido por uma alimentação de linha (\\r)."
  syntax:
    content: public virtual void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.TraceListener.#ctor
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceListener.Attributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.TraceListener.Close
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
- uid: System.Diagnostics.TraceListener.Dispose
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
- uid: System.Diagnostics.TraceListener.Filter
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
- uid: System.Diagnostics.TraceFilter
  parent: System.Diagnostics
  isExternal: false
  name: TraceFilter
  nameWithType: TraceFilter
  fullName: System.Diagnostics.TraceFilter
- uid: System.Diagnostics.TraceListener.Flush
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.IndentLevel
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.TraceListener.IndentSize
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceOptions
  parent: System.Diagnostics
  isExternal: false
  name: TraceOptions
  nameWithType: TraceOptions
  fullName: System.Diagnostics.TraceOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
- uid: System.Diagnostics.TraceListener.Write(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
- uid: System.Diagnostics.TraceListener.WriteIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
- uid: System.Diagnostics.TraceListener.#ctor*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener
  nameWithType: TraceListener.TraceListener
- uid: System.Diagnostics.TraceListener.Attributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
- uid: System.Diagnostics.TraceListener.Close*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close
  nameWithType: TraceListener.Close
- uid: System.Diagnostics.TraceListener.Dispose*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose
  nameWithType: TraceListener.Dispose
- uid: System.Diagnostics.TraceListener.Fail*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail
  nameWithType: TraceListener.Fail
- uid: System.Diagnostics.TraceListener.Filter*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
- uid: System.Diagnostics.TraceListener.Flush*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush
  nameWithType: TraceListener.Flush
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: TraceListener.GetSupportedAttributes
- uid: System.Diagnostics.TraceListener.IndentLevel*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
- uid: System.Diagnostics.TraceListener.IndentSize*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData
  nameWithType: TraceListener.TraceData
- uid: System.Diagnostics.TraceListener.TraceEvent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: TraceListener.TraceEvent
- uid: System.Diagnostics.TraceListener.TraceOutputOptions*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer
  nameWithType: TraceListener.TraceTransfer
- uid: System.Diagnostics.TraceListener.Write*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write
  nameWithType: TraceListener.Write
- uid: System.Diagnostics.TraceListener.WriteIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent
  nameWithType: TraceListener.WriteIndent
- uid: System.Diagnostics.TraceListener.WriteLine*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine
  nameWithType: TraceListener.WriteLine
