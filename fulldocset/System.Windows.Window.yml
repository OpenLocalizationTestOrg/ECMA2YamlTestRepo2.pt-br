### YamlMime:ManagedReference
items:
- uid: System.Windows.Window
  id: Window
  children:
  - System.Windows.Window.#ctor
  - System.Windows.Window.Activate
  - System.Windows.Window.Activated
  - System.Windows.Window.AllowsTransparency
  - System.Windows.Window.AllowsTransparencyProperty
  - System.Windows.Window.ArrangeOverride(System.Windows.Size)
  - System.Windows.Window.Close
  - System.Windows.Window.Closed
  - System.Windows.Window.Closing
  - System.Windows.Window.ContentRendered
  - System.Windows.Window.Deactivated
  - System.Windows.Window.DialogResult
  - System.Windows.Window.DpiChanged
  - System.Windows.Window.DpiChangedEvent
  - System.Windows.Window.DragMove
  - System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  - System.Windows.Window.Hide
  - System.Windows.Window.Icon
  - System.Windows.Window.IconProperty
  - System.Windows.Window.IsActive
  - System.Windows.Window.IsActiveProperty
  - System.Windows.Window.Left
  - System.Windows.Window.LeftProperty
  - System.Windows.Window.LocationChanged
  - System.Windows.Window.LogicalChildren
  - System.Windows.Window.MeasureOverride(System.Windows.Size)
  - System.Windows.Window.OnActivated(System.EventArgs)
  - System.Windows.Window.OnClosed(System.EventArgs)
  - System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  - System.Windows.Window.OnContentChanged(System.Object,System.Object)
  - System.Windows.Window.OnContentRendered(System.EventArgs)
  - System.Windows.Window.OnCreateAutomationPeer
  - System.Windows.Window.OnDeactivated(System.EventArgs)
  - System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Window.OnLocationChanged(System.EventArgs)
  - System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.Window.OnSourceInitialized(System.EventArgs)
  - System.Windows.Window.OnStateChanged(System.EventArgs)
  - System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.Window.OwnedWindows
  - System.Windows.Window.Owner
  - System.Windows.Window.ResizeMode
  - System.Windows.Window.ResizeModeProperty
  - System.Windows.Window.RestoreBounds
  - System.Windows.Window.Show
  - System.Windows.Window.ShowActivated
  - System.Windows.Window.ShowActivatedProperty
  - System.Windows.Window.ShowDialog
  - System.Windows.Window.ShowInTaskbar
  - System.Windows.Window.ShowInTaskbarProperty
  - System.Windows.Window.SizeToContent
  - System.Windows.Window.SizeToContentProperty
  - System.Windows.Window.SourceInitialized
  - System.Windows.Window.StateChanged
  - System.Windows.Window.TaskbarItemInfo
  - System.Windows.Window.TaskbarItemInfoProperty
  - System.Windows.Window.Title
  - System.Windows.Window.TitleProperty
  - System.Windows.Window.Top
  - System.Windows.Window.Topmost
  - System.Windows.Window.TopmostProperty
  - System.Windows.Window.TopProperty
  - System.Windows.Window.WindowStartupLocation
  - System.Windows.Window.WindowState
  - System.Windows.Window.WindowStateProperty
  - System.Windows.Window.WindowStyle
  - System.Windows.Window.WindowStyleProperty
  langs:
  - csharp
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
  type: Class
  summary: "Fornece a capacidade de criar, configurar, exibir e gerenciar o tempo de vida de janelas e caixas de diálogo."
  remarks: "O ponto de interação entre um usuário e um aplicativo autônomo é uma janela. Um [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] janela consiste em duas áreas distintas:-uma área não cliente, que hospeda os ornamentos do windows, incluindo um ícone, o título, o menu do sistema, botão Minimizar, maximizar o botão, o botão Restaurar, o botão Fechar e uma borda.      -Uma área do cliente, que hospeda o conteúdo específico do aplicativo.       Uma janela padrão é mostrada na figura a seguir: ![elementos da janela](~/add/media/windowoverviewfigure1.PNG &quot;elementos da janela&quot;) janela encapsula a capacidade de criar, configurar, exibir e gerenciar o tempo de vida do windows e caixas de diálogo e fornece os seguintes serviços de chave: **gerenciamento de vida útil**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated> <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed> <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated> <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A> <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</xref:System.Windows.Window.SourceInitialized> </xref:System.Windows.Window.Show%2A> </xref:System.Windows.Window.IsActive%2A> </xref:System.Windows.Window.Hide%2A> </xref:System.Windows.Window.Deactivated> </xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Close%2A> </xref:System.Windows.Window.Activated> </xref:System.Windows.Window.Activate%2A>       **Gerenciamento de janela**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A> <xref:System.Windows.Window.Owner%2A>.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.GetWindow%2A>       **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>       **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.DialogResult%2A></xref:System.Windows.Window.WindowStyle%2A></xref:System.Windows.Window.WindowState%2A></xref:System.Windows.Window.WindowStartupLocation%2A></xref:System.Windows.Window.Topmost%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Title%2A></xref:System.Windows.Window.StateChanged></xref:System.Windows.Window.SizeToContent%2A></xref:System.Windows.Window.ShowInTaskbar%2A></xref:System.Windows.Window.ShowActivated%2A></xref:System.Windows.Window.RestoreBounds%2A></xref:System.Windows.Window.ResizeMode%2A></xref:System.Windows.Window.LocationChanged></xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Icon%2A></xref:System.Windows.Window.DragMove%2A></xref:System.Windows.Window.ContentRendered></xref:System.Windows.Window.AllowsTransparency%2A>       Além disso, <xref:System.Windows.Application>expõe suporte especial para gerenciar todas as janelas em um aplicativo:-aplicativo mantém uma lista de todas as janelas que atualmente são instanciados no aplicativo.</xref:System.Windows.Application> Essa lista é exposta pelo <xref:System.Windows.Application.Windows%2A>propriedade.</xref:System.Windows.Application.Windows%2A>      -Por padrão, <xref:System.Windows.Application.MainWindow%2A>é definido automaticamente com uma referência para a primeira janela que é instanciada em um aplicativo.</xref:System.Windows.Application.MainWindow%2A> Esta janela, tornando o janela principal do aplicativo.       Uma janela pode ser implementada usando marcação, marcação e code-behind ou código.       Janela é usada principalmente para exibir as janelas e caixas de diálogo para aplicativos autônomos. No entanto, para aplicativos que exigem a navegação no nível da janela, como assistentes, você pode usar <xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Navigation.NavigationWindow>deriva de janela e estende com suporte de navegação de estilo de navegador.</xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.NavigationWindow>      > [!NOTE] > Ilhas de conteúdo navegável podem ser incorporadas em outros contêineres de conteúdo e o conteúdo usando <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame>       Janela precisa `UnmanagedCode` permissão de segurança a ser instanciado. Isso tem as seguintes consequências:- [!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]-aplicativos autônomos implantado irá solicitar a elevação de permissões quando iniciado a partir de zonas de Internet ou Intranet Local.      - [!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)] que solicitarem nada menor que permissões completas não poderá criar uma instância de janelas ou caixas de diálogo.       Para obter informações sobre considerações de segurança e de implantação de aplicativo autônomo, consulte [estratégia de segurança do WPF - segurança da plataforma](~/add/includes/ajax-current-ext-md.md).       Uma janela é uma <xref:System.Windows.Controls.ContentControl>, o que significa que ele pode conter um único objeto de qualquer tipo (como uma cadeia de caracteres, uma imagem ou um painel).</xref:System.Windows.Controls.ContentControl> Para obter mais informações, consulte a <xref:System.Windows.Controls.ContentControl>classe.</xref:System.Windows.Controls.ContentControl> Além disso, janela é um elemento raiz e, portanto, não pode ser parte de outro conteúdo de elemento.      > [!NOTE] > O <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, e <xref:System.Windows.Window.Left%2A>propriedades definidas em uma janela por meio de um estilo não serão aplicadas em tempo de execução.</xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>      ## Personalizando a janela de controle para aplicar as mesmas configurações de propriedade para vários controles de janela, use o <xref:System.Windows.FrameworkElement.Style%2A>propriedade.</xref:System.Windows.FrameworkElement.Style%2A> Você pode modificar o padrão <xref:System.Windows.Controls.ControlTemplate>para que o controle uma aparência exclusiva.</xref:System.Windows.Controls.ControlTemplate> Para obter mais informações sobre como criar um <xref:System.Windows.Controls.ControlTemplate>, consulte [Personalizando a aparência de um controle existente, criando um ControlTemplate](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.Controls.ControlTemplate>  Para ver as partes e os estados que são específicos para a janela, consulte [modelos e estilos de janela](~/add/includes/ajax-current-ext-md.md).       Propriedades de dependência para este controle podem ser definidas pelo estilo padrão do controle.  Se uma propriedade é definida por um estilo padrão, a propriedade pode ser alterada de seu valor padrão quando o controle é exibido no aplicativo. O estilo padrão é determinado pelo qual tema de área de trabalho é usado quando o aplicativo está em execução.  Para obter mais informações, consulte [padrão WPF temas](http://go.microsoft.com/fwlink/?LinkID=158252).      > [!NOTE] > Definir uma propriedade visual só terá efeito se essa propriedade é presente no modelo padrão do controle da janela e é definida usando um. Você pode encontrar uma lista de propriedades visuais na seção &quot;Alterando o Visual estrutura de um controle de&quot; [Personalizando a aparência de um controle existente, criando um ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)."
  example:
  - "The following example shows how a standard window is defined using only markup:  \n  \n [!code-xml[WindowSnippets#WindowMARKUPONLY](~/add/codesnippet/xaml/WindowSnippets.CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  \n  \n The following example shows how a standard window is defined using only code:  \n  \n [!code-cs[WindowSnippets#WindowCODEONLY](~/add/codesnippet/csharp/WindowSnippets.CSharp/CodeOnlyWindow.cs#windowcodeonly)]\n [!code-vb[WindowSnippets#WindowCODEONLY](~/add/codesnippet/visualbasic/windowsnippets/codeonlywindow.vb#windowcodeonly)]  \n  \n The following example shows how a standard window is defined using a combination of markup and code-behind.  \n  \n [!code-xml[WindowSnippets#WindowXAML](~/add/codesnippet/xaml/WindowSnippets.CSharp/MainWindow.xaml#windowxaml)]  \n  \n [!code-cs[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/csharp/WindowSnippets.CSharp/MainWindow.xaml.cs#windowcodebehind)]\n [!code-vb[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/visualbasic/windowsnippets/mainwindow.xaml.vb#windowcodebehind)]"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      public class Window : System.Windows.Controls.ContentControl
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  - System.Windows.UIElement
  - System.Windows.FrameworkElement
  - System.Windows.Controls.Control
  - System.Windows.Controls.ContentControl
  implements: []
  inheritedMembers:
  - System.Windows.Controls.ContentControl.AddChild(System.Object)
  - System.Windows.Controls.ContentControl.AddText(System.String)
  - System.Windows.Controls.ContentControl.Content
  - System.Windows.Controls.ContentControl.ContentProperty
  - System.Windows.Controls.ContentControl.ContentStringFormat
  - System.Windows.Controls.ContentControl.ContentStringFormatProperty
  - System.Windows.Controls.ContentControl.ContentTemplate
  - System.Windows.Controls.ContentControl.ContentTemplateProperty
  - System.Windows.Controls.ContentControl.ContentTemplateSelector
  - System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty
  - System.Windows.Controls.ContentControl.HasContent
  - System.Windows.Controls.ContentControl.HasContentProperty
  - System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)
  - System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)
  - System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)
  - System.Windows.Controls.ContentControl.ShouldSerializeContent
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Controls.Control.Background
  - System.Windows.Controls.Control.BackgroundProperty
  - System.Windows.Controls.Control.BorderBrush
  - System.Windows.Controls.Control.BorderBrushProperty
  - System.Windows.Controls.Control.BorderThickness
  - System.Windows.Controls.Control.BorderThicknessProperty
  - System.Windows.Controls.Control.FontFamily
  - System.Windows.Controls.Control.FontFamilyProperty
  - System.Windows.Controls.Control.FontSize
  - System.Windows.Controls.Control.FontSizeProperty
  - System.Windows.Controls.Control.FontStretch
  - System.Windows.Controls.Control.FontStretchProperty
  - System.Windows.Controls.Control.FontStyle
  - System.Windows.Controls.Control.FontStyleProperty
  - System.Windows.Controls.Control.FontWeight
  - System.Windows.Controls.Control.FontWeightProperty
  - System.Windows.Controls.Control.Foreground
  - System.Windows.Controls.Control.ForegroundProperty
  - System.Windows.Controls.Control.HandlesScrolling
  - System.Windows.Controls.Control.HorizontalContentAlignment
  - System.Windows.Controls.Control.HorizontalContentAlignmentProperty
  - System.Windows.Controls.Control.IsTabStop
  - System.Windows.Controls.Control.IsTabStopProperty
  - System.Windows.Controls.Control.MouseDoubleClick
  - System.Windows.Controls.Control.MouseDoubleClickEvent
  - System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)
  - System.Windows.Controls.Control.Padding
  - System.Windows.Controls.Control.PaddingProperty
  - System.Windows.Controls.Control.PreviewMouseDoubleClick
  - System.Windows.Controls.Control.PreviewMouseDoubleClickEvent
  - System.Windows.Controls.Control.TabIndex
  - System.Windows.Controls.Control.TabIndexProperty
  - System.Windows.Controls.Control.Template
  - System.Windows.Controls.Control.TemplateProperty
  - System.Windows.Controls.Control.ToString
  - System.Windows.Controls.Control.VerticalContentAlignment
  - System.Windows.Controls.Control.VerticalContentAlignmentProperty
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.ActualHeight
  - System.Windows.FrameworkElement.ActualHeightProperty
  - System.Windows.FrameworkElement.ActualWidth
  - System.Windows.FrameworkElement.ActualWidthProperty
  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  - System.Windows.FrameworkElement.ApplyTemplate
  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.FrameworkElement.BeginInit
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.FrameworkElement.BindingGroup
  - System.Windows.FrameworkElement.BindingGroupProperty
  - System.Windows.FrameworkElement.BringIntoView
  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  - System.Windows.FrameworkElement.ContextMenu
  - System.Windows.FrameworkElement.ContextMenuClosing
  - System.Windows.FrameworkElement.ContextMenuClosingEvent
  - System.Windows.FrameworkElement.ContextMenuOpening
  - System.Windows.FrameworkElement.ContextMenuOpeningEvent
  - System.Windows.FrameworkElement.ContextMenuProperty
  - System.Windows.FrameworkElement.Cursor
  - System.Windows.FrameworkElement.CursorProperty
  - System.Windows.FrameworkElement.DataContext
  - System.Windows.FrameworkElement.DataContextChanged
  - System.Windows.FrameworkElement.DataContextProperty
  - System.Windows.FrameworkElement.DefaultStyleKey
  - System.Windows.FrameworkElement.DefaultStyleKeyProperty
  - System.Windows.FrameworkElement.EndInit
  - System.Windows.FrameworkElement.FindName(System.String)
  - System.Windows.FrameworkElement.FindResource(System.Object)
  - System.Windows.FrameworkElement.FlowDirection
  - System.Windows.FrameworkElement.FlowDirectionProperty
  - System.Windows.FrameworkElement.FocusVisualStyle
  - System.Windows.FrameworkElement.FocusVisualStyleProperty
  - System.Windows.FrameworkElement.ForceCursor
  - System.Windows.FrameworkElement.ForceCursorProperty
  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.FrameworkElement.GetTemplateChild(System.String)
  - System.Windows.FrameworkElement.GetUIParentCore
  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  - System.Windows.FrameworkElement.Height
  - System.Windows.FrameworkElement.HeightProperty
  - System.Windows.FrameworkElement.HorizontalAlignment
  - System.Windows.FrameworkElement.HorizontalAlignmentProperty
  - System.Windows.FrameworkElement.InheritanceBehavior
  - System.Windows.FrameworkElement.Initialized
  - System.Windows.FrameworkElement.InputScope
  - System.Windows.FrameworkElement.InputScopeProperty
  - System.Windows.FrameworkElement.IsInitialized
  - System.Windows.FrameworkElement.IsLoaded
  - System.Windows.FrameworkElement.Language
  - System.Windows.FrameworkElement.LanguageProperty
  - System.Windows.FrameworkElement.LayoutTransform
  - System.Windows.FrameworkElement.LayoutTransformProperty
  - System.Windows.FrameworkElement.Loaded
  - System.Windows.FrameworkElement.LoadedEvent
  - System.Windows.FrameworkElement.Margin
  - System.Windows.FrameworkElement.MarginProperty
  - System.Windows.FrameworkElement.MaxHeight
  - System.Windows.FrameworkElement.MaxHeightProperty
  - System.Windows.FrameworkElement.MaxWidth
  - System.Windows.FrameworkElement.MaxWidthProperty
  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  - System.Windows.FrameworkElement.MinHeight
  - System.Windows.FrameworkElement.MinHeightProperty
  - System.Windows.FrameworkElement.MinWidth
  - System.Windows.FrameworkElement.MinWidthProperty
  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.FrameworkElement.Name
  - System.Windows.FrameworkElement.NameProperty
  - System.Windows.FrameworkElement.OnApplyTemplate
  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OverridesDefaultStyle
  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  - System.Windows.FrameworkElement.Parent
  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  - System.Windows.FrameworkElement.RequestBringIntoView
  - System.Windows.FrameworkElement.RequestBringIntoViewEvent
  - System.Windows.FrameworkElement.Resources
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  - System.Windows.FrameworkElement.ShouldSerializeResources
  - System.Windows.FrameworkElement.ShouldSerializeStyle
  - System.Windows.FrameworkElement.ShouldSerializeTriggers
  - System.Windows.FrameworkElement.SizeChanged
  - System.Windows.FrameworkElement.SizeChangedEvent
  - System.Windows.FrameworkElement.SourceUpdated
  - System.Windows.FrameworkElement.Style
  - System.Windows.FrameworkElement.StyleProperty
  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkElement.Tag
  - System.Windows.FrameworkElement.TagProperty
  - System.Windows.FrameworkElement.TargetUpdated
  - System.Windows.FrameworkElement.TemplatedParent
  - System.Windows.FrameworkElement.ToolTip
  - System.Windows.FrameworkElement.ToolTipClosing
  - System.Windows.FrameworkElement.ToolTipClosingEvent
  - System.Windows.FrameworkElement.ToolTipOpening
  - System.Windows.FrameworkElement.ToolTipOpeningEvent
  - System.Windows.FrameworkElement.ToolTipProperty
  - System.Windows.FrameworkElement.Triggers
  - System.Windows.FrameworkElement.TryFindResource(System.Object)
  - System.Windows.FrameworkElement.Unloaded
  - System.Windows.FrameworkElement.UnloadedEvent
  - System.Windows.FrameworkElement.UnregisterName(System.String)
  - System.Windows.FrameworkElement.UpdateDefaultStyle
  - System.Windows.FrameworkElement.UseLayoutRounding
  - System.Windows.FrameworkElement.UseLayoutRoundingProperty
  - System.Windows.FrameworkElement.VerticalAlignment
  - System.Windows.FrameworkElement.VerticalAlignmentProperty
  - System.Windows.FrameworkElement.VisualChildrenCount
  - System.Windows.FrameworkElement.Width
  - System.Windows.FrameworkElement.WidthProperty
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  platform:
  - net462
- uid: System.Windows.Window.#ctor
  id: '#ctor'
  parent: System.Windows.Window
  langs:
  - csharp
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Window&quot;> </xref> classe."
  remarks: "O construtor inicializa o <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, e <xref:System.Windows.Window.Left%2A>propriedades padrão <xref:System.Windows.Window>valores.</xref:System.Windows.Window> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A>       Se uma janela é criada dentro de um <xref:System.AppDomain>que tem um <xref:System.Windows.Application>do objeto, o construtor adiciona o <xref:System.Windows.Window>objeto ao conjunto de <xref:System.Windows.Application>-gerenciados windows por meio do <xref:System.Windows.Application.Windows%2A>propriedade do <xref:System.Windows.Application>objeto.</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A> </xref:System.Windows.Application> </xref:System.Windows.Window> </xref:System.Windows.Application> </xref:System.AppDomain>"
  syntax:
    content: public Window ();
    parameters: []
  overload: System.Windows.Window.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activate
  id: Activate
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Tenta colocar a janela em primeiro plano e o ativa."
  remarks: "As regras que determinam se a janela está ativada são as mesmas usadas pelo [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` função (User32. dll).       Se a janela é ativada em um [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] aplicativo que não seja o aplicativo do usuário em primeiro plano, <xref:System.Windows.Application.Activated>é gerado.</xref:System.Windows.Application.Activated>      > [!NOTE] > Esse método não pode ser chamado quando uma janela é hospedada em um navegador."
  syntax:
    content: public bool Activate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Windows.Window&quot;> </xref> foi com êxito ativado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activated
  id: Activated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre quando uma janela se torna a janela de primeiro plano."
  remarks: "Uma janela é ativada (torna-se a janela de primeiro plano) quando:-a janela é aberta pela primeira vez.      -Um usuário alterna para uma janela, selecionando-o com o mouse, pressione ALT + TAB ou no Gerenciador de tarefas.      -Um usuário clica no botão da janela na barra de tarefas.       Windows que precisam detectar quando eles se tornar ativa pode manipular o evento ativado.       Depois de uma janela é ativada pela primeira vez, podem ser desativado e reativado muitas vezes durante seu ciclo de vida. Se o estado ou o comportamento de um aplicativo depende de seu estado de ativação, pode inspecionar <xref:System.Windows.Window.IsActive%2A>para determinar qual estado de ativação-lo do in.</xref:System.Windows.Window.IsActive%2A>       Um aplicativo também pode ser <xref:System.Windows.Application.Activated>.</xref:System.Windows.Application.Activated>"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparency
  id: AllowsTransparency
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se uma área da janela cliente oferece suporte à transparência."
  remarks: "Quando o <xref:System.Windows.Controls.Control.Background%2A>propriedade de uma janela é definida como um transparente de cores, usando <xref:System.Windows.Media.Brushes.Transparent%2A>, por exemplo, a janela permanece opaca.</xref:System.Windows.Media.Brushes.Transparent%2A> </xref:System.Windows.Controls.Control.Background%2A> Isso significa que a área de trabalho e quaisquer aplicativos em execução &quot;sob&quot; a janela não podem ser vistos. Para permitir esse tipo de transparência, AllowsTransparency deve ser definido como `true`.       AllowsTransparency existe para facilitar a criação de janelas não retangulares, e, consequentemente, quando AllowsTransparency é definido como `true`, de <xref:System.Windows.Window.WindowStyle%2A>propriedade deve ser definida como <xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> uma janela</xref:System.Windows.Window.WindowStyle%2A>      <a name=&quot;dependencyPropertyInfo_WindowAllowsTransparency&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.AllowsTransparencyProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.AllowsTransparencyProperty>"
  syntax:
    content: public bool AllowsTransparency { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a janela oferece suporte à transparência. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.AllowsTransparency*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uma janela com um <xref:System.Windows.Window.WindowStyle*>valor de qualquer coisa diferente de <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>.</xref:System.Windows.Window.WindowStyle*>"
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparencyProperty
  id: AllowsTransparencyProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.AllowsTransparency*>DependencyProperty.</xref:System.Windows.Window.AllowsTransparency*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  id: ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Substitua este método para organizar e o tamanho de uma janela e seus elementos filho."
  remarks: "ArrangeOverride não é chamado quando a <xref:System.Windows.UIElement.Visibility%2A>propriedade tem um valor de <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A> Se o valor de <xref:System.Windows.UIElement.Visibility%2A>propriedade está <xref:System.Windows.Visibility>ou <xref:System.Windows.Visibility>, ArrangeOverride é chamado.</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      > [!NOTE] > Quando um <xref:System.Windows.Window.Show%2A>ou <xref:System.Windows.Window.ShowDialog%2A>são chamados, a <xref:System.Windows.UIElement.Visibility%2A>propriedade de um <xref:System.Windows.Window>é definida como <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);
    parameters:
    - id: arrangeBounds
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> que reflete o tamanho final que janela deve usar para organizar a próprio e seus filhos."
    return:
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> que reflete o tamanho real que foi usado."
  overload: System.Windows.Window.ArrangeOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Close
  id: Close
  parent: System.Windows.Window
  langs:
  - csharp
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Fecha manualmente um <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Um <xref:System.Windows.Window>pode ser fechada usando uma das várias, mecanismos conhecidos, fornecido pelo sistema localizado na sua barra de título, incluindo:-ALT + F4.</xref:System.Windows.Window>      -Menu do sistema | **Close**.      - **Fechar** botão.       Um <xref:System.Windows.Window>também pode ser fechada usando um dos vários mecanismos conhecidos na área do cliente que são fornecidos por desenvolvedores, incluindo:- **arquivo** | **Exit** em uma janela principal.</xref:System.Windows.Window>      -   **File** | **Fechar** ou um **fechar** botão em uma janela filho.      > [!NOTE]  >   **Okey** e **Cancelar** botões em uma caixa de diálogo também são fornecido pelo desenvolvedor, embora provavelmente será definida <xref:System.Windows.Window.DialogResult%2A>, que fecha automaticamente uma janela que foi aberta chamando <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window.DialogResult%2A>       Esses mecanismos exigem que você explicitamente chamar Fechar para fechar uma janela.      > [!NOTE] > Se uma janela aberta chamando <xref:System.Windows.Window.ShowDialog%2A>e com um <xref:System.Windows.Controls.Button>com seus <xref:System.Windows.Controls.Button.IsCancel%2A>propriedade definida como true, será fechada automaticamente quando o botão é clicado ou ou ESC está pressionado.</xref:System.Windows.Controls.Button.IsCancel%2A> </xref:System.Windows.Controls.Button> </xref:System.Windows.Window.ShowDialog%2A> Se a janela foi aberta usando <xref:System.Windows.Window.Show%2A>, no entanto, feche deve ser chamado explicitamente, por exemplo, o <xref:System.Windows.Controls.Primitives.ButtonBase.Click>manipulador de eventos <xref:System.Windows.Controls.Button>.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Window.Show%2A>       Fechar uma janela faz com que o <xref:System.Windows.Window.Closing>evento ser gerado.</xref:System.Windows.Window.Closing> Se o <xref:System.Windows.Window.Closing>evento não for cancelado, ocorre o seguinte: - o <xref:System.Windows.Window>é removido do <xref:System.Windows.Application.Windows%2A?displayProperty=fullName>(se um <xref:System.Windows.Application>objeto existe).</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A?displayProperty=fullName> </xref:System.Windows.Window> </xref:System.Windows.Window.Closing>      -A <xref:System.Windows.Window>é removido do proprietário <xref:System.Windows.Window>se a relação de propriedade foi estabelecida antes da propriedade <xref:System.Windows.Window>foi exibido e depois o proprietário <xref:System.Windows.Window>foi aberto.</xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window>      -A <xref:System.Windows.Window.Closed>é gerado.</xref:System.Windows.Window.Closed>      -Os recursos não gerenciados criados pelo <xref:System.Windows.Window>são descartados.</xref:System.Windows.Window>      -Se <xref:System.Windows.Window.ShowDialog%2A>foi chamado para mostrar o <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A>retorna.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window> </xref:System.Windows.Window.ShowDialog%2A>       Fechar um <xref:System.Windows.Window>faz com que todas as janelas que ela possui para ser fechada.</xref:System.Windows.Window> Além disso, fechar um <xref:System.Windows.Window>pode fazer com que um aplicativo para interromper a execução dependendo de como a <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName>está definida.</xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> </xref:System.Windows.Window>      > [!NOTE] > Esse método não pode ser chamado quando uma janela é hospedada em um navegador."
  example:
  - "The following example shows a **File** &#124; **Exit** menu being handled to explicitly call Close.  \n  \n [!code-xml[WindowCloseSnippets#WindowCloseXAML](~/add/codesnippet/xaml/WindowCloseSnippets.CSharp/MainWindow.xaml#windowclosexaml)]  \n  \n [!code-cs[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/csharp/WindowCloseSnippets.CSharp/MainWindow.xaml.cs#windowclosecodebehind)]\n [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/visualbasic/windowclosesnippets/mainwindow.xaml.vb#windowclosecodebehind)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Windows.Window.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Closed
  id: Closed
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre quando a janela está prestes a fechar."
  remarks: "Depois que esse evento é gerado, uma janela não pode ser impedida de fechamento."
  syntax:
    content: public event EventHandler Closed;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> for definido, ou <> </> *>, <> </> *>, ou <> </> *> é chamado durante uma janela está sendo fechado."
  platform:
  - net462
- uid: System.Windows.Window.Closing
  id: Closing
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre logo após <xref:System.Windows.Window.Close*>é chamado e pode ser usado para cancelar o fechamento da janela.</xref:System.Windows.Window.Close*>"
  remarks: "Fechamento pode ser usado para detectar quando uma janela está sendo fechada (por exemplo, quando <xref:System.Windows.Window.Close%2A>é chamado).</xref:System.Windows.Window.Close%2A> Além disso, o fechamento pode ser usado para impedir que uma janela seja fechada. Para impedir que uma janela seja fechada, você pode definir o <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>propriedade o <xref:System.ComponentModel.CancelEventArgs>argumento `true`.</xref:System.ComponentModel.CancelEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       O evento de fechamento é gerado quando <xref:System.Windows.Window.Close%2A>é chamado, se o usuário clica no botão Fechar uma janela, ou se o usuário pressionar ALT + F4.</xref:System.Windows.Window.Close%2A>       Se uma janela de propriedade foi aberta por seu proprietário janela usando <xref:System.Windows.Window.Show%2A>e a janela do proprietário for fechada, o evento de fechamento da janela de propriedade não será gerado.</xref:System.Windows.Window.Show%2A> Se o proprietário de uma janela for fechado (consulte <xref:System.Windows.Window.Owner%2A>), não será gerado o fechamento na janela de propriedade.</xref:System.Windows.Window.Owner%2A>       Se <xref:System.Windows.Application.Shutdown%2A>for chamado, o evento de fechamento para cada janela é gerada.</xref:System.Windows.Application.Shutdown%2A> No entanto, se o fechamento for cancelado, cancelamento será ignorado.       Se uma sessão encerrada porque um usuário efetua logoff ou desliga, fechamento não é gerado; tratar <xref:System.Windows.Application.SessionEnding>para implementar o código que cancela o fechamento do aplicativo.</xref:System.Windows.Application.SessionEnding>       Se você deseja mostrar e ocultar uma janela várias vezes durante o tempo de vida de um aplicativo e você não deseja reinstantiate janela sempre mostrá-la, você pode manipular o evento de fechamento, cancelá-la e chamar o <xref:System.Windows.Window.Hide%2A>método.</xref:System.Windows.Window.Hide%2A> Em seguida, você pode chamar <xref:System.Windows.Window.Show%2A>na mesma instância para reabri-la.</xref:System.Windows.Window.Show%2A>"
  example:
  - "The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.  \n  \n [!code-xml[WindowClosingSnippets#WindowClosingXAML1](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml1)]  \n[!code-xml[WindowClosingSnippets#WindowClosingXAML2](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml2)]  \n  \n [!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind1)]\n [!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind1)]  \n[!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind2)]\n[!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind2)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler Closing;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "A ser adicionado."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> for definido, ou <> </> *>, <> </> *>, ou <> </> *> é chamado durante uma janela está sendo fechado."
  platform:
  - net462
- uid: System.Windows.Window.ContentRendered
  id: ContentRendered
  parent: System.Windows.Window
  langs:
  - csharp
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre depois que o conteúdo da janela é processado."
  remarks: "Se a janela não tem nenhum conteúdo, esse evento não será gerado."
  syntax:
    content: public event EventHandler ContentRendered;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Deactivated
  id: Deactivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre quando uma janela se torna uma janela de plano de fundo."
  remarks: "Uma janela é desativada (se torna uma janela de plano de fundo) quando:-um usuário alterna para outra janela do aplicativo atual.      -Um usuário alterna para a janela em outro aplicativo usando ALT + TAB ou usando o Gerenciador de tarefas.      -Um usuário clica no botão de barra de tarefas para uma janela em outro aplicativo.       Windows que precisam detectar quando eles se tornam desativados ao manipular o evento desativado.       Depois de uma janela é desativada pela primeira vez, pode ser reativado e desativado muitas vezes durante seu ciclo de vida. Se o estado ou o comportamento de um aplicativo depende de seu estado de ativação, pode inspecionar <xref:System.Windows.Window.IsActive%2A>para determinar qual estado de ativação-lo do in.</xref:System.Windows.Window.IsActive%2A>       Um aplicativo também pode ser <xref:System.Windows.Application.Deactivated>.</xref:System.Windows.Application.Deactivated>"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DialogResult
  id: DialogResult
  parent: System.Windows.Window
  langs:
  - csharp
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o valor de resultado de caixa de diálogo, que é o valor que é retornado o <xref:System.Windows.Window.ShowDialog*>método.</xref:System.Windows.Window.ShowDialog*>"
  remarks: "DialogResult pode ser usado do código que mostrava uma caixa de diálogo para determinar se um usuário aceita (`true`) ou cancelado (`false`) a caixa de diálogo. Se uma caixa de diálogo é aceita, isso significa para o código que abriu a caixa de diálogo para recuperar os dados que foram coletados pelo usuário e processá-la. Se uma caixa de diálogo foi cancelada, no entanto, isso significa que o código de chamada deve parar a nenhum processamento adicional.       Por padrão, uma caixa de diálogo é cancelada quando um usuário executa uma das seguintes opções:-PressesALT + F4.      -Clica o **fechar** botão.      -Seleciona **fechar** no menu de sistema.       Em todos esses casos, é DialogResult `false` por padrão.       Normalmente, uma caixa de diálogo fornece um botão especial para cancelar uma caixa de diálogo, que é o botão cujo <xref:System.Windows.Controls.Button.IsCancel%2A>está definida como `true`.</xref:System.Windows.Controls.Button.IsCancel%2A> Um botão configurado dessa forma será fechada automaticamente uma janela quando ou é pressionado ou quando é pressionada a tecla ESC. Em ambos os casos, DialogResult permanece `false`.       Uma caixa de diálogo também normalmente fornece um botão aceitar, que é o botão cujo <xref:System.Windows.Controls.Button.IsDefault%2A>está definida como `true`.</xref:System.Windows.Controls.Button.IsDefault%2A> Um botão com essa configuração irá gerar seu <xref:System.Windows.Controls.Primitives.ButtonBase.Click>evento quando ele ou a tecla ENTER é pressionada.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> No entanto, ele não fecha automaticamente a caixa de diálogo nem ele definirá DialogResult como `true`. Você precisa gravar manualmente esse código, geralmente do <xref:System.Windows.Controls.Primitives.ButtonBase.Click>manipulador de eventos para o botão padrão.</xref:System.Windows.Controls.Primitives.ButtonBase.Click>       DialogResult é `null` quando a caixa de diálogo é exibida mas não aceita nem cancelada.       Depois que uma caixa de diálogo é fechada, você pode obter o resultado da caixa de diálogo do valor retornado por <xref:System.Windows.Window.ShowDialog%2A>método, ou verificando a propriedade DialogResult.</xref:System.Windows.Window.ShowDialog%2A>       DialogResult só pode ser definida quando um <xref:System.Windows.Window>é aberta, chamando seu <xref:System.Windows.Window.ShowDialog%2A>método.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador."
  example:
  - "The following example shows how to configure an OK button and a Cancel button to return the appropriate DialogResult.  \n  \n [!code-xml[WindowDialogResultSnippets#WindowDialogResultXAML](~/add/codesnippet/xaml/WindowDialogResultSnippets.CSharp/DialogBox.xaml#windowdialogresultxaml)]  \n  \n [!code-cs[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/csharp/WindowDialogResultSnippets.CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]\n [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/visualbasic/windowdialogresultsnippets/dialogbox.xaml.vb#windowdialogresultcodebehind)]"
  syntax:
    content: public Nullable<bool> DialogResult { get; set; }
    return:
      type: System.Nullable{System.Boolean}
      description: "Um &lt;xref:System.Nullable%601&gt; o valor do tipo <xref:System.Boolean>.</xref:System.Boolean> O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.DialogResult*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "DialogResult está definido antes de uma janela é aberta, chamando <> </> *>.       - ou - DialogResult é definido em uma janela que é aberta, chamando <> </> *>."
  platform:
  - net462
- uid: System.Windows.Window.DpiChanged
  id: DpiChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre depois que o DPI da tela em que a janela é exibido é alterado."
  syntax:
    content: public event System.Windows.DpiChangedEventHandler DpiChanged;
    return:
      type: System.Windows.DpiChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DpiChangedEvent
  id: DpiChangedEvent
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Um <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> para quando o DPI da tela de janela é sobre as alterações."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DpiChangedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DragMove
  id: DragMove
  parent: System.Windows.Window
  langs:
  - csharp
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Permite que uma janela para ser arrastado por um mouse com o botão esquerdo para uma área exposta da área cliente da janela."
  remarks: "O botão esquerdo do mouse deve estar inativo quando DragMove é chamado. É uma maneira de detectar quando o botão esquerdo do mouse é pressionado lidar com o <xref:System.Windows.UIElement.MouseLeftButtonDown>evento.</xref:System.Windows.UIElement.MouseLeftButtonDown>       Quando DragMove é chamado, o botão esquerdo do mouse deve ser diminuído sobre uma área exposta da área cliente da janela.      > [!NOTE] > Esse método não pode ser chamado quando uma janela é hospedada em um navegador."
  example:
  - "The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call DragMove.  \n  \n [!code-cs[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/csharp/WindowDragMoveSnippets/MainWindow.xaml.cs#callwindowdragmovecodebehind)]\n [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/visualbasic/windowdragmovesnippets/mainwindow.xaml.vb#callwindowdragmovecodebehind)]"
  syntax:
    content: public void DragMove ();
    parameters: []
  overload: System.Windows.Window.DragMove*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O botão esquerdo do mouse não está inativo."
  platform:
  - net462
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  id: GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Retorna uma referência para o <xref href=&quot;System.Windows.Window&quot;> </xref> objeto que hospeda o árvore de conteúdo dentro do qual o objeto de dependência está localizado."
  syntax:
    content: public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "O objeto de dependência."
    return:
      type: System.Windows.Window
      description: "Um <xref href=&quot;System.Windows.Window&quot;> </xref> referência para a janela do host."
  overload: System.Windows.Window.GetWindow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dependencyObject</code>é nulo."
  platform:
  - net462
- uid: System.Windows.Window.Hide
  id: Hide
  parent: System.Windows.Window
  langs:
  - csharp
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Faz com que uma janela invisível."
  remarks: "Uma janela não é fechada quando ele estiver oculto e não o <xref:System.Windows.Window.Closing>nem <xref:System.Windows.Window.Closed>é gerado.</xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Closing> Em vez disso, de <xref:System.Windows.UIElement.Visibility%2A>propriedade é definida como <xref:System.Windows.Visibility?displayProperty=fullName>.</xref:System.Windows.Visibility?displayProperty=fullName> da janela</xref:System.Windows.UIElement.Visibility%2A>       Se uma janela é o aplicativo <xref:System.Windows.Application.MainWindow%2A>e o aplicativo <xref:System.Windows.Application.ShutdownMode%2A>é <xref:System.Windows.ShutdownMode>, o aplicativo não é desligado.</xref:System.Windows.ShutdownMode> </xref:System.Windows.Application.ShutdownMode%2A> </xref:System.Windows.Application.MainWindow%2A> Da mesma forma, o aplicativo não é desligado se uma janela é a única e modo de desligamento do aplicativo é <xref:System.Windows.ShutdownMode>.</xref:System.Windows.ShutdownMode>       Se você deseja mostrar e ocultar uma janela várias vezes durante o tempo de vida de um aplicativo e você não deseja criar novamente a janela de cada vez mostrá-la, você pode manipular o <xref:System.Windows.Window.Closing>evento, cancele-a e chame o método de ocultar.</xref:System.Windows.Window.Closing> Em seguida, você pode chamar <xref:System.Windows.Window.Show%2A>na mesma instância para reabri-lo.</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: public void Hide ();
    parameters: []
  overload: System.Windows.Window.Hide*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ocultar é chamado em uma janela que está sendo fechado (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) ou foi fechado (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.Icon
  id: Icon
  parent: System.Windows.Window
  langs:
  - csharp
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o ícone da janela."
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]aplicativos autônomos têm dois tipos de ícones:-ícone de um assembly, que é especificado usando o `<ApplicationIcon>` arquivo de compilação de propriedade no projeto do aplicativo. Esse ícone é usado como o ícone da área de trabalho para um assembly.          > [!NOTE] > Durante a depuração no Visual Studio, o ícone não pode aparecer devido ao processo de hospedagem. Se você executar o executável, o ícone será exibido. Para obter mais informações, consulte [o processo de hospedagem (vshost.exe)](~/add/includes/ajax-current-ext-md.md).      -Um ícone por janela que é especificado pelo ícone de configuração. Para cada janela, esse ícone é usado em sua barra de título, o botão da barra de tarefas e em sua entrada de lista de seleção de aplicativo ALT TAB.       Um [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] janela sempre exibe um ícone. Quando não é fornecida pelo ícone de configuração [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] escolhe um ícone para exibir com base nas seguintes regras: 1.  Use o ícone de assembly, se especificado.      2.  Se o ícone de assembly não for especificado, use o padrão [!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)] ícone.       Se você usar o ícone para especificar um ícone de janela personalizada, você pode restaurar o ícone padrão do aplicativo, definindo o ícone para `null`.       Um único ícone pode ser usado em uma variedade de formas no [!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)], inclusive sendo mostrado na barra de título de uma janela, a barra de tarefas para uma janela, a tecla ALT + TAB arquivo de lista de seleção. Cada uma dessas mostra o ícone com um tamanho diferente; um ícone de 16 x 16 pixels é exibido na barra de título de uma janela e na barra de tarefas, enquanto um ícone de 32 x 32 pixels é exibido na lista de seleção de arquivo ALT + TAB. Alguns aplicativos, como o [!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)], forneça um **exibição** menu que permite que você escolha o tamanho do ícone que você deseja exibir.       Para atender a vários tamanhos de exibição, um arquivo de ícone é composto de um ou mais ícones reais em que cada uma representa uma versão do ícone que tem como alvo uma profundidade de cor e tamanho específica. Por exemplo, um ícone pode ter somente um único ícone de 16 x 16 pixels com 16 cores, enquanto outra pode conter 16 x 16 pixels e ícones de 32 x 32 pixels com 16 cores e de 256 cores.       Se existirem ícones para todos os tamanhos possíveis e intensidades de cor em um arquivo de ícone <xref:System.Windows.Window>usará no ícone apropriado.</xref:System.Windows.Window> Se um arquivo de ícone contém apenas um subconjunto de todos os possíveis ícones, <xref:System.Windows.Window>usa o próximo ícone mais apropriado em ordem decrescente de tamanhos e profundidade de cor.</xref:System.Windows.Window>       O resultado é que um ícone sempre será usado por <xref:System.Windows.Window>, embora o ícone usado não pode direcionar a intensidade da cor e tamanho necessária.</xref:System.Windows.Window> Por exemplo, um ícone de 16 x 16 pixels com 16 cores pode ser usado para exibir como um ícone de 32 x 32 pixels com 256 cores. Isso pode causar efeitos visuais indesejáveis, como pixilation, mas pode ser evitado por meio da criação de ícones de alvo de todos os tamanhos e intensidades de cor.      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowIcon&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.IconProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.IconProperty>"
  example:
  - "The following example shows how to set a window icon.  \n  \n [!code-xml[WindowIconSnippets#WindowIconSetXAML](~/add/codesnippet/xaml/WindowIconSnippets.WindowIconSample/MainWindow.xaml#windowiconsetxaml)]  \n  \n [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/visualbasic/windowiconsample/mainwindow.xaml.vb#setwindowiconincode)]\n [!code-cs[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/csharp/WindowIconSnippets.WindowIconSample/MainWindow.xaml.cs#setwindowiconincode)]"
  syntax:
    content: public System.Windows.Media.ImageSource Icon { get; set; }
    return:
      type: System.Windows.Media.ImageSource
      description: "Um <xref href=&quot;System.Windows.Media.ImageSource&quot;> </xref> objeto que representa o ícone."
  overload: System.Windows.Window.Icon*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IconProperty
  id: IconProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.Icon*>DependencyProperty.</xref:System.Windows.Window.Icon*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IconProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActive
  id: IsActive
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém um valor que indica se a janela está ativa."
  remarks: "Uma janela ativa é a janela de primeiro plano atual do usuário e tem o foco, representado pela aparência da barra de título ativa. Uma janela ativa também será o principal de todas as janelas de nível superior não definir explicitamente o <xref:System.Windows.Window.Topmost%2A>propriedade.</xref:System.Windows.Window.Topmost%2A>      <a name=&quot;dependencyPropertyInfo_WindowIsActive&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.IsActiveProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.IsActiveProperty>"
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a janela está ativa; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActiveProperty
  id: IsActiveProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.IsActive*>DependencyProperty.</xref:System.Windows.Window.IsActive*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsActiveProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Left
  id: Left
  parent: System.Windows.Window
  langs:
  - csharp
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define a posição da borda esquerda da janela, em relação à área de trabalho."
  remarks: "Quando o <xref:System.Windows.Window>é maximizada ou minimizada, esse valor representa a borda esquerda da restauração de ponto para <xref:System.Windows.Window>.</xref:System.Windows.Window> </xref:System.Windows.Window>       Essa propriedade não pode ser definida por meio de um estilo.       Se você não especificar um valor, à esquerda é definida como o valor padrão do sistema. Você também pode especificar o valor padrão do sistema definindo esquerda para <xref:System.Double.NaN>.</xref:System.Double.NaN> Nem <xref:System.Double.NegativeInfinity>nem <xref:System.Double.PositiveInfinity>é um valor válido para a esquerda.</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowLeft&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.LeftProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.LeftProperty>"
  syntax:
    content: public double Left { get; set; }
    return:
      type: System.Double
      description: "A posição da janela de margem esquerda, em unidades lógicas (1/96 de polegada)."
  overload: System.Windows.Window.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LeftProperty
  id: LeftProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.Left*>DependencyProperty.</xref:System.Windows.Window.Left*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LeftProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LocationChanged
  id: LocationChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre quando a localização da janela é alterado."
  remarks: "Localização da janela é alterado quando:-um usuário move uma janela arrastando-a com a barra de título da janela.      -Uma janela é movida após <xref:System.Windows.Window.DragMove%2A>é chamado.</xref:System.Windows.Window.DragMove%2A>      -Ou o <xref:System.Windows.Window.Left%2A>ou <xref:System.Windows.Window.Top%2A>propriedade configurada de forma programática.</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>      -A **mover** item de menu do menu do sistema da janela é escolhido.      -A <xref:System.Windows.Window.WindowState%2A>propriedade é alterada.</xref:System.Windows.Window.WindowState%2A>"
  syntax:
    content: public event EventHandler LocationChanged;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LogicalChildren
  id: LogicalChildren
  parent: System.Windows.Window
  langs:
  - csharp
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém um enumerador para o filho lógico da janela elementos."
  syntax:
    content: protected override System.Collections.IEnumerator LogicalChildren { get; }
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>elementos filho de uma janela.</xref:System.Collections.IEnumerator>"
  overload: System.Windows.Window.LogicalChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  id: MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Substitua este método para medir o tamanho de uma janela."
  remarks: "MeasureOverride não é chamado quando a <xref:System.Windows.UIElement.Visibility%2A>propriedade tem um valor de <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A> Se o valor de <xref:System.Windows.UIElement.Visibility%2A>propriedade está <xref:System.Windows.Visibility>ou <xref:System.Windows.Visibility>, MeasureOverride é chamado.</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      > [!NOTE] > Quando um <xref:System.Windows.Window.Show%2A>ou <xref:System.Windows.Window.ShowDialog%2A>são chamados, a <xref:System.Windows.UIElement.Visibility%2A>propriedade de um <xref:System.Windows.Window>é definida como <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> que reflete o tamanho disponível que pode dar a esta janela para o filho. Infinito pode ser fornecido como um valor para indicar que a janela será dimensionado para qualquer conteúdo que está disponível."
    return:
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> que reflete o tamanho que essa janela determina necessários durante o layout, com base em seus cálculos de tamanhos de filhos."
  overload: System.Windows.Window.MeasureOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  id: OnActivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.Activated&quot;> </xref> eventos."
  remarks: "OnActivated gera o <xref:System.Windows.Window.Activated>evento.</xref:System.Windows.Window.Activated>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnActivated.</xref:System.Windows.Window> O método substituído deve chamar OnActivated na classe base se <xref:System.Windows.Window.Activated>precisa ser gerado.</xref:System.Windows.Window.Activated>"
  syntax:
    content: protected virtual void OnActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  id: OnClosed(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.Closed&quot;> </xref> eventos."
  remarks: "OnClosed gera o <xref:System.Windows.Window.Closed>evento.</xref:System.Windows.Window.Closed>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnClosed.</xref:System.Windows.Window> O método substituído deve chamar OnClosed na classe base se <xref:System.Windows.Window.Closed>precisa ser gerado.</xref:System.Windows.Window.Closed>"
  syntax:
    content: protected virtual void OnClosed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  id: OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.Closing&quot;> </xref> eventos."
  remarks: "OnClosing gera o <xref:System.Windows.Window.Closing>evento.</xref:System.Windows.Window.Closing>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnClosing.</xref:System.Windows.Window> O método substituído deve chamar OnClosing na classe base se <xref:System.Windows.Window.Closing>precisa ser gerado.</xref:System.Windows.Window.Closing>"
  syntax:
    content: protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "Um <xref:System.ComponentModel.CancelEventArgs>que contém os dados de evento.</xref:System.ComponentModel.CancelEventArgs>"
  overload: System.Windows.Window.OnClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  id: OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chamado quando o <xref:System.Windows.Controls.ContentControl.Content*>alterações de propriedade.</xref:System.Windows.Controls.ContentControl.Content*>"
  syntax:
    content: protected override void OnContentChanged (object oldContent, object newContent);
    parameters:
    - id: oldContent
      type: System.Object
      description: "Uma referência para a raiz da árvore de conteúdo antigo."
    - id: newContent
      type: System.Object
      description: "Uma referência para a raiz da árvore de conteúdo novo."
  overload: System.Windows.Window.OnContentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  id: OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.ContentRendered&quot;> </xref> eventos."
  remarks: "OnContentRendered gera o <xref:System.Windows.Window.ContentRendered>evento.</xref:System.Windows.Window.ContentRendered>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnContentRendered.</xref:System.Windows.Window> O método substituído deve chamar OnContentRendered na classe base se <xref:System.Windows.Window.ContentRendered>precisa ser gerado.</xref:System.Windows.Window.ContentRendered>"
  syntax:
    content: protected virtual void OnContentRendered (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnContentRendered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Cria e retorna um <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;> </xref> objeto para este <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Esse método substitui <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>"
  syntax:
    content: protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "A <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;></xref> object for this <xref href=&quot;System.Windows.Window&quot;></xref>."
  overload: System.Windows.Window.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  id: OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.Deactivated&quot;> </xref> eventos."
  remarks: "OnDeactivated gera o <xref:System.Windows.Window.Deactivated>evento.</xref:System.Windows.Window.Deactivated>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnDeactivated.</xref:System.Windows.Window> O método substituído deve chamar OnDeactivated na classe base se <xref:System.Windows.Window.Deactivated>precisa ser gerado.</xref:System.Windows.Window.Deactivated>"
  syntax:
    content: protected virtual void OnDeactivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnDeactivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chamado quando o DPI em que essa janela é processada alterações."
  syntax:
    content: protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);
    parameters:
    - id: oldDpi
      type: System.Windows.DpiScale
      description: "A escala DPI anterior configuração."
    - id: newDpi
      type: System.Windows.DpiScale
      description: "A escala DPI nova configuração."
  overload: System.Windows.Window.OnDpiChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  id: OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.LocationChanged&quot;> </xref> eventos."
  remarks: "OnLocationChanged gera o <xref:System.Windows.Window.LocationChanged>evento.</xref:System.Windows.Window.LocationChanged>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnLocationChanged.</xref:System.Windows.Window> O método substituído deve chamar OnLocationChanged na classe base se <xref:System.Windows.Window.LocationChanged>precisa ser gerado.</xref:System.Windows.Window.LocationChanged>"
  syntax:
    content: protected virtual void OnLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chamado quando o <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> evento ocorre."
  remarks: "Esta implementação não altera o estado manipulado (o <xref:System.Windows.RoutedEventArgs.Handled%2A>propriedade) da <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>dados de evento.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.RoutedEventArgs.Handled%2A>"
  syntax:
    content: protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "Os dados para o evento."
  overload: System.Windows.Window.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  id: OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.SourceInitialized&quot;> </xref> eventos."
  remarks: "OnSourceInitialized gera o <xref:System.Windows.Window.SourceInitialized>evento.</xref:System.Windows.Window.SourceInitialized>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnSourceInitialized.</xref:System.Windows.Window> O método substituído deve chamar OnSourceInitialized na classe base se <xref:System.Windows.Window.SourceInitialized>precisa ser gerado.</xref:System.Windows.Window.SourceInitialized>"
  syntax:
    content: protected virtual void OnSourceInitialized (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnSourceInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  id: OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.Window.StateChanged&quot;> </xref> eventos."
  remarks: "OnStateChanged gera o <xref:System.Windows.Window.StateChanged>evento.</xref:System.Windows.Window.StateChanged>       Um tipo que deriva de <xref:System.Windows.Window>podem substituir OnStateChanged.</xref:System.Windows.Window> O método substituído deve chamar OnStateChanged na classe base se <xref:System.Windows.Window.StateChanged>precisa ser gerado.</xref:System.Windows.Window.StateChanged>"
  syntax:
    content: protected virtual void OnStateChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnStateChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chamado quando o pai da janela é alterado."
  syntax:
    content: protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "O pai anterior. Definido como nulo se o <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> não tem um pai anterior."
  overload: System.Windows.Window.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OwnedWindows
  id: OwnedWindows
  parent: System.Windows.Window
  langs:
  - csharp
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém uma coleção do windows para o qual esta janela é o proprietário."
  remarks: "Uma janela de propriedade é uma cujo <xref:System.Windows.Window.Owner%2A>propriedade é definida com uma referência a outra janela, que é conhecida como a janela do proprietário.</xref:System.Windows.Window.Owner%2A> Para localizar todas as janelas que possui uma janela do proprietário, você pode enumerar <xref:System.Windows.WindowCollection>que é retornada pela propriedade OwnedWindows.</xref:System.Windows.WindowCollection>"
  example:
  - "The following example shows how to enumerate OwnedWindows.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#getwindowownedwindowscode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]"
  syntax:
    content: public System.Windows.WindowCollection OwnedWindows { get; }
    return:
      type: System.Windows.WindowCollection
      description: "Um <xref href=&quot;System.Windows.WindowCollection&quot;> </xref> que contém referências do Windows para o qual esta janela é o proprietário."
  overload: System.Windows.Window.OwnedWindows*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Owner
  id: Owner
  parent: System.Windows.Window
  langs:
  - csharp
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o <xref href=&quot;System.Windows.Window&quot;> </xref> que possui essa <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Quando uma janela filho é aberta por uma janela pai chamando <xref:System.Windows.Window.ShowDialog%2A>, é estabelecida uma relação implícita entre a janela pai e filho.</xref:System.Windows.Window.ShowDialog%2A> Essa relação impõe determinados comportamentos, inclusive em relação ao minimizar, maximizar e restaurar.       Quando uma janela filho é criada por uma janela pai chamando <xref:System.Windows.Window.Show%2A>, no entanto, a janela filho não tem uma relação com a janela pai.</xref:System.Windows.Window.Show%2A> Isso significa que:-a janela filho não tem uma referência para a janela pai.      -O comportamento da janela filho não é dependente de comportamento da janela do pai. a janela pode cobrir a outra ou ser minimizada, maximizada e restaurada independentemente uns dos outros.       Para permitir que você criar uma relação entre uma janela filho e uma janela pai, <xref:System.Windows.Window>oferece suporte a noção de propriedade.</xref:System.Windows.Window> Propriedade é estabelecida quando a propriedade do proprietário de uma janela (a janela de propriedade) é definida com uma referência a outra janela (a janela do proprietário).       Quando essa relação é estabelecida, os seguintes comportamentos são exibidos:-se uma janela do proprietário é minimizada, todos os seu windows corporativos é minimizado também.      -Se uma janela de propriedade é minimizada, seu proprietário não é minimizado.      -Se uma janela do proprietário é maximizada, a janela do proprietário e seu windows corporativos é restaurado.      -Uma janela do proprietário nunca pode abranger uma janela de propriedade.      -Propriedade windows que não foram abertos usando <xref:System.Windows.Window.ShowDialog%2A>não são restritas.</xref:System.Windows.Window.ShowDialog%2A> O usuário ainda pode interagir com a janela do proprietário.      -Se você fechar uma janela do proprietário, sua propriedade windows também é fechado.      -Se uma janela de propriedade foi aberta por seu proprietário janela usando <xref:System.Windows.Window.Show%2A>e o proprietário da janela for fechada, a janela de propriedade <xref:System.Windows.Window.Closing>não é gerado.</xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Show%2A>       Quando você abre uma janela filho chamando <xref:System.Windows.Window.ShowDialog%2A>, você também deve definir a propriedade proprietário da janela filho.</xref:System.Windows.Window.ShowDialog%2A> Se você não fizer isso, os usuários não será capazes de restaurar a janela filho e a janela pai, pressionando o botão de barra de tarefas. Em vez disso, o pressionamento do botão de barra de tarefas produzirá uma lista do windows, incluindo a janela pai e filho, a seleção; somente a janela selecionada é restaurada.      > [!IMPORTANT] > Você também deve definir a propriedade Owner em uma janela que é aberta, chamando <xref:System.Windows.Window.ShowDialog%2A>para verificar o comportamento correto com.</xref:System.Windows.Window.ShowDialog%2A>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador."
  example:
  - "The following example shows how to establish the owner/owned relationship.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#setwindowownercode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#setwindowownercode)]"
  syntax:
    content: public System.Windows.Window Owner { get; set; }
    return:
      type: System.Windows.Window
      description: "Um <xref href=&quot;System.Windows.Window&quot;> </xref> objeto que representa o proprietário deste <xref href=&quot;System.Windows.Window&quot;> </xref>."
  overload: System.Windows.Window.Owner*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uma janela tenta proprietário dele mesmo - ou - duas janelas tentarem possui uns aos outros."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A propriedade Owner é definida em uma janela visível mostrada usando <xref:System.Windows.Window.ShowDialog*>- ou - proprietário a propriedade é definida com uma janela que não tenha sido exibida anteriormente.</xref:System.Windows.Window.ShowDialog*>"
  platform:
  - net462
- uid: System.Windows.Window.ResizeMode
  id: ResizeMode
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o modo de redimensionamento."
  remarks: "Há quatro opções:- **NoResize**. O usuário não pode redimensionar a janela. As caixas de maximizar e minimizar não são mostradas.      - **CanMinimize**. O usuário só pode minimizar a janela e restaurá-lo na barra de tarefas. As caixas de minimizar e maximizar são mostradas, mas a caixa de minimização está habilitada.      - **CanResize**. O usuário tem a capacidade total para redimensionar a janela, usando as caixas de minimizar e maximizar e uma estrutura de tópicos arrastável a janela. As caixas de minimizar e maximizar são mostradas e habilitadas. (Padrão).      - **CanResizeWithGrip**. Essa opção tem a mesma funcionalidade que <xref:System.Windows.ResizeMode>, mas adiciona uma alça de redimensionamento&quot;&quot; para o canto inferior direito da janela.</xref:System.Windows.ResizeMode>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowResizeMode&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.ResizeModeProperty>|   | Definir propriedades de metadados `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.Window.ResizeModeProperty>"
  syntax:
    content: public System.Windows.ResizeMode ResizeMode { get; set; }
    return:
      type: System.Windows.ResizeMode
      description: "Um <xref href=&quot;System.Windows.ResizeMode&quot;> </xref> valor que especifica o modo de redimensionamento."
  overload: System.Windows.Window.ResizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ResizeModeProperty
  id: ResizeModeProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.ResizeMode*>DependencyProperty.</xref:System.Windows.Window.ResizeMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ResizeModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.RestoreBounds
  id: RestoreBounds
  parent: System.Windows.Window
  langs:
  - csharp
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém o tamanho e a localização de uma janela antes que está sendo o minimizado ou maximizado."
  remarks: "O retângulo de restauração é a região ocupada pela janela antes que ele foi minimizado ou maximizado. Você pode usar RestoreBounds para salvar o último tamanho e localização de uma janela antes do fechamento de um aplicativo e recuperar esses valores na próxima vez que um aplicativo é iniciado para restaurar uma janela à forma como um usuário deixou.       Se você consultar RestoreBounds antes que a janela foi mostrada ou depois que ele foi fechado, <xref:System.Windows.Rect.Empty%2A>será retornado.</xref:System.Windows.Rect.Empty%2A>      > [!NOTE] > Não é possível obter esta propriedade quando uma janela é hospedada em um navegador."
  example:
  - "The following example uses RestoreBounds and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.  \n  \n [!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml1)]  \n[!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml2)]  \n  \n [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]\n [!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]  \n[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]\n[!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]"
  syntax:
    content: public System.Windows.Rect RestoreBounds { get; }
    return:
      type: System.Windows.Rect
      description: "Um <xref href=&quot;System.Windows.Rect&quot;> </xref> que especifica o tamanho e a localização de uma janela antes de ser minimizada ou maximizada."
  overload: System.Windows.Window.RestoreBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Show
  id: Show
  parent: System.Windows.Window
  langs:
  - csharp
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Abre uma janela e retorna sem esperar que a janela recém-aberta feche."
  remarks: "Quando o <xref:System.Windows.Window>classe é instanciada, ela não é visível por padrão.</xref:System.Windows.Window> Mostrar mostra uma janela e retorna imediatamente, sem esperar que a janela a ser fechado. Consequentemente, a janela aberta não impede que usuários interagir com outras janelas no aplicativo. Esse tipo de janela é chamado um *sem janela restrita* janela. Exemplos comuns do windows sem janela restrita são paletas, caixas de ferramentas e janelas Propriedades. Para impedir que um usuário para interagir com uma janela específica, a janela deve ser aberto chamando <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A>       Uma janela que é aberta, chamando mostrar automaticamente não tem uma relação com a janela que a abriu; Especificamente, a janela aberta não sabe qual janela aberto. Essa relação pode ser estabelecida com o <xref:System.Windows.Window.Owner%2A>propriedade e gerenciados usando o <xref:System.Windows.Window.OwnedWindows%2A>propriedade.</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A>       Chamar Show atinja o mesmo resultado de fim de definir a <xref:System.Windows.UIElement.Visibility%2A>propriedade do <xref:System.Windows.Window>objeto <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> No entanto, há uma diferença entre os dois de uma perspectiva de tempo.       Chamar Show é uma operação síncrona que retorna apenas depois de <xref:System.Windows.FrameworkElement.Loaded>foi levantado o evento na janela filho: [!code-vb [WindowShowTimingSnippets #ShowSync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)][!code-cs[WindowShowTimingSnippets #ShowSync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync) ] configuração <xref:System.Windows.UIElement.Visibility%2A>, no entanto, é uma operação assíncrona que retorna imediatamente: [!code-vb [WindowShowTimingSnippets #ShowASync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)][!code-cs[WindowShowTimingSnippets #ShowASync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync) ] ao definir <xref:System.Windows.UIElement.Visibility%2A>, quaisquer eventos da janela registrar antes de definir <xref:System.Windows.UIElement.Visibility%2A>não pode ser gerado até após o método em que você definir <xref:System.Windows.UIElement.Visibility%2A>concluiu a execução.</xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.FrameworkElement.Loaded>"
  example:
  - "The following sample demonstrates how to open a modeless window.  \n  \n [!code-vb[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/visualbasic/windowshowsnippets/mainwindow.xaml.vb#windowshowcode)]\n [!code-cs[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/csharp/WindowShowSnippets.CSharp/MainWindow.xaml.cs#windowshowcode)]"
  syntax:
    content: public void Show ();
    parameters: []
  overload: System.Windows.Window.Show*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Mostrar é chamado em uma janela que está sendo fechado (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) ou foi fechado (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.ShowActivated
  id: ShowActivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se uma janela é ativada quando mostrada pela primeira vez."
  remarks: "Quando uma janela com a propriedade ShowActivated definida como `false` é aberto, a janela não está ativada e o <xref:System.Windows.Window.Activated>evento não será gerado até que um usuário manualmente ativa a janela selecionando o proprietário.</xref:System.Windows.Window.Activated> Depois que a janela é selecionada, ele ativa e desativa normalmente.       Para impedir que uma janela que está sendo ativado quando ele é aberto, a propriedade ShowActivated deve ser definida como `false` antes que a janela é mostrada (chamando <xref:System.Windows.Window.Show%2A>); definir ShowActivated como `false` depois que uma janela seja exibida não tem nenhum efeito.</xref:System.Windows.Window.Show%2A>       Definindo ShowActivated como `false` em uma janela que é aberta modalmente, chamando <xref:System.Windows.Window.ShowDialog%2A>, não tem nenhum impacto real.</xref:System.Windows.Window.ShowDialog%2A> Embora a janela restrita não será ativada, a janela modal impedirá o usuário ativar todas as janelas abertas.      <a name=&quot;dependencyPropertyInfo_WindowShowActivated&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.ShowActivatedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.ShowActivatedProperty>"
  example:
  - "The following example shows how to use markup to configure a window to be opened without being activated.  \n  \n [!code-xml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/add/codesnippet/xaml/WindowShowActivatedSnippets/AWindow.xaml#showunactivatedmarkup1)]  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/csharp/WindowShowActivatedSnippets/AWindow.xaml.cs#showunactivatedcodebehind)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/awindow.xaml.vb#showunactivatedcodebehind)]  \n  \n The following example shows how to use code to configure a window to be opened without it being activated.  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/csharp/WindowShowActivatedSnippets/Window1.xaml.cs#showunactivatedwindowcode)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/window1.xaml.vb#showunactivatedwindowcode)]"
  syntax:
    content: public bool ShowActivated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se uma janela é ativada quando mostrada pela primeira vez; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.ShowActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowActivatedProperty
  id: ShowActivatedProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.ShowActivated*>DependencyProperty.</xref:System.Windows.Window.ShowActivated*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowActivatedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowDialog
  id: ShowDialog
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Abre uma janela e retorna somente quando a janela recém-aberta é fechada."
  remarks: "Quando um <xref:System.Windows.Window>classe é instanciada, ela não é visível por padrão.</xref:System.Windows.Window> ShowDialog mostra a janela, desabilita todas as outras janelas no aplicativo e retorna somente quando a janela for fechada. Esse tipo de janela é conhecido como um *modal* janela.       Janelas modais são usadas principalmente como caixas de diálogo. Uma caixa de diálogo é um tipo especial de janela que aplicativos usam para interagir com os usuários para executar tarefas, como abrir arquivos ou impressão de documentos. Caixas de diálogo geralmente permitem aos usuários aceitar ou cancelar a tarefa para a qual eles foram mostrados antes da caixa de diálogo é fechada. ShowDialog retorna um <xref:System.Nullable%601> <xref:System.Boolean>valor que especifica se a atividade foi aceito ou cancelada.</xref:System.Boolean></xref:System.Nullable%601> O valor de retorno é o valor da <xref:System.Windows.Window.DialogResult%2A>propriedade antes de fecha uma janela.</xref:System.Windows.Window.DialogResult%2A> Para obter mais informações, consulte <xref:System.Windows.Window.DialogResult%2A>.</xref:System.Windows.Window.DialogResult%2A>       Uma janela que é aberta, chamando o método ShowDialog automaticamente não tem uma relação com a janela que é aberta. Especificamente, a janela aberta não sabe qual janela aberto. Essa relação pode ser estabelecida com o <xref:System.Windows.Window.Owner%2A>propriedade e gerenciados usando o <xref:System.Windows.Window.OwnedWindows%2A>propriedade.</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A> Para dar suporte a [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] automação (consulte [visão geral de automação de interface do usuário](~/add/includes/ajax-current-ext-md.md)), <xref:System.Windows.Window.Owner%2A>deve ser definida para uma janela aberta chamando ShowDialog.</xref:System.Windows.Window.Owner%2A>       Quando um modal [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] (uma janela aberta chamando ShowDialog) da janela for fechada, a janela ativada anteriormente é reativada. Se um modal [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] janela tem uma janela do proprietário (consulte <xref:System.Windows.Window.Owner%2A>), a janela do proprietário não é reativado quando o modal [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] janela for fechada, a menos que era a janela anteriormente ativada.</xref:System.Windows.Window.Owner%2A>      > [!NOTE] > Esse método não pode ser chamado quando uma janela é hospedada em um navegador."
  example:
  - "The following sample demonstrates how to open a modal window.  \n  \n [!code-cs[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/csharp/WindowShowDialogSnippets.CSharp/MainWindow.xaml.cs#windowshowdialogcode)]\n [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/visualbasic/windowshowdialogsnippets/mainwindow.xaml.vb#windowshowdialogcode)]"
  syntax:
    content: public Nullable<bool> ShowDialog ();
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "Um &lt;xref:System.Nullable%601&gt; o valor do tipo <xref:System.Boolean>que especifica se a atividade foi aceito (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>) ou cancelado (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>).</xref:System.Boolean> O valor de retorno é o valor da <xref:System.Windows.Window.DialogResult*>propriedade antes de fecha uma janela.</xref:System.Windows.Window.DialogResult*>"
  overload: System.Windows.Window.ShowDialog*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ShowDialog é chamado em uma janela que está sendo fechado (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) ou foi fechado (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbar
  id: ShowInTaskbar
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se a janela tem um botão de barra de tarefas."
  remarks: "Se ShowInTaskbar for definido como `true`, a janela também aparecerá na lista de seleção de aplicativo ALT + TAB.       O ícone que é usado para o botão da barra de tarefas e a lista de seleção de aplicativo ALT + TAB é o valor da <xref:System.Windows.Window.Icon%2A>propriedade.</xref:System.Windows.Window.Icon%2A>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowShowInTaskbar&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.ShowInTaskbarProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.ShowInTaskbarProperty>"
  syntax:
    content: public bool ShowInTaskbar { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a janela tem um botão de barra de tarefas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Não é aplicável quando a janela está hospedada em um navegador."
  overload: System.Windows.Window.ShowInTaskbar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbarProperty
  id: ShowInTaskbarProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.ShowInTaskbar*>DependencyProperty.</xref:System.Windows.Window.ShowInTaskbar*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContent
  id: SizeToContent
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se uma janela será redimensionada automaticamente para ajustar o tamanho do seu conteúdo."
  remarks: "Quando o tamanho do conteúdo é definido como <xref:System.Windows.SizeToContent>, configuração <xref:System.Windows.FrameworkElement.Height%2A>ou <xref:System.Windows.FrameworkElement.Width%2A>não tem nenhum efeito; ambas as propriedades podem ser definidas, mas os valores que são definidas com não são aplicados à janela.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       Quando o tamanho do conteúdo é definido como <xref:System.Windows.SizeToContent>, configuração <xref:System.Windows.FrameworkElement.Height%2A>não altera a altura da janela.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       Quando o tamanho do conteúdo é definido como <xref:System.Windows.SizeToContent>, configuração <xref:System.Windows.FrameworkElement.Width%2A>não altera a largura da janela.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.SizeToContent>       Se o tamanho do conteúdo tem um valor diferente de <xref:System.Windows.SizeToContent>:-tamanho do conteúdo é definida automaticamente como <xref:System.Windows.SizeToContent>se um usuário redimensionar a janela usando a alça de redimensionamento ou arrastando a borda.</xref:System.Windows.SizeToContent> </xref:System.Windows.SizeToContent>      -Se o tamanho do conteúdo é alterado de forma que faz com que a janela para redimensionar em si, <xref:System.Windows.FrameworkElement.SizeChanged>é gerado.</xref:System.Windows.FrameworkElement.SizeChanged>       Se uma janela é transparente (consulte <xref:System.Windows.Window.AllowsTransparency%2A>), você deve considerar a configuração de tamanho do conteúdo como <xref:System.Windows.SizeToContent>para garantir que a janela não seja maior que seu conteúdo visível.</xref:System.Windows.SizeToContent> </xref:System.Windows.Window.AllowsTransparency%2A>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowSizeToContent&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.SizeToContentProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.SizeToContentProperty>"
  example:
  - "The following example shows how to set the SizeToContent property in code to specify how a window resizes to fit its content.  \n  \n [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/visualbasic/howtowindowmanagementsnippets/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]\n [!code-cs[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/csharp/HOWTOWindowManagementSnippets/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]"
  syntax:
    content: public System.Windows.SizeToContent SizeToContent { get; set; }
    return:
      type: System.Windows.SizeToContent
      description: "A <xref href=&quot;System.Windows.SizeToContent&quot;></xref> value. O padrão é <xref href=&quot;System.Windows.SizeToContent&quot;> </xref>."
  overload: System.Windows.Window.SizeToContent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContentProperty
  id: SizeToContentProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.SizeToContent*>DependencyProperty.</xref:System.Windows.Window.SizeToContent*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SizeToContentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SourceInitialized
  id: SourceInitialized
  parent: System.Windows.Window
  langs:
  - csharp
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Esse evento é gerado para dar suporte à interoperação com [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]. See <xref href=&quot;System.Windows.Interop.HwndSource&quot;></xref>."
  syntax:
    content: public event EventHandler SourceInitialized;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.StateChanged
  id: StateChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ocorre quando a janela <xref:System.Windows.Window.WindowState*>alterações de propriedade.</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public event EventHandler StateChanged;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfo
  id: TaskbarItemInfo
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o [!INCLUDE[win7](~/add/includes/win7-md.md)] miniatura da barra de tarefas para o <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Para obter mais informações sobre como usar o [!INCLUDE[win7](~/add/includes/win7-md.md)] miniatura da barra de tarefas, consulte a <xref:System.Windows.Shell.TaskbarItemInfo>classe.</xref:System.Windows.Shell.TaskbarItemInfo>"
  syntax:
    content: public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }
    return:
      type: System.Windows.Shell.TaskbarItemInfo
      description: "O [!INCLUDE[win7](~/add/includes/win7-md.md)] miniatura da barra de tarefas para o <xref href=&quot;System.Windows.Window&quot;> </xref>."
  overload: System.Windows.Window.TaskbarItemInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfoProperty
  id: TaskbarItemInfoProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.TaskbarItemInfo*>DependencyProperty.</xref:System.Windows.Window.TaskbarItemInfo*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Title
  id: Title
  parent: System.Windows.Window
  langs:
  - csharp
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o título da janela."
  remarks: "O título de um <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, ou [!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)], também pode ser definida usando <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Window>      <a name=&quot;dependencyPropertyInfo_WindowTitle&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.TitleProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.TitleProperty>"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o título da janela.</xref:System.String>"
  overload: System.Windows.Window.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TitleProperty
  id: TitleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.Title*>DependencyProperty.</xref:System.Windows.Window.Title*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TitleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Top
  id: Top
  parent: System.Windows.Window
  langs:
  - csharp
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define a posição da borda superior da janela, em relação à área de trabalho."
  remarks: "Quando o <xref:System.Windows.Window>é maximizada ou minimizada, esse valor representa a borda superior da restauração de ponto para <xref:System.Windows.Window>.</xref:System.Windows.Window> </xref:System.Windows.Window>       Essa propriedade não pode ser definida por meio de um estilo.       Se você não especificar um valor, superior é definido como o valor padrão do sistema. Você também pode especificar o valor padrão do sistema definindo superior para <xref:System.Double.NaN>.</xref:System.Double.NaN> Nem <xref:System.Double.NegativeInfinity>nem <xref:System.Double.PositiveInfinity>é um valor válido para a parte superior.</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowTop&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.TopProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.TopProperty>"
  syntax:
    content: public double Top { get; set; }
    return:
      type: System.Double
      description: "A posição da parte superior da janela, em unidades lógicas (1/96&quot;)."
  overload: System.Windows.Window.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Topmost
  id: Topmost
  parent: System.Windows.Window
  langs:
  - csharp
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se uma janela é exibida na ordem z superior."
  remarks: "Uma janela cuja propriedade mais alta é definida como `true` aparece acima de todos os windows cujas propriedades de nível superior são definidas como `false`.       No grupo do windows que tenha Topmost propriedade está definida como `true`, a janela atualmente ativo é o mais alto. Da mesma forma para o grupo do windows que tenha Topmost propriedade está definida como `false`.      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowTopmost&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.TopmostProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.TopmostProperty>"
  syntax:
    content: public bool Topmost { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a janela é mais alta; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.Topmost*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopmostProperty
  id: TopmostProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.Topmost*>DependencyProperty.</xref:System.Windows.Window.Topmost*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopmostProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopProperty
  id: TopProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.Top*>DependencyProperty.</xref:System.Windows.Window.Top*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStartupLocation
  id: WindowStartupLocation
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define a posição da janela quando mostrada pela primeira vez."
  remarks: "Definindo <xref:System.Windows.WindowStartupLocation>para <xref:System.Windows.WindowStartupLocation>faz com que uma janela deve ser posicionado de acordo com seu <xref:System.Windows.Window.Left%2A>e <xref:System.Windows.Window.Top%2A>valores de propriedade.</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> Se o <xref:System.Windows.Window.Left%2A>ou <xref:System.Windows.Window.Top%2A>propriedades não forem especificadas, seus valores são determinados pelo [!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)].</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>       Configuração <xref:System.Windows.WindowStartupLocation>faz com que uma janela deve ser posicionado no centro da tela que contém o cursor do mouse.</xref:System.Windows.WindowStartupLocation>       Definindo <xref:System.Windows.WindowStartupLocation>para <xref:System.Windows.WindowStartupLocation>faz com que uma janela deve ser posicionado no centro da sua janela do proprietário (consulte <xref:System.Windows.Window.Owner%2A>), se especificada.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> A janela do proprietário pode ser uma janela de não-WPF ou outra janela do WPF.      > [!NOTE] > Para obter mais informações sobre janelas WPF com o windows não-WPF, consulte [WPF e Win32 interoperação](~/add/includes/ajax-current-ext-md.md) e <xref:System.Windows.Interop.WindowInteropHelper>.</xref:System.Windows.Interop.WindowInteropHelper>       Se uma janela do proprietário não for especificada, a posição da janela é determinada da mesma forma como se <xref:System.Windows.WindowStartupLocation>for definido como <xref:System.Windows.WindowStartupLocation>.</xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation>      > [!NOTE] > Você não pode definir ou obter o valor dessa propriedade quando uma janela está hospedada em um navegador."
  syntax:
    content: public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }
    return:
      type: System.Windows.WindowStartupLocation
      description: "Um <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref> valor que especifica a posição superior/esquerdo de uma janela quando mostrada pela primeira vez. O padrão é <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref>."
  overload: System.Windows.Window.WindowStartupLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowState
  id: WindowState
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se uma janela é restaurada, minimizada ou maximizada."
  remarks: "Antes de uma janela é minimizada ou maximizada, seu tamanho e local são armazenados em <xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A> Quando uma janela é restaurada posteriormente, seus valores de tamanho e local são restaurados com os valores de <xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A>       Quando a propriedade WindowState é alterada, <xref:System.Windows.Window.StateChanged>é gerado.</xref:System.Windows.Window.StateChanged>      > [!NOTE] > Você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowWindowState&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.WindowStateProperty>|   | Definir propriedades de metadados `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> </xref:System.Windows.Window.WindowStateProperty>"
  syntax:
    content: public System.Windows.WindowState WindowState { get; set; }
    return:
      type: System.Windows.WindowState
      description: "Um <xref href=&quot;System.Windows.WindowState&quot;> </xref> que determina se uma janela é restaurada, minimizada ou maximizada. O padrão é <xref href=&quot;System.Windows.WindowState&quot;> </xref> (restaurada)."
  overload: System.Windows.Window.WindowState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStateProperty
  id: WindowStateProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.WindowState*>DependencyProperty.</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStateProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyle
  id: WindowStyle
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define o estilo da borda da janela."
  remarks: "WindowStyle pode ser uma da <xref:System.Windows.WindowStyle>valores de enumeração, incluindo <xref:System.Windows.WindowStyle>, <xref:System.Windows.WindowStyle>, <xref:System.Windows.WindowStyle>(padrão) e <xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle>       A figura a seguir mostra os estilos de janela em [!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)] (tema Aero do Windows Vista, com efeito de transparência habilitado): ![estilos de janela](~/add/media/windowoverviewfigure6.PNG &quot;estilos de janela&quot;)       >  [!NOTE] > você não pode definir ou obter esta propriedade quando uma janela é hospedada em um navegador.      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.Window.WindowStyleProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.Window.WindowStyleProperty>"
  syntax:
    content: public System.Windows.WindowStyle WindowStyle { get; set; }
    return:
      type: System.Windows.WindowStyle
      description: "Um <xref href=&quot;System.Windows.WindowStyle&quot;> </xref> que especifica o estilo da borda da janela. O padrão é <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>."
  overload: System.Windows.Window.WindowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyleProperty
  id: WindowStyleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.Window.WindowStyle*>DependencyProperty.</xref:System.Windows.Window.WindowStyle*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Controls.ContentControl
  isExternal: false
  name: System.Windows.Controls.ContentControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Window.#ctor
  parent: System.Windows.Window
  isExternal: false
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
- uid: System.Windows.Window.Activate
  parent: System.Windows.Window
  isExternal: false
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Window.Activated
  parent: System.Windows.Window
  isExternal: false
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Window.AllowsTransparency
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
- uid: System.Windows.Window.AllowsTransparencyProperty
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Window.Close
  parent: System.Windows.Window
  isExternal: false
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
- uid: System.Windows.Window.Closed
  parent: System.Windows.Window
  isExternal: false
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
- uid: System.Windows.Window.Closing
  parent: System.Windows.Window
  isExternal: false
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Window.ContentRendered
  parent: System.Windows.Window
  isExternal: false
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
- uid: System.Windows.Window.Deactivated
  parent: System.Windows.Window
  isExternal: false
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
- uid: System.Windows.Window.DialogResult
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: true
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Window.DpiChanged
  parent: System.Windows.Window
  isExternal: false
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
- uid: System.Windows.DpiChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DpiChangedEventHandler
  nameWithType: DpiChangedEventHandler
  fullName: System.Windows.DpiChangedEventHandler
- uid: System.Windows.Window.DpiChangedEvent
  parent: System.Windows.Window
  isExternal: false
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Window.DragMove
  parent: System.Windows.Window
  isExternal: false
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Window.Hide
  parent: System.Windows.Window
  isExternal: false
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
- uid: System.Windows.Window.Icon
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
- uid: System.Windows.Media.ImageSource
  parent: System.Windows.Media
  isExternal: false
  name: ImageSource
  nameWithType: ImageSource
  fullName: System.Windows.Media.ImageSource
- uid: System.Windows.Window.IconProperty
  parent: System.Windows.Window
  isExternal: false
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
- uid: System.Windows.Window.IsActive
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
- uid: System.Windows.Window.IsActiveProperty
  parent: System.Windows.Window
  isExternal: false
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
- uid: System.Windows.Window.Left
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Window.LeftProperty
  parent: System.Windows.Window
  isExternal: false
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
- uid: System.Windows.Window.LocationChanged
  parent: System.Windows.Window
  isExternal: false
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
- uid: System.Windows.Window.LogicalChildren
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
- uid: System.Windows.Window.OnCreateAutomationPeer
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
- uid: System.Windows.DpiScale
  parent: System.Windows
  isExternal: false
  name: DpiScale
  nameWithType: DpiScale
  fullName: System.Windows.DpiScale
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.Window.OwnedWindows
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
- uid: System.Windows.WindowCollection
  parent: System.Windows
  isExternal: false
  name: WindowCollection
  nameWithType: WindowCollection
  fullName: System.Windows.WindowCollection
- uid: System.Windows.Window.Owner
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
- uid: System.Windows.Window.ResizeMode
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
- uid: System.Windows.ResizeMode
  parent: System.Windows
  isExternal: false
  name: ResizeMode
  nameWithType: ResizeMode
  fullName: System.Windows.ResizeMode
- uid: System.Windows.Window.ResizeModeProperty
  parent: System.Windows.Window
  isExternal: false
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
- uid: System.Windows.Window.RestoreBounds
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Window.Show
  parent: System.Windows.Window
  isExternal: false
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
- uid: System.Windows.Window.ShowActivated
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
- uid: System.Windows.Window.ShowActivatedProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
- uid: System.Windows.Window.ShowDialog
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
- uid: System.Windows.Window.ShowInTaskbar
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
- uid: System.Windows.Window.ShowInTaskbarProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
- uid: System.Windows.Window.SizeToContent
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
- uid: System.Windows.SizeToContent
  parent: System.Windows
  isExternal: false
  name: SizeToContent
  nameWithType: SizeToContent
  fullName: System.Windows.SizeToContent
- uid: System.Windows.Window.SizeToContentProperty
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
- uid: System.Windows.Window.SourceInitialized
  parent: System.Windows.Window
  isExternal: false
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
- uid: System.Windows.Window.StateChanged
  parent: System.Windows.Window
  isExternal: false
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
- uid: System.Windows.Window.TaskbarItemInfo
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
- uid: System.Windows.Shell.TaskbarItemInfo
  parent: System.Windows.Shell
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo
  fullName: System.Windows.Shell.TaskbarItemInfo
- uid: System.Windows.Window.TaskbarItemInfoProperty
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
- uid: System.Windows.Window.Title
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Window.TitleProperty
  parent: System.Windows.Window
  isExternal: false
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
- uid: System.Windows.Window.Top
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
- uid: System.Windows.Window.Topmost
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
- uid: System.Windows.Window.TopmostProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
- uid: System.Windows.Window.TopProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
- uid: System.Windows.Window.WindowStartupLocation
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
- uid: System.Windows.WindowStartupLocation
  parent: System.Windows
  isExternal: false
  name: WindowStartupLocation
  nameWithType: WindowStartupLocation
  fullName: System.Windows.WindowStartupLocation
- uid: System.Windows.Window.WindowState
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
- uid: System.Windows.WindowState
  parent: System.Windows
  isExternal: false
  name: WindowState
  nameWithType: WindowState
  fullName: System.Windows.WindowState
- uid: System.Windows.Window.WindowStateProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
- uid: System.Windows.Window.WindowStyle
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
- uid: System.Windows.WindowStyle
  parent: System.Windows
  isExternal: false
  name: WindowStyle
  nameWithType: WindowStyle
  fullName: System.Windows.WindowStyle
- uid: System.Windows.Window.WindowStyleProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
- uid: System.Windows.Window.#ctor*
  parent: System.Windows.Window
  isExternal: false
  name: Window
  nameWithType: Window.Window
- uid: System.Windows.Window.Activate*
  parent: System.Windows.Window
  isExternal: false
  name: Activate
  nameWithType: Window.Activate
- uid: System.Windows.Window.AllowsTransparency*
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
- uid: System.Windows.Window.ArrangeOverride*
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride
  nameWithType: Window.ArrangeOverride
- uid: System.Windows.Window.Close*
  parent: System.Windows.Window
  isExternal: false
  name: Close
  nameWithType: Window.Close
- uid: System.Windows.Window.DialogResult*
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
- uid: System.Windows.Window.DragMove*
  parent: System.Windows.Window
  isExternal: false
  name: DragMove
  nameWithType: Window.DragMove
- uid: System.Windows.Window.GetWindow*
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow
  nameWithType: Window.GetWindow
- uid: System.Windows.Window.Hide*
  parent: System.Windows.Window
  isExternal: false
  name: Hide
  nameWithType: Window.Hide
- uid: System.Windows.Window.Icon*
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
- uid: System.Windows.Window.IsActive*
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
- uid: System.Windows.Window.Left*
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
- uid: System.Windows.Window.LogicalChildren*
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
- uid: System.Windows.Window.MeasureOverride*
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride
  nameWithType: Window.MeasureOverride
- uid: System.Windows.Window.OnActivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated
  nameWithType: Window.OnActivated
- uid: System.Windows.Window.OnClosed*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed
  nameWithType: Window.OnClosed
- uid: System.Windows.Window.OnClosing*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing
  nameWithType: Window.OnClosing
- uid: System.Windows.Window.OnContentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged
  nameWithType: Window.OnContentChanged
- uid: System.Windows.Window.OnContentRendered*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered
  nameWithType: Window.OnContentRendered
- uid: System.Windows.Window.OnCreateAutomationPeer*
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: Window.OnCreateAutomationPeer
- uid: System.Windows.Window.OnDeactivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated
  nameWithType: Window.OnDeactivated
- uid: System.Windows.Window.OnDpiChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged
  nameWithType: Window.OnDpiChanged
- uid: System.Windows.Window.OnLocationChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged
  nameWithType: Window.OnLocationChanged
- uid: System.Windows.Window.OnManipulationBoundaryFeedback*
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: Window.OnManipulationBoundaryFeedback
- uid: System.Windows.Window.OnSourceInitialized*
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized
  nameWithType: Window.OnSourceInitialized
- uid: System.Windows.Window.OnStateChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged
  nameWithType: Window.OnStateChanged
- uid: System.Windows.Window.OnVisualParentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: Window.OnVisualParentChanged
- uid: System.Windows.Window.OwnedWindows*
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
- uid: System.Windows.Window.Owner*
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
- uid: System.Windows.Window.ResizeMode*
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
- uid: System.Windows.Window.RestoreBounds*
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
- uid: System.Windows.Window.Show*
  parent: System.Windows.Window
  isExternal: false
  name: Show
  nameWithType: Window.Show
- uid: System.Windows.Window.ShowActivated*
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
- uid: System.Windows.Window.ShowDialog*
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog
  nameWithType: Window.ShowDialog
- uid: System.Windows.Window.ShowInTaskbar*
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
- uid: System.Windows.Window.SizeToContent*
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
- uid: System.Windows.Window.TaskbarItemInfo*
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
- uid: System.Windows.Window.Title*
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
- uid: System.Windows.Window.Top*
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
- uid: System.Windows.Window.Topmost*
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
- uid: System.Windows.Window.WindowStartupLocation*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
- uid: System.Windows.Window.WindowState*
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
- uid: System.Windows.Window.WindowStyle*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
