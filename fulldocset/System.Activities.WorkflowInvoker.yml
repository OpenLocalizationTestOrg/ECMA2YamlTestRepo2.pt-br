### YamlMime:ManagedReference
items:
- uid: System.Activities.WorkflowInvoker
  id: WorkflowInvoker
  children:
  - System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  - System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  - System.Activities.WorkflowInvoker.Extensions
  - System.Activities.WorkflowInvoker.Invoke
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  - System.Activities.WorkflowInvoker.InvokeCompleted
  langs:
  - csharp
  name: WorkflowInvoker
  nameWithType: WorkflowInvoker
  fullName: System.Activities.WorkflowInvoker
  type: Class
  summary: "Fornece um meio para invocar um fluxo de trabalho como se fosse uma chamada de método."
  remarks: "WorkflowInvoker contém a instância e métodos estáticos para chamar fluxos de trabalho de forma síncrona e os métodos de instância para chamar fluxos de trabalho de forma assíncrona.       WorkflowInvoker não permitem o controle de instância como persistentes, descarregamento ou indicadores de retomada. Se o controle de instância é desejado, use <xref:System.Activities.WorkflowApplication>em vez disso.</xref:System.Activities.WorkflowApplication>       Para executar fluxos de trabalho de maneira síncrona com nenhum controle de instância, chame o <xref:System.Activities.WorkflowInvoker.Invoke%2A>método.</xref:System.Activities.WorkflowInvoker.Invoke%2A> Para executar um fluxo de trabalho assíncrona com nenhum controle de instância, use o <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>e <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>pares de método, ou o <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>método.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> </xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>"
  example:
  - "The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using WorkflowInvoker.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/t-system.activities.work_6_1.cs)]"
  syntax:
    content: public sealed class WorkflowInvoker
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  id: '#ctor(System.Activities.Activity)'
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: WorkflowInvoker(Activity)
  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)
  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> classe."
  remarks: "<xref:System.Activities.WorkflowInvoker>contém a instância e métodos estáticos para chamar fluxos de trabalho de forma síncrona e os métodos de instância para chamar fluxos de trabalho de forma assíncrona.</xref:System.Activities.WorkflowInvoker>"
  example:
  - "The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_18_1.cs)]"
  syntax:
    content: public WorkflowInvoker (System.Activities.Activity workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "A definição de fluxo de trabalho do fluxo de trabalho a ser invocado por esta instância do <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> classe."
  overload: System.Activities.WorkflowInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  id: BeginInvoke(System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assincronamente usando especificado <xref:System.AsyncCallback>e estado fornecido pelo usuário.</xref:System.AsyncCallback>"
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>do `callback` método.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>é chamado antes do fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>       Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult>padrão de design assíncronos.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "O método a ser chamado quando o fluxo de trabalho foi concluído."
    - id: state
      type: System.Object
      description: "Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona."
    return:
      type: System.IAsyncResult
      description: "Uma referência para o assíncrona invocar a operação."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assincronamente usando especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada, <xref:System.AsyncCallback>e o estado fornecido pelo usuário.</xref:System.AsyncCallback>"
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>do `callback` método.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>é chamado antes do fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A>  Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>       Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult>padrão de design assíncronos.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, AsyncCallback callback, object state);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: callback
      type: System.AsyncCallback
      description: "O método a ser chamado quando o fluxo de trabalho foi concluído."
    - id: state
      type: System.Object
      description: "Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona."
    return:
      type: System.IAsyncResult
      description: "Uma referência para o assíncrona invocar a operação."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho usando o intervalo de tempo limite especificado, de forma assíncrona <xref:System.AsyncCallback>e o estado fornecido pelo usuário.</xref:System.AsyncCallback>"
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>do `callback` método.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>é chamado antes do fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada quando o <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>método é chamado.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso.       Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult>padrão de design assíncronos.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    - id: callback
      type: System.AsyncCallback
      description: "O método a ser chamado quando o fluxo de trabalho foi concluído."
    - id: state
      type: System.Object
      description: "Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona."
    return:
      type: System.IAsyncResult
      description: "Uma referência para o assíncrona invocar a operação."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assincronamente usando especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada, o intervalo de tempo limite, <xref:System.AsyncCallback>e o estado fornecido pelo usuário.</xref:System.AsyncCallback>"
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>do `callback` método.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>é chamado antes do fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é lançada quando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>é chamado.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso.       Este método invoca um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult>padrão de design assíncronos.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    - id: callback
      type: System.AsyncCallback
      description: "O método a ser chamado quando o fluxo de trabalho foi concluído."
    - id: state
      type: System.Object
      description: "Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona."
    return:
      type: System.IAsyncResult
      description: "Uma referência para o assíncrona invocar a operação."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  id: CancelAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: CancelAsync(Object)
  nameWithType: WorkflowInvoker.CancelAsync(Object)
  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Tentativas de cancelar o fluxo de trabalho que foi invocado com especificado <code> userState </code>."
  remarks: "Apenas um fluxo de trabalho invocado por um do <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>sobrecargas que leva um `userState` parâmetro pode ser cancelado.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Se o cancelamento for bem-sucedida, o <xref:System.ComponentModel.Cancelled%2A>propriedade o <xref:System.Activities.InvokeCompletedEventArgs>passado para o <xref:System.Activities.WorkflowInvoker.InvokeCompleted>manipulador está configurado para `true`; caso contrário, é definido como `false`.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> </xref:System.Activities.InvokeCompletedEventArgs> </xref:System.ComponentModel.Cancelled%2A>"
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. Once the workflow is invoked, the host attempts to cancel the workflow.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_1_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#34](~/add/codesnippet/csharp/m-system.activities.work_1_2.cs)]"
  syntax:
    content: public void CancelAsync (object userState);
    parameters:
    - id: userState
      type: System.Object
      description: "O token para o fluxo de trabalho Cancelar."
  overload: System.Activities.WorkflowInvoker.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)
  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Retorna os resultados de um fluxo de trabalho que foi chamado usando um do <xref:System.Activities.WorkflowInvoker.BeginInvoke*>sobrecargas.</xref:System.Activities.WorkflowInvoker.BeginInvoke*>"
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído e recuperar os parâmetros de saída do fluxo de trabalho, chame EndInvoke do `callback` método especificado pelo <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> Se EndInvoke é chamado antes do fluxo de trabalho for concluído, ele bloqueia até que o fluxo de trabalho seja concluído.       Esse método retorna o resultado de um fluxo de trabalho invocado de forma assíncrona usando o <xref:System.IAsyncResult>padrão de design assíncronos.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling EndInvoke. When the call to EndInvoke returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_22_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/m-system.activities.work_22_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> EndInvoke (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "O <xref:System.IAsyncResult>que faz referência a <xref:System.Activities.WorkflowInvoker.BeginInvoke*>operação que o fluxo de trabalho foi iniciado.</xref:System.Activities.WorkflowInvoker.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.EndInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Extensions
  id: Extensions
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
  fullName: System.Activities.WorkflowInvoker.Extensions
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Obtém o &lt;xref:System.Collections.ObjectModel.Collection%601&gt; de extensões que estão disponíveis para fluxos de trabalho invocados por um <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> instância."
  remarks: "Essa propriedade é usada por autores de host de fluxo de trabalho para adicionar extensões para a <xref:System.Activities.WorkflowInvoker>instância para que estejam disponíveis para fluxos de trabalho invocados pelo proprietário.</xref:System.Activities.WorkflowInvoker>"
  example:
  - "The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the Extensions collection of a <xref:System.Activities.WorkflowInvoker> instance. This code example is part of the [Custom Tracking](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#40](~/add/codesnippet/csharp/p-system.activities.work_13_1.cs)]"
  syntax:
    content: public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }
    return:
      type: System.Activities.Hosting.WorkflowInstanceExtensionManager
      description: "O &lt;xref:System.Collections.ObjectModel.Collection%601&gt; de extensões que estão disponíveis para fluxos de trabalho invocados por um <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> instância."
  overload: System.Activities.WorkflowInvoker.Extensions*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke
  id: Invoke
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke()
  nameWithType: WorkflowInvoker.Invoke()
  fullName: System.Activities.WorkflowInvoker.Invoke()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho usando a definição de fluxo de trabalho passada para o &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; construtor."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.Invoke%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name. The workflow is invoked twice, using the workflow definition passed into to the `WorkflowInvoker` constructor.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_6_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#31](~/add/codesnippet/csharp/m-system.activities.work_6_2.cs)]  \n  \n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_6_3.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke ();
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  id: Invoke(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity)
  nameWithType: WorkflowInvoker.Invoke(Activity)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho usando a definição de fluxo de trabalho especificado."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.Invoke%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_4_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#30](~/add/codesnippet/csharp/m-system.activities.work_4_2.cs)]  \n  \n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/m-system.activities.work_4_3.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "A definição de fluxo de trabalho do fluxo de trabalho para invocar."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca a atividade passada para o &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; construtor sincronicamente com especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.Invoke%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#22](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_2.cs)]  \n  \n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_3.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#23](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_4.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  id: Invoke(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho de maneira síncrona com o intervalo de tempo limite especificado."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \n  \n```Output  \nThe operation did not complete within the allotted timeout of 00:00:30.   \nThe time allotted to this operation may have been a portion of a longer timeout.  \n```  \n  \n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/m-system.activities.work_12_1.cs)]  \n  \n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho usando a definição de fluxo de trabalho especificado e &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.Invoke%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#20](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_2.cs)]  \n  \n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_3.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#21](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_4.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "A definição de fluxo de trabalho do fluxo de trabalho para invocar."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  id: Invoke(System.Activities.Activity,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho usando a definição de fluxo de trabalho especificado e o intervalo de tempo limite."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/c629ab8d-d5ad-4778-bfb5-_1.cs)]  \n  \n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "A definição de fluxo de trabalho do fluxo de trabalho para invocar."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca a atividade passada para o &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; construtor sincronicamente com especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada e o intervalo de tempo limite especificado."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \n  \n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/b4c6bab6-3619-4dba-a32f-_1.cs)]  \n  \n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho usando a definição de fluxo de trabalho especificado, &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada e o intervalo de tempo limite."
  remarks: "Blocos este método até que o fluxo de trabalho for concluída, incluindo o tempo ocioso. Todos os execução de fluxo de trabalho é garantida para executar no thread de chamada. Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/99f81696-783c-40fe-9cab-_1.cs)]  \n  \n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "A definição de fluxo de trabalho do fluxo de trabalho para invocar."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário da atividade raiz <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valores chaveados segundo argumento de nome que representam as saídas do fluxo de trabalho."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  id: Invoke``1(System.Activities.Activity`1)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "A ser adicionado."
    return:
      type: TResult
      description: "A ser adicionado."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "A ser adicionado."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "A ser adicionado."
    return:
      type: TResult
      description: "A ser adicionado."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "A ser adicionado."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "A ser adicionado."
    - id: timeout
      type: System.TimeSpan
      description: "A ser adicionado."
    return:
      type: TResult
      description: "A ser adicionado."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, out System.Collections.Generic.IDictionary<string,object> additionalOutputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "A ser adicionado."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "A ser adicionado."
    - id: additionalOutputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "A ser adicionado."
    - id: timeout
      type: System.TimeSpan
      description: "A ser adicionado."
    return:
      type: TResult
      description: "A ser adicionado."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync
  id: InvokeAsync
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync()
  nameWithType: WorkflowInvoker.InvokeAsync()
  fullName: System.Activities.WorkflowInvoker.InvokeAsync()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho de forma assíncrona."
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_16_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_16_2.cs)]"
  syntax:
    content: public void InvokeAsync ();
    parameters: []
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assincronamente usando especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada."
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  id: InvokeAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(Object)
  nameWithType: WorkflowInvoker.InvokeAsync(Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho de forma assíncrona usando o identificador exclusivo especificado."
  remarks: "O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operações para a atividade atual.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se o `userState` parâmetro não é exclusivo, uma <xref:System.ArgumentException>é gerada.</xref:System.ArgumentException> `userState`é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_25_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_25_2.cs)]"
  syntax:
    content: public void InvokeAsync (object userState);
    parameters:
    - id: userState
      type: System.Object
      description: "Um objeto fornecido pelo usuário usado para distinguir específico assíncrona invocar a operação de outros atual assíncrona invocar operações."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  id: InvokeAsync(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca o fluxo de trabalho de forma assíncrona com o intervalo de tempo limite especificado."
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso.       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_10_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_10_2.cs)]"
  syntax:
    content: public void InvokeAsync (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assincronamente usando especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada e um identificador exclusivo."
  remarks: "O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operações para a atividade atual.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se `userState` não é exclusivo, uma <xref:System.ArgumentException>é gerada.</xref:System.ArgumentException> `userState`é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Para configurar um intervalo de tempo limite no qual deve concluir o fluxo de trabalho, use uma das <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>sobrecargas que levam um <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, object userState);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: userState
      type: System.Object
      description: "Um objeto fornecido pelo usuário usado para distinguir específico assíncrona invocar a operação de outros atual assíncrona invocar operações."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assíncrona com especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada e o intervalo de tempo limite especificado."
  remarks: "Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso.       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  id: InvokeAsync(System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho de modo assíncrono com o intervalo de tempo limite especificado e um identificador exclusivo."
  remarks: "O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operações para a atividade atual.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se `userState` não é exclusivo, uma <xref:System.ArgumentException>é gerada.</xref:System.ArgumentException> `userState`é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso.       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_2_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_2_2.cs)]"
  syntax:
    content: public void InvokeAsync (TimeSpan timeout, object userState);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    - id: userState
      type: System.Object
      description: "Um objeto fornecido pelo usuário usado para distinguir específico assíncrona invocar a operação de outros atual assíncrona invocar operações."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Invoca um fluxo de trabalho assíncrona com especificado &lt;xref:System.Collections.Generic.IDictionary%602&gt; de parâmetros de entrada, o intervalo de tempo limite especificado e um identificador exclusivo."
  remarks: "O `userState` parâmetro deve ser exclusivo entre todos os em execução <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operações para a atividade atual.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se `userState` não é exclusivo, uma <xref:System.ArgumentException>é gerada.</xref:System.ArgumentException> `userState`é usado para identificar o fluxo de trabalho <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e cancelar o fluxo de trabalho usando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Para ser notificado quando o fluxo de trabalho for concluído, tratar <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se o fluxo de trabalho não for concluída dentro do intervalo de tempo limite especificado o fluxo de trabalho foi anulado e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>      > [!NOTE] > O <xref:System.TimeoutException>só é gerada se o intervalo de tempo limite expira e o fluxo de trabalho se torna ocioso durante a execução.</xref:System.TimeoutException> Um fluxo de trabalho que demora mais do que o intervalo de tempo limite especificado para ser concluída é concluída com êxito se o fluxo de trabalho não estiverem ocioso.       Este método invoca um fluxo de trabalho usando o padrão de design assíncrono baseado em evento de forma assíncrona. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Visão geral do padrão assíncrono baseado em evento](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, object userState);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "O dicionário de parâmetros de entrada para o fluxo de trabalho, chaveado segundo o nome do argumento."
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo no qual o fluxo de trabalho deve concluir antes de ela será anulada e um <xref:System.TimeoutException>é gerada.</xref:System.TimeoutException>"
    - id: userState
      type: System.Object
      description: "Um objeto fornecido pelo usuário usado para distinguir específico assíncrona invocar a operação de outros atual assíncrona invocar operações."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeCompleted
  id: InvokeCompleted
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeCompleted
  nameWithType: WorkflowInvoker.InvokeCompleted
  fullName: System.Activities.WorkflowInvoker.InvokeCompleted
  type: Event
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Ocorre quando o fluxo de trabalho é invocado por um do <xref:System.Activities.WorkflowInvoker.InvokeAsync*>sobrecargas é concluída ou cancelada.</xref:System.Activities.WorkflowInvoker.InvokeAsync*>"
  remarks: "Lidar com essa opção para determinar se um fluxo de trabalho chamada com uma da <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>sobrecargas foi concluídas com êxito e recuperar os argumentos de saída do fluxo de trabalho concluído.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>"
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the InvokeCompleted handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/e-system.activities.work_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/e-system.activities.work_2.cs)]"
  syntax:
    content: public event EventHandler<System.Activities.InvokeCompletedEventArgs> InvokeCompleted;
    return:
      type: System.EventHandler{System.Activities.InvokeCompletedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: WorkflowInvoker(Activity)
  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)
  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: CancelAsync(Object)
  nameWithType: WorkflowInvoker.CancelAsync(Object)
  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)
- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)
  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)
- uid: System.Activities.WorkflowInvoker.Extensions
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
  fullName: System.Activities.WorkflowInvoker.Extensions
- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager
  parent: System.Activities.Hosting
  isExternal: false
  name: WorkflowInstanceExtensionManager
  nameWithType: WorkflowInstanceExtensionManager
  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager
- uid: System.Activities.WorkflowInvoker.Invoke
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke()
  nameWithType: WorkflowInvoker.Invoke()
  fullName: System.Activities.WorkflowInvoker.Invoke()
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity)
  nameWithType: WorkflowInvoker.Invoke(Activity)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Activities.Activity`1
  parent: System.Activities
  isExternal: false
  name: Activity<TResult>
  nameWithType: Activity<TResult>
  fullName: System.Activities.Activity<TResult>
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync()
  nameWithType: WorkflowInvoker.InvokeAsync()
  fullName: System.Activities.WorkflowInvoker.InvokeAsync()
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(Object)
  nameWithType: WorkflowInvoker.InvokeAsync(Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
- uid: System.Activities.WorkflowInvoker.InvokeCompleted
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeCompleted
  nameWithType: WorkflowInvoker.InvokeCompleted
  fullName: System.Activities.WorkflowInvoker.InvokeCompleted
- uid: System.EventHandler{System.Activities.InvokeCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<InvokeCompletedEventArgs>
  nameWithType: EventHandler<InvokeCompletedEventArgs>
  fullName: System.EventHandler<System.Activities.InvokeCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Activities.InvokeCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.InvokeCompletedEventArgs
    name: InvokeCompletedEventArgs
    nameWithType: InvokeCompletedEventArgs
    fullName: InvokeCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.WorkflowInvoker.#ctor*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: WorkflowInvoker
  nameWithType: WorkflowInvoker.WorkflowInvoker
- uid: System.Activities.WorkflowInvoker.BeginInvoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke
  nameWithType: WorkflowInvoker.BeginInvoke
- uid: System.Activities.WorkflowInvoker.CancelAsync*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: CancelAsync
  nameWithType: WorkflowInvoker.CancelAsync
- uid: System.Activities.WorkflowInvoker.EndInvoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: EndInvoke
  nameWithType: WorkflowInvoker.EndInvoke
- uid: System.Activities.WorkflowInvoker.Extensions*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
- uid: System.Activities.WorkflowInvoker.Invoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke
  nameWithType: WorkflowInvoker.Invoke
- uid: System.Activities.WorkflowInvoker.Invoke<TResult>*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke<TResult>
  nameWithType: WorkflowInvoker.Invoke<TResult>
- uid: System.Activities.WorkflowInvoker.InvokeAsync*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync
  nameWithType: WorkflowInvoker.InvokeAsync
