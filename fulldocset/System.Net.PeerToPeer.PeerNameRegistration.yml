### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PeerNameRegistration
  id: PeerNameRegistration
  children:
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  - System.Net.PeerToPeer.PeerNameRegistration.Cloud
  - System.Net.PeerToPeer.PeerNameRegistration.Comment
  - System.Net.PeerToPeer.PeerNameRegistration.Data
  - System.Net.PeerToPeer.PeerNameRegistration.Dispose
  - System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  - System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  - System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  - System.Net.PeerToPeer.PeerNameRegistration.PeerName
  - System.Net.PeerToPeer.PeerNameRegistration.Port
  - System.Net.PeerToPeer.PeerNameRegistration.Start
  - System.Net.PeerToPeer.PeerNameRegistration.Stop
  - System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.Update
  - System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  langs:
  - csharp
  name: PeerNameRegistration
  nameWithType: PeerNameRegistration
  fullName: System.Net.PeerToPeer.PeerNameRegistration
  type: Class
  summary: "Registra um <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>em um <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref> ou conjunto de nuvens.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  remarks: "Registro cria (ou atualiza) todas as informações que estão associadas a um <xref:System.Net.PeerToPeer.PeerName>em uma nuvem ponto ou nuvens.</xref:System.Net.PeerToPeer.PeerName>       É possível ter vários objetos de PeerNameRegistration para o mesmo nome de ponto a ponto. Nesse caso, se o nome do par estiver protegido, cada instância representa PeerNameRegistration em uma nuvem diferente. No entanto, se o nome do par não estiver protegido, ele pode ser registrado na nuvem mesmo várias vezes, garantindo que cada registro é de um processo diferente."
  syntax:
    content: 'public class PeerNameRegistration : IDisposable, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor
  id: '#ctor'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration()
  nameWithType: PeerNameRegistration.PeerNameRegistration()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Inicializa uma nova instância padrão do <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> classe."
  remarks: "Retorna uma nova instância padrão do tipo <xref:System.Net.PeerToPeer.PeerNameRegistration>.</xref:System.Net.PeerToPeer.PeerNameRegistration> Ele não realiza o registro do par nome durante a construção.       Após criar uma instância de um objeto com esse construtor, o chamador deve preencher os campos apropriados na instância antes de chamar <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>ou <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public PeerNameRegistration ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(PeerName,Int32)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> classe com o nome especificado e o número de porta."
  remarks: "Chamar este construtor cria uma instância que será usada para registrar todos os endereços de origem (ambos IPv4 IPv6and) e a porta fornecida para todas as nuvens no qual o par está participando no momento.  Se o objeto for construído com êxito, especificado <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>e <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>são populados.</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>       Se o nome do par é protegido e foi registrado anteriormente em um <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>o par está participando no momento, um <xref:System.Net.PeerToPeer.PeerToPeerException>é gerada.</xref:System.Net.PeerToPeer.PeerToPeerException> </xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>       Este construtor só cria um <xref:System.Net.PeerToPeer.PeerNameRegistration>instância; ele não realiza o registro.</xref:System.Net.PeerToPeer.PeerNameRegistration> Depois de criar uma instância do objeto de registro com esse construtor e preencher seus campos, o aplicativo deve chamar <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>para realizar o registro real.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port);
    parameters:
    - id: name
      type: System.Net.PeerToPeer.PeerName
      description: "O <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> objeto para registrar."
    - id: port
      type: System.Int32
      description: "Valor inteiro que especifica o número de porta para registrar."
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <code> name </code> parâmetro não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O número de porta especificado é menor que zero.  Números de porta devem ser maior ou igual a zero e menor que 65.535 (0xFFFF)."
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-O <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> especificado já foi registrado através deste host.      -O par remoto não possuir o <xref:System.Net.PeerToPeer.PeerName.Authority*>para fornecido <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> objeto.</xref:System.Net.PeerToPeer.PeerName.Authority*>"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Inicializa uma nova serializável <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
  syntax:
    content: protected PeerNameRegistration (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Referência para o objeto que contém os dados necessários para desserializar a essa instância."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Contexto que fornece os meios para desserializar os dados. Também conhecido como a fonte de dados serializados."
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(PeerName,Int32,Cloud)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> classe com o nome de ponto especificado, o número da porta, e <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>."
  remarks: "Chamar este construtor cria uma instância que será usada para registrar todos os endereços de origem (IPv6 e IPv4), a porta fornecida e o <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> especificado  Se o objeto for construído com êxito, as propriedades são preenchidas com a especificada <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>e <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>       Se o parâmetro de nuvem é `null`, o nome é registrado usando o <xref:System.Net.PeerToPeer.Cloud.Available>atalho, que inicializa valores padrão para o <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>e <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.</xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> </xref:System.Net.PeerToPeer.Cloud.Scope%2A> </xref:System.Net.PeerToPeer.Cloud.Name%2A> </xref:System.Net.PeerToPeer.Cloud.Available>       Depois de instanciação, o <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>método deve ser chamado para registrar o <xref:System.Net.PeerToPeer.PeerName>.</xref:System.Net.PeerToPeer.PeerName> </xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port, System.Net.PeerToPeer.Cloud cloud);
    parameters:
    - id: name
      type: System.Net.PeerToPeer.PeerName
      description: "O <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> objeto para registrar."
    - id: port
      type: System.Int32
      description: "Valor inteiro que especifica o número de porta para registrar."
    - id: cloud
      type: System.Net.PeerToPeer.Cloud
      description: "<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>em qual registrar o nome do par."
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <code> name </code> parâmetro não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O número de porta especificado é menor que zero.  Números de porta devem ser maior ou igual a zero e menor que 65.535 (0xFFFF)."
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-O <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> especificado já foi registrado através deste host.      -O par remoto não possuir o <xref:System.Net.PeerToPeer.PeerName.Authority*>para fornecido <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> objeto.</xref:System.Net.PeerToPeer.PeerName.Authority*>"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  id: Cloud
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define informações em uma nuvem na qual o <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*>objeto será registrado.</xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*>"
  syntax:
    content: public System.Net.PeerToPeer.Cloud Cloud { get; set; }
    return:
      type: System.Net.PeerToPeer.Cloud
      description: "Um objeto do tipo <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref> que especifica a nuvem de ponto a ponto para o qual esse registro está definido. Essa propriedade é definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> por padrão."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Cloud*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment
  id: Comment
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Comment
  nameWithType: PeerNameRegistration.Comment
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define informações adicionais sobre o <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> objeto que será registrado com o <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>."
  syntax:
    content: public string Comment { get; set; }
    return:
      type: System.String
      description: "O comentário que contém informações adicionais sobre o <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> para associar o <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>. Essa propriedade é definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> por padrão."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Comment*
  exceptions:
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "O valor de cadeia de caracteres especificada é maior do que 39 caracteres Unicode."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data
  id: Data
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Data
  nameWithType: PeerNameRegistration.Data
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define dados binários definido pelo aplicativo para o <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
  remarks: "A quantidade máxima de dados que podem ser fornecidos é de 4.096 bytes."
  syntax:
    content: public byte[] Data { get; set; }
    return:
      type: System.Byte[]
      description: "Uma matriz de bytes que contém os dados binários associados à entrada. Essa propriedade é definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> por padrão."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Data*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Os dados especificados são maiores do que 4096 bytes."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose
  id: Dispose
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Dispose()
  nameWithType: PeerNameRegistration.Dispose()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PeerNameRegistration.Dispose(Boolean)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Libera os recursos não gerenciados e, opcionalmente, libera os recursos gerenciados usados pelo <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  id: EndPointCollection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém a coleção de pontos de extremidade de rede para o qual o nome do par associado é registrado."
  remarks: "No <xref:System.Net>namespace, um <xref:System.Net.IPEndPoint>representa um ponto de extremidade de rede como um endereço IP e um número de porta.</xref:System.Net.IPEndPoint> </xref:System.Net>  Para o PNRP, um valor de porta e endereço IP deve ser fornecido para cada ponto de extremidade.  O número máximo de pontos de extremidade que pode ser fornecido é de dez. Seleção automática de endereço é usada quando esse parâmetro é `null`.       Se for usado um método de registro que seleciona automaticamente os endereços para registrar, não há nenhum método para determinar theaddresses para o qual o nome do par foi registrado.  Ou seja, a propriedade EndPointCollection não será atualizada para refletir os endereços selecionados.       Quando um nome de ponto a ponto é registrado para mais de um nó, cada <xref:System.Net.PeerToPeer.PeerNameRegistration>é diferente e a propriedade de EndPointCollection definida em cada instância de registro serão diferente.</xref:System.Net.PeerToPeer.PeerNameRegistration> Além disso, quando um <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>é registrado em mais de um <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>, cada registro é diferente e a coleção de pontos de extremidade geralmente será diferente para cada instância.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>"
  syntax:
    content: public System.Net.IPEndPointCollection EndPointCollection { get; }
    return:
      type: System.Net.IPEndPointCollection
      description: "Um <xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*>objeto que contém os pontos de extremidade de rede para o qual o nome do par associado é registrado.</xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*> A menos que explicitamente especificado, o valor padrão para todas as propriedades é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para tipos de referência."
  overload: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Popula um objeto de informações de serialização com os dados necessários para serializar o <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> instância."
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Contém os dados serializados associados a <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Contém o destino para o fluxo serializado associado a <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
  overload: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  id: IsRegistered
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: IsRegistered()
  nameWithType: PeerNameRegistration.IsRegistered()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define se o nome de ponto especificado no <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>propriedade é registrada com um determinado <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref> em um host.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  syntax:
    content: public bool IsRegistered ();
    parameters: []
    return:
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, o nome do par está registrado com um <> </> *> para o host de ponto a ponto. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, em seguida, o processo de registro pode ser iniciado com <> </> *>."
  overload: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Um objeto que já foi descartado não pode ser registrado."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  id: PeerName
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define o nome do par para registrar com uma nuvem ponto a ponto."
  remarks: "Um nome de mesmo nível pode ser registrado para mais de um nó. cada <xref:System.Net.PeerToPeer.PeerNameRegistration>instância é distinta.</xref:System.Net.PeerToPeer.PeerNameRegistration> O <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>propriedade associada a cada correspondente <xref:System.Net.PeerToPeer.PeerName>instância é diferente.</xref:System.Net.PeerToPeer.PeerName> </xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> Além disso, é possível registrar um nome de ponto a ponto para mais de uma nuvem que o nó está conectado. cada um desses registros é diferente. O nome do par <xref:System.Net.IPEndPointCollection>será diferente em cada uma dessas instâncias.</xref:System.Net.IPEndPointCollection>"
  syntax:
    content: public System.Net.PeerToPeer.PeerName PeerName { get; set; }
    return:
      type: System.Net.PeerToPeer.PeerName
      description: "Um objeto do tipo <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> que contém os valores associados a este <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto. A menos que explicitamente especificado, o valor padrão para todas as propriedades é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para tipos de referência."
  overload: System.Net.PeerToPeer.PeerNameRegistration.PeerName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port
  id: Port
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Port
  nameWithType: PeerNameRegistration.Port
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define o [TCP/IP](http://go.microsoft.com/fwlink?LinkID=98458) número da porta usada pelo par que está sendo registrado para o <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto."
  remarks: "A porta padrão é usada pelo <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>método somente quando nenhum ponto de extremidade é especificados.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public int Port { get; set; }
    return:
      type: System.Int32
      description: "Um valor inteiro que indica o número da porta TCP de <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> A menos que explicitamente especificado, o valor padrão desta propriedade é zero (0)."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Port*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de porta especificado é menor que zero.  Números de porta devem ser maior ou igual a zero e menor que 65.535 (0xFFFF)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start
  id: Start
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Start()
  nameWithType: PeerNameRegistration.Start()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Registra o <> </> *> para o <> </> *>. Se nenhum <> </> *> for especificado, seleção automática de endereço é usada com o valor da porta especificado pelo <> </> *> propriedade."
  remarks: "O método registra o nome do par especificado no <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>propriedade com todos os endereços de origem e o <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>especificado no construtor.</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> A porta padrão é usada por este método somente quando nenhum ponto de extremidade é especificados.       Se o <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>é de propriedade `null`, este método registra o nome do par especificado no <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>propriedade usando o <xref:System.Net.PeerToPeer.Cloud.Available>campo, que inicializa valores padrão para o <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>e <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.</xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> </xref:System.Net.PeerToPeer.Cloud.Scope%2A> </xref:System.Net.PeerToPeer.Cloud.Name%2A> </xref:System.Net.PeerToPeer.Cloud.Available> </xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>       Após um <xref:System.Net.PeerToPeer.PeerNameRegistration>objeto tiver sido iniciado, o <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>método é usado para interrompido.</xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration>       Para atualizar um registro, o <xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>método deve ser usado.</xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>"
  example:
  - "The following code example creates a <xref:System.Net.PeerToPeer.PeerName> and registers it along with the metadata specified.  \n  \n [!code-cs[NCLPNRPRegisterPeerName#1](~/add/codesnippet/csharp/m-system.net.peertopeer._1_1.cs)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Start*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>está definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Esse objeto tinha Dispose () chamado nela anteriormente."
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-O <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> especificado já foi registrado. O <> </> *> método deve ser usado para atualizar um registro.      -O par remoto não possuir o <> </> *> para o <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> especificado.      -Ou o <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> ou <> </> *> não for especificado; pelo menos um deve ser fornecido.      -Os elementos de dados ou mensagem são inválidos. Ou, <> </> *> não está definida e nenhum blob de dados ou <xref:System.Net.IPEndPoint>for especificado.</xref:System.Net.IPEndPoint>"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop
  id: Stop
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Stop()
  nameWithType: PeerNameRegistration.Stop()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Cancela o registro o nome do par especificado no <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>propriedade de todas as nuvens no qual ela foi registrada.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  remarks: "Depois que o processo de registro foi interrompido, estado do objeto de registro é igual ao estado diretamente depois que está sendo criada pelo construtor padrão. Nesse estado, todas as suas propriedades são consideradas não têm nenhum valor. O <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>método pode ser usado para reiniciá-lo.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>       É possível ter vários objetos de registro para o mesmo nome de ponto a ponto.  Nesse caso, se o nome do par estiver protegido, cada instância representa um registro em uma nuvem PNRP diferente.  No entanto, se o nome do par não estiver protegido, ele pode ser registrado na nuvem mesmo várias vezes.       Se esta instância já estiver interrompida, chamar este método não tem nenhum efeito."
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Stop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <> </> *> propriedade ainda não foi registrada. Isso ocorre quando um <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> objeto é construído usando o construtor vazio. O <> </> *> propriedade deve ser preenchida nessa instância antes de chamar <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Esse objeto tinha Dispose () chamado nela anteriormente."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface e retorna os dados necessários para serializar o <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> instância."
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Contém os dados serializados associados a <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> instância."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Contém o destino para o fluxo serializado associado a <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> instância."
  overload: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update
  id: Update
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Update()
  nameWithType: PeerNameRegistration.Update()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Atualizações de <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> para um nó registrado com um determinado <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>. Atualização é executada usando as informações especificadas nas propriedades."
  remarks: "Todas as informações registradas em cloud(s) para este <xref:System.Net.PeerToPeer.PeerName>antes da chamada completamente é descartado.</xref:System.Net.PeerToPeer.PeerName>  Os novos dados não são combinados com o registro existente.  Para atualizar um <xref:System.Net.PeerToPeer.PeerNameRegistration>, primeiro atualize as propriedades nessa instância e, em seguida, chamar este método.</xref:System.Net.PeerToPeer.PeerNameRegistration>       Após um <xref:System.Net.PeerToPeer.PeerNameRecord>estiver registrado, o <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>propriedade não pode ser atualizada.</xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> </xref:System.Net.PeerToPeer.PeerNameRecord>  Todos os outros campos no registro podem ser atualizados."
  syntax:
    content: public void Update ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>está definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "-O <> </> *> propriedade ainda não foi registrada. O método de atualização não pode ser chamado até que o nome de ponto especificado no <> </> *> propriedade é registrada em uma ou mais nuvens.      -O nome de ponto especificado no <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>propriedade foi alterado desde o correspondente <xref href=&quot;System.Net.PeerToPeer.PeerNameRecord&quot;> </xref> foi registrado.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "Um objeto que foi descartado não pode ser registrado."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um <xref href=&quot;System.Net.PeerToPeer.PeerNameRecord&quot;> </xref> está definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  id: UseAutoEndPointSelection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Obtém ou define um valor que especifica se deve usar a seleção automática de ponto de extremidade ao passar uma malha de pontos ou <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>"
  remarks: "Quando a seleção de ponto de extremidade automática é usada (essa propriedade é definida como `true`) sem informações de ponto de extremidade especificada antes do início de uma <xref:System.Net.PeerToPeer.PeerNameRegistration>, o sistema escolhe pontos de extremidade individuais e publica-los com o nome do par associados em todas as nuvens disponíveis.</xref:System.Net.PeerToPeer.PeerNameRegistration>  Se a porta não for especificada, a seleção automática escolhe zero como <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>       Quando definido como `false`, não será realizada a seleção automática conforme descrito acima.  Isso permite que o processo de registro publicar um nome de ponto a ponto com um blob de dados (conforme especificado pelo <xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A>propriedade).</xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A> Nenhum ponto de extremidade é associados com o nome.       Se for usado um método de registro que seleciona automaticamente os endereços para registrar, não há nenhum método para determinar quais endereços para os quais o <xref:System.Net.PeerToPeer.PeerName>o objeto foi registrado.</xref:System.Net.PeerToPeer.PeerName>  Ou seja, o <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>propriedade não será atualizada para refletir os endereços selecionados.</xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>       Atualizar esta propriedade após o registro de nome de ponto a ponto foi iniciada não tem nenhum efeito."
  syntax:
    content: public bool UseAutoEndPointSelection { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Se a seleção automática de ponto de extremidade a ser usado; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se algum outro método que será usado para determinar um ponto de extremidade. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.PeerToPeer.PeerToPeerException
  parent: System.Net.PeerToPeer
  isExternal: false
  name: PeerToPeerException
  nameWithType: PeerToPeerException
  fullName: System.Net.PeerToPeer.PeerToPeerException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration()
  nameWithType: PeerNameRegistration.PeerNameRegistration()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(PeerName,Int32)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
- uid: System.Net.PeerToPeer.PeerName
  parent: System.Net.PeerToPeer
  isExternal: false
  name: PeerName
  nameWithType: PeerName
  fullName: System.Net.PeerToPeer.PeerName
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(PeerName,Int32,Cloud)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
- uid: System.Net.PeerToPeer.Cloud
  parent: System.Net.PeerToPeer
  isExternal: false
  name: Cloud
  nameWithType: Cloud
  fullName: System.Net.PeerToPeer.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Comment
  nameWithType: PeerNameRegistration.Comment
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Data
  nameWithType: PeerNameRegistration.Data
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose()
  nameWithType: PeerNameRegistration.Dispose()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PeerNameRegistration.Dispose(Boolean)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
- uid: System.Net.IPEndPointCollection
  parent: System.Net
  isExternal: false
  name: IPEndPointCollection
  nameWithType: IPEndPointCollection
  fullName: System.Net.IPEndPointCollection
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: IsRegistered()
  nameWithType: PeerNameRegistration.IsRegistered()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Port
  nameWithType: PeerNameRegistration.Port
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Start()
  nameWithType: PeerNameRegistration.Start()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Stop()
  nameWithType: PeerNameRegistration.Stop()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Update()
  nameWithType: PeerNameRegistration.Update()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration
  nameWithType: PeerNameRegistration.PeerNameRegistration
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Comment
  nameWithType: PeerNameRegistration.Comment
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Data
  nameWithType: PeerNameRegistration.Data
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose
  nameWithType: PeerNameRegistration.Dispose
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: GetObjectData
  nameWithType: PeerNameRegistration.GetObjectData
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: IsRegistered
  nameWithType: PeerNameRegistration.IsRegistered
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Port
  nameWithType: PeerNameRegistration.Port
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Start
  nameWithType: PeerNameRegistration.Start
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Stop
  nameWithType: PeerNameRegistration.Stop
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Update
  nameWithType: PeerNameRegistration.Update
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
