### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.AttributeCollection
  id: AttributeCollection
  children:
  - System.ComponentModel.AttributeCollection.#ctor
  - System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  - System.ComponentModel.AttributeCollection.Attributes
  - System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  - System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  - System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  - System.ComponentModel.AttributeCollection.Count
  - System.ComponentModel.AttributeCollection.Empty
  - System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  - System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  - System.ComponentModel.AttributeCollection.GetEnumerator
  - System.ComponentModel.AttributeCollection.Item(System.Int32)
  - System.ComponentModel.AttributeCollection.Item(System.Type)
  - System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  - System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  - System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
  type: Class
  summary: "Representa uma coleção de atributos."
  remarks: "A classe AttributeCollection é somente leitura; ele não implementa os métodos para adicionar ou remover atributos. Você deve herdar dessa classe para implementar esses métodos.       Use o <xref:System.ComponentModel.AttributeCollection.Count%2A>propriedade para localizar o número de atributos que existe na coleção.</xref:System.ComponentModel.AttributeCollection.Count%2A>       Você também pode usar os métodos dessa classe para consultar a coleção de conteúdo. Chamar o <xref:System.ComponentModel.AttributeCollection.Contains%2A>método para verificar se um atributo especificado ou uma matriz de atributo existe na coleção.</xref:System.ComponentModel.AttributeCollection.Contains%2A> Chamar o <xref:System.ComponentModel.AttributeCollection.Matches%2A>método para verificar se um atributo especificado ou uma matriz de atributos existe na coleção, e que os valores dos atributos especificados são iguais aos valores na coleção.</xref:System.ComponentModel.AttributeCollection.Matches%2A>       Embora a maioria dos atributos tenham valores padrão, os valores padrão não são necessários. Se um atributo não tem valor padrão, `null` é retornada da propriedade indexada que utiliza um tipo. Ao definir seus próprios atributos, você pode declarar um valor padrão, fornecendo um construtor que não recebe argumentos ou definindo um campo estático público de seu tipo de atributo nomeado &quot;Padrão&quot;."
  example:
  - "The first code example checks to see whether the <xref:System.ComponentModel.BrowsableAttribute> has been set in this collection. The second code example gets the actual value of the <xref:System.ComponentModel.DescriptionAttribute> for a button. Both examples require that `button1` and `textBox1` have been created on a form. When using attributes, verify that an attribute has been set, or access its value.  \n  \n [!code-cpp[Classic AttributeCollection Example#1](~/add/codesnippet/cpp/t-system.componentmodel._150_1.cpp)]\n [!code-cs[Classic AttributeCollection Example#1](~/add/codesnippet/csharp/t-system.componentmodel._150_1.cs)]\n [!code-vb[Classic AttributeCollection Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._150_1.vb)]  \n  \n [!code-cpp[Classic AttributeCollection Example#2](~/add/codesnippet/cpp/t-system.componentmodel._150_2.cpp)]\n [!code-cs[Classic AttributeCollection Example#2](~/add/codesnippet/csharp/t-system.componentmodel._150_2.cs)]\n [!code-vb[Classic AttributeCollection Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._150_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AttributeCollection : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.#ctor
  id: '#ctor'
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: AttributeCollection()
  nameWithType: AttributeCollection.AttributeCollection()
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> classe."
  syntax:
    content: protected AttributeCollection ();
    parameters: []
  overload: System.ComponentModel.AttributeCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  id: '#ctor(System.Attribute[])'
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: AttributeCollection(Attribute[])
  nameWithType: AttributeCollection.AttributeCollection(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following code example creates a new <xref:System.ComponentModel.AttributeCollection> using the attributes on `button1`. It assumes that `button1` has been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/cpp/m-system.componentmodel._17_1.cpp)]\n [!code-cs[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/csharp/m-system.componentmodel._17_1.cs)]\n [!code-vb[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._17_1.vb)]"
  syntax:
    content: public AttributeCollection (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que fornece os atributos para esta coleção.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>attributes</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Attributes
  id: Attributes
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Attributes
  nameWithType: AttributeCollection.Attributes
  fullName: System.ComponentModel.AttributeCollection.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém a coleção de atributos."
  syntax:
    content: protected virtual Attribute[] Attributes { get; }
    return:
      type: System.Attribute[]
      description: "A coleção de atributos."
  overload: System.ComponentModel.AttributeCollection.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  id: Contains(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Contains(Attribute)
  nameWithType: AttributeCollection.Contains(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se esta coleção de atributos tem o atributo especificado."
  remarks: "Esta coleção tem o atributo especificado se o tipo de atributo especificado existe na coleção, e se o valor do atributo especificado é igual ao valor da instância do atributo na coleção.       A diferença entre o <xref:System.ComponentModel.AttributeCollection.Matches%2A>e contém métodos que <xref:System.ComponentModel.AttributeCollection.Matches%2A>chama o <xref:System.Attribute.Match%2A>método em um atributo e chamadas de contém o <xref:System.Object.Equals%2A>método.</xref:System.Object.Equals%2A> </xref:System.Attribute.Match%2A> </xref:System.ComponentModel.AttributeCollection.Matches%2A> </xref:System.ComponentModel.AttributeCollection.Matches%2A>       Para a maioria dos atributos, esses métodos fazem a mesma coisa. Para atributos que podem ter vários sinalizadores, no entanto, <xref:System.Attribute.Match%2A>costuma ser implementada para que ele retorna `true` se qualquer um dos sinalizadores forem atendidas.</xref:System.Attribute.Match%2A> Por exemplo, considere um atributo de associação de dados com os sinalizadores de boolianos &quot;SupportsSql&quot;, &quot;SupportsOleDb&quot; e &quot;SupportsXml&quot;. Esse atributo pode estar presente em uma propriedade que dá suporte a todas as três abordagens de associação de dados. Geralmente será o caso em que um programador precisa saber apenas se uma abordagem específica está disponível, nem todos os três. Portanto, um programador pode usar <xref:System.Attribute.Match%2A>com uma instância do atributo que contém apenas os sinalizadores o programador precisa.</xref:System.Attribute.Match%2A>"
  example:
  - "The following code example checks to see whether the collection has a <xref:System.ComponentModel.BrowsableAttribute> set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-vb[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._16_1.vb)]\n [!code-cs[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/csharp/m-system.componentmodel._16_1.cs)]\n [!code-cpp[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/cpp/m-system.componentmodel._16_1.cpp)]"
  syntax:
    content: public bool Contains (Attribute attribute);
    parameters:
    - id: attribute
      type: System.Attribute
      description: "Um <xref:System.Attribute>Localizar na coleção.</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a coleção contém o atributo ou o atributo padrão para o tipo de atributo. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  id: Contains(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Contains(Attribute[])
  nameWithType: AttributeCollection.Contains(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se a coleção de atributos contém todos os atributos especificados na matriz de atributo."
  remarks: "Esta coleção tem a matriz de atributos especificada se todos os tipos de atributo especificado existem na coleção e se cada atributo na matriz especificada é o mesmo que um atributo na coleção."
  example:
  - "The following code example compares the attributes in `button1` and `textBox1` to see whether the attributes for the button are contained in the attributes for the text box. It assumes that both `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._42_1.cs)]\n [!code-vb[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._42_1.vb)]\n [!code-cpp[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._42_1.cpp)]"
  syntax:
    content: public bool Contains (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>Localizar na coleção.</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a coleção contém todos os atributos; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: AttributeCollection.CopyTo(Array,Int32)
  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Copia a coleção para uma matriz, começando no índice especificado."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "O <xref:System.Array>para copiar a coleção.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice para iniciar a partir de."
  overload: System.ComponentModel.AttributeCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Count
  id: Count
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Count
  nameWithType: AttributeCollection.Count
  fullName: System.ComponentModel.AttributeCollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o número de atributos."
  remarks: "Você pode usar a propriedade Count para definir os limites de um loop que itera por meio de uma coleção de objetos. Se a coleção é baseado em zero, certifique-se de usar `Count - 1` como o limite superior do loop."
  example:
  - "The following code example uses the Count property to print the number of properties on `button1` in a text box. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.Count Example#1](~/add/codesnippet/csharp/p-system.componentmodel._11_1.cs)]\n [!code-vb[Classic AttributeCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._11_1.vb)]\n [!code-cpp[Classic AttributeCollection.Count Example#1](~/add/codesnippet/cpp/p-system.componentmodel._11_1.cpp)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de atributos."
  overload: System.ComponentModel.AttributeCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Empty
  id: Empty
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Empty
  nameWithType: AttributeCollection.Empty
  fullName: System.ComponentModel.AttributeCollection.Empty
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Especifica uma coleção vazia que você pode usar, em vez de criar um novo. Este campo é somente leitura."
  syntax:
    content: public static readonly System.ComponentModel.AttributeCollection Empty;
    return:
      type: System.ComponentModel.AttributeCollection
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  id: FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: FromExisting(AttributeCollection,Attribute[])
  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> de uma já existente <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>."
  remarks: "Se o `newAttributes` parâmetro for fornecido, seu <xref:System.Attribute>entradas são mescladas com aqueles do `existing` parâmetro.</xref:System.Attribute>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection FromExisting (System.ComponentModel.AttributeCollection existing, Attribute[] newAttributes);
    parameters:
    - id: existing
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> do qual criar a cópia."
    - id: newAttributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que fornece os atributos para esta coleção.</xref:System.Attribute> Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "A new <xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref> that is a copy of <code>existing</code>."
  overload: System.ComponentModel.AttributeCollection.FromExisting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>existing</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  id: GetDefaultAttribute(System.Type)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: GetDefaultAttribute(Type)
  nameWithType: AttributeCollection.GetDefaultAttribute(Type)
  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o padrão <xref:System.Attribute>de um determinado <xref:System.Type>.</xref:System.Type> </xref:System.Attribute>"
  syntax:
    content: protected Attribute GetDefaultAttribute (Type attributeType);
    parameters:
    - id: attributeType
      type: System.Type
      description: "O <xref:System.Type>do atributo para recuperar.</xref:System.Type>"
    return:
      type: System.Attribute
      description: "O padrão <xref:System.Attribute>de um determinado <code> attributeType </code>.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.GetDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: AttributeCollection.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um enumerador para esta coleção."
  remarks: ''
  example:
  - "The following code example gets an enumerator for the attributes on `button1`. It uses the enumerator to print the names of the attributes in the collection. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.componentmodel._31_1.cpp)]\n [!code-cs[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.componentmodel._31_1.cs)]\n [!code-vb[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._31_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um enumerador de tipo <xref:System.Collections.IEnumerator>.</xref:System.Collections.IEnumerator>"
  overload: System.ComponentModel.AttributeCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: AttributeCollection.Item(Int32)
  fullName: System.ComponentModel.AttributeCollection.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o atributo com o número de índice especificado."
  remarks: "O número de índice é baseado em zero. Portanto, você deve subtrair 1 da posição numérica de um determinado <xref:System.Attribute>para acessar esse <xref:System.Attribute>.</xref:System.Attribute> </xref:System.Attribute> Por exemplo, para obter o terceiro <xref:System.Attribute>, você precisa especificar `myColl[2]`.</xref:System.Attribute>"
  example:
  - "The following code example uses the Item property to print the name of the <xref:System.Attribute> specified by the index number in a text box. Because the index number is zero-based, this code example prints the name of the second <xref:System.Attribute> in a text box. It assumes `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.this Example#1](~/add/codesnippet/csharp/p-system.componentmodel._5_1.cs)]\n [!code-vb[Classic AttributeCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._5_1.vb)]\n [!code-cpp[Classic AttributeCollection.this Example#1](~/add/codesnippet/cpp/p-system.componentmodel._5_1.cpp)]"
  syntax:
    content: public virtual Attribute this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice com base em zero do <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>."
    return:
      type: System.Attribute
      description: "O <xref:System.Attribute>com o número de índice especificado.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Item(System.Type)
  id: Item(System.Type)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Item(Type)
  nameWithType: AttributeCollection.Item(Type)
  fullName: System.ComponentModel.AttributeCollection.Item(Type)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o atributo com o tipo especificado."
  remarks: "Se o atributo não existe na coleção, essa propriedade retorna o valor padrão para o tipo de atributo."
  example:
  - "The following code example gets the <xref:System.ComponentModel.DesignerAttribute> from the collection and prints its value. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.componentmodel._9_1.cs)]\n [!code-cpp[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/cpp/p-system.componentmodel._9_1.cpp)]\n [!code-vb[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._9_1.vb)]"
  syntax:
    content: public virtual Attribute this[Type attributeType] { get; }
    parameters:
    - id: attributeType
      type: System.Type
      description: "O <xref:System.Type>do <xref:System.Attribute>obter da coleção.</xref:System.Attribute> </xref:System.Type>"
    return:
      type: System.Attribute
      description: "O <xref:System.Attribute>com o tipo especificado ou, se o atributo não existir, o valor padrão para o tipo de atributo.</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  id: Matches(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Matches(Attribute)
  nameWithType: AttributeCollection.Matches(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se um atributo especificado é o mesmo que um atributo na coleção."
  remarks: "Um atributo pode fornecer suporte para correspondência.       A diferença entre as correspondências e <xref:System.ComponentModel.AttributeCollection.Contains%2A>métodos é que corresponde ao chamar o <xref:System.Attribute.Match%2A>método em um atributo, e <xref:System.ComponentModel.AttributeCollection.Contains%2A>chama o <xref:System.Object.Equals%2A>método.</xref:System.Object.Equals%2A> </xref:System.ComponentModel.AttributeCollection.Contains%2A> </xref:System.Attribute.Match%2A> </xref:System.ComponentModel.AttributeCollection.Contains%2A>       Para a maioria dos atributos, esses métodos fazem a mesma coisa. Para atributos que podem ter vários sinalizadores, no entanto, <xref:System.Attribute.Match%2A>costuma ser implementada para que ele retorna `true` se qualquer um dos sinalizadores forem atendidas.</xref:System.Attribute.Match%2A> Por exemplo, considere um atributo de associação de dados com os sinalizadores de boolianos &quot;SupportsSql&quot;, &quot;SupportsOleDb&quot; e &quot;SupportsXml&quot;. Esse atributo pode estar presente em uma propriedade que dá suporte a todas as abordagens de três associação de dados. Geralmente será o caso em que um programador precisa saber apenas se uma abordagem específica está disponível, nem todos os três. Portanto, um programador pode usar <xref:System.Attribute.Match%2A>com uma instância do atributo que contém apenas os sinalizadores o programador precisa.</xref:System.Attribute.Match%2A>"
  example:
  - "The following code example verifies that the <xref:System.ComponentModel.BrowsableAttribute> is a member of the collection and that it has been set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/cpp/m-system.componentmodel._11_1.cpp)]\n [!code-vb[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._11_1.vb)]\n [!code-cs[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/csharp/m-system.componentmodel._11_1.cs)]"
  syntax:
    content: public bool Matches (Attribute attribute);
    parameters:
    - id: attribute
      type: System.Attribute
      description: "Uma instância de <xref:System.Attribute>para comparar com os atributos nesta coleção.</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o atributo está contido dentro da coleção e tem o mesmo valor que o atributo na coleção; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  id: Matches(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Matches(Attribute[])
  nameWithType: AttributeCollection.Matches(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se os atributos na matriz especificada são o mesmo que os atributos da coleção."
  remarks: "Um atributo pode fornecer suporte para correspondência."
  example:
  - "The following code example compares the attributes in a button and a text box to see whether they match. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._40_1.cpp)]\n [!code-cs[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._40_1.cs)]\n [!code-vb[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._40_1.vb)]"
  syntax:
    content: public bool Matches (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz de <xref href=&quot;System.CodeDom.MemberAttributes&quot;> </xref> para comparar com os atributos nesta coleção."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se todos os atributos na matriz estão contidos na coleção e têm os mesmos valores como os atributos na coleção; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o número de elementos contidos na coleção."
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: "O número de elementos contidos na coleção."
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe)."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o acesso à coleção é sincronizado (thread-safe); Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um objeto que pode ser usado para sincronizar o acesso à coleção."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser usado para sincronizar o acesso à coleção."
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um <xref:System.Collections.IEnumerator>para <xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary> </xref:System.Collections.IEnumerator>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>para <xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary> </xref:System.Collections.IEnumerator>"
  overload: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.AttributeCollection.#ctor
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection()
  nameWithType: AttributeCollection.AttributeCollection()
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()
- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection(Attribute[])
  nameWithType: AttributeCollection.AttributeCollection(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.AttributeCollection.Attributes
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Attributes
  nameWithType: AttributeCollection.Attributes
  fullName: System.ComponentModel.AttributeCollection.Attributes
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains(Attribute)
  nameWithType: AttributeCollection.Contains(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains(Attribute[])
  nameWithType: AttributeCollection.Contains(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])
- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: AttributeCollection.CopyTo(Array,Int32)
  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.AttributeCollection.Count
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Count
  nameWithType: AttributeCollection.Count
  fullName: System.ComponentModel.AttributeCollection.Count
- uid: System.ComponentModel.AttributeCollection.Empty
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Empty
  nameWithType: AttributeCollection.Empty
  fullName: System.ComponentModel.AttributeCollection.Empty
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: FromExisting(AttributeCollection,Attribute[])
  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetDefaultAttribute(Type)
  nameWithType: AttributeCollection.GetDefaultAttribute(Type)
  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.AttributeCollection.GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: AttributeCollection.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: AttributeCollection.Item(Int32)
  fullName: System.ComponentModel.AttributeCollection.Item(Int32)
- uid: System.ComponentModel.AttributeCollection.Item(System.Type)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item(Type)
  nameWithType: AttributeCollection.Item(Type)
  fullName: System.ComponentModel.AttributeCollection.Item(Type)
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches(Attribute)
  nameWithType: AttributeCollection.Matches(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches(Attribute[])
  nameWithType: AttributeCollection.Matches(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.ComponentModel.AttributeCollection.#ctor*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection.AttributeCollection
- uid: System.ComponentModel.AttributeCollection.Attributes*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Attributes
  nameWithType: AttributeCollection.Attributes
- uid: System.ComponentModel.AttributeCollection.Contains*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains
  nameWithType: AttributeCollection.Contains
- uid: System.ComponentModel.AttributeCollection.CopyTo*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: CopyTo
  nameWithType: AttributeCollection.CopyTo
- uid: System.ComponentModel.AttributeCollection.Count*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Count
  nameWithType: AttributeCollection.Count
- uid: System.ComponentModel.AttributeCollection.FromExisting*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: FromExisting
  nameWithType: AttributeCollection.FromExisting
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetDefaultAttribute
  nameWithType: AttributeCollection.GetDefaultAttribute
- uid: System.ComponentModel.AttributeCollection.GetEnumerator*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: AttributeCollection.GetEnumerator
- uid: System.ComponentModel.AttributeCollection.Item*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item
  nameWithType: AttributeCollection.Item
- uid: System.ComponentModel.AttributeCollection.Matches*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches
  nameWithType: AttributeCollection.Matches
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator
