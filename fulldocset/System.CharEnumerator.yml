### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "Oferece suporte à iteração sobre um <xref:System.String>objeto e à leitura de seus caracteres individuais.</xref:System.String> Essa classe não pode ser herdada."
  remarks: "Um CharEnumerator fornece acesso somente leitura para os caracteres em uma referência <xref:System.String>objeto.</xref:System.String> Por exemplo, o `foreach` instrução as linguagens de programação do Microsoft Visual Basic e c#, que itera por meio dos elementos de uma coleção, recupera uma CharEnumerator de um <xref:System.String>objeto para iterar os caracteres nesse objeto.</xref:System.String>       Não há nenhum construtor público para CharEnumerator. Em vez disso, chame um <xref:System.String>do objeto <xref:System.String.GetEnumerator%2A>método para obter um CharEnumerator que é inicializado para fazer referência a cadeia de caracteres.</xref:System.String.GetEnumerator%2A> </xref:System.String>       Um CharEnumerator mantém um índice interno para os caracteres na cadeia de referências de CharEnumerator. O estado do índice é válidos e inválidos quando ela faz referência a uma posição de caractere logicamente antes do primeiro caractere ou depois do último caractere na cadeia de caracteres quando ela faz referência a um caractere na cadeia de caracteres. O índice é inicializado para uma posição logicamente antes do primeiro caractere e é definido para uma posição após o último caractere quando a iteração é concluída. Uma exceção é gerada se você tentar acessar um caractere enquanto o índice é inválido.       O <xref:System.CharEnumerator.MoveNext%2A>método incrementa o índice em um, para o primeiro e subsequente caracteres é acessado por sua vez.</xref:System.CharEnumerator.MoveNext%2A> O <xref:System.CharEnumerator.Reset%2A>método define o índice para uma posição logicamente antes do primeiro caractere.</xref:System.CharEnumerator.Reset%2A> O <xref:System.CharEnumerator.Current%2A>propriedade recupera o caractere atualmente referenciado por índice.</xref:System.CharEnumerator.Current%2A> O <xref:System.CharEnumerator.Clone%2A>método cria uma cópia do CharEnumerator.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > Várias instâncias independentes do CharEnumerator em um ou mais threads podem ter acesso a uma única instância de <xref:System.String>.</xref:System.String> Essa classe é implementada para dar suporte a <xref:System.Collections.IEnumerator>interface.</xref:System.Collections.IEnumerator> Para obter mais informações sobre o uso de um enumerador, consulte o <xref:System.Collections.IEnumerator>tópico.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Cria uma cópia do atual <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto."
  remarks: "O valor de retorno é uma cópia desta instância do <xref:System.CharEnumerator>e seu estado atual.</xref:System.CharEnumerator> Isso é útil para salvar seu estado durante a iteração por meio de um <xref:System.String>objeto.</xref:System.String>       Por exemplo, suponha que seu aplicativo usa uma instância original de <xref:System.CharEnumerator>percorrer cada caractere em <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator> Quando algum caractere exclusivo é encontrado, seu aplicativo faz uma pausa o processamento e invoca o método de clonagem. Na verdade, isso salva o <xref:System.CharEnumerator>índice do objeto em <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator>       Seu aplicativo usa o clone para navegar para outra parte do `String` executar algum processamento auxiliar. O efeito colateral dessa navegação é que o clone perde o controle da posição em que o processamento é interrompido. No entanto, quando o processamento auxiliar estiver concluído, seu aplicativo descarta o clone e usa o original <xref:System.CharEnumerator>instância para continuar a trabalhar no <xref:System.String>onde o processamento original é interrompida.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > Esse método é implementado para dar suporte a <xref:System.ICloneable>interface.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Um <xref:System.Object>que é uma cópia do atual <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto."
  remarks: "O <xref:System.CharEnumerator>classe mantém um índice interno para a cadeia de caracteres enumerada, e a propriedade Current retorna o caractere que está sendo referenciado por índice.</xref:System.CharEnumerator> Essa propriedade deve ser invocada somente quando o índice é válido. Caso contrário, uma exceção será lançada.       O índice sempre é inválido para uma cadeia de caracteres vazia (&quot;&quot;). O índice também é inválido após o <xref:System.String.GetEnumerator%2A?displayProperty=fullName>ou <xref:System.CharEnumerator.Reset%2A>método é chamado.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> Depois de qualquer um desses métodos é chamado, chamar o <xref:System.CharEnumerator.MoveNext%2A>método para ajustar o índice para o primeiro caractere na cadeia de caracteres enumerada.</xref:System.CharEnumerator.MoveNext%2A> O índice é válido quando o <xref:System.CharEnumerator.MoveNext%2A>método retornará `true`.</xref:System.CharEnumerator.MoveNext%2A>       Atual não mover o índice e chamadas consecutivas atual retornam o mesmo caractere até <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, ou <xref:System.String.GetEnumerator%2A?displayProperty=fullName>é chamado.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "O caractere Unicode atualmente referenciado por este <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O índice é inválido; ou seja, ele é antes da primeira ou após o último caractere da cadeia de caracteres enumerada."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Libera todos os recursos usados pela instância atual do <xref href=&quot;System.CharEnumerator&quot;> </xref> classe."
  remarks: "Chamar Dispose quando terminar de usar o <xref:System.CharEnumerator>.</xref:System.CharEnumerator> O método Dispose deixa a <xref:System.CharEnumerator>em um estado inutilizável.</xref:System.CharEnumerator> Depois de chamar Dispose, você deve liberar todas as referências para o <xref:System.CharEnumerator>para o coletor de lixo possa recuperar a memória que o <xref:System.CharEnumerator>estava ocupando.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [implementar um método Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada Dispose antes de liberar sua última referência a <xref:System.CharEnumerator>.</xref:System.CharEnumerator> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.CharEnumerator>do objeto `Finalize` método.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Incrementa o índice interno do atual <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto para o próximo caractere da cadeia de caracteres enumerada."
  remarks: "O <xref:System.CharEnumerator>classe mantém um índice interno para a cadeia de caracteres enumerada, e o método MoveNext incrementa o índice em um.</xref:System.CharEnumerator> Chame o MoveNext depois de chamar <xref:System.String.GetEnumerator%2A>ou <xref:System.CharEnumerator.Reset%2A>para incrementar a atual posição do caractere para o primeiro caractere na cadeia de caracteres enumerada.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> Verifique se o valor de retorno é `true` para determinar se a atual posição do caractere é válida.       Se o índice já está além do último caractere da cadeia de caracteres enumerada, o índice não será alterado e `false` é retornado.       Observe que, se a cadeia de caracteres enumerada está vazia (&quot;&quot;), o estado do <xref:System.CharEnumerator>sempre é inválido.</xref:System.CharEnumerator> Isso ocorre porque o índice interno para o <xref:System.CharEnumerator>é inicialmente antes do primeiro caractere da cadeia de caracteres enumerada e, portanto, é inválido.</xref:System.CharEnumerator> MoveNext logicamente define o índice após o último caractere (que não existe) da cadeia de caracteres enumerada que também é inválido."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o índice é incrementado com êxito e dentro de uma cadeia de caracteres enumerada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inicializa o índice para uma posição logicamente antes do primeiro caractere da cadeia de caracteres enumerada."
  remarks: "O <xref:System.CharEnumerator>classe mantém um índice interno para a cadeia de caracteres enumerada, e o método Reset define o índice para o estado inválido.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Obtém o caractere atualmente referenciado na cadeia de caracteres enumerada por este <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto. Para obter uma descrição desse membro, consulte &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.CharEnumerator>instância é convertida em um <xref:System.Collections.IEnumerator>interface.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "O caractere Unicode demarcado atualmente referenciado por este <xref href=&quot;System.CharEnumerator&quot;> </xref> objeto."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Enumeração não foi iniciada.       - ou - enumeração terminou."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
