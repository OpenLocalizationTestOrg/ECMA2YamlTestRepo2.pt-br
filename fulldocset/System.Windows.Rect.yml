### YamlMime:ManagedReference
items:
- uid: System.Windows.Rect
  id: Rect
  children:
  - System.Windows.Rect.#ctor(System.Windows.Size)
  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)
  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)
  - System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)
  - System.Windows.Rect.Bottom
  - System.Windows.Rect.BottomLeft
  - System.Windows.Rect.BottomRight
  - System.Windows.Rect.Contains(System.Windows.Point)
  - System.Windows.Rect.Contains(System.Windows.Rect)
  - System.Windows.Rect.Contains(System.Double,System.Double)
  - System.Windows.Rect.Empty
  - System.Windows.Rect.Equals(System.Object)
  - System.Windows.Rect.Equals(System.Windows.Rect)
  - System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.GetHashCode
  - System.Windows.Rect.Height
  - System.Windows.Rect.Inflate(System.Windows.Size)
  - System.Windows.Rect.Inflate(System.Double,System.Double)
  - System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)
  - System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)
  - System.Windows.Rect.Intersect(System.Windows.Rect)
  - System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.IntersectsWith(System.Windows.Rect)
  - System.Windows.Rect.IsEmpty
  - System.Windows.Rect.Left
  - System.Windows.Rect.Location
  - System.Windows.Rect.Offset(System.Windows.Vector)
  - System.Windows.Rect.Offset(System.Double,System.Double)
  - System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)
  - System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)
  - System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.Parse(System.String)
  - System.Windows.Rect.Right
  - System.Windows.Rect.Scale(System.Double,System.Double)
  - System.Windows.Rect.Size
  - System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Rect.Top
  - System.Windows.Rect.TopLeft
  - System.Windows.Rect.TopRight
  - System.Windows.Rect.ToString
  - System.Windows.Rect.ToString(System.IFormatProvider)
  - System.Windows.Rect.Transform(System.Windows.Media.Matrix)
  - System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  - System.Windows.Rect.Union(System.Windows.Point)
  - System.Windows.Rect.Union(System.Windows.Rect)
  - System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)
  - System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)
  - System.Windows.Rect.Width
  - System.Windows.Rect.X
  - System.Windows.Rect.Y
  langs:
  - csharp
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
  type: Struct
  summary: "Descreve a largura, altura e local de um retângulo."
  remarks: "<a name=&quot;xamlAttributeUsage_Duration&quot;></a># # Uso do atributo XAML ```   <object property=&quot;x,y,width,height&quot;/>   ``` <a name=&quot;xamlValues_MinWidth&quot;> </a> # # XAML valores *x* <xref:System.Double?displayProperty=fullName> o local da coordenada x do lado esquerdo do retângulo.</xref:System.Double?displayProperty=fullName>                 *y* <xref:System.Double?displayProperty=fullName> o local da coordenada y do canto superior do retângulo.</xref:System.Double?displayProperty=fullName>           *largura* <xref:System.Double?displayProperty=fullName> um valor negativo que representa o <xref:System.Windows.Rect.Width%2A>do retângulo.</xref:System.Windows.Rect.Width%2A> </xref:System.Double?displayProperty=fullName>           *Altura* <xref:System.Double?displayProperty=fullName> um valor negativo que representa o <xref:System.Windows.Rect.Height%2A>do retângulo.</xref:System.Windows.Rect.Height%2A> </xref:System.Double?displayProperty=fullName>    "
  example:
  - "The following example shows how to use a Rect structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))]

      public struct Rect : IFormattable
  inheritance:
  - System.ValueType
  implements:
  - System.IFormattable
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Size)
  id: '#ctor(System.Windows.Size)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Size)
  nameWithType: Rect.Rect(Size)
  fullName: System.Windows.Rect.Rect(Size)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura que é do tamanho especificado e está localizado em (0,0)."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample2_csharp)]"
  syntax:
    content: public Rect (System.Windows.Size size);
    parameters:
    - id: size
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> estrutura que especifica a largura e altura do retângulo."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)
  id: '#ctor(System.Windows.Point,System.Windows.Point)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Point,Point)
  nameWithType: Rect.Rect(Point,Point)
  fullName: System.Windows.Rect.Rect(Point,Point)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura que é exatamente grande o suficiente para conter os dois pontos especificados."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample3_csharp)]"
  syntax:
    content: public Rect (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "O primeiro ponto em que o novo retângulo deve conter."
    - id: point2
      type: System.Windows.Point
      description: "O segundo ponto deve conter o novo retângulo."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)
  id: '#ctor(System.Windows.Point,System.Windows.Size)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Point,Size)
  nameWithType: Rect.Rect(Point,Size)
  fullName: System.Windows.Rect.Rect(Point,Size)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura que tem o local do canto superior esquerdo especificado e a largura especificada e a altura."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample4_csharp)]"
  syntax:
    content: public Rect (System.Windows.Point location, System.Windows.Size size);
    parameters:
    - id: location
      type: System.Windows.Point
      description: "Um ponto que especifica o local do canto superior esquerdo do retângulo."
    - id: size
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> estrutura que especifica a largura e altura do retângulo."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)
  id: '#ctor(System.Windows.Point,System.Windows.Vector)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Point,Vector)
  nameWithType: Rect.Rect(Point,Vector)
  fullName: System.Windows.Rect.Rect(Point,Vector)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura que é exatamente grande o suficiente para conter o ponto especificado e a soma de ponto especificado e o vetor especificado."
  remarks: ''
  example:
  - "The following example shows how to create a new <xref:System.Windows.Rect> structure by using the Rect constructor.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample5_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample5_csharp)]"
  syntax:
    content: public Rect (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "O primeiro ponto o retângulo deve conter."
    - id: vector
      type: System.Windows.Vector
      description: "A quantidade para deslocar o ponto especificado. O retângulo resultante será exatamente grande o suficiente para conter os dois pontos."
  overload: System.Windows.Rect.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Rect(Double,Double,Double,Double)
  nameWithType: Rect.Rect(Double,Double,Double,Double)
  fullName: System.Windows.Rect.Rect(Double,Double,Double,Double)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura que tem a coordenada x especificada, coordenada y, largura e altura."
  remarks: "O exemplo a seguir mostra como criar um novo <xref:System.Windows.Rect>estrutura usando o construtor Rect.</xref:System.Windows.Rect>       [!code-cs[RectExamples_snip #CreateRectExample6_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample6_csharp)]"
  syntax:
    content: public Rect (double x, double y, double width, double height);
    parameters:
    - id: x
      type: System.Double
      description: "A coordenada x do canto superior esquerdo do retângulo."
    - id: y
      type: System.Double
      description: "A coordenada y do canto superior esquerdo do retângulo."
    - id: width
      type: System.Double
      description: "A largura do retângulo."
    - id: height
      type: System.Double
      description: "A altura do retângulo."
  overload: System.Windows.Rect.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>width</code>é um valor negativo.       - ou - <code>height</code> é um valor negativo."
  platform:
  - net462
- uid: System.Windows.Rect.Bottom
  id: Bottom
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: System.Windows.Rect.Bottom
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém o valor do eixo y da parte inferior do retângulo."
  remarks: "O valor do eixo y da parte inferior do retângulo é igual à soma da <xref:System.Windows.Rect.Y%2A>e <xref:System.Windows.Rect.Height%2A>Propriedades.</xref:System.Windows.Rect.Height%2A> </xref:System.Windows.Rect.Y%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Bottom { get; }
    return:
      type: System.Double
      description: "O valor do eixo y da parte inferior do retângulo. Se o retângulo estiver vazio, o valor é <xref:System.Double>.</xref:System.Double>"
  overload: System.Windows.Rect.Bottom*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.BottomLeft
  id: BottomLeft
  parent: System.Windows.Rect
  langs:
  - csharp
  name: BottomLeft
  nameWithType: Rect.BottomLeft
  fullName: System.Windows.Rect.BottomLeft
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém a posição do canto inferior esquerdo do retângulo"
  remarks: "A posição do canto inferior esquerdo do retângulo é igual a (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>+ <xref:System.Windows.Rect.Height%2A>).</xref:System.Windows.Rect.Height%2A> </xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point BottomLeft { get; }
    return:
      type: System.Windows.Point
      description: "A posição do canto inferior esquerdo do retângulo."
  overload: System.Windows.Rect.BottomLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.BottomRight
  id: BottomRight
  parent: System.Windows.Rect
  langs:
  - csharp
  name: BottomRight
  nameWithType: Rect.BottomRight
  fullName: System.Windows.Rect.BottomRight
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém a posição do canto inferior direito do retângulo."
  remarks: "A posição do canto inferior direito do retângulo é igual a (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>+ <xref:System.Windows.Rect.Height%2A>).</xref:System.Windows.Rect.Height%2A> </xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.Width%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point BottomRight { get; }
    return:
      type: System.Windows.Point
      description: "A posição do canto inferior direito do retângulo."
  overload: System.Windows.Rect.BottomRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Contains(System.Windows.Point)
  id: Contains(System.Windows.Point)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: System.Windows.Rect.Contains(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se o retângulo que contém o ponto especificado."
  remarks: ''
  example:
  - "The following example shows how to use the Contains method to determine if the rectangle contains the specified <xref:System.Windows.Point>.  \n  \n [!code-cs[RectExamples_snip#ContainsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample1_csharp)]"
  syntax:
    content: public bool Contains (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "O ponto de verificação."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o retângulo que contém o ponto especificado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Contains(System.Windows.Rect)
  id: Contains(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: System.Windows.Rect.Contains(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se o retângulo que contém o retângulo especificado."
  remarks: ''
  example:
  - "The following example shows how to use the Contains method to determine if one rectangle is contained by another rectangle.  \n  \n [!code-cs[RectExamples_snip#ContainsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample2_csharp)]"
  syntax:
    content: public bool Contains (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O retângulo para verificar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> rect </code> é totalmente contido pelo retângulo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Contains(System.Double,System.Double)
  id: Contains(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Contains(Double,Double)
  nameWithType: Rect.Contains(Double,Double)
  fullName: System.Windows.Rect.Contains(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se o retângulo contém a coordenada x especificada e a coordenada y."
  remarks: ''
  example:
  - "The following example shows how to use the Contains method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.  \n  \n [!code-cs[RectExamples_snip#ContainsExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#containsexample3_csharp)]"
  syntax:
    content: public bool Contains (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: "A coordenada x do ponto de verificação."
    - id: y
      type: System.Double
      description: "A coordenada y do ponto de verificação."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se (<code>x</code>, <code> y </code>) é contida pelo retângulo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Empty
  id: Empty
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Empty
  nameWithType: Rect.Empty
  fullName: System.Windows.Rect.Empty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém um valor especial que representa um retângulo sem posição ou área."
  remarks: "Evite cálculos matemáticos envolvendo retângulos vazios. Porque ambos <xref:System.Windows.Rect.X%2A>e <xref:System.Windows.Rect.Y%2A>são valores de infinitos, processador operações são severos prejudicadas por essas operações.</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A> Comparações que envolvem esses valores não afetará o desempenho do aplicativo."
  syntax:
    content: public static System.Windows.Rect Empty { get; }
    return:
      type: System.Windows.Rect
      description: "O retângulo vazio, que tem <> </> *> e <> </> *> valores de propriedade de <xref:System.Double.PositiveInfinity>e tem <> </> *> e <> </> *> valores de propriedade de <xref:System.Double.NegativeInfinity>.</xref:System.Double.NegativeInfinity> </xref:System.Double.PositiveInfinity>"
  overload: System.Windows.Rect.Empty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: System.Windows.Rect.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se o objeto especificado é igual ao retângulo atual."
  remarks: "Esta operação testa a igualdade de objetos.       Nessa comparação, duas instâncias de <xref:System.Double.NaN?displayProperty=fullName>são considerados iguais.</xref:System.Double.NaN?displayProperty=fullName>      > [!NOTE] > A posição do retângulo e as dimensões são descritas por <xref:System.Double>valores.</xref:System.Double> Porque <xref:System.Double>valores podem perder precisão quando for operado, uma comparação entre dois valores são iguais logicamente poderá falhar.</xref:System.Double>"
  example:
  - "The following example shows how to use the Equals method to determine if a rectangle is equal to a specified object.  \n  \n [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O objeto a ser comparado com o retângulo atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> o </code> é um <xref href=&quot;System.Windows.Rect&quot;> </xref> e tem o mesmo <> </> *> e <> </> *> valores como o retângulo atual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Equals(System.Windows.Rect)
  id: Equals(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Equals(Rect)
  nameWithType: Rect.Equals(Rect)
  fullName: System.Windows.Rect.Equals(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se o retângulo especificado é igual ao retângulo atual."
  remarks: "Esta operação testa a igualdade de objetos.       Nessa comparação, duas instâncias de <xref:System.Double.NaN?displayProperty=fullName>são considerados iguais.</xref:System.Double.NaN?displayProperty=fullName>      > [!NOTE] > A posição do retângulo e as dimensões são descritas por <xref:System.Double>valores.</xref:System.Double> Porque <xref:System.Double>valores podem perder precisão quando for operado, uma comparação entre dois valores são iguais logicamente poderá falhar.</xref:System.Double>"
  example:
  - "The following example shows how to use the Equals method to determine if a rectangle is equal to a specified rectangle.  \n  \n [!code-cs[RectExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample1_csharp)]"
  syntax:
    content: public bool Equals (System.Windows.Rect value);
    parameters:
    - id: value
      type: System.Windows.Rect
      description: "O retângulo a ser comparado com o retângulo atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o retângulo especificado tem o mesmo <> </> *> e <> </> *> valores como o retângulo atual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)
  id: Equals(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Equals(Rect,Rect)
  nameWithType: Rect.Equals(Rect,Rect)
  fullName: System.Windows.Rect.Equals(Rect,Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se os retângulos especificados são iguais."
  remarks: "Esta operação testa a igualdade de objetos.       Nessa comparação, duas instâncias de <xref:System.Double.NaN?displayProperty=fullName>são considerados iguais.</xref:System.Double.NaN?displayProperty=fullName>      > [!NOTE] > A posição do retângulo e as dimensões são descritas por <xref:System.Double>valores.</xref:System.Double> Porque <xref:System.Double>valores podem perder precisão quando for operado, uma comparação entre dois valores são iguais logicamente poderá falhar.</xref:System.Double>"
  example:
  - "The following example shows how to use the Equals method to determine if one rectangle is equal to another.  \n  \n [!code-cs[RectExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#equalsexample2_csharp)]"
  syntax:
    content: public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "O primeiro retângulo para comparar."
    - id: rect2
      type: System.Windows.Rect
      description: "O segundo retângulo para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os retângulos tiverem o mesmo <> </> *> e <> </> *> valores; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.GetHashCode
  id: GetHashCode
  parent: System.Windows.Rect
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: System.Windows.Rect.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cria um código hash para o retângulo."
  remarks: "Esse método cria um código hash usando o <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, e <xref:System.Windows.Rect.Height%2A>valores de propriedade.</xref:System.Windows.Rect.Height%2A> </xref:System.Windows.Rect.Width%2A> </xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use the GetHashCode method to get the hash code of a <xref:System.Windows.Rect>.  \n  \n [!code-cs[RectExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#gethashcodeexample_csharp)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para a atual <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura."
  overload: System.Windows.Rect.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Height
  id: Height
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Height
  nameWithType: Rect.Height
  fullName: System.Windows.Rect.Height
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define a altura do retângulo."
  remarks: "O <xref:System.Windows.Rect.Empty%2A>Retângulo possui uma altura de <xref:System.Double.NegativeInfinity>.</xref:System.Double.NegativeInfinity> </xref:System.Windows.Rect.Empty%2A> O <xref:System.Windows.Rect.Empty%2A>retângulo é somente leitura; sua altura não não pode ser alterada.</xref:System.Windows.Rect.Empty%2A>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Height { get; set; }
    return:
      type: System.Double
      description: "Um número positivo que representa a altura do retângulo. O padrão é 0."
  overload: System.Windows.Rect.Height*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Altura é definida como um valor negativo."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Altura é definida em um <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Windows.Size)
  id: Inflate(System.Windows.Size)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: System.Windows.Rect.Inflate(Size)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expande o retângulo usando especificado <xref href=&quot;System.Windows.Size&quot;> </xref>, em todas as direções."
  remarks: "O <xref:System.Windows.Rect.Width%2A>do retângulo resultante é aumentado em duas vezes o <xref:System.Windows.Size.Width%2A>especificada <xref:System.Windows.Size>estrutura, porque ambos os lados esquerdo e direito do retângulo são aumentados.</xref:System.Windows.Size> </xref:System.Windows.Size.Width%2A> </xref:System.Windows.Rect.Width%2A> Da mesma forma, o <xref:System.Windows.Rect.Height%2A>do retângulo resultante é aumentado em duas vezes o <xref:System.Windows.Size.Height%2A>especificada <xref:System.Windows.Size>estrutura.</xref:System.Windows.Size> </xref:System.Windows.Size.Height%2A> </xref:System.Windows.Rect.Height%2A>"
  example:
  - "The following example shows how to use the Inflate method to increase the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample1_csharp)]"
  syntax:
    content: public void Inflate (System.Windows.Size size);
    parameters:
    - id: size
      type: System.Windows.Size
      description: "Especifica o valor para expandir o retângulo. O <xref href=&quot;System.Windows.Size&quot;> </xref> da estrutura <> </> *> propriedade especifica o valor para aumentar o retângulo <> </> *> e <> </> *> propriedades. O <xref href=&quot;System.Windows.Size&quot;> </xref> da estrutura <> </> *> propriedade especifica o valor para aumentar o retângulo <> </> *> e <> </> *> propriedades."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Esse método é chamado no &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; retângulo."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Double,System.Double)
  id: Inflate(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Double,Double)
  nameWithType: Rect.Inflate(Double,Double)
  fullName: System.Windows.Rect.Inflate(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Aumenta ou diminui o retângulo usando os valores de largura e altura especificados, em todas as direções."
  remarks: "O <xref:System.Windows.Rect.Width%2A>do retângulo resultante é aumentado ou diminuído por duas vezes o deslocamento de largura especificada, porque ela é aplicada à esquerda e direita do retângulo.</xref:System.Windows.Rect.Width%2A> Da mesma forma, o <xref:System.Windows.Rect.Height%2A>do retângulo resultante é aumentado ou diminuído por duas vezes a altura especificada.</xref:System.Windows.Rect.Height%2A>       Se a altura ou largura especificada reduzir o retângulo maior do que o atual <xref:System.Windows.Rect.Width%2A>ou <xref:System.Windows.Rect.Height%2A>— fornecendo o retângulo uma área negativa — o retângulo se torna o <xref:System.Windows.Rect.Empty%2A>retângulo.</xref:System.Windows.Rect.Empty%2A> </xref:System.Windows.Rect.Height%2A> </xref:System.Windows.Rect.Width%2A>"
  example:
  - "The following example shows how to use the Inflate method to change the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample2_csharp)]"
  syntax:
    content: public void Inflate (double width, double height);
    parameters:
    - id: width
      type: System.Double
      description: "A quantidade pela qual expandir ou reduzir à esquerda e à direita do retângulo."
    - id: height
      type: System.Double
      description: "A quantidade pela qual expandir ou reduzir os lados superior e inferior do retângulo."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Esse método é chamado no &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; retângulo."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)
  id: Inflate(System.Windows.Rect,System.Windows.Size)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Rect,Size)
  nameWithType: Rect.Inflate(Rect,Size)
  fullName: System.Windows.Rect.Inflate(Rect,Size)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna o retângulo que resulta da expandindo o retângulo especificado por especificado <xref href=&quot;System.Windows.Size&quot;> </xref>, em todas as direções."
  remarks: "O <xref:System.Windows.Rect.Width%2A>do retângulo resultante é aumentado em duas vezes o <xref:System.Windows.Size.Width%2A>especificada <xref:System.Windows.Size>estrutura, porque ambos os lados esquerdo e direito do retângulo são aumentados.</xref:System.Windows.Size> </xref:System.Windows.Size.Width%2A> </xref:System.Windows.Rect.Width%2A> Da mesma forma, o <xref:System.Windows.Rect.Height%2A>do retângulo resultante é aumentado em duas vezes o <xref:System.Windows.Size.Height%2A>especificada <xref:System.Windows.Size>estrutura.</xref:System.Windows.Size> </xref:System.Windows.Size.Height%2A> </xref:System.Windows.Rect.Height%2A>"
  example:
  - "The following example shows how to use the Inflate method to change the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample3_csharp)]"
  syntax:
    content: public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura para modificar."
    - id: size
      type: System.Windows.Size
      description: "Especifica o valor para expandir o retângulo. O <xref href=&quot;System.Windows.Size&quot;> </xref> da estrutura <> </> *> propriedade especifica o valor para aumentar o retângulo <> </> *> e <> </> *> propriedades. O <xref href=&quot;System.Windows.Size&quot;> </xref> da estrutura <> </> *> propriedade especifica o valor para aumentar o retângulo <> </> *> e <> </> *> propriedades."
    return:
      type: System.Windows.Rect
      description: "O retângulo resultante."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code>é um &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; retângulo."
  platform:
  - net462
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)
  id: Inflate(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Inflate(Rect,Double,Double)
  nameWithType: Rect.Inflate(Rect,Double,Double)
  fullName: System.Windows.Rect.Inflate(Rect,Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cria um retângulo que é o resultado de expandir ou reduzir o retângulo especificado pelos valores especificados de largura e altura, em todas as direções."
  remarks: "O <xref:System.Windows.Rect.Width%2A>do retângulo resultante é aumentado ou diminuído por duas vezes o deslocamento de largura especificada, porque ela é aplicada à esquerda e direita do retângulo.</xref:System.Windows.Rect.Width%2A> Da mesma forma, o <xref:System.Windows.Rect.Height%2A>do retângulo resultante é aumentado ou diminuído por duas vezes a altura especificada.</xref:System.Windows.Rect.Height%2A>       Se a redução os modificadores especificados de largura ou altura do retângulo maior do que o atual <xref:System.Windows.Rect.Width%2A>ou <xref:System.Windows.Rect.Height%2A>— fornecendo o retângulo uma área negativa — esse método retorna <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.</xref:System.Windows.Rect.Empty%2A?displayProperty=fullName> </xref:System.Windows.Rect.Height%2A> </xref:System.Windows.Rect.Width%2A>"
  example:
  - "The following example shows how to use the Inflate method to change the size of a rectangle.  \n  \n [!code-cs[RectExamples_snip#InflateExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#inflateexample4_csharp)]"
  syntax:
    content: public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O <xref href=&quot;System.Windows.Rect&quot;> </xref> estrutura para modificar."
    - id: width
      type: System.Double
      description: "A quantidade pela qual expandir ou reduzir à esquerda e à direita do retângulo."
    - id: height
      type: System.Double
      description: "A quantidade pela qual expandir ou reduzir os lados superior e inferior do retângulo."
    return:
      type: System.Windows.Rect
      description: "O retângulo resultante."
  overload: System.Windows.Rect.Inflate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code>é um &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; retângulo."
  platform:
  - net462
- uid: System.Windows.Rect.Intersect(System.Windows.Rect)
  id: Intersect(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: System.Windows.Rect.Intersect(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Localiza a interseção do retângulo atual e o retângulo especificado e armazena o resultado do retângulo atual."
  remarks: "Se nenhuma interseção existir, o retângulo atual se torna <xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>.</xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>"
  example:
  - "The following example shows how to use the Intersect method to find the intersection of two rectangles and store the result as a rectangle.  \n  \n [!code-cs[RectExamples_snip#IntersectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample1_csharp)]"
  syntax:
    content: public void Intersect (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O retângulo a intersecção com o retângulo atual."
  overload: System.Windows.Rect.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)
  id: Intersect(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Intersect(Rect,Rect)
  nameWithType: Rect.Intersect(Rect,Rect)
  fullName: System.Windows.Rect.Intersect(Rect,Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna a interseção dos retângulos especificados."
  remarks: "O exemplo a seguir mostra como usar o método de interseção para encontrar a interseção de dois retângulos.       [!code-cs[RectExamples_snip #IntersectExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectexample2_csharp)]"
  syntax:
    content: public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "O primeiro retângulo para comparar."
    - id: rect2
      type: System.Windows.Rect
      description: "O segundo retângulo para comparar."
    return:
      type: System.Windows.Rect
      description: "A interseção de dois retângulos, ou &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; não se existir nenhuma interseção."
  overload: System.Windows.Rect.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.IntersectsWith(System.Windows.Rect)
  id: IntersectsWith(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: System.Windows.Rect.IntersectsWith(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Indica se o retângulo especificado faz interseção com o retângulo atual."
  remarks: ''
  example:
  - "The following example shows how to use the IntersectsWith method to determine if two rectangles intersect.  \n  \n [!code-cs[RectExamples_snip#IntersectsWithExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#intersectswithexample_csharp)]"
  syntax:
    content: public bool IntersectsWith (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O retângulo para verificar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o retângulo especificado faz interseção com o retângulo atual; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.IntersectsWith*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.IsEmpty
  id: IsEmpty
  parent: System.Windows.Rect
  langs:
  - csharp
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: System.Windows.Rect.IsEmpty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém um valor que indica se o retângulo é o <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  remarks: "Não use essa propriedade para testar a área de zero. um retângulo com área de zero não é necessariamente o <xref:System.Windows.Rect.Empty%2A>retângulo.</xref:System.Windows.Rect.Empty%2A> Para obter mais informações, consulte o <xref:System.Windows.Rect.Empty%2A>propriedade.</xref:System.Windows.Rect.Empty%2A>"
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o retângulo é o <xref:System.Windows.Rect.Empty*>retângulo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Rect.Empty*>"
  overload: System.Windows.Rect.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Left
  id: Left
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Left
  nameWithType: Rect.Left
  fullName: System.Windows.Rect.Left
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém o valor do eixo x do lado esquerdo do retângulo."
  remarks: "Essa propriedade é equivalente à obtenção de <xref:System.Windows.Rect.X%2A>propriedade.</xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Left { get; }
    return:
      type: System.Double
      description: "O valor do eixo x do lado esquerdo do retângulo."
  overload: System.Windows.Rect.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Location
  id: Location
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Location
  nameWithType: Rect.Location
  fullName: System.Windows.Rect.Location
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define a posição do canto superior esquerdo do retângulo."
  remarks: "A posição do canto superior esquerdo do retângulo é igual a (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point Location { get; set; }
    return:
      type: System.Windows.Point
      description: "A posição do canto superior esquerdo do retângulo. O padrão é (0, 0)."
  overload: System.Windows.Rect.Location*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Local é definido em um <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Windows.Vector)
  id: Offset(System.Windows.Vector)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Vector)
  nameWithType: Rect.Offset(Vector)
  fullName: System.Windows.Rect.Offset(Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Move o retângulo com o vetor especificado."
  remarks: "Chamar este método em um retângulo vazio (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) não é permitido.</xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>       Observe que chamar o método de deslocamento somente terá efeito se você pode alterar o <xref:System.Windows.Rect.X%2A>e <xref:System.Windows.Rect.Y%2A>propriedades diretamente.</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A> Porque <xref:System.Windows.Rect>é um tipo de valor, se você referenciar um <xref:System.Windows.Rect>objeto usando uma propriedade ou indexador, você obtém uma cópia do objeto, não uma referência ao objeto.</xref:System.Windows.Rect> </xref:System.Windows.Rect> Se você tentar alterar <xref:System.Windows.Rect.X%2A>ou <xref:System.Windows.Rect.Y%2A>em uma referência de propriedade ou indexador, ocorre um erro do compilador.</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A> Da mesma forma, a chamada de deslocamento na propriedade ou indexador não alterará o objeto subjacente.  Se você quiser alterar o valor de um <xref:System.Windows.Rect>que é referenciada como uma propriedade ou indexador, crie um novo <xref:System.Windows.Rect>, modificar seus campos e, em seguida, atribua o <xref:System.Windows.Rect>para a propriedade ou indexador.</xref:System.Windows.Rect> </xref:System.Windows.Rect> </xref:System.Windows.Rect>"
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample1_csharp)]"
  syntax:
    content: public void Offset (System.Windows.Vector offsetVector);
    parameters:
    - id: offsetVector
      type: System.Windows.Vector
      description: "Um vetor que especifica os valores horizontais e verticais para mover o retângulo."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Esse método é chamado no &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; retângulo."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Double,System.Double)
  id: Offset(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Double,Double)
  nameWithType: Rect.Offset(Double,Double)
  fullName: System.Windows.Rect.Offset(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Move o retângulo especificado nas quantidades horizontal e vertical."
  remarks: "Chamar este método em um retângulo vazio (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) não é permitido.</xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>       Observe que chamar o método de deslocamento somente terá efeito se você pode alterar o <xref:System.Windows.Rect.X%2A>e <xref:System.Windows.Rect.Y%2A>propriedades diretamente.</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A> Porque <xref:System.Windows.Rect>é um tipo de valor, se você referenciar um <xref:System.Windows.Rect>objeto usando uma propriedade ou indexador, você obtém uma cópia do objeto, não uma referência ao objeto.</xref:System.Windows.Rect> </xref:System.Windows.Rect> Se você tentar alterar <xref:System.Windows.Rect.X%2A>ou <xref:System.Windows.Rect.Y%2A>em uma referência de propriedade ou indexador, ocorre um erro do compilador.</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A> Da mesma forma, a chamada de deslocamento na propriedade ou indexador não alterará o objeto subjacente.  Se você quiser alterar o valor de um <xref:System.Windows.Rect>que é referenciada como uma propriedade ou indexador, crie um novo <xref:System.Windows.Rect>, modificar seus campos e, em seguida, atribua o <xref:System.Windows.Rect>para a propriedade ou indexador.</xref:System.Windows.Rect> </xref:System.Windows.Rect> </xref:System.Windows.Rect>"
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample2_csharp)]"
  syntax:
    content: public void Offset (double offsetX, double offsetY);
    parameters:
    - id: offsetX
      type: System.Double
      description: "O valor para mover o retângulo horizontalmente."
    - id: offsetY
      type: System.Double
      description: "O valor para mover o retângulo verticalmente."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Esse método é chamado no &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; retângulo."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)
  id: Offset(System.Windows.Rect,System.Windows.Vector)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Rect,Vector)
  nameWithType: Rect.Offset(Rect,Vector)
  fullName: System.Windows.Rect.Offset(Rect,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna um retângulo que é deslocado do retângulo especificado usando o vetor especificado."
  remarks: "Chamar esse método com um retângulo vazio (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) não é permitido.</xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>"
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample3_csharp)]"
  syntax:
    content: public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O retângulo original."
    - id: offsetVector
      type: System.Windows.Vector
      description: "Um vetor que especifica os deslocamentos horizontais e verticais para o retângulo de novo."
    return:
      type: System.Windows.Rect
      description: "O retângulo resultante."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code>é &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)
  id: Offset(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Offset(Rect,Double,Double)
  nameWithType: Rect.Offset(Rect,Double,Double)
  fullName: System.Windows.Rect.Offset(Rect,Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna um retângulo que é deslocado do retângulo especificado usando os valores especificados horizontais e verticais."
  remarks: "Chamar esse método com um retângulo vazio (<xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>) não é permitido.</xref:System.Windows.Rect.Empty%2A?displayProperty=fullName>"
  example:
  - "The following example shows how to use the Offset method to change the position of a rectangle.  \n  \n [!code-cs[RectExamples_snip#OffsetExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#offsetexample4_csharp)]"
  syntax:
    content: public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "Mover o retângulo."
    - id: offsetX
      type: System.Double
      description: "O deslocamento horizontal para o retângulo de novo."
    - id: offsetY
      type: System.Double
      description: "O deslocamento vertical para o novo retângulo."
    return:
      type: System.Windows.Rect
      description: "O retângulo resultante."
  overload: System.Windows.Rect.Offset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>rect</code>é &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)
  id: op_Equality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: op_Equality(Rect,Rect)
  nameWithType: Rect.op_Equality(Rect,Rect)
  fullName: System.Windows.Rect.op_Equality(Rect,Rect)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compara dois retângulos para igualdade exata."
  remarks: "Esta operação testa a igualdade de objetos.       Nessa comparação, duas instâncias de <xref:System.Double.NaN?displayProperty=fullName>são considerados iguais.</xref:System.Double.NaN?displayProperty=fullName>      > [!NOTE] > A posição do retângulo e as dimensões são descritas por <xref:System.Double>valores.</xref:System.Double> Porque <xref:System.Double>valores podem perder precisão quando for operado, uma comparação entre dois valores são iguais logicamente poderá falhar.</xref:System.Double>"
  example:
  - "The following example shows how to use the Equality operator to determine if two rectangles are exactly equal.  \n  \n [!code-cs[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedequalityoperatorexample)]\n [!code-vb[RectExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedequalityoperatorexample)]"
  syntax:
    content: public static bool op_Equality (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "O primeiro retângulo para comparar."
    - id: rect2
      type: System.Windows.Rect
      description: "O segundo retângulo para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os retângulos tiverem o mesmo <> </> *> e <> </> *> valores; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)
  id: op_Inequality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: op_Inequality(Rect,Rect)
  nameWithType: Rect.op_Inequality(Rect,Rect)
  fullName: System.Windows.Rect.op_Inequality(Rect,Rect)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Compara dois retângulos desigualdade."
  remarks: "Esta operação testa a desigualdade de objeto.       Nessa comparação, duas instâncias de <xref:System.Double.NaN?displayProperty=fullName>são considerados iguais.</xref:System.Double.NaN?displayProperty=fullName>      > [!NOTE] > A posição do retângulo e as dimensões são descritas por <xref:System.Double>valores.</xref:System.Double> Porque <xref:System.Double>valores podem perder precisão quando for operado, uma comparação entre dois valores são iguais logicamente poderá falhar.</xref:System.Double>"
  example:
  - "The following example shows how to use the Inequality operator to determine if two rectangles are not exactly equal.  \n  \n [!code-cs[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#overloadedinequalityoperatorexample)]\n [!code-vb[RectExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#overloadedinequalityoperatorexample)]"
  syntax:
    content: public static bool op_Inequality (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "O primeiro retângulo para comparar."
    - id: rect2
      type: System.Windows.Rect
      description: "O segundo retângulo para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os retângulos não tiverem o mesmo <> </> *> e <> </> *> valores; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Rect.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Rect.Parse(String)
  fullName: System.Windows.Rect.Parse(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cria um novo retângulo da representação da cadeia de caracteres especificada."
  remarks: ''
  example:
  - "The following example shows how to use the Parse method to convert a string representation of a rectangle into a <xref:System.Windows.Rect> structure.  \n  \n [!code-cs[RectExamples_snip#ParseExample](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#parseexample)]\n [!code-vb[RectExamples_snip#ParseExample](~/add/codesnippet/visualbasic/rectexamples_snip/rectexample.vb#parseexample)]"
  syntax:
    content: public static System.Windows.Rect Parse (string source);
    parameters:
    - id: source
      type: System.String
      description: "A representação de cadeia de caracteres do retângulo, no formato &quot;x, y, largura, altura&quot;."
    return:
      type: System.Windows.Rect
      description: "O retângulo resultante."
  overload: System.Windows.Rect.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Right
  id: Right
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Right
  nameWithType: Rect.Right
  fullName: System.Windows.Rect.Right
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém o valor do eixo x do lado direito do retângulo."
  remarks: "O valor do eixo x do lado direito do retângulo é igual à soma da <xref:System.Windows.Rect.X%2A>e <xref:System.Windows.Rect.Width%2A>Propriedades.</xref:System.Windows.Rect.Width%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Right { get; }
    return:
      type: System.Double
      description: "O valor do eixo x do lado direito do retângulo."
  overload: System.Windows.Rect.Right*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Scale(System.Double,System.Double)
  id: Scale(System.Double,System.Double)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Scale(Double,Double)
  nameWithType: Rect.Scale(Double,Double)
  fullName: System.Windows.Rect.Scale(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Multiplica o tamanho do retângulo atual por especificado x e y valores."
  remarks: ''
  example:
  - "The following example shows how to use the Scale method to multiply the width and height of a rectangle by the specified amount.  \n  \n [!code-cs[RectExamples_snip#ScaleExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#scaleexample_csharp)]"
  syntax:
    content: public void Scale (double scaleX, double scaleY);
    parameters:
    - id: scaleX
      type: System.Double
      description: "O fator de escala na direção x."
    - id: scaleY
      type: System.Double
      description: "O fator de escala na direção y."
  overload: System.Windows.Rect.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Size
  id: Size
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Size
  nameWithType: Rect.Size
  fullName: System.Windows.Rect.Size
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define a largura e altura do retângulo."
  remarks: ''
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Size Size { get; set; }
    return:
      type: System.Windows.Size
      description: "Um <xref href=&quot;System.Windows.Size&quot;> </xref> estrutura que especifica a largura e altura do retângulo."
  overload: System.Windows.Rect.Size*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tamanho é definido em um <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  platform:
  - net462
- uid: System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Rect
  langs:
  - csharp
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Rect.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Rect.System.IFormattable.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Formata o valor da instância atual usando o formato especificado."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Windows.Rect>instância é convertida em um <xref:System.IFormattable>interface.</xref:System.IFormattable> </xref:System.Windows.Rect>"
  syntax:
    content: string IFormattable.ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: "O formato a ser usado.       - ou - uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) para usar o formato padrão definido para o tipo do <xref:System.IFormattable>implementação.</xref:System.IFormattable>"
    - id: provider
      type: System.IFormatProvider
      description: "O provedor a ser usado para formatar o valor.       - ou - uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) para obter as informações de formato numérico da configuração de localidade atual do sistema operacional."
    return:
      type: System.String
      description: "Uma representação de cadeia de caracteres do retângulo."
  overload: System.Windows.Rect.System#IFormattable#ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Top
  id: Top
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Top
  nameWithType: Rect.Top
  fullName: System.Windows.Rect.Top
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém a posição do eixo y da parte superior do retângulo."
  remarks: "Essa propriedade é equivalente à obtenção de <xref:System.Windows.Rect.Y%2A>propriedade.</xref:System.Windows.Rect.Y%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Top { get; }
    return:
      type: System.Double
      description: "A posição do eixo y da parte superior do retângulo."
  overload: System.Windows.Rect.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.TopLeft
  id: TopLeft
  parent: System.Windows.Rect
  langs:
  - csharp
  name: TopLeft
  nameWithType: Rect.TopLeft
  fullName: System.Windows.Rect.TopLeft
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém a posição do canto superior esquerdo do retângulo."
  remarks: "A posição do canto superior esquerdo do retângulo é igual a (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point TopLeft { get; }
    return:
      type: System.Windows.Point
      description: "A posição do canto superior esquerdo do retângulo."
  overload: System.Windows.Rect.TopLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.TopRight
  id: TopRight
  parent: System.Windows.Rect
  langs:
  - csharp
  name: TopRight
  nameWithType: Rect.TopRight
  fullName: System.Windows.Rect.TopRight
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém a posição do canto superior direito do retângulo."
  remarks: "A posição do canto superior direito do retângulo é igual a (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>).</xref:System.Windows.Rect.Y%2A> </xref:System.Windows.Rect.Width%2A> </xref:System.Windows.Rect.X%2A>"
  example:
  - "The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public System.Windows.Point TopRight { get; }
    return:
      type: System.Windows.Point
      description: "A posição do canto superior direito do retângulo."
  overload: System.Windows.Rect.TopRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.ToString
  id: ToString
  parent: System.Windows.Rect
  langs:
  - csharp
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: System.Windows.Rect.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna uma representação de cadeia de caracteres do retângulo."
  remarks: ''
  example:
  - "The following example shows how to use the ToString method to get a string representation of a <xref:System.Windows.Rect> structure.  \n  \n [!code-cs[RectExamples_snip#ToStringExample_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#tostringexample_csharp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: 'Uma representação de cadeia de caracteres do retângulo atual. The string has the following form: &quot;<>*>,<>*>,<>*>,<>*>&quot;.'
  overload: System.Windows.Rect.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Rect.ToString(IFormatProvider)
  fullName: System.Windows.Rect.ToString(IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna uma representação de cadeia de caracteres do retângulo, usando o provedor de formato especificado."
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "Informações de formatação de cultura específica."
    return:
      type: System.String
      description: "Uma representação de cadeia de caracteres do retângulo atual que é determinado pelo provedor de formato especificado."
  overload: System.Windows.Rect.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Transform(System.Windows.Media.Matrix)
  id: Transform(System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Transform(Matrix)
  nameWithType: Rect.Transform(Matrix)
  fullName: System.Windows.Rect.Transform(Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Transforma o retângulo aplicando a matriz especificada."
  remarks: ''
  example:
  - "The following example shows how to use the Transform method to transform a <xref:System.Windows.Rect> structure by using a <xref:System.Windows.Media.Matrix>.  \n  \n [!code-cs[RectExamples_snip#TransformExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample1_csharp)]"
  syntax:
    content: public void Transform (System.Windows.Media.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "Uma matriz que especifica a transformação a ser aplicada."
  overload: System.Windows.Rect.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  id: Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Transform(Rect,Matrix)
  nameWithType: Rect.Transform(Rect,Matrix)
  fullName: System.Windows.Rect.Transform(Rect,Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retorna o retângulo que resulta da aplicação da matriz especificada para o retângulo especificado."
  remarks: ''
  example:
  - "The following example shows how to use the Transform method to create a new <xref:System.Windows.Rect> structure that results from applying a <xref:System.Windows.Media.Matrix> to an existing rectangle.  \n  \n [!code-cs[RectExamples_snip#TransformExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#transformexample2_csharp)]"
  syntax:
    content: public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "Um retângulo que é a base para a transformação."
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "Uma matriz que especifica a transformação a ser aplicada."
    return:
      type: System.Windows.Rect
      description: "O retângulo que é o resultado da operação."
  overload: System.Windows.Rect.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Point)
  id: Union(System.Windows.Point)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Point)
  nameWithType: Rect.Union(Point)
  fullName: System.Windows.Rect.Union(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expande o retângulo atual exatamente o suficiente para conter o ponto especificado."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to expand the current rectangle exactly enough to contain a given <xref:System.Windows.Point>.  \n  \n [!code-cs[RectExamples_snip#UnionExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample1_csharp)]"
  syntax:
    content: public void Union (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "O ponto de serem incluídos."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Rect)
  id: Union(System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Rect)
  nameWithType: Rect.Union(Rect)
  fullName: System.Windows.Rect.Union(Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Expande o retângulo atual exatamente o suficiente para conter o retângulo especificado."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to expand the current rectangle exactly enough to contain the specified rectangle.  \n  \n [!code-cs[RectExamples_snip#UnionExample2_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample2_csharp)]"
  syntax:
    content: public void Union (System.Windows.Rect rect);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O retângulo para incluir."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)
  id: Union(System.Windows.Rect,System.Windows.Point)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Rect,Point)
  nameWithType: Rect.Union(Rect,Point)
  fullName: System.Windows.Rect.Union(Rect,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cria um retângulo que é exatamente grande o suficiente para incluir o retângulo especificado e o ponto especificado."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain a given rectangle and a given <xref:System.Windows.Point>.  \n  \n [!code-cs[RectExamples_snip#UnionExample3_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample3_csharp)]"
  syntax:
    content: public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);
    parameters:
    - id: rect
      type: System.Windows.Rect
      description: "O retângulo para incluir."
    - id: point
      type: System.Windows.Point
      description: "O ponto de serem incluídos."
    return:
      type: System.Windows.Rect
      description: "Um retângulo que é exatamente grande o suficiente para conter o retângulo especificado e o ponto especificado."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)
  id: Union(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Union(Rect,Rect)
  nameWithType: Rect.Union(Rect,Rect)
  fullName: System.Windows.Rect.Union(Rect,Rect)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cria um retângulo que é exatamente grande o suficiente para conter os dois retângulos especificados."
  remarks: ''
  example:
  - "The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain two given rectangles.  \n  \n [!code-cs[RectExamples_snip#UnionExample4_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#unionexample4_csharp)]"
  syntax:
    content: public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);
    parameters:
    - id: rect1
      type: System.Windows.Rect
      description: "O primeiro retângulo para incluir."
    - id: rect2
      type: System.Windows.Rect
      description: "O segundo retângulo para incluir."
    return:
      type: System.Windows.Rect
      description: "O retângulo resultante."
  overload: System.Windows.Rect.Union*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Rect.Width
  id: Width
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Width
  nameWithType: Rect.Width
  fullName: System.Windows.Rect.Width
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define a largura do retângulo."
  remarks: "O <xref:System.Windows.Rect.Empty%2A>retângulo tem uma largura de <xref:System.Double.NegativeInfinity>.</xref:System.Double.NegativeInfinity> </xref:System.Windows.Rect.Empty%2A> O <xref:System.Windows.Rect.Empty%2A>retângulo é somente leitura; sua largura não não pode ser alterada.</xref:System.Windows.Rect.Empty%2A>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Width { get; set; }
    return:
      type: System.Double
      description: "Um número positivo que represente a largura do retângulo. O padrão é 0."
  overload: System.Windows.Rect.Width*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Largura é definida como um valor negativo."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Largura é definida em um <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  platform:
  - net462
- uid: System.Windows.Rect.X
  id: X
  parent: System.Windows.Rect
  langs:
  - csharp
  name: X
  nameWithType: Rect.X
  fullName: System.Windows.Rect.X
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define o valor do eixo x do lado esquerdo do retângulo."
  remarks: "Essa propriedade é equivalente à obtenção de <xref:System.Windows.Rect.Left%2A>propriedade.</xref:System.Windows.Rect.Left%2A>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double X { get; set; }
    return:
      type: System.Double
      description: "O valor do eixo x do lado esquerdo do retângulo."
  overload: System.Windows.Rect.X*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "X é definido em um <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  platform:
  - net462
- uid: System.Windows.Rect.Y
  id: Y
  parent: System.Windows.Rect
  langs:
  - csharp
  name: Y
  nameWithType: Rect.Y
  fullName: System.Windows.Rect.Y
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define o valor do eixo y do canto superior do retângulo."
  remarks: "Essa propriedade é equivalente à obtenção de <xref:System.Windows.Rect.Top%2A>propriedade.</xref:System.Windows.Rect.Top%2A>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.  \n  \n [!code-cs[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/csharp/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.cs#rectexamplewholepage)]\n [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/visualbasic/geometriesmiscsnippets/rectexample.vb#rectexamplewholepage)]\n [!code-xml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/add/codesnippet/xaml/GeometriesMiscSnippets_snip.GeometriesMiscSnippets/RectExample.xaml#rectexamplewholepage)]  \n  \n The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.  \n  \n [!code-cs[RectExamples_snip#CreateRectExample1_csharp](~/add/codesnippet/csharp/RectExamples_snip/RectExample.cs#createrectexample1_csharp)]"
  syntax:
    content: public double Y { get; set; }
    return:
      type: System.Double
      description: "O valor do eixo y do canto superior do retângulo."
  overload: System.Windows.Rect.Y*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Y é definida em um <xref:System.Windows.Rect.Empty*>retângulo.</xref:System.Windows.Rect.Empty*>"
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Rect.#ctor(System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Size)
  nameWithType: Rect.Rect(Size)
  fullName: System.Windows.Rect.Rect(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Point,Point)
  nameWithType: Rect.Rect(Point,Point)
  fullName: System.Windows.Rect.Rect(Point,Point)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Point,Size)
  nameWithType: Rect.Rect(Point,Size)
  fullName: System.Windows.Rect.Rect(Point,Size)
- uid: System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Point,Vector)
  nameWithType: Rect.Rect(Point,Vector)
  fullName: System.Windows.Rect.Rect(Point,Vector)
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Rect(Double,Double,Double,Double)
  nameWithType: Rect.Rect(Double,Double,Double,Double)
  fullName: System.Windows.Rect.Rect(Double,Double,Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Rect.Bottom
  parent: System.Windows.Rect
  isExternal: false
  name: Bottom
  nameWithType: Rect.Bottom
  fullName: System.Windows.Rect.Bottom
- uid: System.Windows.Rect.BottomLeft
  parent: System.Windows.Rect
  isExternal: false
  name: BottomLeft
  nameWithType: Rect.BottomLeft
  fullName: System.Windows.Rect.BottomLeft
- uid: System.Windows.Rect.BottomRight
  parent: System.Windows.Rect
  isExternal: false
  name: BottomRight
  nameWithType: Rect.BottomRight
  fullName: System.Windows.Rect.BottomRight
- uid: System.Windows.Rect.Contains(System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Contains(Point)
  nameWithType: Rect.Contains(Point)
  fullName: System.Windows.Rect.Contains(Point)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Rect.Contains(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Contains(Rect)
  nameWithType: Rect.Contains(Rect)
  fullName: System.Windows.Rect.Contains(Rect)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Rect.Contains(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Contains(Double,Double)
  nameWithType: Rect.Contains(Double,Double)
  fullName: System.Windows.Rect.Contains(Double,Double)
- uid: System.Windows.Rect.Empty
  parent: System.Windows.Rect
  isExternal: false
  name: Empty
  nameWithType: Rect.Empty
  fullName: System.Windows.Rect.Empty
- uid: System.Windows.Rect.Equals(System.Object)
  parent: System.Windows.Rect
  isExternal: false
  name: Equals(Object)
  nameWithType: Rect.Equals(Object)
  fullName: System.Windows.Rect.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Rect.Equals(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Equals(Rect)
  nameWithType: Rect.Equals(Rect)
  fullName: System.Windows.Rect.Equals(Rect)
- uid: System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Equals(Rect,Rect)
  nameWithType: Rect.Equals(Rect,Rect)
  fullName: System.Windows.Rect.Equals(Rect,Rect)
- uid: System.Windows.Rect.GetHashCode
  parent: System.Windows.Rect
  isExternal: false
  name: GetHashCode()
  nameWithType: Rect.GetHashCode()
  fullName: System.Windows.Rect.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Rect.Height
  parent: System.Windows.Rect
  isExternal: false
  name: Height
  nameWithType: Rect.Height
  fullName: System.Windows.Rect.Height
- uid: System.Windows.Rect.Inflate(System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Size)
  nameWithType: Rect.Inflate(Size)
  fullName: System.Windows.Rect.Inflate(Size)
- uid: System.Windows.Rect.Inflate(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Double,Double)
  nameWithType: Rect.Inflate(Double,Double)
  fullName: System.Windows.Rect.Inflate(Double,Double)
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Rect,Size)
  nameWithType: Rect.Inflate(Rect,Size)
  fullName: System.Windows.Rect.Inflate(Rect,Size)
- uid: System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate(Rect,Double,Double)
  nameWithType: Rect.Inflate(Rect,Double,Double)
  fullName: System.Windows.Rect.Inflate(Rect,Double,Double)
- uid: System.Windows.Rect.Intersect(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Intersect(Rect)
  nameWithType: Rect.Intersect(Rect)
  fullName: System.Windows.Rect.Intersect(Rect)
- uid: System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Intersect(Rect,Rect)
  nameWithType: Rect.Intersect(Rect,Rect)
  fullName: System.Windows.Rect.Intersect(Rect,Rect)
- uid: System.Windows.Rect.IntersectsWith(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: IntersectsWith(Rect)
  nameWithType: Rect.IntersectsWith(Rect)
  fullName: System.Windows.Rect.IntersectsWith(Rect)
- uid: System.Windows.Rect.IsEmpty
  parent: System.Windows.Rect
  isExternal: false
  name: IsEmpty
  nameWithType: Rect.IsEmpty
  fullName: System.Windows.Rect.IsEmpty
- uid: System.Windows.Rect.Left
  parent: System.Windows.Rect
  isExternal: false
  name: Left
  nameWithType: Rect.Left
  fullName: System.Windows.Rect.Left
- uid: System.Windows.Rect.Location
  parent: System.Windows.Rect
  isExternal: false
  name: Location
  nameWithType: Rect.Location
  fullName: System.Windows.Rect.Location
- uid: System.Windows.Rect.Offset(System.Windows.Vector)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Vector)
  nameWithType: Rect.Offset(Vector)
  fullName: System.Windows.Rect.Offset(Vector)
- uid: System.Windows.Rect.Offset(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Double,Double)
  nameWithType: Rect.Offset(Double,Double)
  fullName: System.Windows.Rect.Offset(Double,Double)
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Rect,Vector)
  nameWithType: Rect.Offset(Rect,Vector)
  fullName: System.Windows.Rect.Offset(Rect,Vector)
- uid: System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Offset(Rect,Double,Double)
  nameWithType: Rect.Offset(Rect,Double,Double)
  fullName: System.Windows.Rect.Offset(Rect,Double,Double)
- uid: System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: op_Equality(Rect,Rect)
  nameWithType: Rect.op_Equality(Rect,Rect)
  fullName: System.Windows.Rect.op_Equality(Rect,Rect)
- uid: System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: op_Inequality(Rect,Rect)
  nameWithType: Rect.op_Inequality(Rect,Rect)
  fullName: System.Windows.Rect.op_Inequality(Rect,Rect)
- uid: System.Windows.Rect.Parse(System.String)
  parent: System.Windows.Rect
  isExternal: false
  name: Parse(String)
  nameWithType: Rect.Parse(String)
  fullName: System.Windows.Rect.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Rect.Right
  parent: System.Windows.Rect
  isExternal: false
  name: Right
  nameWithType: Rect.Right
  fullName: System.Windows.Rect.Right
- uid: System.Windows.Rect.Scale(System.Double,System.Double)
  parent: System.Windows.Rect
  isExternal: false
  name: Scale(Double,Double)
  nameWithType: Rect.Scale(Double,Double)
  fullName: System.Windows.Rect.Scale(Double,Double)
- uid: System.Windows.Rect.Size
  parent: System.Windows.Rect
  isExternal: false
  name: Size
  nameWithType: Rect.Size
  fullName: System.Windows.Rect.Size
- uid: System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)
  parent: System.Windows.Rect
  isExternal: false
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Rect.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Rect.System.IFormattable.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Rect.Top
  parent: System.Windows.Rect
  isExternal: false
  name: Top
  nameWithType: Rect.Top
  fullName: System.Windows.Rect.Top
- uid: System.Windows.Rect.TopLeft
  parent: System.Windows.Rect
  isExternal: false
  name: TopLeft
  nameWithType: Rect.TopLeft
  fullName: System.Windows.Rect.TopLeft
- uid: System.Windows.Rect.TopRight
  parent: System.Windows.Rect
  isExternal: false
  name: TopRight
  nameWithType: Rect.TopRight
  fullName: System.Windows.Rect.TopRight
- uid: System.Windows.Rect.ToString
  parent: System.Windows.Rect
  isExternal: false
  name: ToString()
  nameWithType: Rect.ToString()
  fullName: System.Windows.Rect.ToString()
- uid: System.Windows.Rect.ToString(System.IFormatProvider)
  parent: System.Windows.Rect
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Rect.ToString(IFormatProvider)
  fullName: System.Windows.Rect.ToString(IFormatProvider)
- uid: System.Windows.Rect.Transform(System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  isExternal: false
  name: Transform(Matrix)
  nameWithType: Rect.Transform(Matrix)
  fullName: System.Windows.Rect.Transform(Matrix)
- uid: System.Windows.Media.Matrix
  parent: System.Windows.Media
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)
  parent: System.Windows.Rect
  isExternal: false
  name: Transform(Rect,Matrix)
  nameWithType: Rect.Transform(Rect,Matrix)
  fullName: System.Windows.Rect.Transform(Rect,Matrix)
- uid: System.Windows.Rect.Union(System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Point)
  nameWithType: Rect.Union(Point)
  fullName: System.Windows.Rect.Union(Point)
- uid: System.Windows.Rect.Union(System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Rect)
  nameWithType: Rect.Union(Rect)
  fullName: System.Windows.Rect.Union(Rect)
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Rect,Point)
  nameWithType: Rect.Union(Rect,Point)
  fullName: System.Windows.Rect.Union(Rect,Point)
- uid: System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)
  parent: System.Windows.Rect
  isExternal: false
  name: Union(Rect,Rect)
  nameWithType: Rect.Union(Rect,Rect)
  fullName: System.Windows.Rect.Union(Rect,Rect)
- uid: System.Windows.Rect.Width
  parent: System.Windows.Rect
  isExternal: false
  name: Width
  nameWithType: Rect.Width
  fullName: System.Windows.Rect.Width
- uid: System.Windows.Rect.X
  parent: System.Windows.Rect
  isExternal: false
  name: X
  nameWithType: Rect.X
  fullName: System.Windows.Rect.X
- uid: System.Windows.Rect.Y
  parent: System.Windows.Rect
  isExternal: false
  name: Y
  nameWithType: Rect.Y
  fullName: System.Windows.Rect.Y
- uid: System.Windows.Rect.#ctor*
  parent: System.Windows.Rect
  isExternal: false
  name: Rect
  nameWithType: Rect.Rect
- uid: System.Windows.Rect.Bottom*
  parent: System.Windows.Rect
  isExternal: false
  name: Bottom
  nameWithType: Rect.Bottom
- uid: System.Windows.Rect.BottomLeft*
  parent: System.Windows.Rect
  isExternal: false
  name: BottomLeft
  nameWithType: Rect.BottomLeft
- uid: System.Windows.Rect.BottomRight*
  parent: System.Windows.Rect
  isExternal: false
  name: BottomRight
  nameWithType: Rect.BottomRight
- uid: System.Windows.Rect.Contains*
  parent: System.Windows.Rect
  isExternal: false
  name: Contains
  nameWithType: Rect.Contains
- uid: System.Windows.Rect.Empty*
  parent: System.Windows.Rect
  isExternal: false
  name: Empty
  nameWithType: Rect.Empty
- uid: System.Windows.Rect.Equals*
  parent: System.Windows.Rect
  isExternal: false
  name: Equals
  nameWithType: Rect.Equals
- uid: System.Windows.Rect.GetHashCode*
  parent: System.Windows.Rect
  isExternal: false
  name: GetHashCode
  nameWithType: Rect.GetHashCode
- uid: System.Windows.Rect.Height*
  parent: System.Windows.Rect
  isExternal: false
  name: Height
  nameWithType: Rect.Height
- uid: System.Windows.Rect.Inflate*
  parent: System.Windows.Rect
  isExternal: false
  name: Inflate
  nameWithType: Rect.Inflate
- uid: System.Windows.Rect.Intersect*
  parent: System.Windows.Rect
  isExternal: false
  name: Intersect
  nameWithType: Rect.Intersect
- uid: System.Windows.Rect.IntersectsWith*
  parent: System.Windows.Rect
  isExternal: false
  name: IntersectsWith
  nameWithType: Rect.IntersectsWith
- uid: System.Windows.Rect.IsEmpty*
  parent: System.Windows.Rect
  isExternal: false
  name: IsEmpty
  nameWithType: Rect.IsEmpty
- uid: System.Windows.Rect.Left*
  parent: System.Windows.Rect
  isExternal: false
  name: Left
  nameWithType: Rect.Left
- uid: System.Windows.Rect.Location*
  parent: System.Windows.Rect
  isExternal: false
  name: Location
  nameWithType: Rect.Location
- uid: System.Windows.Rect.Offset*
  parent: System.Windows.Rect
  isExternal: false
  name: Offset
  nameWithType: Rect.Offset
- uid: System.Windows.Rect.op_Equality*
  parent: System.Windows.Rect
  isExternal: false
  name: op_Equality
  nameWithType: Rect.op_Equality
- uid: System.Windows.Rect.op_Inequality*
  parent: System.Windows.Rect
  isExternal: false
  name: op_Inequality
  nameWithType: Rect.op_Inequality
- uid: System.Windows.Rect.Parse*
  parent: System.Windows.Rect
  isExternal: false
  name: Parse
  nameWithType: Rect.Parse
- uid: System.Windows.Rect.Right*
  parent: System.Windows.Rect
  isExternal: false
  name: Right
  nameWithType: Rect.Right
- uid: System.Windows.Rect.Scale*
  parent: System.Windows.Rect
  isExternal: false
  name: Scale
  nameWithType: Rect.Scale
- uid: System.Windows.Rect.Size*
  parent: System.Windows.Rect
  isExternal: false
  name: Size
  nameWithType: Rect.Size
- uid: System.Windows.Rect.System#IFormattable#ToString*
  parent: System.Windows.Rect
  isExternal: false
  name: System.IFormattable.ToString
  nameWithType: Rect.System.IFormattable.ToString
- uid: System.Windows.Rect.Top*
  parent: System.Windows.Rect
  isExternal: false
  name: Top
  nameWithType: Rect.Top
- uid: System.Windows.Rect.TopLeft*
  parent: System.Windows.Rect
  isExternal: false
  name: TopLeft
  nameWithType: Rect.TopLeft
- uid: System.Windows.Rect.TopRight*
  parent: System.Windows.Rect
  isExternal: false
  name: TopRight
  nameWithType: Rect.TopRight
- uid: System.Windows.Rect.ToString*
  parent: System.Windows.Rect
  isExternal: false
  name: ToString
  nameWithType: Rect.ToString
- uid: System.Windows.Rect.Transform*
  parent: System.Windows.Rect
  isExternal: false
  name: Transform
  nameWithType: Rect.Transform
- uid: System.Windows.Rect.Union*
  parent: System.Windows.Rect
  isExternal: false
  name: Union
  nameWithType: Rect.Union
- uid: System.Windows.Rect.Width*
  parent: System.Windows.Rect
  isExternal: false
  name: Width
  nameWithType: Rect.Width
- uid: System.Windows.Rect.X*
  parent: System.Windows.Rect
  isExternal: false
  name: X
  nameWithType: Rect.X
- uid: System.Windows.Rect.Y*
  parent: System.Windows.Rect
  isExternal: false
  name: Y
  nameWithType: Rect.Y
