### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: AceEnumerator
  nameWithType: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  summary: "Fornece a capacidade para iterar por meio de entradas de controle de acesso (ACEs) em uma lista de controle de acesso (ACL)."
  syntax:
    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o elemento atual o <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> coleção. Essa propriedade obtém a versão amigável para o tipo do objeto."
  syntax:
    content: public System.Security.AccessControl.GenericAce Current { get; }
    return:
      type: System.Security.AccessControl.GenericAce
      description: "O elemento atual o <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> coleção."
  overload: System.Security.AccessControl.AceEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Avança o enumerador para o próximo elemento do <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> coleção."
  remarks: "Após a criação de um enumerador ou depois de uma chamada para o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>método, um enumerador está posicionado antes do primeiro elemento da coleção e a primeira chamada para o método MoveNext move o enumerador o primeiro elemento da coleção.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       Após o final da coleção for passado, as chamadas subsequentes para MoveNext retornam `false` até <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>é chamado.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações, como adicionar, modificar ou excluir elementos, a coleção, o enumerador será invalidado irrecuperavelmente e a próxima chamada para MoveNext ou <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>lança um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o enumerador foi avançado com êxito para o próximo elemento; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o enumerador tiver passado o final da coleção."
  overload: System.Security.AccessControl.AceEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A coleção foi modificada depois que o enumerador foi criado."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Define o enumerador como sua posição inicial, que é antes do primeiro elemento de <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> coleção."
  remarks: "Um enumerador permanece válido desde que a coleção permaneça inalterada. Se, como adicionar, modificar ou excluir elementos, é feita na coleção, o enumerador será invalidado irrecuperavelmente e a próxima chamada para o <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>método ou o método de redefinição lança um <xref:System.InvalidOperationException></xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.AccessControl.AceEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A coleção foi modificada depois que o enumerador foi criado."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o elemento atual na coleção."
  remarks: "Após a criação de um enumerador ou depois de uma chamada para o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>método, você deve chamar o <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>método para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de IEnumerator; caso contrário, será indefinido IEnumerator.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       IEnumerator também gera uma exceção se a última chamada <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>retornado `false`, que indica o final da coleção.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       IEnumerator não move a posição do enumerador e chamadas consecutivas para IEnumerator retornam o mesmo objeto até que o <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>ou <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>é chamado.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações, como adicionar, modificar ou excluir elementos, a coleção, o enumerador será invalidado irrecuperavelmente e a próxima chamada ou <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>gera um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>e IEnumerator, IEnumerator retorna o elemento que está definido como, mesmo se o enumerador já é invalidado.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Retorna o elemento atual na coleção."
  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A coleção foi modificada depois que o enumerador foi criado."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.AccessControl.AceEnumerator.Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.AceEnumerator.Reset
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.MoveNext*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: AceEnumerator.MoveNext
- uid: System.Security.AccessControl.AceEnumerator.Reset*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset
  nameWithType: AceEnumerator.Reset
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
