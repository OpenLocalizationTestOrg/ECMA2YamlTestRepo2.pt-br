### YamlMime:ManagedReference
items:
- uid: System.Runtime.ConstrainedExecution.Cer
  id: Cer
  children:
  - System.Runtime.ConstrainedExecution.Cer.MayFail
  - System.Runtime.ConstrainedExecution.Cer.None
  - System.Runtime.ConstrainedExecution.Cer.Success
  langs:
  - csharp
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
  type: Enum
  summary: "Especifica o comportamento do método quando chamado em uma região de execução restrita."
  remarks: "A enumeração Cer Especifica o comportamento de um método, tipo ou assembly dentro de uma região de execução restrita (CER). Use um dos três valores disponíveis para indicar que a entidade terá êxito, não tem conhecimento de uma CER ou (de forma determinista) poderá relatar êxito ou falha.       CER fornece garantias de que a região de código será executado sem interrupção mesmo se ocorrer uma exceção assíncrona como um estouro de pilha ou a exceção de falta de memória thread anulado."
  example:
  - "The following code example demonstrates the use of the Cer enumeration when specifying a constrained execution region for a method. This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  \n  \n [!code-vb[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/visualbasic/t-system.runtime.constra_2_1.vb)]\n [!code-cs[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/csharp/t-system.runtime.constra_2_1.cs)]"
  syntax:
    content: public enum Cer
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  id: MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "No caso de condições excepcionais, o método pode falhar. Nesse caso, o método reportará de volta para o método de chamada se ela teve êxito ou falha. O método deve ter uma CER em torno do corpo do método para garantir que ela pode relatar o valor de retorno."
  syntax:
    content: MayFail
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.None
  id: None
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: 'O método, tipo ou assembly tem nenhum conceito de uma CER. Ele não se beneficia de garantias CER. Isso envolve o seguinte:'
  remarks: "-No caso de condições excepcionais, o método pode falhar.      -O método talvez ou pode não relatório que falhou (é não determinístico).      -O método não é gravado com CERs em mente (que é o cenário mais provável).       Se um método, tipo ou assembly não está marcado explicitamente para ter êxito, ele implicitamente está marcado como `Cer.None`."
  syntax:
    content: None
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  id: Success
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "No caso de condições excepcionais, o método terá êxito garantido. Você sempre deve construir uma CER em torno do método que é chamado, mesmo quando ele é chamado de dentro de uma região não CER. Um método é bem-sucedida se isso é feito o que está planejado. Por exemplo, marcar <xref:System.Collections.ArrayList.Count*>com `ReliabilityContractAttribute(Cer.Success)` significa que quando ele é executado em uma CER, ele sempre retorna uma contagem do número de elementos no <xref href=&quot;System.Collections.ArrayList&quot;> </xref> e ele nunca pode deixar os campos internos em um estado indeterminado.</xref:System.Collections.ArrayList.Count*>"
  syntax:
    content: Success
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
- uid: System.Runtime.ConstrainedExecution.Cer
  parent: System.Runtime.ConstrainedExecution
  isExternal: false
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
- uid: System.Runtime.ConstrainedExecution.Cer.None
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
