### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Permite que um implementador controlar a mensagem de falha retornada ao chamador e, opcionalmente, executar o processamento, como o log de erro personalizada."
  remarks: "Para controlar explicitamente o comportamento do aplicativo quando uma exceção é lançada, implementar a interface IErrorHandler e adicioná-lo para o <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>propriedade.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler permite controlar a falha SOAP gerada explicitamente, decida se deseja enviá-lo para o cliente e executar tarefas associadas, como o registro em log. Manipuladores de erro são chamados na ordem na qual eles foram adicionados para o <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>propriedade.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Implementar o <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>método para controlar a mensagem de falha é retornada ao cliente.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Implementar o <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>método para assegurar os comportamentos de erro relacionado, incluindo erros de registro em log, para garantir que uma falha rápida, desligar o aplicativo e assim por diante.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Porque o <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>método pode ser chamado de vários locais diferentes não há nenhuma garantia feita sobre qual thread o método é chamado em.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Não dependem de <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>método ser chamado no thread da operação.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementações são chamadas pela primeira vez, antes de enviar uma mensagem de resposta.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Quando todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementações ter sido chamadas e retornar e se `fault` é não -`null`, ela é enviada para o cliente de acordo com o contrato da operação.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Se `fault` é `null` depois que todas as implementações tem sido chamadas, a mensagem de resposta é controlada pelo <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>o valor da propriedade.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Exceções podem ocorrer depois que todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>são chamadas de implementações e uma mensagem de resposta é entregue ao canal.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Se ocorrer uma exceção de canal (por exemplo, dificuldade para serializar a mensagem) objetos IErrorHandler são notificados. Nesse caso, você ainda assegure-se de que seu ambiente de desenvolvimento captura e exibe essas exceções para você ou faz uso de rastreamento para descobrir o problema. Para obter mais informações sobre rastreamento, consulte [usando o rastreamento para solucionar problemas de seu aplicativo](~/add/includes/ajax-current-ext-md.md).       Depois que a mensagem de resposta tiver sido enviada, todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>implementações são chamadas na mesma ordem.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Normalmente, uma implementação de IErrorHandler é adicionada para o <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>propriedade sobre o serviço (e o cliente no caso de comunicação duplex).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Você pode adicionar o IErrorHandler no tempo de execução com a implementação de um comportamento (ou um <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, ou <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>objeto) e usar o comportamento programaticamente, um arquivo de configuração ou com um atributo personalizado para anexar o IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Para obter mais informações sobre como usar comportamentos para modificar o tempo de execução, consulte [Configurando e estendendo o tempo de execução com comportamentos](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Habilita o processamento de erro e retorna um valor que indica se o dispatcher anula a sessão e o contexto da instância em determinados casos."
  remarks: "Use o método HandleError implementar comportamentos relacionados a erros como erro de log de notificações do sistema, desligar o aplicativo e assim por diante e retornar um valor que especifica se a exceção foi tratada adequadamente.      > [!NOTE] > Porque o método HandleError pode ser chamado de vários locais diferentes não há nenhuma garantia feita sobre qual thread o método é chamado em. Não dependem de método HandleError chamado no thread da operação.       Todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler>são chamadas de implementações.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Por padrão (quando o valor de retorno é `false`), se houver uma exceção, o dispatcher anula qualquer sessão e anula a <xref:System.ServiceModel.InstanceContext>se o <xref:System.ServiceModel.InstanceContextMode>for diferente de <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  A exceção é considerada sem tratamento e qualquer estado será considerado corrompido.       Retornar `true` de HandleError para evitar esse comportamento padrão. Se qualquer manipulador de erro retorna `true` ele instrui o [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] que é seguro continuar usando o estado associado à solicitação com falha.       Se nenhum manipulador de erro retorna `true` do HandleError método a exceção será considerada sem tratamento e se aplica a resposta padrão, possivelmente resultando em um interrompida <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>e o canal ao comunicar-se em um canal de sessão ou a <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>propriedade não está definida como <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       O `error` parâmetro nunca é `null` e contém o objeto de exceção foi lançado."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "A exceção lançada durante o processamento."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] não deve abortar a sessão (se houver) e contexto de instância se o contexto de instância não é <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Permite a criação de um personalizado &lt;xref:System.ServiceModel.FaultException%601&gt; que é retornado de uma exceção no decorrer de um método de serviço."
  remarks: "Implemente o método ProvideFault para criar uma mensagem de falha personalizado que é retornada ao cliente.  O método ProvideFault sempre será chamado para exceções que deixam de operações, exceto quando o tempo de execução WCF reconhece a exceção como especialmente fatal e lança novamente a exceção em si. Quando todas as implementações de ProvideFault tem sido chamadas, a mensagem de falha é enviada ao cliente (se `fault` é não -`null`). Se o `fault` parâmetro é `null` a falha de padrão é enviada ao cliente.      > [!NOTE] > A mensagem de entrada que causou o erro de processamento está disponível durante esse método a partir de <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>propriedade.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > Porque o método ProvideFault pode ser chamado de vários locais diferentes não há nenhuma garantia feita sobre qual thread o método é chamado em. Não dependem de método ProvideFault chamado no thread da operação."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "O <xref:System.Exception>objeto lançado durante a operação de serviço.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "A versão SOAP da mensagem."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "O &lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; objeto que é retornado ao cliente ou serviço, no caso de duplex."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
