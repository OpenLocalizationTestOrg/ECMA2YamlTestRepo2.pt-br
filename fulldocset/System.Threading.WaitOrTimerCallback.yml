### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "Representa um método a ser chamado quando um <xref:System.Threading.WaitHandle>é sinalizado ou expire.</xref:System.Threading.WaitHandle>"
  remarks: "WaitOrTimerCallback representa um método de retorno de chamada que você deseja executar quando um identificador de espera registrado expira ou for sinalizado. Crie o representante, passando o seu método de retorno de chamada para o construtor WaitOrTimerCallback. O método deve ter a assinatura mostrada aqui.       Criar o identificador de espera registrado, passando o delegado WaitOrTimerCallback e um <xref:System.Threading.WaitHandle>para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle> O método de retorno de chamada é executado sempre que o <xref:System.Threading.WaitHandle>expirar ou for sinalizado.</xref:System.Threading.WaitHandle>       [Visual Basic] > [!NOTE] > usuários do Visual Basic podem omitir o construtor WaitOrTimerCallback e simplesmente usar a `AddressOf` operador ao passar o método de retorno de chamada para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Visual Basic automaticamente chama construtor delegado correto.       Se você quiser passar informações para o seu método de retorno de chamada, crie um objeto que contém as informações necessárias e passá-lo para <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>quando você cria o identificador de espera registrado.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Cada vez que seu método de retorno de chamada é executado, o `state` parâmetro contém este objeto.       Para obter mais informações sobre como usar métodos de retorno de chamada para sincronizar threads do pool, consulte [o Pool de threads gerenciados](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
