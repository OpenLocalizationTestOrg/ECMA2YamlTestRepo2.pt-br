### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Container
  id: Container
  children:
  - System.ComponentModel.Container.#ctor
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Components
  - System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Dispose
  - System.ComponentModel.Container.Dispose(System.Boolean)
  - System.ComponentModel.Container.Finalize
  - System.ComponentModel.Container.GetService(System.Type)
  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  langs:
  - csharp
  name: Container
  nameWithType: Container
  fullName: System.ComponentModel.Container
  type: Class
  summary: "Encapsula zero ou mais componentes."
  remarks: "A classe de contêiner é a implementação padrão para o <xref:System.ComponentModel.IContainer>interface.</xref:System.ComponentModel.IContainer>       Contêineres são objetos que encapsulam e acompanhar a zero ou mais componentes. Nesse contexto, contenção refere-se a contenção lógica, contenção não visual. Você pode usar os componentes e os contêineres em uma variedade de cenários, incluindo cenários visual e não visual.       Os componentes em um contêiner são rastreados em uma primeiro a entrar, primeiro a sair lista que também define a ordem dos componentes dentro do contêiner. Componentes adicionados são adicionados ao final da lista."
  syntax:
    content: 'public class Container : IDisposable, System.ComponentModel.IContainer'
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.IContainer
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Container.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Container()
  nameWithType: Container.Container()
  fullName: System.ComponentModel.Container.Container()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.Container&quot;> </xref> classe."
  syntax:
    content: public Container ();
    parameters: []
  overload: System.ComponentModel.Container.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  id: Add(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Add(IComponent)
  nameWithType: Container.Add(IComponent)
  fullName: System.ComponentModel.Container.Add(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona o <xref href=&quot;System.ComponentModel.Component&quot;> </xref> para o <xref href=&quot;System.ComponentModel.Container&quot;> </xref>. O componente está sem nome."
  remarks: "Este método pode ser substituído por uma classe derivada.       O novo <xref:System.ComponentModel.Component>é adicionada ao final da lista.</xref:System.ComponentModel.Component>"
  syntax:
    content: public virtual void Add (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O componente a ser adicionado."
  overload: System.ComponentModel.Container.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  id: Add(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Add(IComponent,String)
  nameWithType: Container.Add(IComponent,String)
  fullName: System.ComponentModel.Container.Add(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona o <xref href=&quot;System.ComponentModel.Component&quot;> </xref> para o <xref href=&quot;System.ComponentModel.Container&quot;> </xref> e atribui a ele um nome."
  remarks: "Este método pode ser substituído por uma classe derivada.       O novo <xref:System.ComponentModel.Component>é adicionada ao final da lista.</xref:System.ComponentModel.Component>"
  syntax:
    content: public virtual void Add (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O componente a ser adicionado."
    - id: name
      type: System.String
      description: "O nome exclusivo, diferencia maiusculas de minúsculas para atribuir ao componente.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, que deixa o componente sem nome."
  overload: System.ComponentModel.Container.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>não é exclusivo."
  platform:
  - net462
- uid: System.ComponentModel.Container.Components
  id: Components
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Components
  nameWithType: Container.Components
  fullName: System.ComponentModel.Container.Components
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém todos os componentes de <xref href=&quot;System.ComponentModel.Container&quot;> </xref>."
  remarks: "Este método pode ser substituído por uma classe derivada.       Os componentes na coleção são armazenados na mesma ordem como eles foram adicionados ao <xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container>"
  syntax:
    content: public virtual System.ComponentModel.ComponentCollection Components { get; }
    return:
      type: System.ComponentModel.ComponentCollection
      description: "Uma coleção que contém os componentes de <xref href=&quot;System.ComponentModel.Container&quot;> </xref>."
  overload: System.ComponentModel.Container.Components*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)
  id: CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: CreateSite(IComponent,String)
  nameWithType: Container.CreateSite(IComponent,String)
  fullName: System.ComponentModel.Container.CreateSite(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um site <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> para o determinado <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> e atribui o nome fornecido para o site."
  remarks: "Se o `name` parâmetro é `null`, o <xref:System.ComponentModel.IComponent>é adicionada para o <xref:System.ComponentModel.Container>sem um nome de identificação.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.IComponent>       Este método pode ser substituído por uma classe derivada. Implementadores de que precisam substituir o método CreateSite podem fornecer uma implementação personalizada por meio de uma classe que implementa o <xref:System.ComponentModel.ISite>interface.</xref:System.ComponentModel.ISite>"
  syntax:
    content: protected virtual System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> para criar um site."
    - id: name
      type: System.String
      description: "O nome a ser atribuído ao `component`, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para ignorar a atribuição de nome."
    return:
      type: System.ComponentModel.ISite
      description: "O site recém-criado."
  overload: System.ComponentModel.Container.CreateSite*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Dispose
  id: Dispose
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Dispose()
  nameWithType: Container.Dispose()
  fullName: System.ComponentModel.Container.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.ComponentModel.Container&quot;> </xref>."
  remarks: "Chamada <xref:System.ComponentModel.Container.Dispose%2A>Quando terminar de usar o <xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> O <xref:System.ComponentModel.Container.Dispose%2A>método deixa o <xref:System.ComponentModel.Container>em um estado inutilizável.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> Depois de chamar <xref:System.ComponentModel.Container.Dispose%2A>, você deve liberar todas as referências para o <xref:System.ComponentModel.Container>para o coletor de lixo possa recuperar a memória que o <xref:System.ComponentModel.Container>estava ocupando.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [implementar um método Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamar <xref:System.ComponentModel.Container.Dispose%2A>antes de liberar sua última referência a <xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.ComponentModel.Container>do objeto `Finalize` método.</xref:System.ComponentModel.Container>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Container.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Container.Dispose(Boolean)
  fullName: System.ComponentModel.Container.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.ComponentModel.Container&quot;> </xref>e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público `Dispose` método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro for true, este método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.ComponentModel.Container>referências.</xref:System.ComponentModel.Container> Este método chama o `Dispose`método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.ComponentModel.Container.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Finalize
  id: Finalize
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Finalize()
  nameWithType: Container.Finalize()
  fullName: System.ComponentModel.Container.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Libera recursos não gerenciados e executa outras operações de limpeza antes do <xref href=&quot;System.ComponentModel.Container&quot;> </xref> é recuperada pela coleta de lixo."
  remarks: "Esse método substitui <xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> Código do aplicativo não deve chamar esse método; um objeto `Finalize` método é invocado automaticamente durante a coleta de lixo, a menos que a finalização pelo coletor de lixo foi desabilitada por uma chamada para o <xref:System.GC.SuppressFinalize%2A>método.</xref:System.GC.SuppressFinalize%2A>       Para obter mais informações, consulte [métodos Finalize e destruidores](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md), e [substituindo o método Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~Container ();
    parameters: []
  overload: System.ComponentModel.Container.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: Container.GetService(Type)
  fullName: System.ComponentModel.Container.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o objeto de serviço do tipo especificado, se estiver disponível."
  remarks: "A implementação padrão desse método retorna a instância atual da classe se `service` é um <xref:System.ComponentModel.IContainer>; caso contrário, ele retorna `null`.</xref:System.ComponentModel.IContainer> Você pode substituir esse método para fornecer uma implementação personalizada para retornar um objeto de serviço. Para obter mais informações, consulte o <xref:System.IServiceProvider.GetService%2A?displayProperty=fullName>método.</xref:System.IServiceProvider.GetService%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "O <xref:System.Type>do serviço para recuperar.</xref:System.Type>"
    return:
      type: System.Object
      description: "Um <xref:System.Object>implementar o serviço solicitado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o serviço não pode ser resolvido.</xref:System.Object>"
  overload: System.ComponentModel.Container.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  id: Remove(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Remove(IComponent)
  nameWithType: Container.Remove(IComponent)
  fullName: System.ComponentModel.Container.Remove(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um componente a partir de <xref href=&quot;System.ComponentModel.Container&quot;> </xref>."
  remarks: "Este método pode ser substituído por uma classe derivada."
  syntax:
    content: public virtual void Remove (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O componente a ser removido."
  overload: System.ComponentModel.Container.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  id: RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: RemoveWithoutUnsiting(IComponent)
  nameWithType: Container.RemoveWithoutUnsiting(IComponent)
  fullName: System.ComponentModel.Container.RemoveWithoutUnsiting(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um componente a partir de <xref href=&quot;System.ComponentModel.Container&quot;> </xref> sem configuração <xref:System.ComponentModel.IComponent.Site*>para <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.IComponent.Site*>"
  remarks: "O método RemoveWithoutUnsiting limpa o site como de costume, mas ele não define o componente <xref:System.ComponentModel.IComponent.Site%2A>propriedade `null`.</xref:System.ComponentModel.IComponent.Site%2A>"
  syntax:
    content: protected void RemoveWithoutUnsiting (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O componente a ser removido."
  overload: System.ComponentModel.Container.RemoveWithoutUnsiting*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  id: ValidateName(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: ValidateName(IComponent,String)
  nameWithType: Container.ValidateName(IComponent,String)
  fullName: System.ComponentModel.Container.ValidateName(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se o nome do componente é exclusivo para este contêiner."
  remarks: "O método ValidateName é chamado pelo <xref:System.ComponentModel.Container.Add%2A>método para determinar se o nome do `component` que está sendo adicionado é exclusivo para este <xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Add%2A> Se o `name` parâmetro não é `null` e não é exclusivo, uma <xref:System.ArgumentException>é gerada.</xref:System.ArgumentException>"
  syntax:
    content: protected virtual void ValidateName (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O componente nomeado."
    - id: name
      type: System.String
      description: "O nome do componente para validar."
  overload: System.ComponentModel.Container.ValidateName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>não é exclusivo."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Container.#ctor
  parent: System.ComponentModel.Container
  isExternal: false
  name: Container()
  nameWithType: Container.Container()
  fullName: System.ComponentModel.Container.Container()
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Add(IComponent)
  nameWithType: Container.Add(IComponent)
  fullName: System.ComponentModel.Container.Add(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Add(IComponent,String)
  nameWithType: Container.Add(IComponent,String)
  fullName: System.ComponentModel.Container.Add(IComponent,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Container.Components
  parent: System.ComponentModel.Container
  isExternal: false
  name: Components
  nameWithType: Container.Components
  fullName: System.ComponentModel.Container.Components
- uid: System.ComponentModel.ComponentCollection
  parent: System.ComponentModel
  isExternal: false
  name: ComponentCollection
  nameWithType: ComponentCollection
  fullName: System.ComponentModel.ComponentCollection
- uid: System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  isExternal: false
  name: CreateSite(IComponent,String)
  nameWithType: Container.CreateSite(IComponent,String)
  fullName: System.ComponentModel.Container.CreateSite(IComponent,String)
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.ComponentModel.Container.Dispose
  parent: System.ComponentModel.Container
  isExternal: false
  name: Dispose()
  nameWithType: Container.Dispose()
  fullName: System.ComponentModel.Container.Dispose()
- uid: System.ComponentModel.Container.Dispose(System.Boolean)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Container.Dispose(Boolean)
  fullName: System.ComponentModel.Container.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Container.Finalize
  parent: System.ComponentModel.Container
  isExternal: false
  name: Finalize()
  nameWithType: Container.Finalize()
  fullName: System.ComponentModel.Container.Finalize()
- uid: System.ComponentModel.Container.GetService(System.Type)
  parent: System.ComponentModel.Container
  isExternal: false
  name: GetService(Type)
  nameWithType: Container.GetService(Type)
  fullName: System.ComponentModel.Container.GetService(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Remove(IComponent)
  nameWithType: Container.Remove(IComponent)
  fullName: System.ComponentModel.Container.Remove(IComponent)
- uid: System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  isExternal: false
  name: RemoveWithoutUnsiting(IComponent)
  nameWithType: Container.RemoveWithoutUnsiting(IComponent)
  fullName: System.ComponentModel.Container.RemoveWithoutUnsiting(IComponent)
- uid: System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  isExternal: false
  name: ValidateName(IComponent,String)
  nameWithType: Container.ValidateName(IComponent,String)
  fullName: System.ComponentModel.Container.ValidateName(IComponent,String)
- uid: System.ComponentModel.Container.#ctor*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Container
  nameWithType: Container.Container
- uid: System.ComponentModel.Container.Add*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Add
  nameWithType: Container.Add
- uid: System.ComponentModel.Container.Components*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Components
  nameWithType: Container.Components
- uid: System.ComponentModel.Container.CreateSite*
  parent: System.ComponentModel.Container
  isExternal: false
  name: CreateSite
  nameWithType: Container.CreateSite
- uid: System.ComponentModel.Container.Dispose*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Dispose
  nameWithType: Container.Dispose
- uid: System.ComponentModel.Container.Finalize*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Finalize
  nameWithType: Container.Finalize
- uid: System.ComponentModel.Container.GetService*
  parent: System.ComponentModel.Container
  isExternal: false
  name: GetService
  nameWithType: Container.GetService
- uid: System.ComponentModel.Container.Remove*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Remove
  nameWithType: Container.Remove
- uid: System.ComponentModel.Container.RemoveWithoutUnsiting*
  parent: System.ComponentModel.Container
  isExternal: false
  name: RemoveWithoutUnsiting
  nameWithType: Container.RemoveWithoutUnsiting
- uid: System.ComponentModel.Container.ValidateName*
  parent: System.ComponentModel.Container
  isExternal: false
  name: ValidateName
  nameWithType: Container.ValidateName
