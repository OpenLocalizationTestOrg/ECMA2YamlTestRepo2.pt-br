### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher
  id: EventLogWatcher
  children:
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  langs:
  - csharp
  name: EventLogWatcher
  nameWithType: EventLogWatcher
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher
  type: Class
  summary: "Permite que você se inscreva em eventos de entrada. Cada vez que um evento desejado é publicado em um log de eventos, o <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> é gerado e o método que trata esse evento será executado."
  remarks: "As instâncias dessa classe são criadas a partir <xref:System.Diagnostics.Eventing.Reader.EventLogQuery>objetos, que especificar uma consulta para a inscrição do evento.</xref:System.Diagnostics.Eventing.Reader.EventLogQuery> Quando um evento é registrado que corresponde aos critérios expressados na consulta, em seguida, o <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>é gerado.</xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>"
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: 'public class EventLogWatcher : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe especificando uma consulta de evento."
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "Especifica uma consulta para a inscrição do evento. Quando um evento é registrado que corresponde aos critérios expressados na consulta, em seguida, o <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> é gerado."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe especificando o nome ou o caminho para um log de eventos."
  syntax:
    content: public EventLogWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho ou o nome do monitor de log de eventos para eventos. Se nenhum evento é registrado no log de eventos, em seguida, o <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> é gerado."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe especificando uma consulta de evento e um indicador que é usado como o início da consulta."
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "Especifica uma consulta para a inscrição do evento. Quando um evento é registrado que corresponde aos critérios expressados na consulta, em seguida, o <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> é gerado."
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "O indicador (espaço reservado) usado como uma posição inicial no log de eventos ou fluxo de eventos. Somente os eventos que foram registrados depois que o evento de indicador será retornado pela consulta."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe especificando uma consulta de evento, um indicador que é usado como a posição para a consulta inicial e um valor booleano que determina se é necessário ler os eventos que já existem no log de eventos."
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "Especifica uma consulta para a inscrição do evento. Quando um evento é registrado que corresponde aos critérios expressados na consulta, em seguida, o <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> é gerado."
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "O indicador (espaço reservado) usado como uma posição inicial no log de eventos ou fluxo de eventos. Somente os eventos que foram registrados depois que o evento de indicador será retornado pela consulta."
    - id: readExistingEvents
      type: System.Boolean
      description: "Um valor booleano que determina se devem ser lidos os eventos que já existem no log de eventos. Se esse valor for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, em seguida, os eventos existentes são lidas e se esse valor for <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, em seguida, os eventos existentes não são legíveis."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  id: Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Libera todos os recursos usados por este objeto."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Libera os recursos não gerenciados usados por este objeto e, opcionalmente, libera os recursos gerenciados."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  id: Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  type: Property
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Determina se este objeto começa a entrega de eventos para o delegado do evento."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "Retorna <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> quando este objeto pode fornecer eventos para o delegado de evento e retorna <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> quando este objeto parou de entrega."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  id: EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  type: Event
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Permite definir um delegado (método de manipulador de eventos) que é chamado sempre que um evento é publicado que corresponde aos critérios especificado no evento consulta para esse objeto."
  remarks: ''
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: public event EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs> EventRecordWritten;
    return:
      type: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
- uid: System.Diagnostics.Eventing.Reader.EventLogQuery
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventLogQuery
  nameWithType: EventLogQuery
  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
- uid: System.Diagnostics.Eventing.Reader.EventBookmark
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventBookmark
  nameWithType: EventBookmark
  fullName: System.Diagnostics.Eventing.Reader.EventBookmark
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
- uid: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<EventRecordWrittenEventArgs>
  nameWithType: EventHandler<EventRecordWrittenEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs
    name: EventRecordWrittenEventArgs
    nameWithType: EventRecordWrittenEventArgs
    fullName: EventRecordWrittenEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher
  nameWithType: EventLogWatcher.EventLogWatcher
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose
  nameWithType: EventLogWatcher.Dispose
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
