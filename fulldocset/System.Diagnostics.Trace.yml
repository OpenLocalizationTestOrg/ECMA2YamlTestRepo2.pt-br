### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Trace
  id: Trace
  children:
  - System.Diagnostics.Trace.Assert(System.Boolean)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.AutoFlush
  - System.Diagnostics.Trace.Close
  - System.Diagnostics.Trace.CorrelationManager
  - System.Diagnostics.Trace.Fail(System.String)
  - System.Diagnostics.Trace.Fail(System.String,System.String)
  - System.Diagnostics.Trace.Flush
  - System.Diagnostics.Trace.Indent
  - System.Diagnostics.Trace.IndentLevel
  - System.Diagnostics.Trace.IndentSize
  - System.Diagnostics.Trace.Listeners
  - System.Diagnostics.Trace.Refresh
  - System.Diagnostics.Trace.TraceError(System.String)
  - System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceInformation(System.String)
  - System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceWarning(System.String)
  - System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  - System.Diagnostics.Trace.Unindent
  - System.Diagnostics.Trace.UseGlobalLock
  - System.Diagnostics.Trace.Write(System.Object)
  - System.Diagnostics.Trace.Write(System.String)
  - System.Diagnostics.Trace.Write(System.Object,System.String)
  - System.Diagnostics.Trace.Write(System.String,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object)
  - System.Diagnostics.Trace.WriteLine(System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  - System.Diagnostics.Trace.WriteLine(System.String,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  langs:
  - csharp
  name: Trace
  nameWithType: Trace
  fullName: System.Diagnostics.Trace
  type: Class
  summary: "Fornece um conjunto de métodos e propriedades que ajudam você rastrear a execução do seu código. Essa classe não pode ser herdada."
  remarks: "Você pode usar as propriedades e métodos na classe de rastreamento para instrumentar compilações de lançamento. Instrumentação permite monitorar a integridade de seu aplicativo em execução nas configurações da vida real. Rastreamento ajuda a isolar problemas e corrigi-los sem afetar um sistema em execução.       Essa classe fornece métodos para exibir um <xref:System.Diagnostics.Trace.Assert%2A>caixa de diálogo e para emitir uma declaração que será sempre <xref:System.Diagnostics.Trace.Fail%2A>.</xref:System.Diagnostics.Trace.Fail%2A> </xref:System.Diagnostics.Trace.Assert%2A> Essa classe fornece métodos de gravação em variações a seguir: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>e <xref:System.Diagnostics.Trace.WriteLineIf%2A>.</xref:System.Diagnostics.Trace.WriteLineIf%2A> </xref:System.Diagnostics.Trace.WriteIf%2A> </xref:System.Diagnostics.Trace.WriteLine%2A> </xref:System.Diagnostics.Trace.Write%2A>       O <xref:System.Diagnostics.BooleanSwitch>e <xref:System.Diagnostics.TraceSwitch>classes fornecem meios para controlar dinamicamente a saída de rastreamento.</xref:System.Diagnostics.TraceSwitch> </xref:System.Diagnostics.BooleanSwitch> Você pode modificar os valores dessas opções sem recompilar o aplicativo. Para obter informações sobre como usar o arquivo de configuração para definir uma opção, consulte o <xref:System.Diagnostics.Switch>classe e o [como: criar, inicializar e configurar opções de rastreamento](~/add/includes/ajax-current-ext-md.md) tópico.</xref:System.Diagnostics.Switch>       Você pode personalizar o destino da saída de rastreamento adicionando <xref:System.Diagnostics.TraceListener>instâncias ou removendo instâncias da <xref:System.Diagnostics.Trace.Listeners%2A>coleção.</xref:System.Diagnostics.Trace.Listeners%2A> </xref:System.Diagnostics.TraceListener> O <xref:System.Diagnostics.Trace.Listeners%2A>coleção é compartilhada por ambos os <xref:System.Diagnostics.Debug>e as classes do rastreamento; adicionar um ouvinte de rastreamento para qualquer classe adiciona o ouvinte a ambos.</xref:System.Diagnostics.Debug> </xref:System.Diagnostics.Trace.Listeners%2A> Por padrão, saída de rastreamento é emitida usando a <xref:System.Diagnostics.DefaultTraceListener>classe.</xref:System.Diagnostics.DefaultTraceListener>      > [!NOTE] > Adicionar um ouvinte de rastreamento para o <xref:System.Diagnostics.Trace.Listeners%2A>coleta pode causar uma exceção seja lançada durante um rastreamento, se um recurso usado pelo ouvinte de rastreamento não está disponível.</xref:System.Diagnostics.Trace.Listeners%2A> As condições e a exceção lançada dependem o ouvinte de rastreamento e não podem ser enumerados neste tópico. Pode ser útil fazer chamadas para os métodos de rastreamento na `try` / `catch` blocos para detectar e lidar com todas as exceções de ouvintes de rastreamento.      > [!NOTE] > Se você adicionar ouvintes de rastreamento ao código parcialmente confiável, você receberá um <xref:System.Security.SecurityException>exceção, como a adição de ouvintes de rastreamento requer <xref:System.Security.Permissions.SecurityPermissionFlag>permissão.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.SecurityException> Para rastrear código parcialmente confiável está em execução em uma área restrita no Visual Studio, não adicione ouvintes de rastreamento. Em vez disso, exibir o rastreamento e <xref:System.Diagnostics.Debug>mensagens no **saída** janela.</xref:System.Diagnostics.Debug>       A classe de rastreamento fornece propriedades para obter ou definir o nível de <xref:System.Diagnostics.Trace.Indent%2A>, o <xref:System.Diagnostics.Trace.IndentSize%2A>e se deseja <xref:System.Diagnostics.Trace.AutoFlush%2A>após cada gravação.</xref:System.Diagnostics.Trace.AutoFlush%2A> </xref:System.Diagnostics.Trace.IndentSize%2A> </xref:System.Diagnostics.Trace.Indent%2A>       Para definir o <xref:System.Diagnostics.Trace.AutoFlush%2A>e <xref:System.Diagnostics.Trace.IndentSize%2A>para rastreamento, você pode editar o arquivo de configuração que corresponde ao nome do seu aplicativo.</xref:System.Diagnostics.Trace.IndentSize%2A> </xref:System.Diagnostics.Trace.AutoFlush%2A> O arquivo de configuração deve ser formatado com o seguinte exemplo: ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ``` o <xref:System.Diagnostics.ConditionalAttribute>atributo é aplicado a métodos de rastreamento.</xref:System.Diagnostics.ConditionalAttribute> Compiladores que suportem <xref:System.Diagnostics.ConditionalAttribute>ignorar chamadas para esses métodos, a menos que &quot;TRACE&quot; é definido como um símbolo de compilação condicional.</xref:System.Diagnostics.ConditionalAttribute> Consulte a documentação do compilador para determinar se <xref:System.Diagnostics.ConditionalAttribute>tem suporte e a sintaxe para definir um símbolo de compilação condicional.</xref:System.Diagnostics.ConditionalAttribute>      > [!NOTE] > Projetos no Visual Studio, por padrão, o símbolo de compilação condicional &quot;DEBUG&quot; é definido para compilações de depuração e o símbolo de &quot;TRACE&quot; está definido para ambos depurar e compilações de versão. Para obter informações sobre como desativar esse comportamento, consulte a documentação do Visual Studio.       Para definir o símbolo de compilação condicional &quot;TRACE&quot; em c#, adicione o `/d:TRACE` opção de linha de comando do compilador quando você compila o código usando uma linha de comando ou adicionar `#define TRACE` à parte superior do seu arquivo. No Visual Basic, adicione o `/d:TRACE=True` opção de linha de comando do compilador ou adicionar `#Const TRACE=True` para o arquivo.       <xref:System.Diagnostics.ConditionalAttribute>Não há suporte para o compilador do C++.</xref:System.Diagnostics.ConditionalAttribute> Para fornecer funcionalidade equivalente, é necessário colocar chamadas para os métodos de rastreamento em um `#if defined(TRACE) ... #endif` bloquear e, em seguida, adicione o `/DTRACE` opção de linha de comando do compilador ou adicionar `#define TRACE` para o arquivo."
  example:
  - "The following example uses Trace to indicate the beginning and the end of a program's execution. The example also uses the <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=fullName> methods to distinguish the tracing output. For a more complete example of the use of Trace, see [How to: Add Trace Statements to Application Code](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cpp[Classic Trace Example#1](~/add/codesnippet/cpp/t-system.diagnostics.trace_1.cpp)]\n [!code-cs[Classic Trace Example#1](~/add/codesnippet/csharp/t-system.diagnostics.trace_1.cs)]\n [!code-vb[Classic Trace Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.trace_1.vb)]"
  syntax:
    content: public sealed class Trace
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Verifica se há uma condição; Se a condição for <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, exibe uma caixa de mensagem que mostra a pilha de chamadas."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example creates an index for an array. Then some action is performed that sets the value of the index. Next the code calls Assert to verify the index value is valid. If it is not valid, the Assert outputs the call stack.  \n  \n [!code-cs[Classic Trace.Assert Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_23_1.cs)]\n [!code-cpp[Classic Trace.Assert Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_23_1.cpp)]\n [!code-vb[Classic Trace.Assert Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_23_1.vb)]"
  syntax:
    content: public static void Assert (bool condition);
    parameters:
    - id: condition
      type: System.Boolean
      description: "A expressão condicional a ser avaliada. Se a condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, uma mensagem de falha não será enviada e a caixa de mensagem não é exibida."
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Verifica se há uma condição; Se a condição for <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, gera uma mensagem especificada e exibe uma caixa de mensagem que mostra a pilha de chamadas."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_20_1.cs)]\n [!code-cpp[Classic Trace.Assert1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_20_1.cpp)]\n [!code-vb[Classic Trace.Assert1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_20_1.vb)]"
  syntax:
    content: public static void Assert (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "A expressão condicional a ser avaliada. Se a condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, a mensagem especificada não é enviada e a caixa de mensagem não é exibida."
    - id: message
      type: System.String
      description: "A mensagem ser enviada para o <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  id: Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Verifica se há uma condição; Se a condição for <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, gera duas mensagens especificadas e exibe uma caixa de mensagem que mostra a pilha de chamadas."
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_24_1.cs)]\n [!code-vb[Classic Trace.Assert2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_24_1.vb)]\n [!code-cpp[Classic Trace.Assert2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_24_1.cpp)]"
  syntax:
    content: public static void Assert (bool condition, string message, string detailMessage);
    parameters:
    - id: condition
      type: System.Boolean
      description: "A expressão condicional a ser avaliada. Se a condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, as mensagens especificadas não são enviadas e a caixa de mensagem não é exibida."
    - id: message
      type: System.String
      description: "A mensagem ser enviada para o <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
    - id: detailMessage
      type: System.String
      description: "A mensagem detalhada para enviar para o <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.AutoFlush
  id: AutoFlush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define se <> </> *> deve ser chamado no <> </> *> após cada gravação."
  remarks: "O padrão é `false`.       Liberando o fluxo não liberar seu codificador subjacente, a menos que você chamar explicitamente <xref:System.Diagnostics.Trace.Flush%2A>ou <xref:System.Diagnostics.Trace.Close%2A>.</xref:System.Diagnostics.Trace.Close%2A> </xref:System.Diagnostics.Trace.Flush%2A> Definindo AutoFlush como `true` significa que os dados serão liberados do buffer no fluxo, mas o estado de codificador não será liberado. Isso permite que o codificador deve manter o estado (parcial caracteres) para que ele pode codificar o próximo bloco de caracteres corretamente. Este cenário afeta UTF8 e UTF7 onde determinados caracteres podem ser codificados somente depois que o codificador recebe adjacentes ou mais caracteres.       Para definir o AutoFlush e <xref:System.Diagnostics.Trace.IndentSize%2A>para <xref:System.Diagnostics.Trace>, você também pode editar o arquivo de configuração que corresponde ao nome do seu aplicativo.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Trace.IndentSize%2A> O arquivo de configuração deve ser formatado como o exemplo a seguir:```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <> </> *> é chamado de <> </> *> após cada gravação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.Trace.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Close
  id: Close
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Libera o buffer de saída e, em seguida, fecha o <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Use este método quando a saída vai para um arquivo, como <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener>       Liberando o fluxo não liberar seu codificador subjacente, a menos que você chamar explicitamente <xref:System.Diagnostics.Trace.Flush%2A>ou fechar.</xref:System.Diagnostics.Trace.Flush%2A> Definindo <xref:System.Diagnostics.Trace.AutoFlush%2A>para `true` significa que os dados serão liberados do buffer no fluxo, mas o estado de codificador não será liberado.</xref:System.Diagnostics.Trace.AutoFlush%2A> Isso permite que o codificador deve manter o estado (parcial caracteres) para que ele pode codificar o próximo bloco de caracteres corretamente. Este cenário afeta UTF8 e UTF7 onde determinados caracteres podem ser codificados somente depois que o codificador recebe adjacentes ou mais caracteres."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_9_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_9_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public static void Close ();
    parameters: []
  overload: System.Diagnostics.Trace.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.CorrelationManager
  id: CorrelationManager
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém o Gerenciador de correlação para o thread para este rastreamento."
  remarks: "> [!NOTE]> Isso é uma propriedade avançada que a maioria dos aplicativos não devem ter a ocasião para usar.       O <xref:System.Diagnostics.CorrelationManager>classe fornece métodos usados para armazenar uma identidade de operação lógica em um contexto de thread associado e identificar automaticamente a cada evento de rastreamento gerado pelo thread com a identidade armazenada.</xref:System.Diagnostics.CorrelationManager>"
  syntax:
    content: public static System.Diagnostics.CorrelationManager CorrelationManager { get; }
    return:
      type: System.Diagnostics.CorrelationManager
      description: "O <xref href=&quot;System.Diagnostics.CorrelationManager&quot;> </xref> objeto associado ao segmento para este rastreamento."
  overload: System.Diagnostics.Trace.CorrelationManager*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emite a mensagem de erro especificado."
  remarks: "The default behavior for the default trace listener is to output the `message` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the Fail method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_1.cs)]\n [!code-cpp[Classic Trace.Fail Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_1.cpp)]\n [!code-vb[Classic Trace.Fail Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_1.vb)]  \n  \n You can also use the Fail method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_2.cs)]\n [!code-cpp[Classic Trace.Fail Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_2.cpp)]\n [!code-vb[Classic Trace.Fail Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_2.vb)]"
  syntax:
    content: public static void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem de emissão."
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Emite uma mensagem de erro e uma mensagem de erro detalhada."
  remarks: "The default behavior is for the default trace listener to output the `message` parameter and the `detailedMessage` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_1.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_1.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_1.vb)]  \n  \n You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail1 Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_2.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_2.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_2.vb)]"
  syntax:
    content: public static void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem de emissão."
    - id: detailMessage
      type: System.String
      description: "Uma mensagem detalhada de emissão."
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Flush
  id: Flush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Libera o buffer de saída e faz com que os dados armazenados em buffer a ser gravado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Liberando o fluxo não liberar seu codificador subjacente, a menos que você chamar explicitamente liberação ou <xref:System.Diagnostics.Trace.Close%2A>.</xref:System.Diagnostics.Trace.Close%2A> Definindo <xref:System.Diagnostics.Trace.AutoFlush%2A>para `true` significa que os dados serão liberados do buffer no fluxo, mas o estado de codificador não será liberado.</xref:System.Diagnostics.Trace.AutoFlush%2A> Isso permite que o codificador deve manter o estado (parcial caracteres) para que ele pode codificar o próximo bloco de caracteres corretamente. Este cenário afeta UTF8 e UTF7 onde determinados caracteres podem ser codificados somente depois que o codificador recebe adjacentes ou mais caracteres."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_17_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_17_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_17_1.vb)]"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Diagnostics.Trace.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Indent
  id: Indent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Aumenta atual <xref:System.Diagnostics.Trace.IndentLevel*>por um.</xref:System.Diagnostics.Trace.IndentLevel*>"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_6_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_6_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_6_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n```"
  syntax:
    content: public static void Indent ();
    parameters: []
  overload: System.Diagnostics.Trace.Indent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nível de recuo."
  remarks: "A propriedade IndentLevel representa o número de vezes que o recuo de tamanho <xref:System.Diagnostics.Trace.IndentSize%2A>é aplicada.</xref:System.Diagnostics.Trace.IndentSize%2A> Essa propriedade é armazenada em cada thread/por-solicitação."
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_10_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_10_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_10_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "O nível de recuo. O padrão é zero."
  overload: System.Diagnostics.Trace.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentSize
  id: IndentSize
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o número de espaços em um recuo."
  remarks: "Um <xref:System.Diagnostics.TextWriterTraceListener>interpreta esse número como espaços.</xref:System.Diagnostics.TextWriterTraceListener> Um <xref:System.Diagnostics.EventLogTraceListener>ignora esse valor.</xref:System.Diagnostics.EventLogTraceListener>       Essa propriedade é armazenada em cada thread/por-solicitação.       Para definir o <xref:System.Diagnostics.Trace.AutoFlush%2A>e IndentSize para <xref:System.Diagnostics.Trace>, você também pode editar o arquivo de configuração que corresponde ao nome do seu aplicativo.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Trace.AutoFlush%2A> O arquivo de configuração deve ser formatado como o exemplo a seguir:```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "O número de espaços em um recuo. O padrão é quatro."
  overload: System.Diagnostics.Trace.IndentSize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Listeners
  id: Listeners
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a coleção de ouvintes que está monitorando a saída de rastreamento."
  remarks: "Os ouvintes de produzem saída formatada da saída do rastreamento. Por padrão, a coleção contendo uma instância de <xref:System.Diagnostics.DefaultTraceListener>classe.</xref:System.Diagnostics.DefaultTraceListener> Se você quiser remover o ouvinte padrão, chamar o <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>método e passe a instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection.Remove%2A> Para redirecionar a saída para a janela do console, adicione uma instância da <xref:System.Diagnostics.ConsoleTraceListener>classe.</xref:System.Diagnostics.ConsoleTraceListener>      > [!NOTE] > Ouvintes o conjunto é compartilhado por ambos os <xref:System.Diagnostics.Debug>e <xref:System.Diagnostics.Trace>classes; adicionando um ouvinte de rastreamento para qualquer classe adiciona o ouvinte a ambos.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>"
  example:
  - "The following example creates a <xref:System.Diagnostics.ConsoleTraceListener> that outputs to the console screen. The code then adds the new listener to the Listeners.  \n  \n [!code-cs[Classic Trace.Listeners Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_2_1.cs)]\n [!code-vb[Classic Trace.Listeners Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_2_1.vb)]\n [!code-cpp[Classic Trace.Listeners Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_2_1.cpp)]"
  syntax:
    content: public static System.Diagnostics.TraceListenerCollection Listeners { get; }
    return:
      type: System.Diagnostics.TraceListenerCollection
      description: "Um <xref href=&quot;System.Diagnostics.TraceListenerCollection&quot;> </xref> que representa uma coleção de tipo <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> monitoramento a saída de rastreamento."
  overload: System.Diagnostics.Trace.Listeners*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Refresh
  id: Refresh
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Atualiza os dados de configuração de rastreamento."
  remarks: "Dados de configuração de rastreamento são capturados quando o aplicativo é iniciado. Se os dados de configuração são alterados depois que o aplicativo é iniciado, chame o método de atualização para atualizar os dados de configuração de rastreamento."
  syntax:
    content: public static void Refresh ();
    parameters: []
  overload: System.Diagnostics.Trace.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String)
  id: TraceError(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem de erro para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção usando a mensagem especificada.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceError chama o `TraceEvent` método para cada ouvinte de rastreamento, com o tipo de evento de rastreamento <xref:System.Diagnostics.TraceEventType>, passando a mensagem informativa como a cadeia de caracteres de mensagem.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceError (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem informativa para gravação."
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  id: TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem de erro para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção usando a matriz de objetos especificada e as informações de formatação.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceError chama o `TraceEvent` métodos os ouvintes de rastreamento com o tipo de evento de rastreamento <xref:System.Diagnostics.TraceEventType>, passando o conteúdo da mensagem como uma matriz de objetos com informações de formatação.</xref:System.Diagnostics.TraceEventType> Consulte o <xref:System.String.Format%2A>método para obter mais informações sobre o `format` e `args` parâmetros.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceError (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "Uma cadeia de caracteres de formato que contém zero ou mais itens de formato, que correspondem aos objetos na `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matriz que contém zero ou mais objetos a serem formatados."
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  id: TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem informativa para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção usando a mensagem especificada.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceInformation chama o `TraceEvent` método para cada ouvinte de rastreamento, com o tipo de evento de rastreamento <xref:System.Diagnostics.TraceEventType>, passando a mensagem informativa como a cadeia de caracteres de mensagem.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceInformation (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem informativa para gravação."
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  id: TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem informativa para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção usando a matriz de objetos especificada e as informações de formatação.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceInformation chama o `TraceEvent` métodos os ouvintes de rastreamento com o tipo de evento de rastreamento <xref:System.Diagnostics.TraceEventType>, passando o conteúdo da mensagem como uma matriz de objetos com informações de formatação.</xref:System.Diagnostics.TraceEventType> Consulte o <xref:System.String.Format%2A>método para obter mais informações sobre o `format` e `args` parâmetros.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceInformation (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "Uma cadeia de caracteres de formato que contém zero ou mais itens de formato, que correspondem aos objetos na `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matriz que contém zero ou mais objetos a serem formatados."
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  id: TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem de aviso para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção usando a mensagem especificada.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceWarning chama o `TraceEvent` método para cada ouvinte de rastreamento com o tipo de evento de rastreamento <xref:System.Diagnostics.TraceEventType>, passando a mensagem informativa como a cadeia de caracteres de mensagem.</xref:System.Diagnostics.TraceEventType>"
  syntax:
    content: public static void TraceWarning (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem informativa para gravação."
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  id: TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem de aviso para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção usando a matriz de objetos especificada e as informações de formatação.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "TraceWarning chama o `TraceEvent` métodos os ouvintes de rastreamento com o tipo de evento de rastreamento <xref:System.Diagnostics.TraceEventType>, passando o conteúdo da mensagem como uma matriz de objetos com informações de formatação.</xref:System.Diagnostics.TraceEventType> Consulte o <xref:System.String.Format%2A>método para obter mais informações sobre o `format` e `args` parâmetros.</xref:System.String.Format%2A>"
  syntax:
    content: public static void TraceWarning (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "Uma cadeia de caracteres de formato que contém zero ou mais itens de formato, que correspondem aos objetos na `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matriz que contém zero ou mais objetos a serem formatados."
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Unindent
  id: Unindent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Diminui atual <xref:System.Diagnostics.Trace.IndentLevel*>por um.</xref:System.Diagnostics.Trace.IndentLevel*>"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_14_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_14_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_14_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static void Unindent ();
    parameters: []
  overload: System.Diagnostics.Trace.Unindent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.UseGlobalLock
  id: UseGlobalLock
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define um valor que indica se o bloqueio global deve ser usado."
  remarks: "O bloqueio global sempre será usado se o ouvinte de rastreamento não é thread-safe, independentemente do valor UseGlobalLock. O <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>propriedade é usada para determinar se o ouvinte é thread-safe.</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> O bloqueio global não é usado somente se o valor de UseGlobalLock é `false` e o valor de <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>é `true`.</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> O comportamento padrão é usar o bloqueio global.       Para definir o UseGlobalLock para <xref:System.Diagnostics.Trace>, você também pode editar o arquivo de configuração que corresponde ao nome do seu aplicativo.</xref:System.Diagnostics.Trace> O arquivo de configuração deve ser formatado como o exemplo a seguir:```   <configuration>     <system.diagnostics>       <trace useGlobalLock=&quot;false&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool UseGlobalLock { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o bloqueio global será usado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.Trace.UseGlobalLock*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET fornece a funcionalidade de rastreamento personalizada para páginas da Web. Para gravar mensagens de rastreamento em páginas ASP.NET, use o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Por padrão, no código associado a uma página da Web do ASP.NET, a instrução `Trace.Write(&quot;...&quot;)` é uma chamada para o <xref:System.Web.TraceContext.Write%2A>método o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Para usar o <xref:System.Diagnostics.Trace?displayProperty=fullName>classe em páginas da Web, você deve incluir o namespace, por exemplo, `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the `value` parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_26_1.cpp)]\n [!code-vb[Classic Trace.Write1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_26_1.vb)]\n [!code-cs[Classic Trace.Write1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_26_1.cs)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET fornece a funcionalidade de rastreamento personalizada para páginas da Web. Para gravar mensagens de rastreamento em páginas ASP.NET, use o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Por padrão, no código associado a uma página da Web do ASP.NET, a instrução `Trace.Write(&quot;...&quot;)` é uma chamada para o <xref:System.Web.TraceContext.Write%2A>método o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Para usar o <xref:System.Diagnostics.Trace?displayProperty=fullName>classe em páginas da Web, você deve incluir o namespace, por exemplo, `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_12_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_12_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_12_1.vb)]"
  syntax:
    content: public static void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET fornece a funcionalidade de rastreamento personalizada para páginas da Web. Para gravar mensagens de rastreamento em páginas ASP.NET, use o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Por padrão, no código associado a uma página da Web do ASP.NET, a instrução `Trace.Write(&quot;...&quot;)` é uma chamada para o <xref:System.Web.TraceContext.Write%2A>método o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Para usar o <xref:System.Diagnostics.Trace?displayProperty=fullName>classe em páginas da Web, você deve incluir o namespace, por exemplo, `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_16_1.cpp)]\n [!code-cs[Classic Trace.Write3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_16_1.cs)]\n [!code-vb[Classic Trace.Write3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_16_1.vb)]"
  syntax:
    content: public static void Write (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava os ouvintes de rastreamento em um nome de categoria e uma mensagem de <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>      > [!NOTE] > ASP.NET fornece a funcionalidade de rastreamento personalizada para páginas da Web. Para gravar mensagens de rastreamento em páginas ASP.NET, use o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>       Por padrão, no código associado a uma página da Web do ASP.NET, a instrução `Trace.Write(&quot;...&quot;)` é uma chamada para o <xref:System.Web.TraceContext.Write%2A>método o <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>propriedade.</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> </xref:System.Web.TraceContext.Write%2A> Para usar o <xref:System.Diagnostics.Trace?displayProperty=fullName>classe em páginas da Web, você deve incluir o namespace, por exemplo, `System.Diagnostics.Trace.Write(&quot;...&quot;)`.</xref:System.Diagnostics.Trace?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_4_1.cpp)]\n [!code-vb[Classic Trace.Write2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_4_1.vb)]\n [!code-cs[Classic Trace.Write2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_4_1.cs)]"
  syntax:
    content: public static void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  id: WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_2_1.cpp)]\n [!code-vb[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_2_1.vb)]\n [!code-cs[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_2_1.cs)]"
  syntax:
    content: public static void WriteIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  id: WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_10_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_10_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_10_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  id: WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_8_1.cs)]\n [!code-vb[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_8_1.vb)]\n [!code-cpp[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_8_1.cpp)]"
  syntax:
    content: public static void WriteIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  id: WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem e o nome da categoria para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.Write%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_7_1.cs)]\n [!code-cpp[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_7_1.cpp)]\n [!code-vb[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_7_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_18_1.cpp)]\n [!code-cs[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_18_1.cs)]\n [!code-vb[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_18_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_3_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_3_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_3_1.vb)]"
  syntax:
    content: public static void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_19_1.cpp)]\n [!code-vb[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_19_1.vb)]\n [!code-cs[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_19_1.cs)]"
  syntax:
    content: public static void WriteLine (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem e o nome da categoria para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_25_1.cpp)]\n [!code-vb[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_25_1.vb)]\n [!code-cs[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_25_1.cs)]"
  syntax:
    content: public static void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  id: WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_5_1.cpp)]\n [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_5_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_5_1.cs)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  id: WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_11_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_11_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_11_1.vb)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  id: WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava um nome de categoria e o valor do objeto <> </> *> método para os ouvintes de rastreamento no <> </> *> coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/csharp/96a954ed-2f0b-4ec7-91f9-_1.cs)]\n [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/visualbasic/96a954ed-2f0b-4ec7-91f9-_1.vb)]\n [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/cpp/96a954ed-2f0b-4ec7-91f9-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: value
      type: System.Object
      description: "Um <xref:System.Object>cujo nome é enviado para <xref:System.Diagnostics.Trace.Listeners*>.</xref:System.Diagnostics.Trace.Listeners*> </xref:System.Object>"
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  id: WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem e o nome da categoria para os ouvintes de rastreamento no <xref:System.Diagnostics.Trace.Listeners*>coleção se uma condição for <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "Por padrão, a saída é gravada em uma instância de <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>       O `category` parâmetro pode ser usado para agrupar mensagens de saída.       Este método chama o <xref:System.Diagnostics.TraceListener.WriteLine%2A>método do ouvinte de rastreamento.</xref:System.Diagnostics.TraceListener.WriteLine%2A>"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/visualbasic/7f54460b-5f74-4be1-a3dd-_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/csharp/7f54460b-5f74-4be1-a3dd-_1.cs)]\n [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/cpp/7f54460b-5f74-4be1-a3dd-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para fazer com que uma mensagem a ser gravado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
    - id: category
      type: System.String
      description: "Um nome de categoria usado para organizar a saída."
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
- uid: System.Diagnostics.Trace.AutoFlush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
- uid: System.Diagnostics.Trace.CorrelationManager
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
- uid: System.Diagnostics.CorrelationManager
  parent: System.Diagnostics
  isExternal: false
  name: CorrelationManager
  nameWithType: CorrelationManager
  fullName: System.Diagnostics.CorrelationManager
- uid: System.Diagnostics.Trace.Fail(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
- uid: System.Diagnostics.Trace.Flush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
- uid: System.Diagnostics.Trace.Indent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
- uid: System.Diagnostics.Trace.IndentLevel
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Trace.IndentSize
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
- uid: System.Diagnostics.TraceListenerCollection
  parent: System.Diagnostics
  isExternal: false
  name: TraceListenerCollection
  nameWithType: TraceListenerCollection
  fullName: System.Diagnostics.TraceListenerCollection
- uid: System.Diagnostics.Trace.Refresh
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
- uid: System.Diagnostics.Trace.TraceError(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
- uid: System.Diagnostics.Trace.Unindent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
- uid: System.Diagnostics.Trace.UseGlobalLock
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
- uid: System.Diagnostics.Trace.Write(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.Assert*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert
  nameWithType: Trace.Assert
- uid: System.Diagnostics.Trace.AutoFlush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close
  nameWithType: Trace.Close
- uid: System.Diagnostics.Trace.CorrelationManager*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
- uid: System.Diagnostics.Trace.Fail*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail
  nameWithType: Trace.Fail
- uid: System.Diagnostics.Trace.Flush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush
  nameWithType: Trace.Flush
- uid: System.Diagnostics.Trace.Indent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent
  nameWithType: Trace.Indent
- uid: System.Diagnostics.Trace.IndentLevel*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
- uid: System.Diagnostics.Trace.IndentSize*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
- uid: System.Diagnostics.Trace.Refresh*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh
  nameWithType: Trace.Refresh
- uid: System.Diagnostics.Trace.TraceError*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError
  nameWithType: Trace.TraceError
- uid: System.Diagnostics.Trace.TraceInformation*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation
  nameWithType: Trace.TraceInformation
- uid: System.Diagnostics.Trace.TraceWarning*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning
  nameWithType: Trace.TraceWarning
- uid: System.Diagnostics.Trace.Unindent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent
  nameWithType: Trace.Unindent
- uid: System.Diagnostics.Trace.UseGlobalLock*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write
  nameWithType: Trace.Write
- uid: System.Diagnostics.Trace.WriteIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf
  nameWithType: Trace.WriteIf
- uid: System.Diagnostics.Trace.WriteLine*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine
  nameWithType: Trace.WriteLine
- uid: System.Diagnostics.Trace.WriteLineIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf
  nameWithType: Trace.WriteLineIf
