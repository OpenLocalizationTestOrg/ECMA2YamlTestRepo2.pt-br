### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  id: IDispatchMessageInspector
  children:
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  langs:
  - csharp
  name: IDispatchMessageInspector
  nameWithType: IDispatchMessageInspector
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  type: Interface
  summary: "Define os métodos que permitem personalizado inspecionar ou modificar as mensagens de aplicativo de entrada e saída em aplicativos de serviço."
  remarks: "Implemente IDispatchMessageInspector para inspecionar ou modificar as mensagens de entrada ou saída de aplicativo antes de distribuir uma mensagem de solicitação para uma operação ou antes de retornar uma mensagem de resposta para um chamador. Há um grande número de cenários que exigem interceptar mensagens antes de invocar a operação para o qual ele é destinado. Por exemplo, você pode registrar em log mensagens de aplicativo de entrada ou executar algum recurso com base em um cabeçalho de mensagem.       Normalmente, os inspetores de mensagem são inseridas por um comportamento de serviço (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), um comportamento de ponto de extremidade (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), ou um comportamento de contrato (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>).</xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName> O comportamento, em seguida, adiciona o Inspetor de mensagem para o <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName>coleção.</xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> Para obter mais informações sobre como estender o tempo de execução usando comportamentos, consulte [estendendo ServiceHost e a camada de modelo de serviço](~/add/includes/ajax-current-ext-md.md).      -O <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>método permite que o comportamento personalizado depois de receber a mensagem, mas antes de expedi-lo para a operação pretendida.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>      -O <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>método permite que o comportamento personalizado depois que a operação retorna, mas antes que a resposta será enviada.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!NOTE] > IDispatchMessageInspector objetos sempre são chamados no mesmo momento durante a expedição de mensagem independentemente se uma operação é unidirecional ou solicitação-resposta."
  example:
  - "The following code example shows a basic IDispatchMessageInspector that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`IDispatchMessageInspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`IDispatchMessageInspector.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IDispatchMessageInspector
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  id: AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chamado depois que uma mensagem de entrada recebida mas antes a mensagem é enviada para a operação pretendida."
  remarks: "Use o método AfterReceiveRequest para inspecionar ou modificar a mensagem de entrada, o canal de cliente fornecido e a instância de serviço atual. O valor de retorno pode ser qualquer objeto que você deseja usar para fins de correlação; ele é retornado como o `correlationState` parâmetro o <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>método.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!IMPORTANT] > Você não pode usar o corpo da mensagem, a menos que a mensagem inteira do buffer e faça uma cópia. Se você fizer isso, você deve fazer duas cópias da mensagem: um para inspecionar e o outro para substituir o `request` parâmetro."
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: request
      type: System.ServiceModel.Channels.Message
      description: "A mensagem de solicitação."
    - id: channel
      type: System.ServiceModel.IClientChannel
      description: "O canal de entrada."
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "A instância de serviço atual."
    return:
      type: System.Object
      description: "O objeto usado para correlacionar o estado. Este objeto é passado de volta o <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>método.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  id: BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chamado depois que a operação foi retornado, mas antes da resposta de mensagem é enviada."
  remarks: "Use o método BeforeSendReply para executar o comportamento personalizado antes de enviar a mensagem de retorno. O `correlationState` é o objeto retornado do <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>método que você pode usar para executar a correlação entre as chamadas de entrada e saídas para dar suporte a seu comportamento.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>"
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);
    parameters:
    - id: reply
      type: System.ServiceModel.Channels.Message
      description: "A mensagem de resposta. Esse valor será nulo se a operação é unidirecional."
    - id: correlationState
      type: System.Object
      description: "O objeto de correlação retornado do <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>método.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IClientChannel
  parent: System.ServiceModel
  isExternal: true
  name: IClientChannel
  nameWithType: IClientChannel
  fullName: System.ServiceModel.IClientChannel
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply
  nameWithType: IDispatchMessageInspector.BeforeSendReply
