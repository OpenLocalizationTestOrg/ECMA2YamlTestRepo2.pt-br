### YamlMime:ManagedReference
items:
- uid: System.Windows.ContentElement
  id: ContentElement
  children:
  - System.Windows.ContentElement.#ctor
  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.AllowDrop
  - System.Windows.ContentElement.AllowDropProperty
  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.ContentElement.AreAnyTouchesCaptured
  - System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  - System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  - System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  - System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.ContentElement.AreAnyTouchesOver
  - System.Windows.ContentElement.AreAnyTouchesOverProperty
  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.ContentElement.CaptureMouse
  - System.Windows.ContentElement.CaptureStylus
  - System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.ContentElement.CommandBindings
  - System.Windows.ContentElement.DragEnter
  - System.Windows.ContentElement.DragEnterEvent
  - System.Windows.ContentElement.DragLeave
  - System.Windows.ContentElement.DragLeaveEvent
  - System.Windows.ContentElement.DragOver
  - System.Windows.ContentElement.DragOverEvent
  - System.Windows.ContentElement.Drop
  - System.Windows.ContentElement.DropEvent
  - System.Windows.ContentElement.Focus
  - System.Windows.ContentElement.Focusable
  - System.Windows.ContentElement.FocusableChanged
  - System.Windows.ContentElement.FocusableProperty
  - System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.ContentElement.GetUIParentCore
  - System.Windows.ContentElement.GiveFeedback
  - System.Windows.ContentElement.GiveFeedbackEvent
  - System.Windows.ContentElement.GotFocus
  - System.Windows.ContentElement.GotFocusEvent
  - System.Windows.ContentElement.GotKeyboardFocus
  - System.Windows.ContentElement.GotKeyboardFocusEvent
  - System.Windows.ContentElement.GotMouseCapture
  - System.Windows.ContentElement.GotMouseCaptureEvent
  - System.Windows.ContentElement.GotStylusCapture
  - System.Windows.ContentElement.GotStylusCaptureEvent
  - System.Windows.ContentElement.GotTouchCapture
  - System.Windows.ContentElement.GotTouchCaptureEvent
  - System.Windows.ContentElement.HasAnimatedProperties
  - System.Windows.ContentElement.InputBindings
  - System.Windows.ContentElement.IsEnabled
  - System.Windows.ContentElement.IsEnabledChanged
  - System.Windows.ContentElement.IsEnabledCore
  - System.Windows.ContentElement.IsEnabledProperty
  - System.Windows.ContentElement.IsFocused
  - System.Windows.ContentElement.IsFocusedProperty
  - System.Windows.ContentElement.IsInputMethodEnabled
  - System.Windows.ContentElement.IsKeyboardFocused
  - System.Windows.ContentElement.IsKeyboardFocusedChanged
  - System.Windows.ContentElement.IsKeyboardFocusedProperty
  - System.Windows.ContentElement.IsKeyboardFocusWithin
  - System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  - System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  - System.Windows.ContentElement.IsMouseCaptured
  - System.Windows.ContentElement.IsMouseCapturedChanged
  - System.Windows.ContentElement.IsMouseCapturedProperty
  - System.Windows.ContentElement.IsMouseCaptureWithin
  - System.Windows.ContentElement.IsMouseCaptureWithinChanged
  - System.Windows.ContentElement.IsMouseCaptureWithinProperty
  - System.Windows.ContentElement.IsMouseDirectlyOver
  - System.Windows.ContentElement.IsMouseDirectlyOverChanged
  - System.Windows.ContentElement.IsMouseDirectlyOverProperty
  - System.Windows.ContentElement.IsMouseOver
  - System.Windows.ContentElement.IsMouseOverProperty
  - System.Windows.ContentElement.IsStylusCaptured
  - System.Windows.ContentElement.IsStylusCapturedChanged
  - System.Windows.ContentElement.IsStylusCapturedProperty
  - System.Windows.ContentElement.IsStylusCaptureWithin
  - System.Windows.ContentElement.IsStylusCaptureWithinChanged
  - System.Windows.ContentElement.IsStylusCaptureWithinProperty
  - System.Windows.ContentElement.IsStylusDirectlyOver
  - System.Windows.ContentElement.IsStylusDirectlyOverChanged
  - System.Windows.ContentElement.IsStylusDirectlyOverProperty
  - System.Windows.ContentElement.IsStylusOver
  - System.Windows.ContentElement.IsStylusOverProperty
  - System.Windows.ContentElement.KeyDown
  - System.Windows.ContentElement.KeyDownEvent
  - System.Windows.ContentElement.KeyUp
  - System.Windows.ContentElement.KeyUpEvent
  - System.Windows.ContentElement.LostFocus
  - System.Windows.ContentElement.LostFocusEvent
  - System.Windows.ContentElement.LostKeyboardFocus
  - System.Windows.ContentElement.LostKeyboardFocusEvent
  - System.Windows.ContentElement.LostMouseCapture
  - System.Windows.ContentElement.LostMouseCaptureEvent
  - System.Windows.ContentElement.LostStylusCapture
  - System.Windows.ContentElement.LostStylusCaptureEvent
  - System.Windows.ContentElement.LostTouchCapture
  - System.Windows.ContentElement.LostTouchCaptureEvent
  - System.Windows.ContentElement.MouseDown
  - System.Windows.ContentElement.MouseDownEvent
  - System.Windows.ContentElement.MouseEnter
  - System.Windows.ContentElement.MouseEnterEvent
  - System.Windows.ContentElement.MouseLeave
  - System.Windows.ContentElement.MouseLeaveEvent
  - System.Windows.ContentElement.MouseLeftButtonDown
  - System.Windows.ContentElement.MouseLeftButtonDownEvent
  - System.Windows.ContentElement.MouseLeftButtonUp
  - System.Windows.ContentElement.MouseLeftButtonUpEvent
  - System.Windows.ContentElement.MouseMove
  - System.Windows.ContentElement.MouseMoveEvent
  - System.Windows.ContentElement.MouseRightButtonDown
  - System.Windows.ContentElement.MouseRightButtonDownEvent
  - System.Windows.ContentElement.MouseRightButtonUp
  - System.Windows.ContentElement.MouseRightButtonUpEvent
  - System.Windows.ContentElement.MouseUp
  - System.Windows.ContentElement.MouseUpEvent
  - System.Windows.ContentElement.MouseWheel
  - System.Windows.ContentElement.MouseWheelEvent
  - System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.ContentElement.OnCreateAutomationPeer
  - System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.ContentElement.PreviewDragEnter
  - System.Windows.ContentElement.PreviewDragEnterEvent
  - System.Windows.ContentElement.PreviewDragLeave
  - System.Windows.ContentElement.PreviewDragLeaveEvent
  - System.Windows.ContentElement.PreviewDragOver
  - System.Windows.ContentElement.PreviewDragOverEvent
  - System.Windows.ContentElement.PreviewDrop
  - System.Windows.ContentElement.PreviewDropEvent
  - System.Windows.ContentElement.PreviewGiveFeedback
  - System.Windows.ContentElement.PreviewGiveFeedbackEvent
  - System.Windows.ContentElement.PreviewGotKeyboardFocus
  - System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  - System.Windows.ContentElement.PreviewKeyDown
  - System.Windows.ContentElement.PreviewKeyDownEvent
  - System.Windows.ContentElement.PreviewKeyUp
  - System.Windows.ContentElement.PreviewKeyUpEvent
  - System.Windows.ContentElement.PreviewLostKeyboardFocus
  - System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  - System.Windows.ContentElement.PreviewMouseDown
  - System.Windows.ContentElement.PreviewMouseDownEvent
  - System.Windows.ContentElement.PreviewMouseLeftButtonDown
  - System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.ContentElement.PreviewMouseLeftButtonUp
  - System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.ContentElement.PreviewMouseMove
  - System.Windows.ContentElement.PreviewMouseMoveEvent
  - System.Windows.ContentElement.PreviewMouseRightButtonDown
  - System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  - System.Windows.ContentElement.PreviewMouseRightButtonUp
  - System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  - System.Windows.ContentElement.PreviewMouseUp
  - System.Windows.ContentElement.PreviewMouseUpEvent
  - System.Windows.ContentElement.PreviewMouseWheel
  - System.Windows.ContentElement.PreviewMouseWheelEvent
  - System.Windows.ContentElement.PreviewQueryContinueDrag
  - System.Windows.ContentElement.PreviewQueryContinueDragEvent
  - System.Windows.ContentElement.PreviewStylusButtonDown
  - System.Windows.ContentElement.PreviewStylusButtonDownEvent
  - System.Windows.ContentElement.PreviewStylusButtonUp
  - System.Windows.ContentElement.PreviewStylusButtonUpEvent
  - System.Windows.ContentElement.PreviewStylusDown
  - System.Windows.ContentElement.PreviewStylusDownEvent
  - System.Windows.ContentElement.PreviewStylusInAirMove
  - System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  - System.Windows.ContentElement.PreviewStylusInRange
  - System.Windows.ContentElement.PreviewStylusInRangeEvent
  - System.Windows.ContentElement.PreviewStylusMove
  - System.Windows.ContentElement.PreviewStylusMoveEvent
  - System.Windows.ContentElement.PreviewStylusOutOfRange
  - System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  - System.Windows.ContentElement.PreviewStylusSystemGesture
  - System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  - System.Windows.ContentElement.PreviewStylusUp
  - System.Windows.ContentElement.PreviewStylusUpEvent
  - System.Windows.ContentElement.PreviewTextInput
  - System.Windows.ContentElement.PreviewTextInputEvent
  - System.Windows.ContentElement.PreviewTouchDown
  - System.Windows.ContentElement.PreviewTouchDownEvent
  - System.Windows.ContentElement.PreviewTouchMove
  - System.Windows.ContentElement.PreviewTouchMoveEvent
  - System.Windows.ContentElement.PreviewTouchUp
  - System.Windows.ContentElement.PreviewTouchUpEvent
  - System.Windows.ContentElement.QueryContinueDrag
  - System.Windows.ContentElement.QueryContinueDragEvent
  - System.Windows.ContentElement.QueryCursor
  - System.Windows.ContentElement.QueryCursorEvent
  - System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.ReleaseAllTouchCaptures
  - System.Windows.ContentElement.ReleaseMouseCapture
  - System.Windows.ContentElement.ReleaseStylusCapture
  - System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.ContentElement.ShouldSerializeCommandBindings
  - System.Windows.ContentElement.ShouldSerializeInputBindings
  - System.Windows.ContentElement.StylusButtonDown
  - System.Windows.ContentElement.StylusButtonDownEvent
  - System.Windows.ContentElement.StylusButtonUp
  - System.Windows.ContentElement.StylusButtonUpEvent
  - System.Windows.ContentElement.StylusDown
  - System.Windows.ContentElement.StylusDownEvent
  - System.Windows.ContentElement.StylusEnter
  - System.Windows.ContentElement.StylusEnterEvent
  - System.Windows.ContentElement.StylusInAirMove
  - System.Windows.ContentElement.StylusInAirMoveEvent
  - System.Windows.ContentElement.StylusInRange
  - System.Windows.ContentElement.StylusInRangeEvent
  - System.Windows.ContentElement.StylusLeave
  - System.Windows.ContentElement.StylusLeaveEvent
  - System.Windows.ContentElement.StylusMove
  - System.Windows.ContentElement.StylusMoveEvent
  - System.Windows.ContentElement.StylusOutOfRange
  - System.Windows.ContentElement.StylusOutOfRangeEvent
  - System.Windows.ContentElement.StylusSystemGesture
  - System.Windows.ContentElement.StylusSystemGestureEvent
  - System.Windows.ContentElement.StylusUp
  - System.Windows.ContentElement.StylusUpEvent
  - System.Windows.ContentElement.TextInput
  - System.Windows.ContentElement.TextInputEvent
  - System.Windows.ContentElement.TouchDown
  - System.Windows.ContentElement.TouchDownEvent
  - System.Windows.ContentElement.TouchEnter
  - System.Windows.ContentElement.TouchEnterEvent
  - System.Windows.ContentElement.TouchesCaptured
  - System.Windows.ContentElement.TouchesCapturedWithin
  - System.Windows.ContentElement.TouchesDirectlyOver
  - System.Windows.ContentElement.TouchesOver
  - System.Windows.ContentElement.TouchLeave
  - System.Windows.ContentElement.TouchLeaveEvent
  - System.Windows.ContentElement.TouchMove
  - System.Windows.ContentElement.TouchMoveEvent
  - System.Windows.ContentElement.TouchUp
  - System.Windows.ContentElement.TouchUpEvent
  langs:
  - csharp
  name: ContentElement
  nameWithType: ContentElement
  fullName: System.Windows.ContentElement
  type: Class
  summary: "Fornece uma classe base de nível de núcleo do WPF para elementos de conteúdo. Elementos de conteúdo são projetados para apresentação de estilo de fluxo, usando um modelo de layout intuitiva e orientada a marcação e um modelo de objeto deliberadamente simples."
  remarks: "ContentElement define as seguintes características de conteúdo comuns: - entrada: todas as classes derivada de ContentElement oferecem suporte para captura básico de entrada do teclado, mouse, operações de arrastar e soltar, controles de caneta e aceleradores.      -Foco: Todas as classes derivada de ContentElement são potencialmente Focusable é. (No entanto, o estado de controle padrão para a classe base ContentElement é `false`. Para obter detalhes sobre como fazer um ContentElement Focusable é, consulte <xref:System.Windows.ContentElement.Focusable%2A>.)</xref:System.Windows.ContentElement.Focusable%2A> Além disso, essa classe contém [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] que você pode usar para percorrer o foco em elementos relacionados.      -Eventos: ContentElement inclui eventos relacionados à entrada e foco; Ele também inclui eventos de alterações de estado. Em muitos casos, os eventos de ContentElement são eventos roteados. Em alguns casos, os eventos roteados têm túnel e bolha estratégias de roteamento, geradas como eventos separados em resposta ao mesmo estado ou condição. Além disso, define ContentElement [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] que pode gerar roteadas eventos e que podem adicionar ou remover manipuladores de eventos.       ContentElement compartilha muitos comum [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] com <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> Esses comuns [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] não vêm de uma herança de classe compartilhada. Mas compartilham nomenclatura comuns, comportamento semelhante e semelhante implementação interna de [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] em cada classe. A similaridade é porque ContentElement e <xref:System.Windows.UIElement>são cada classes que são um elemento base, embora cada um tenha intenções diferentes para o seu comportamento de modelo de objeto de marcação.</xref:System.Windows.UIElement>       Em particular, <xref:System.Windows.UIElement>descende do <xref:System.Windows.Media.Visual>, que fornece suporte a gráficos de nível inferior para renderizar um ContentElement para uma área retangular em uma janela composta, enquanto ContentElement adia o processamento para que mais comum para cenários de documento, como encapsulamento e o fluxo de conceitos mais facilmente têm suporte.</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement> Essas duas classes relacionadas também implementam as interfaces comuns <xref:System.Windows.IInputElement>e <xref:System.Windows.Media.Animation.IAnimatable>.</xref:System.Windows.Media.Animation.IAnimatable> </xref:System.Windows.IInputElement>"
  syntax:
    content: 'public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements:
  - System.Windows.IInputElement
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.ContentElement.#ctor
  id: '#ctor'
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ContentElement()
  nameWithType: ContentElement.ContentElement()
  fullName: System.Windows.ContentElement.ContentElement()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.ContentElement&quot;> </xref> classe."
  syntax:
    content: public ContentElement ();
    parameters: []
  overload: System.Windows.ContentElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adiciona um manipulador de eventos roteados para um evento roteado especificado, adicionando o manipulador para a coleção de manipulador no elemento atual."
  remarks: "Você pode adicionar o mesmo manipulador para o mesmo evento várias vezes sem gerar uma exceção. No entanto, o manipulador é realmente chamado várias vezes quando o evento é manipulado. Portanto, considere como esse comportamento pode ter efeitos colaterais que devem ser considerados na implementação do manipulador.       Você normalmente usa esse método para fornecer a implementação do acessador &quot;Adicionar&quot; para o [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] padrão de acesso do evento de um evento roteado personalizado."
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Um identificador para o evento roteado devem ser tratados."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação do manipulador."
  overload: System.Windows.ContentElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adiciona um manipulador de eventos roteados para um evento roteado especificado, adicionando o manipulador para a coleção de manipulador no elemento atual. Especifique <code> handledEventsToo </code> como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> para que o manipulador fornecido a ser invocado para eventos roteados que já tinham sido marcado como manipulado por outro elemento na rota de evento."
  remarks: "O processamento de eventos de entrada de baixo nível em uma forma prática é uma tarefa complexa. Muitos controles que implementam o comportamento em que um determinado evento estiver marcado como tratado e é substituído por outro evento mais intuitivo. Em geral, um controle só marcar um evento de entrada de plataforma como manipulado se houver algum intenção de design para fazer isso. Em determinados cenários, as intenções de design não podem ser o que requer o tratamento específico do evento de entrada. É por esses cenários que registrar manipuladores com `handledEventsToo` como `true` é apropriado. Mas você não deve fazer isso periodicamente. Chamar manipuladores em resposta a todos os eventos, mesmo quando manipulados complicar a sua própria lógica de processamento de eventos do aplicativo. Você pode ver uma diminuição no desempenho se a lógica do manipulador é significativa. Você deve reservar o uso de anexação de manipuladores de eventos já tratado para situações em que você já tenha descoberto durante o processo de desenvolvimento que certos controles lidar com eventos que deseja processar com a lógica do aplicativo.       Outra técnica para evitar o comportamento de algumas combinações de controle de evento de manipulação de classe é usar a alternativa de visualização do evento. Por exemplo, se <xref:System.Windows.ContentElement.MouseLeftButtonDown>estiver marcado como tratado pela manipulação de classe, você poderá adicionar manipuladores para <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>em vez disso.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> </xref:System.Windows.ContentElement.MouseLeftButtonDown>       Você pode adicionar o mesmo manipulador para o mesmo evento várias vezes sem gerar uma exceção. No entanto, o manipulador é realmente chamado várias vezes quando o evento é manipulado. Portanto, considere como esse comportamento pode ter efeitos colaterais que devem ser considerados na implementação do manipulador.       Você normalmente usa esse método para fornecer a implementação do acessador &quot;Adicionar&quot; para o [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] padrão de acesso do evento de um evento roteado personalizado."
  example:
  - "The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \n  \n [!code-cs[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/csharp/EventOvwSupport/page2.xaml.cs#addhandlerhandledtoo)]\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/visualbasic/eventovwsupport/page2.xaml.vb#addhandlerhandledtoo)]"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Um identificador para o evento the.routed devem ser tratados."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação do manipulador."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para registrar o manipulador de modo que ele é invocado, mesmo quando o evento roteado está marcado como tratado nos dados do evento; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para registrar o manipulador com a condição padrão que ele não poderá ser invocado se o evento roteado já estiver marcado como tratado.       O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.       Não rotineiramente pedir para rehandle um evento roteado. Para obter mais informações, consulte comentários."
  overload: System.Windows.ContentElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adiciona manipuladores especificado <xref href=&quot;System.Windows.EventRoute&quot;> </xref> atual <xref href=&quot;System.Windows.ContentElement&quot;> </xref> coleção de manipuladores de eventos."
  remarks: "Use esse método para elementos de host de conteúdo (independentemente se eles implementam <xref:System.Windows.IContentHost>) para adicionar manipuladores para os elementos filho de host de conteúdo para o host <xref:System.Windows.EventRoute>.</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost>"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "A rota de evento manipuladores são adicionados ao."
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Os dados de evento que são usados para adicionar manipuladores. Esse método usa o <xref:System.Windows.RoutedEventArgs.RoutedEvent*>propriedade dos argumentos para criar os manipuladores.</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.ContentElement.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
  fullName: System.Windows.ContentElement.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se este elemento pode ser usado como o destino de uma operação de arrastar e soltar."
  remarks: "Operações de arrastar e soltar não estão habilitadas por padrão e deve ser habilitadas deliberadamente definindo AllowDrop como `true`. Além dessa configuração básica, o comportamento de arrastar e soltar inteiramente é específico da implementação e não está definido ou <xref:System.Windows.ContentElement>qualquer outra classe de elemento base.</xref:System.Windows.ContentElement> Alguns controles, por exemplo, <xref:System.Windows.Controls.RichTextBox>, tem um comportamento padrão, mas não <xref:System.Windows.ContentElement>as classes derivadas têm tal comportamento de um.</xref:System.Windows.ContentElement> </xref:System.Windows.Controls.RichTextBox> Para obter mais informações sobre como arrastar e soltar, consulte [arrastar e soltar visão de geral](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.FrameworkContentElement>substitui os metadados para essa propriedade de dependência em sua implementação.</xref:System.Windows.FrameworkContentElement> Especificamente, <xref:System.Windows.FrameworkContentElement>designa que esta propriedade permite que a herança de valor de propriedade (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> é `true` nos metadados).</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkContentElement> Herança de valor de propriedade neste contexto significa que se houver elementos filho com nenhum outro valor para AllowDrop atribuído por meio de estilos ou valores locais, o valor do elemento pai mais próximo com esse valor atribuído (novamente, seja em estilos, valores padrão ou um valor local) e, em seguida, o valor do elemento pai é atribuído a todos os elementos filho não atribuído pelo sistema de propriedades. Isso significa que você pode especificar se deseja permitir operações de descarte no elemento raiz e, em seguida, propagar o valor para todos os <xref:System.Windows.FrameworkContentElement>elementos filho que não especificamente atribuiu um valor de `false`.</xref:System.Windows.FrameworkContentElement>      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.AllowDropProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.AllowDropProperty>"
  example:
  - "The following example sets AllowDrop in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].  \n  \n [!code-xml[ContentElementsSmorgasbord#AllowDrop](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#allowdrop)]"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esse elemento pode ser usado como o destino de uma operação de arrastar e soltar; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: ContentElement.AllowDropProperty
  fullName: System.Windows.ContentElement.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.AllowDrop*>DependencyProperty.</xref:System.Windows.ContentElement.AllowDrop*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Aplica uma animação a uma propriedade de dependência especificado neste elemento. Qualquer animações existentes são interrompidas e substituídas com a nova animação."
  remarks: "Para remover uma animação de uma propriedade, especifique o identificador para a propriedade como `dp` e especifique `clock` como `null`. Isso remove a animação e a propriedade animada é definida como seu valor de base. No entanto, o relógio de animação originalmente associado não será interrompido. Quaisquer outras animações atribuídas a esse relógio continuará a ser executado."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O identificador para a propriedade animar."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "O relógio de animação que controla e declara a animação."
  overload: System.Windows.ContentElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Aplica uma animação a uma propriedade de dependência especificado neste elemento, com a capacidade de especificar o que acontece se a propriedade já tiver uma animação em execução."
  remarks: "Para remover uma animação de uma propriedade, especifique o identificador para a propriedade como `dp` e especifique `clock` como `null`. Isso remove a animação e a propriedade animada é definida como seu valor de base. No entanto, o relógio de animação originalmente associado não será interrompido. Quaisquer outras animações atribuídas a esse relógio continuará a ser executado."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "O relógio de animação que controla e declara a animação."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Um valor da enumeração. O padrão é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>, que interromperá todas as animações existente e substitua pelo novo."
  overload: System.Windows.ContentElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
  fullName: System.Windows.ContentElement.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um toque é capturado para este elemento."
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se pelo menos um toque é capturado para este elemento. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.AreAnyTouchesCaptured*>DependencyProperty.</xref:System.Windows.ContentElement.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um toque é capturado para este elemento ou elementos filho na árvore visual."
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se pelo menos um toque é capturado para este elemento ou elementos filho na árvore visual; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*>DependencyProperty.</xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um toque é pressionado sobre este elemento."
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se pelo menos um toque é pressionado sobre este elemento. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*>DependencyProperty.</xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
  fullName: System.Windows.ContentElement.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um toque é pressionado sobre este elemento ou elementos filho na árvore visual."
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se pelo menos um toque é pressionado sobre este elemento ou elementos filho na árvore visual; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: ContentElement.AreAnyTouchesOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.AreAnyTouchesOver*>DependencyProperty.</xref:System.Windows.ContentElement.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Inicia uma animação para uma propriedade animada especificada neste elemento."
  remarks: "Quando você verifica se uma propriedade é animada, observe que a animação começará e ser considerada animado quando o primeiro quadro além do ponto de partida sem animação é renderizado.       Se o <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>para `animation` é `null`, qualquer animações atuais são removidas e o valor atual da propriedade é mantido.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Se todo o `animation` valor é `null`, todas as animações são removidas da propriedade e o valor da propriedade será revertido para seu valor de base. No entanto, a linha do tempo de animação originalmente associado não será interrompida. Quaisquer outras animações atribuídas a essa linha do tempo, continuará a ser executado."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar, que é especificada como um identificador de propriedade de dependência."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "A linha do tempo da animação iniciar."
  overload: System.Windows.ContentElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Inicia uma animação específica para uma propriedade animada especificada neste elemento, com a opção de especificar o que acontece se a propriedade já tiver uma animação em execução."
  remarks: "Quando você verifica se uma propriedade é animada, observe que a animação começará e ser considerada animado quando o primeiro quadro além do ponto de partida sem animação é renderizado.       Se o <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>para `animation` é `null`, qualquer animações atuais são removidas e o valor atual da propriedade é mantido.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Se todo o `animation` valor é `null`, todas as animações são removidas da propriedade e o valor da propriedade será revertido para seu valor de base. No entanto, a linha do tempo de animação originalmente associado não será interrompida. Quaisquer outras animações atribuídas a essa linha do tempo, continuará a ser executado."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar, que é especificada como o identificador de propriedade de dependência."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "A linha do tempo da animação a ser aplicado."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Um valor de enumeração que especifica como a nova animação interage com qualquer animações atual (em execução) que já estão afetando o valor da propriedade."
  overload: System.Windows.ContentElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: ContentElement.CaptureMouse()
  fullName: System.Windows.ContentElement.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas de forçar a captura do mouse para esse elemento."
  remarks: "Para ser capturada, um elemento deve ser habilitado. Verifique se <xref:System.Windows.ContentElement.IsEnabled%2A>é `true` antes de chamar CaptureMouse.</xref:System.Windows.ContentElement.IsEnabled%2A>       Se a chamada retorna CaptureMouse `true`, em seguida, <xref:System.Windows.ContentElement.IsMouseCaptured%2A>também é `true`.</xref:System.Windows.ContentElement.IsMouseCaptured%2A>       Se chamar CaptureMouse retorna `true`, em seguida, o <xref:System.Windows.ContentElement.GotMouseCapture>e <xref:System.Windows.ContentElement.IsMouseCapturedChanged>os eventos são gerados, com <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>no evento dados relatados como o elemento em que o método CaptureMouse é chamado.</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.ContentElement.IsMouseCapturedChanged> </xref:System.Windows.ContentElement.GotMouseCapture> Se você forçar a captura, você pode interferir na captura existente, especialmente com capturas de que se relacionam com arrastar e soltar com o mouse.       Para limpar a captura do mouse de todos os elementos, chame <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>com o `element` parâmetro fornecido como `null`.</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>"
  example:
  - "The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element. Note that this example casts the prospective capture target element to the <xref:System.Windows.IInputElement> interface, and is thus initially calling the <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=fullName> method. Casting to <xref:System.Windows.IInputElement> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <xref:System.Windows.UIElement> or a <xref:System.Windows.ContentElement>. The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement>. This same casting technique works for other members that <xref:System.Windows.IInputElement> defines, for instance many of the input-related events, and other input-related methods.  \n  \n [!code-cs[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#ismousecaptured)]\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#ismousecaptured)]"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o mouse é capturado com êxito; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: ContentElement.CaptureStylus()
  fullName: System.Windows.ContentElement.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas de forçar a captura da caneta para esse elemento."
  remarks: "A implementação do padrão com base no dispositivo de caneta padrão subjacente sempre retorna `true`. No entanto, se você estiver estendendo os dispositivos de entrada que fornece a implementação de dispositivo para o sistema de entrada, é possível criar um sistema com uma implementação de dispositivo de caneta alternativo que pode retornar resultados diferentes.       Quando um elemento captura a caneta, ele recebe entrada de caneta mesmo se a caneta está fora dos seus limites. Normalmente, a caneta é capturada somente durante as operações de arrastar e soltar.       Chamar este método chama um <xref:System.Windows.Input.Stylus>método <xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> de estático subjacente. O comportamento real de captura é implementado pela implementação de dispositivo de caneta ativo.       Para ser capturada, um elemento deve ser habilitado. Verifique se <xref:System.Windows.ContentElement.IsEnabled%2A>é `true` retornar antes de chamar CaptureStylus.</xref:System.Windows.ContentElement.IsEnabled%2A>       Se a chamada retorna CaptureStylus `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A>também é `true`.</xref:System.Windows.ContentElement.IsStylusCaptured%2A>"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a caneta é capturada com êxito; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: ContentElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.ContentElement.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas de forçar a captura de um toque para esse elemento."
  remarks: "Retornará CaptureTouch `false` se o <xref:System.Windows.Input.TouchDevice>capturada no momento para outro elemento.</xref:System.Windows.Input.TouchDevice>       Se retornar CaptureTouch `true`, em seguida, o <xref:System.Windows.ContentElement.GotTouchCapture>é gerado.</xref:System.Windows.ContentElement.GotTouchCapture>       Para liberar a captura de um único toque deste elemento, use o <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A>método e especifique o dispositivo de toque para liberar.</xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> Para liberar todos os toques deste elemento, use o <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A>método.</xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "O dispositivo para capturar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o contato especificado é capturado para este elemento. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.ContentElement.CommandBindings
  id: CommandBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
  fullName: System.Windows.ContentElement.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém uma coleção de <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> objetos que estão associados esse elemento."
  remarks: "Um <xref:System.Windows.Input.CommandBinding>permite a manipulação de comandos de um comando específico para esse elemento e declara a ligação entre um comando, seus eventos e os manipuladores anexados por este elemento.</xref:System.Windows.Input.CommandBinding>       Outra maneira comum para preencher a coleção CommandBindings é usar <xref:System.Windows.Input.CommandManager>métodos programaticamente.</xref:System.Windows.Input.CommandManager>      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a># # Uso do elemento de propriedade de XAML ```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings  </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> # # XAML valores *oneOrMoreCommandBindings* um ou mais <xref:System.Windows.Input.CommandBinding>elementos.</xref:System.Windows.Input.CommandBinding>       Cada um deles deve ter um <xref:System.Windows.Input.CommandBinding.Command%2A>atributo definido como um comando conhecido e os atributos definidos para o <xref:System.Windows.Input.CommandBinding.CanExecute>e <xref:System.Windows.Input.CommandBinding.Executed>implementações de manipulador.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> Para obter mais informações, consulte <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding>"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "A coleção de todos os <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> objetos."
  overload: System.Windows.ContentElement.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragEnter
  id: DragEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragEnter
  nameWithType: ContentElement.DragEnter
  fullName: System.Windows.ContentElement.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar subjacente com esse elemento como o destino de arrastar."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>anexa para esta classe, para que DragEnter faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> Manipuladores de eventos associados ao evento DragEnter são anexados ao subjacente <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragEnter&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.DragEnterEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewDragEnter>.</xref:System.Windows.ContentElement.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DragEnterEvent>      -Substituir <xref:System.Windows.ContentElement.OnDragEnter%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: ContentElement.DragEnterEvent
  fullName: System.Windows.ContentElement.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.DragEnter&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragLeave
  id: DragLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: ContentElement.DragLeave
  fullName: System.Windows.ContentElement.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar subjacente com esse elemento como origem de arrastar."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>anexa para esta classe para que DragLeave faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> Manipuladores de eventos associados ao evento DragLeave são anexados ao subjacente <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragLeave&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.DragLeaveEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.DragDrop.PreviewDragLeave>.</xref:System.Windows.DragDrop.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DragLeaveEvent>      -Substituir <xref:System.Windows.ContentElement.OnDragLeave%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: ContentElement.DragLeaveEvent
  fullName: System.Windows.ContentElement.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.DragLeave&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragOver
  id: DragOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragOver
  nameWithType: ContentElement.DragOver
  fullName: System.Windows.ContentElement.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar subjacente com esse elemento como o destino de soltar potencial."
  remarks: "Esse evento ocorre mesmo se a operação de arrastar se origina dos limites do elemento. Se a operação de arrastar inicia fora dos limites e, em seguida, move dentro, esse evento também é gerado, bem como <xref:System.Windows.ContentElement.DragEnter>e Visualizar eventos relacionados.</xref:System.Windows.ContentElement.DragEnter>       Esse evento cria um alias para o <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>anexa para esta classe para que DragOver faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> Manipuladores de eventos associados ao evento DragOver são anexados ao subjacente <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragOver&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.DragOverEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.DragDrop.PreviewDragOver>.</xref:System.Windows.DragDrop.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DragOverEvent>      -Substituir <xref:System.Windows.ContentElement.OnDragOver%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: ContentElement.DragOverEvent
  fullName: System.Windows.ContentElement.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.DragOver&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Drop
  id: Drop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Drop
  nameWithType: ContentElement.Drop
  fullName: System.Windows.ContentElement.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento soltar subjacente com esse elemento como o destino de soltar."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>evento anexado para esta classe de forma que soltar faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> Manipuladores de eventos associados ao evento soltar associadas à subjacente <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>      <a name=&quot;routedEventInfo_Drop&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.DropEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewDrop>.</xref:System.Windows.ContentElement.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DropEvent>      -Substituir <xref:System.Windows.ContentElement.OnDrop%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DropEvent
  id: DropEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DropEvent
  nameWithType: ContentElement.DropEvent
  fullName: System.Windows.ContentElement.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.Drop&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Focus
  id: Focus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Focus()
  nameWithType: ContentElement.Focus()
  fullName: System.Windows.ContentElement.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tenta definir o foco para esse elemento."
  remarks: "Para ser Focusable é, <xref:System.Windows.ContentElement.Focusable%2A>e <xref:System.Windows.ContentElement.IsEnabled%2A>devem ser `true`.</xref:System.Windows.ContentElement.IsEnabled%2A> </xref:System.Windows.ContentElement.Focusable%2A> Observe que quase todos os <xref:System.Windows.ContentElement>classes derivadas não são <xref:System.Windows.ContentElement.Focusable%2A>por padrão.</xref:System.Windows.ContentElement.Focusable%2A> </xref:System.Windows.ContentElement>       Mesmo se um elemento é a manipulação de eventos de controle e habilitada, dentro de uma árvore específica, (por exemplo, para um controle composto) pode responder a eventos de foco de visualização, não permitindo que o foco, portanto, esse método retornaria `false`.       Foco em geral é regido pelos dois conceitos separados: foco do teclado e foco lógico, que nem sempre são idênticos. Esse método define o foco lógico. Não há nenhum significa através de programação para definir o foco do teclado especificamente; o foco do teclado é determinado pela entrada do usuário. Para obter mais informações, consulte [visão geral de foco](~/add/includes/ajax-current-ext-md.md) e [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).       Se a chamada retorna foco `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A>e <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A>também são `true`.</xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> </xref:System.Windows.ContentElement.IsKeyboardFocused%2A>       Se as propriedades relacionadas não ainda estiver `true`, quando você chamar o foco, um ou mais dos seguintes eventos são gerados na seguinte ordem: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>(origem é o novo destino de foco), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus>(origem é o novo destino de foco).</xref:System.Windows.ContentElement.GotKeyboardFocus> </xref:System.Windows.ContentElement.LostKeyboardFocus> </xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> </xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> </xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> </xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>"
  example:
  - "The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it. Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <xref:System.Windows.Setter> to make it focusable.  \n  \n [!code-cs[ContentElementsSmorgasbord#Focus](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#focus)]\n [!code-vb[ContentElementsSmorgasbord#Focus](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#focus)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o foco do teclado pode ser definido para este elemento. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se esta chamada de método não forçar o foco."
  overload: System.Windows.ContentElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Focusable
  id: Focusable
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Focusable
  nameWithType: ContentElement.Focusable
  fullName: System.Windows.ContentElement.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se o elemento pode receber foco."
  remarks: "Somente o elemento focalizado recebe entrada do teclado.       Certas classes derivadas podem substituir os metadados para essa propriedade de dependência, de modo que a classe derivada é Focusable é por padrão.       Quando herdado por <xref:System.Windows.Documents.Hyperlink>ou suas classes derivadas, <xref:System.Windows.Documents.Hyperlink>substitui os metadados para essa propriedade de dependência e redefine o valor padrão dessa propriedade para ser `true`.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Documents.Hyperlink>      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.FocusableProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.FocusableProperty>"
  example:
  - "The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \n  \n [!code-xml[ContentElementsSmorgasbord#Focusable](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#focusable)]"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento for Focusable é; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>; no entanto, consulte comentários."
  overload: System.Windows.ContentElement.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: ContentElement.FocusableChanged
  fullName: System.Windows.ContentElement.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.Focusable*>alterações de propriedade.</xref:System.Windows.ContentElement.Focusable*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: ContentElement.FocusableProperty
  fullName: System.Windows.ContentElement.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.Focusable*>DependencyProperty.</xref:System.Windows.ContentElement.Focusable*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.ContentElement.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Retorna o valor da propriedade base para a propriedade especificada neste elemento, desconsiderando qualquer possível animado valor da execução ou parado animação."
  remarks: "Se nenhum animações são anexadas à propriedade, o valor de retorno GetAnimationBaseValue sempre é idêntico de <xref:System.Windows.DependencyObject.GetValue%2A>valor de retorno.</xref:System.Windows.DependencyObject.GetValue%2A> Se houver animações anexadas, em seguida, animação possíveis todos os derivado valores, incluindo o início e parada valores são ignorados e, o valor da propriedade é determinado com base em todas as outras entradas possíveis. Para obter mais informações, consulte [precedência de valor de propriedade de dependência](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Propriedade the.Dependency para verificar."
    return:
      type: System.Object
      description: "O valor da propriedade como se nenhum animações são anexadas à propriedade de dependência especificada."
  overload: System.Windows.ContentElement.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: ContentElement.GetUIParentCore()
  fullName: System.Windows.ContentElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituído em uma classe derivada, retorna uma alternativa [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] pai para esse elemento se nenhum visual pai existe."
  remarks: "Retorna a implementação de virtual padrão desse método `null`. <xref:System.Windows.FrameworkContentElement>Fornece uma implementação prática.</xref:System.Windows.FrameworkContentElement>       Pais alternativos são usados para roteamento de eventos, em casos onde um elemento cria uma estrutura pai alternativo para que seus eventos roteados de forma que diverge o padrão de roteamento na árvore visual pai padrão ou para baixo na estratégia de roteamento de visualização."
  syntax:
    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "Um objeto, se a implementação de uma classe derivada tem uma conexão alternativa pai ao relatório."
  overload: System.Windows.ContentElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: ContentElement.GiveFeedback
  fullName: System.Windows.ContentElement.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar e soltar subjacente que envolve este elemento."
  remarks: "O evento GiveFeedback permite que a origem de um evento arrastar para modificar a aparência do ponteiro do mouse para fornecer os comentários visuais do usuário durante uma operação de arrastar e soltar. Os comentários visuais reforçam que uma operação de arrastar e soltar está em processo.       Esse evento cria um alias para o <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>anexa para esta classe para que GiveFeedback faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> Manipuladores de eventos associados ao evento GiveFeedback são anexados ao subjacente <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.GiveFeedbackEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.GiveFeedbackEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewGiveFeedback>.</xref:System.Windows.ContentElement.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.ContentElement.GiveFeedbackEvent>      -Substituir <xref:System.Windows.ContentElement.OnGiveFeedback%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: ContentElement.GiveFeedbackEvent
  fullName: System.Windows.ContentElement.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.GiveFeedback&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotFocus
  id: GotFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: ContentElement.GotFocus
  fullName: System.Windows.ContentElement.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento tem foco lógico."
  remarks: "Foco lógico é diferente do foco do teclado ao foco deliberadamente é forçado por meio de uma chamada de método, mas o foco do teclado anterior existe em um escopo diferente. Nesse cenário, o foco do teclado permanece onde é e o elemento onde um <xref:System.Windows.ContentElement.Focus%2A>método é chamado ainda foco lógico obtém.</xref:System.Windows.ContentElement.Focus%2A>       Uma interpretação mais precisa desse evento é que ele é gerado quando o valor de <xref:System.Windows.ContentElement.IsFocused%2A>propriedade de um elemento na rota é alterada de `false` para `true`.</xref:System.Windows.ContentElement.IsFocused%2A>       Como esse evento usa roteamento bolha, o elemento que recebe o foco pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que obteve o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_GotFocus&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.GotFocusEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.RoutedEventHandler>|      -Não há nenhum evento de túnel correspondente.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.ContentElement.GotFocusEvent>      -Substituir <xref:System.Windows.ContentElement.OnGotFocus%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: ContentElement.GotFocusEvent
  fullName: System.Windows.ContentElement.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: ContentElement.GotKeyboardFocus
  fullName: System.Windows.ContentElement.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado está focalizado neste elemento."
  remarks: "<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>é um evento semelhante que rastreia as alterações de status em uma propriedade que mantém o estado de foco para um elemento. o evento GotKeyboardFocus é gerado em muitas das mesmas circunstâncias.</xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>       Como esse evento usa roteamento bolha, o elemento que tem o foco pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento que tem o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>anexa para esta classe para que GotKeyboardFocus faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> Manipuladores de eventos associados ao evento GotKeyboardFocus são anexados ao subjacente <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.</xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.GotKeyboardFocusEvent>      -Substituir <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: ContentElement.GotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.GotKeyboardFocus&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: ContentElement.GotMouseCapture
  fullName: System.Windows.ContentElement.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento captura o mouse."
  remarks: "Quando um elemento captura o mouse, ele recebe entrada do mouse, mesmo se o ponteiro do mouse está fora dos seus limites. O mouse normalmente é capturado somente durante as operações de arrastar e soltar e permanece capturado até que ocorra a ação drop da operação de arrastar e soltar.       Como esse evento usa roteamento bolha, o elemento que tem captura pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>de eventos de captura de dados para determinar o elemento que tem o mouse.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>anexa para esta classe para que GotMouseCapture faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> Manipuladores de eventos associados ao evento GotMouseCapture são anexados ao subjacente <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.GotMouseCaptureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.GotMouseCaptureEvent>      -Substituir <xref:System.Windows.ContentElement.OnGotMouseCapture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: ContentElement.GotMouseCaptureEvent
  fullName: System.Windows.ContentElement.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.GotMouseCapture&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: ContentElement.GotStylusCapture
  fullName: System.Windows.ContentElement.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento captura a caneta."
  remarks: "Quando um elemento captura a caneta, ele recebe entrada de caneta mesmo que o ponteiro está fora dos seus limites. A caneta normalmente é capturada somente durante as operações de arrastar e soltar e retém captura até que ocorra a ação drop da operação de arrastar e soltar.       Como esse evento usa roteamento bolha, o elemento que tem captura pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que tem captura.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o evento anexado para esta classe de forma que GotStylusCapture faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> Manipuladores de eventos associados ao evento GotStylusCapture são anexados ao subjacente <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.GotStylusCaptureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.GotStylusCaptureEvent>      -Substituir <xref:System.Windows.ContentElement.OnGotStylusCapture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: ContentElement.GotStylusCaptureEvent
  fullName: System.Windows.ContentElement.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.GotStylusCapture&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: ContentElement.GotTouchCapture
  fullName: System.Windows.ContentElement.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um toque é capturado para este elemento."
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.GotTouchCaptureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Substituir <xref:System.Windows.ContentElement.OnGotTouchCapture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: ContentElement.GotTouchCaptureEvent
  fullName: System.Windows.ContentElement.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.GotTouchCapture&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
  fullName: System.Windows.ContentElement.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se este elemento tem as propriedades de animação."
  remarks: "Essa propriedade retorna `true` para persistentes animações (unclocked, sempre execução) ou de animações que têm uma linha de tempo específica."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento tem animações anexadas a uma das suas propriedades. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.InputBindings
  id: InputBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: InputBindings
  nameWithType: ContentElement.InputBindings
  fullName: System.Windows.ContentElement.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém a coleção de associações de entrada que estão associados esse elemento."
  remarks: "Suportam a associações de entrada a associação dos comandos para dispositivos de entrada. Por exemplo, <xref:System.Windows.Input.MouseBinding>implementa entrada associações que incluem propriedades que são específicas para dispositivos de mouse.</xref:System.Windows.Input.MouseBinding>       A coleção de associações de entrada inclui associações de entrada que pertencem ao tipo e também as associações de entrada que são declaradas na instância.       Uma propriedade relacionada, <xref:System.Windows.ContentElement.CommandBindings%2A>, mantém uma coleção de associações de comando.</xref:System.Windows.ContentElement.CommandBindings%2A> Essas associações são diferentes de associações de entrada em que eles representam o próximo nível para baixo de processamento do comando - ações que estão vinculados aos comandos conhecidos e manipuladores de classe específica para eles.      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a># # Uso do elemento de propriedade de XAML ```   <object>     <object.InputBindings>       oneOrMoreInputBindings  </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> # # XAML valores *oneOrMoreInputBindings* um ou mais <xref:System.Windows.Input.InputBinding>elementos (normalmente o <xref:System.Windows.Input.KeyBinding>ou <xref:System.Windows.Input.MouseBinding>classes derivadas).</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       Cada um deles deve ter um <xref:System.Windows.Input.InputBinding.Command%2A>e <xref:System.Windows.Input.InputBinding.Gesture%2A>conjunto de atributos.</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "A coleção de associações de entrada."
  overload: System.Windows.ContentElement.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
  fullName: System.Windows.ContentElement.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se esse elemento está habilitado no [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsEnabledProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsEnabledProperty>"
  example:
  - "The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> is set to IsEnabled `false`.  \n  \n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#isenabledismouseover)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento estiver habilitado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: ContentElement.IsEnabledChanged
  fullName: System.Windows.ContentElement.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.ContentElement.IsEnabled*>propriedade alterações neste elemento.</xref:System.Windows.ContentElement.IsEnabled*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
  fullName: System.Windows.ContentElement.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que se torna o valor de retorno <xref:System.Windows.ContentElement.IsEnabled*>em classes derivadas.</xref:System.Windows.ContentElement.IsEnabled*>"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento estiver habilitado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: ContentElement.IsEnabledProperty
  fullName: System.Windows.ContentElement.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsEnabled*>DependencyProperty.</xref:System.Windows.ContentElement.IsEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsFocused
  id: IsFocused
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsFocused
  nameWithType: ContentElement.IsFocused
  fullName: System.Windows.ContentElement.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que determina se este elemento tem foco lógico."
  remarks: "Foco lógico pode diferir em foco do teclado se um aplicativo tem várias divisões de foco, como entre o conteúdo do menu e o restante do aplicativo. Nesse cenário, o foco do teclado pode estar somente em um elemento de interface do usuário do aplicativo, no entanto, certos elementos em outras divisões foco ainda podem manter foco lógico. Para obter mais informações sobre o foco lógico, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md) e [visão geral de foco](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsFocusedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsFocusedProperty>"
  example:
  - "The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \n  \n [!code-xml[ContentElementsSmorgasbord#Focusable](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#focusable)]"
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento tem foco lógico. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: ContentElement.IsFocusedProperty
  fullName: System.Windows.ContentElement.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsFocused*>DependencyProperty.</xref:System.Windows.ContentElement.IsFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
  fullName: System.Windows.ContentElement.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se um sistema de método de entrada, como um [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)], está habilitado para processamento de entrada para esse elemento."
  remarks: "Essa propriedade retorna o valor retornado pela propriedade anexada <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>para os métodos de entrada atualmente habilitados (teclado, fala e outros dispositivos de entrada).</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se um método de entrada estiver ativo; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão da propriedade anexada subjacente é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>; no entanto, esse valor é influenciado pelo estado de métodos de entrada em tempo de execução."
  overload: System.Windows.ContentElement.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
  fullName: System.Windows.ContentElement.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se este elemento tem o foco do teclado."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento tem o foco do teclado. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: ContentElement.IsKeyboardFocusedChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.IsKeyboardFocused*>alterações de propriedade neste elemento.</xref:System.Windows.ContentElement.IsKeyboardFocused*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: ContentElement.IsKeyboardFocusedProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsKeyboardFocused*>DependencyProperty.</xref:System.Windows.ContentElement.IsKeyboardFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o foco do teclado é em qualquer lugar dentro do elemento ou elementos filho."
  remarks: "Alterações para o valor dessa propriedade normalmente geram o <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>evento, a menos que uma classe derivada substituiu <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A>para suprimir o evento.</xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>       Você não definir essa propriedade diretamente, mas você pode definir o foco para o elemento chamando <xref:System.Windows.ContentElement.Focus%2A>, ou fazendo uma <xref:System.Windows.ContentElement.MoveFocus%2A>solicitação.</xref:System.Windows.ContentElement.MoveFocus%2A> </xref:System.Windows.ContentElement.Focus%2A> Qualquer uma dessas chamadas de método pode alterar esse valor de propriedade.      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o foco do teclado está no elemento ou seus elementos filho; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: ContentElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da propriedade IsKeyboardFocusWithinChanged é alterado neste elemento."
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: ContentElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsKeyboardFocusWithin*>DependencyProperty.</xref:System.Windows.ContentElement.IsKeyboardFocusWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
  fullName: System.Windows.ContentElement.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o mouse é capturado por este elemento."
  remarks: "Estado de captura do mouse está relacionado a operações de arrastar e soltar no processo.      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsMouseCapturedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsMouseCapturedProperty>"
  example:
  - "The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.  \n  \n [!code-cs[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#ismousecaptured)]\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#ismousecaptured)]"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento tem captura do mouse. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: ContentElement.IsMouseCapturedChanged
  fullName: System.Windows.ContentElement.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.IsMouseCaptured*>alterações de propriedade neste elemento.</xref:System.Windows.ContentElement.IsMouseCaptured*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: ContentElement.IsMouseCapturedProperty
  fullName: System.Windows.ContentElement.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsMouseCaptured*>DependencyProperty.</xref:System.Windows.ContentElement.IsMouseCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
  fullName: System.Windows.ContentElement.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que determina se a captura do mouse é mantida por este elemento ou elementos filho em sua árvore do elemento."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esse elemento ou um elemento contido tem captura do mouse. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: ContentElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref href=&quot;System.Windows.ContentElement.IsMouseCaptureWithinProperty&quot;> </xref> alterações neste elemento."
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: ContentElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsMouseCaptureWithin*>DependencyProperty.</xref:System.Windows.ContentElement.IsMouseCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
  fullName: System.Windows.ContentElement.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a posição do ponteiro do mouse corresponde a resultados de teste, o que levar em conta a composição de elemento de ocorrências."
  remarks: "Ao contrário de <xref:System.Windows.ContentElement.IsMouseOver%2A>, essa propriedade é somente `true` se o ponteiro do mouse está sobre o elemento literal — assim como para um teste de hit.</xref:System.Windows.ContentElement.IsMouseOver%2A> Se o ponteiro do mouse está sobre um elemento filho, em particular sobre os elementos que fazem parte de um elemento modelo mais profundo e composição, essa propriedade será `false`. A menos que você sabe como um controle composto (por exemplo, você usa essa propriedade em um modelo de controle personalizado para um controle que você definir), essa propriedade pode retornar resultados inesperados. Na maioria dos cenários em que você está criando não controles, use <xref:System.Windows.ContentElement.IsMouseOver%2A>em vez disso.</xref:System.Windows.ContentElement.IsMouseOver%2A>       Se o mouse é capturado por esse elemento, e essa propriedade é `true` no momento da captura, esta propriedade continuarão a retornar `true` até que a captura do mouse é perdida e o ponteiro não é sobre seus limites.      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponteiro do mouse está sobre o mesmo resultado de elemento como um teste de hit; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: ContentElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.IsMouseDirectlyOver*>alterações de propriedade neste elemento.</xref:System.Windows.ContentElement.IsMouseDirectlyOver*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: ContentElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsMouseDirectlyOver*>DependencyProperty.</xref:System.Windows.ContentElement.IsMouseDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
  fullName: System.Windows.ContentElement.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o ponteiro do mouse está localizado sobre este elemento (incluindo elementos filho de visual ou a composição de controle)."
  remarks: "Embora não exista um evento &quot;IsMouseOverChanged&quot; análogo, faça vários eventos semelhantes. Por exemplo, você pode usar <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>e <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.</xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> </xref:System.Windows.ContentElement.MouseMove> </xref:System.Windows.ContentElement.MouseEnter>       Se este elemento captura o mouse, essa propriedade permanece `true` até que a captura do mouse é perdida e o ponteiro do mouse sai dos limites do elemento.      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsMouseOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsMouseOverProperty>"
  example:
  - "The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> reports IsMouseOver `true`.  \n  \n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#isenabledismouseover)]"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponteiro do mouse está sobre o elemento ou seus elementos filho; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: ContentElement.IsMouseOverProperty
  fullName: System.Windows.ContentElement.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsMouseOver*>DependencyProperty.</xref:System.Windows.ContentElement.IsMouseOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
  fullName: System.Windows.ContentElement.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a caneta é capturada para este elemento."
  remarks: "Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsStylusCapturedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento captura a caneta. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: ContentElement.IsStylusCapturedChanged
  fullName: System.Windows.ContentElement.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.IsStylusCaptured*>alterações de propriedade neste elemento.</xref:System.Windows.ContentElement.IsStylusCaptured*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: ContentElement.IsStylusCapturedProperty
  fullName: System.Windows.ContentElement.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsStylusCaptured*>DependencyProperty.</xref:System.Windows.ContentElement.IsStylusCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
  fullName: System.Windows.ContentElement.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que determina se a captura da caneta é mantida por esse elemento, incluindo elementos filho e a composição de controle."
  remarks: "Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a captura da caneta é mantida dentro desse elemento; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: ContentElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.IsStylusCaptureWithin*>alterações de propriedade neste elemento.</xref:System.Windows.ContentElement.IsStylusCaptureWithin*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: ContentElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsStylusCaptureWithin*>DependencyProperty.</xref:System.Windows.ContentElement.IsStylusCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
  fullName: System.Windows.ContentElement.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a posição de caneta corresponde a resultados de teste, o que levar em conta a composição de elemento de ocorrências."
  remarks: "Ao contrário de <xref:System.Windows.ContentElement.IsStylusOver%2A>, essa propriedade só é `true` se a caneta está sobre o elemento.</xref:System.Windows.ContentElement.IsStylusOver%2A> Se a caneta está em um elemento filho ou em elementos que fazem parte de composição de mais de um elemento, essa propriedade será `false`.       A menos que você sabe como um controle composto (por exemplo, você usa essa propriedade em um modelo de controle personalizado para um controle que você definir), essa propriedade pode retornar resultados inesperados. Na maioria dos cenários em que você está criando não controles, use <xref:System.Windows.ContentElement.IsStylusOver%2A>em vez disso.</xref:System.Windows.ContentElement.IsStylusOver%2A>       Se este elemento tem a captura da caneta e esta propriedade é `true` no momento da captura, esta propriedade permanece `true` até que a captura da caneta é perdida e não está sobre seus limites.       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a caneta está sobre o mesmo elemento como um teste de hit; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: ContentElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor de <xref:System.Windows.ContentElement.IsStylusDirectlyOver*>alterações de propriedade neste elemento.</xref:System.Windows.ContentElement.IsStylusDirectlyOver*>"
  remarks: "Esse membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] evento, não é um evento roteado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: ContentElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsStylusDirectlyOver*>DependencyProperty.</xref:System.Windows.ContentElement.IsStylusDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
  fullName: System.Windows.ContentElement.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a caneta está localizada sobre este elemento (incluindo elementos filhos visuais)."
  remarks: "Se este elemento tem a captura da caneta, essa propriedade permanece `true` até que a captura da caneta é perdida e o ponteiro está fora dos seus limites.       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a># # Informações de propriedade de dependência | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.IsStylusOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.ContentElement.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a caneta está sobre o elemento ou seus elementos filho; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: ContentElement.IsStylusOverProperty
  fullName: System.Windows.ContentElement.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.ContentElement.IsStylusOver*>DependencyProperty.</xref:System.Windows.ContentElement.IsStylusOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyDown
  id: KeyDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: ContentElement.KeyDown
  fullName: System.Windows.ContentElement.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é pressionada enquanto o foco está neste elemento."
  remarks: "Tratamento de chaves interage com outros recursos de plataforma como composição ordenar e texto. O evento KeyDown é um evento de entrada de texto de nível inferior pode não funcionar como esperado em determinados controles. Isso ocorre porque alguns controles tem composição de controle ou de tratamento de classe que fornece uma versão de nível mais alto de texto manipulação de entrada e eventos relacionados.       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>anexa para esta classe para que KeyDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> Manipuladores de eventos associados ao evento KeyDown são anexados ao subjacente <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.KeyDownEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewKeyDown>.</xref:System.Windows.ContentElement.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.KeyDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnKeyDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: ContentElement.KeyDownEvent
  fullName: System.Windows.ContentElement.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.KeyDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyUp
  id: KeyUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: ContentElement.KeyUp
  fullName: System.Windows.ContentElement.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é liberada enquanto o foco está neste elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>anexa para esta classe para que KeyUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> Manipuladores de eventos associados ao evento KeyUp são anexados ao subjacente <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.KeyUpEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewKeyUp>.</xref:System.Windows.ContentElement.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.KeyUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnKeyUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: ContentElement.KeyUpEvent
  fullName: System.Windows.ContentElement.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.KeyUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostFocus
  id: LostFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: ContentElement.LostFocus
  fullName: System.Windows.ContentElement.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde o foco lógico."
  remarks: "Foco lógico é diferente do foco do teclado, se o foco é deliberadamente forçado longe usando uma chamada de método, mas o foco do teclado anterior existe em um escopo diferente. Neste cenário, permanece de foco do teclado em que é e o elemento onde um <xref:System.Windows.ContentElement.Focus%2A>método é chamado ainda foco lógico obtém.</xref:System.Windows.ContentElement.Focus%2A>       Uma interpretação mais precisa desse evento é que ele é gerado quando o valor de <xref:System.Windows.ContentElement.IsFocused%2A>alterações de propriedade de um elemento na rota de `true` para `false`.</xref:System.Windows.ContentElement.IsFocused%2A>       Como esse evento usa roteamento bolha, o elemento que perde o foco pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que obteve o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_LostFocus&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.LostFocusEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.RoutedEventHandler>|      -Não há nenhum evento de túnel correspondente.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.ContentElement.LostFocusEvent>      -Substituir <xref:System.Windows.ContentElement.OnLostFocus%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: ContentElement.LostFocusEvent
  fullName: System.Windows.ContentElement.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: ContentElement.LostKeyboardFocus
  fullName: System.Windows.ContentElement.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado não está focalizado neste elemento."
  remarks: "Como esse evento usa roteamento bolha, o elemento que perdeu o foco pode ser um elemento filho, em vez do elemento onde o manipulador de eventos, na verdade, está conectado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que perdeu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>anexa para esta classe, para que LostKeyboardFocus faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> Manipuladores de eventos associados ao evento LostKeyboardFocus são anexados ao subjacente <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.</xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.LostKeyboardFocusEvent>      -Substituir <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: ContentElement.LostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.LostKeyboardFocus&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: ContentElement.LostMouseCapture
  fullName: System.Windows.ContentElement.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde a captura do mouse."
  remarks: "Quando um elemento captura o mouse, ele recebe entrada do mouse, mesmo que o ponteiro está fora dos seus limites. Normalmente, o mouse é capturado somente durante as operações de arrastar e soltar.       Como esse evento usa roteamento bolha, o elemento perde a captura do pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que perdeu captura.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>anexa para esta classe, para que LostMouseCapture faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> Manipuladores de eventos associados ao evento LostMouseCapture são anexados ao subjacente <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.LostMouseCaptureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.LostMouseCaptureEvent>      -Substituir <xref:System.Windows.ContentElement.OnLostMouseCapture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: ContentElement.LostMouseCaptureEvent
  fullName: System.Windows.ContentElement.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.LostMouseCapture&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: ContentElement.LostStylusCapture
  fullName: System.Windows.ContentElement.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde a captura da caneta."
  remarks: "Quando um elemento captura a caneta, ele recebe entrada de caneta mesmo que o ponteiro está fora dos seus limites. Normalmente, a caneta é capturada somente durante as operações de arrastar e soltar.       Como esse evento usa roteamento bolha, o elemento que perde o foco pode ser um elemento de filho em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que perdeu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>anexa para esta classe, para que LostStylusCapture faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> Manipuladores de eventos associados ao evento LostStylusCapture são anexados ao subjacente <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.LostStylusCaptureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.LostStylusCaptureEvent>      -Substituir <xref:System.Windows.ContentElement.OnLostStylusCapture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: ContentElement.LostStylusCaptureEvent
  fullName: System.Windows.ContentElement.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.LostStylusCapture&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: ContentElement.LostTouchCapture
  fullName: System.Windows.ContentElement.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde a captura de toque."
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.LostTouchCaptureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Substituir <xref:System.Windows.ContentElement.OnLostTouchCapture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: ContentElement.LostTouchCaptureEvent
  fullName: System.Windows.ContentElement.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.LostTouchCapture&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseDown
  id: MouseDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: ContentElement.MouseDown
  fullName: System.Windows.ContentElement.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do mouse é pressionado enquanto o ponteiro está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>anexa para esta classe, para que MouseDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Manipuladores de eventos associados ao evento MouseDown são anexados ao subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       O evento MouseDown geralmente é gerado junto com o <xref:System.Windows.ContentElement.MouseLeftButtonDown>ou <xref:System.Windows.ContentElement.MouseRightButtonDown>, que corresponde a um pressionamento de um dos dois botões de mouse padrão.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement.MouseLeftButtonDown> <xref:System.Windows.ContentElement.MouseLeftButtonDown>e <xref:System.Windows.ContentElement.MouseRightButtonDown>também são eventos roteados, mas são eventos roteados diretos e o evento específico do botão apropriado é gerado quando o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento atinge esse elemento na rota de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement.MouseRightButtonDown></xref:System.Windows.ContentElement.MouseLeftButtonDown> Consulte os comentários ou <xref:System.Windows.ContentElement.MouseLeftButtonDown> <xref:System.Windows.ContentElement.MouseRightButtonDown>.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement.MouseLeftButtonDown>      > [!IMPORTANT] > Alguns <xref:System.Windows.ContentElement>as classes derivadas que têm o comportamento do controle como, por exemplo, <xref:System.Windows.Documents.Hyperlink>, pode ter o tratamento de eventos do botão do mouse inerente à classe.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.ContentElement> O botão esquerdo do mouse para baixo de evento é o evento mais provável para ter um controle de manipulação de classe. A classe tratamento geralmente marca subjacente <xref:System.Windows.Input.Mouse>classe de evento como manipulado.</xref:System.Windows.Input.Mouse> Depois que o evento é marcado como tratado, outros manipuladores de instância associados a esse elemento normalmente não são gerados. Outros classe ou instância manipuladores anexados a elementos na direção bolha na direção da raiz na árvore de interface do usuário também normalmente não são gerados.       Você pode resolver o problema que é descrito na importante anterior e ainda recebe eventos MouseDown para o botão esquerdo do mouse para baixo de eventos em uma classe derivada que tem classe tratamento usando qualquer uma dessas soluções:-anexar manipuladores para o <xref:System.Windows.ContentElement.PreviewMouseDown>evento, que não está marcado como manipulados pelos controles.</xref:System.Windows.ContentElement.PreviewMouseDown> Observe que, porque esse é um evento de visualização, a rota iniciado na raiz e túneis para o controle.      -Registrar um manipulador no controle de maneira procedural chamando <xref:System.Windows.ContentElement.AddHandler%2A>e escolhendo a opção de assinatura que permite que os manipuladores escutar eventos mesmo se eles ainda estão marcados como manipulados nos dados de evento roteado.</xref:System.Windows.ContentElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseDownEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewMouseDown>.</xref:System.Windows.ContentElement.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnMouseDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: ContentElement.MouseDownEvent
  fullName: System.Windows.ContentElement.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: ContentElement.MouseEnter
  fullName: System.Windows.ContentElement.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do mouse entra nos limites deste elemento."
  remarks: "MouseEnter é um [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) que usa o estratégia de roteamento de manipulação de eventos direto. Os eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, elas permitem que outros aspectos do comportamento de eventos roteados, como disparadores em estilos de eventos.       Embora MouseEnter controla quando o ponteiro do mouse entra nos limites de um elemento, esse evento mais literalmente informa que o <xref:System.Windows.ContentElement.IsMouseOver%2A>o valor da propriedade foi alterado de `false` para `true` neste elemento.</xref:System.Windows.ContentElement.IsMouseOver%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>anexa para esta classe, para que os eventos MouseEnter faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> Manipuladores de eventos associados ao evento MouseEnter são anexados ao subjacente <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseEnter&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseEnterEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnMouseEnter%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: ContentElement.MouseEnterEvent
  fullName: System.Windows.ContentElement.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseEnter&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: ContentElement.MouseLeave
  fullName: System.Windows.ContentElement.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do mouse sai dos limites deste elemento."
  remarks: "MouseLeave é um [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) que usa o estratégia de roteamento de manipulação de eventos direto. Os eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, elas permitem que outros aspectos do comportamento de eventos roteados, como disparadores em estilos de eventos.       Embora MouseLeave controla quando o mouse sai de um elemento, esse evento mais literalmente informa que o <xref:System.Windows.ContentElement.IsMouseOver%2A>o valor da propriedade foi alterado de `true` para `false` neste elemento.</xref:System.Windows.ContentElement.IsMouseOver%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>anexa para esta classe, para que MouseLeave faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> Manipuladores de eventos associados ao evento MouseLeave são anexados ao subjacente <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseLeave&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseLeaveEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnMouseLeave%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: ContentElement.MouseLeaveEvent
  fullName: System.Windows.ContentElement.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseLeave&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: ContentElement.MouseLeftButtonDown
  fullName: System.Windows.ContentElement.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota bolha por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      > [!IMPORTANT] > Alguns <xref:System.Windows.ContentElement>as classes derivadas que têm o comportamento do controle como, por exemplo, <xref:System.Windows.Documents.Hyperlink>, pode ter o tratamento de eventos do botão do mouse inerente à classe.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.ContentElement> O botão esquerdo do mouse para baixo de evento é o evento mais provável para ter um controle de manipulação de classe. A classe tratamento geralmente marca subjacente <xref:System.Windows.Input.Mouse>classe de evento como manipulado.</xref:System.Windows.Input.Mouse> Depois que o evento é marcado como tratado, outros manipuladores de instância associados a esse elemento normalmente não são gerados. Outros classe ou instância manipuladores anexados a elementos na direção bolha na direção da raiz na árvore de interface do usuário também normalmente não são gerados.       Você pode resolver o problema que é descrito na importante anterior e ainda recebe eventos MouseLeftButtonDown para o botão esquerdo do mouse para baixo de eventos em uma classe derivada que tem classe tratamento usando qualquer uma dessas soluções:-anexar manipuladores para o <xref:System.Windows.ContentElement.PreviewMouseDown>evento, que não está marcado como manipulados pelos controles.</xref:System.Windows.ContentElement.PreviewMouseDown> Observe que, porque esse é um evento de visualização, a rota iniciado na raiz e túneis para o controle.      -Registrar um manipulador no controle de maneira procedural chamando <xref:System.Windows.ContentElement.AddHandler%2A>e escolhendo a opção de assinatura que permite que os manipuladores escutar eventos mesmo se eles ainda estão marcados como manipulados nos dados de evento roteado.</xref:System.Windows.ContentElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: ContentElement.MouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: ContentElement.MouseLeftButtonUp
  fullName: System.Windows.ContentElement.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota bolha por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: ContentElement.MouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseMove
  id: MouseMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: ContentElement.MouseMove
  fullName: System.Windows.ContentElement.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do mouse se move enquanto está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>anexa para esta classe, para que MouseMove faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> Manipuladores de eventos associados ao evento MouseMove são anexados ao subjacente <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseMoveEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewMouseMove>.</xref:System.Windows.ContentElement.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.MouseMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnMouseMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: ContentElement.MouseMoveEvent
  fullName: System.Windows.ContentElement.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseMove&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: ContentElement.MouseRightButtonDown
  fullName: System.Windows.ContentElement.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota bolha por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>       Eventos do botão direito do mouse frequentemente têm tratamento nativo em cenários de aplicativo. Por exemplo, um botão direito do mouse para baixo pode exibir um menu de contexto. Consulte [visão geral do ContextMenu](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: ContentElement.MouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseRightButtonDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: ContentElement.MouseRightButtonUp
  fullName: System.Windows.ContentElement.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota bolha por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: ContentElement.MouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseRightButtonUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseUp
  id: MouseUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: ContentElement.MouseUp
  fullName: System.Windows.ContentElement.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do mouse é liberado sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>anexa para esta classe, para que MouseUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Manipuladores de eventos associados ao evento MouseUp são anexados ao subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       O evento MouseUp geralmente é gerado junto com o <xref:System.Windows.ContentElement.MouseLeftButtonUp>ou <xref:System.Windows.ContentElement.MouseRightButtonUp>, que corresponde a uma versão de um dos dois botões de mouse padrão.</xref:System.Windows.ContentElement.MouseRightButtonUp> </xref:System.Windows.ContentElement.MouseLeftButtonUp> <xref:System.Windows.ContentElement.MouseLeftButtonUp>e <xref:System.Windows.ContentElement.MouseRightButtonUp>também são eventos roteados, mas são eventos roteados diretos e o evento específico do botão apropriado é gerado quando o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento atinge esse elemento na rota de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement.MouseRightButtonUp></xref:System.Windows.ContentElement.MouseLeftButtonUp> Consulte os comentários ou <xref:System.Windows.ContentElement.MouseLeftButtonUp> <xref:System.Windows.ContentElement.MouseRightButtonUp>.</xref:System.Windows.ContentElement.MouseRightButtonUp> </xref:System.Windows.ContentElement.MouseLeftButtonUp>      <a name=&quot;routedEventInfo_MouseUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseUpEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewMouseUp>.</xref:System.Windows.ContentElement.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnMouseUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: ContentElement.MouseUpEvent
  fullName: System.Windows.ContentElement.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseWheel
  nameWithType: ContentElement.MouseWheel
  fullName: System.Windows.ContentElement.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o usuário gira a roda do mouse enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Captura de foco ou mouse têm precedência sobre onde o ponteiro do mouse é; Portanto, se você receber o evento MouseWheel um elemento focalizado ou capturado, o ponteiro do mouse, na verdade, pode ser em outro elemento.       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>anexa para esta classe, para que MouseWheel faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> Manipuladores de eventos associados ao evento MouseWheel são anexados ao subjacente <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseWheel&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.MouseWheelEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.MouseWheelEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewMouseWheel>.</xref:System.Windows.ContentElement.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.ContentElement.MouseWheelEvent>      -Substituir <xref:System.Windows.ContentElement.OnMouseWheel%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: ContentElement.MouseWheelEvent
  fullName: System.Windows.ContentElement.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.MouseWheel&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: ContentElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.ContentElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tenta mover o foco deste elemento para outro elemento. A direção para mover o foco é especificada uma direção da orientação, que é interpretada dentro da organização do visual pai para este elemento."
  remarks: "Certifique-se de que verificar o valor de retorno deste método. Um valor de retorno `false` pode ser retornado se o percurso é executado em uma parada de tabulação é definida pela composição de um controle e a solicitação de passagem não solicitou a encapsular."
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "Uma solicitação de passagem, que contém uma propriedade que indica o modo de percorrer em ordem de tabulação existente ou uma direção para mover visualmente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o percurso solicitado foi executado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: ContentElement.OnCreateAutomationPeer()
  fullName: System.Windows.ContentElement.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Retorna a classe específica <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> implementações para o [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infraestrutura."
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "O tipo específico <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> implementação."
  overload: System.Windows.ContentElement.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: ContentElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: ContentElement.OnDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "O <xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;> </xref> eventos roteados usando os dados de evento fornecidos."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Um <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> que contém dados do evento. Esses dados de evento devem conter o identificador para o <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;> </xref> eventos."
  overload: System.Windows.ContentElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.GotTouchCapture&quot;> </xref> eventos roteados que ocorre quando um toque é capturado para este elemento."
  remarks: "O método OnGotTouchCapture não tem nenhuma implementação padrão. Substituir OnGotTouchCapture em uma classe derivada para manipular o <xref:System.Windows.ContentElement.GotTouchCapture>evento.</xref:System.Windows.ContentElement.GotTouchCapture> Certifique-se de chamar o método de OnGotTouchCapture da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsKeyboardFocusedChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor de <xref:System.Windows.ContentElement.IsKeyboardFocused%2A>alterações de propriedade de dependência.</xref:System.Windows.ContentElement.IsKeyboardFocused%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Observe que o <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>não é um evento roteado.</xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado antes de <xref href=&quot;System.Windows.ContentElement.IsKeyboardFocusWithinChanged&quot;> </xref> é gerado por este elemento. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor da <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A>seu valor de propriedade de dependência é alterado.</xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Observe que o <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>não é um evento roteado.</xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Um <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsMouseCapturedChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor da <xref:System.Windows.ContentElement.IsMouseCaptured%2A>seu valor de propriedade de dependência é alterado.</xref:System.Windows.ContentElement.IsMouseCaptured%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsMouseCapturedChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsMouseCapturedChanged> Observe que o <xref:System.Windows.ContentElement.IsMouseCapturedChanged>não é um evento roteado.</xref:System.Windows.ContentElement.IsMouseCapturedChanged> Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsMouseCaptureWithinChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Um <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsMouseDirectlyOverChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor da <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A>seu valor de propriedade de dependência é alterado.</xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Observe que o <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>não é um evento roteado.</xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsStylusCapturedChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor da <xref:System.Windows.ContentElement.IsStylusCaptured%2A>seu valor de propriedade de dependência é alterado.</xref:System.Windows.ContentElement.IsStylusCaptured%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsStylusCapturedChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsStylusCapturedChanged> Observe que o evento não é um evento roteado. Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Um <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsStylusCaptureWithinChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor da <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A>seu valor de propriedade de dependência é alterado.</xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> Observe que o evento não é um evento roteado. Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.IsStylusDirectlyOverChanged&quot;> </xref> neste elemento é gerado. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método virtual é gerado quando o valor da <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A>seu valor de propriedade de dependência é alterado.</xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> O método virtual é gerado pela primeira vez e pode manipular os dados de evento conforme necessário. O <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged>é gerado com essa mesma instância de dados de evento.</xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> Observe que o evento não é um evento roteado. Portanto, você não pode marcá-lo tratados no manipulador de classe.       Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> eventos roteados usando os dados de evento que são fornecidos."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Um <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> que contém dados do evento. Esses dados de evento devem conter o identificador para o <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> eventos."
  overload: System.Windows.ContentElement.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém dados do evento."
  overload: System.Windows.ContentElement.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém dados do evento."
  overload: System.Windows.ContentElement.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém dados do evento."
  overload: System.Windows.ContentElement.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.LostTouchCapture&quot;> </xref> eventos roteados que ocorre quando este elemento perde a captura de toque."
  remarks: "O método OnLostTouchCapture não tem nenhuma implementação padrão. Substituir OnLostTouchCapture em uma classe derivada para manipular o <xref:System.Windows.ContentElement.LostTouchCapture>evento.</xref:System.Windows.ContentElement.LostTouchCapture> Certifique-se de chamar o método de OnLostTouchCapture da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Esses dados de evento relata detalhes sobre o botão do mouse foi pressionado e o estado manipulado."
  overload: System.Windows.ContentElement.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; anexado é gerado neste elemento. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante de [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado, com uma estratégia de roteamento direto. Marcar o evento como tratado ainda é útil para que os manipuladores de instância típica (aquelas que não especificam `handledEventsToo`) seja chamado."
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; anexado é gerado neste elemento. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante de [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado, com uma estratégia de roteamento direto. Marcar o evento como tratado ainda é útil para que os manipuladores de instância típica (aquelas que não especificam `handledEventsToo`) seja chamado."
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonDown&quot;> </xref> é roteado gerado neste elemento. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.MouseLeftButtonDown>evento parece viajam bolha, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>é o evento subjacente que é roteada de bolha e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.MouseLeftButtonDown>.</xref:System.Windows.ContentElement.MouseLeftButtonDown> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.MouseLeftButtonDown>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.MouseLeftButtonDown> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnMouseLeftButtonDown.</xref:System.Windows.ContentElement>       Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende de seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes ancestral que também pretende invocar OnMouseLeftButtonDown. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Button>e substituir OnMouseLeftButtonDown em sua classe derivada sem chamar a implementação base; no entanto, isso pode substituir desabilita o <xref:System.Windows.Controls.Primitives.ButtonBase.Click>evento.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão esquerdo do mouse foi pressionado."
  overload: System.Windows.ContentElement.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonUp&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.MouseLeftButtonUp>evento parece viajam bolha, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>é o evento subjacente que é roteada de bolha e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.MouseLeftButtonUp>.</xref:System.Windows.ContentElement.MouseLeftButtonUp> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.MouseLeftButtonUp>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.MouseLeftButtonUp> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnMouseLeftButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão esquerdo foi liberado."
  overload: System.Windows.ContentElement.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.MouseRightButtonDown&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.MouseRightButtonDown>evento parece viajam bolha, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>é o evento subjacente que é roteada de bolha e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.MouseRightButtonDown>.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.MouseRightButtonDown>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.MouseRightButtonDown> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnMouseRightButtonDown.</xref:System.Windows.ContentElement>       Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende de seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes ancestral que também pretende invocar OnMouseRightButtonDown. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Control>e substituir OnMouseRightButtonDown em sua classe derivada sem base chamada; no entanto, essa substituição desativa os serviços de menu de contexto do controle, que fazem parte do <xref:System.Windows.Controls.Control>comportamento padrão.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão direito do mouse foi pressionado."
  overload: System.Windows.ContentElement.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.MouseRightButtonUp&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.MouseRightButtonUp>evento parece viajam bolha, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>é o evento subjacente que é roteada de bolha e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.MouseRightButtonUp>.</xref:System.Windows.ContentElement.MouseRightButtonUp> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.MouseRightButtonUp>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.MouseRightButtonUp> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnMouseRightButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão direito foi liberado."
  overload: System.Windows.ContentElement.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão do mouse foi liberado."
  overload: System.Windows.ContentElement.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "O <xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; anexado evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que um ou mais botões de mouse foram pressionados."
  overload: System.Windows.ContentElement.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonDown&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>evento parece uma rota de túnel de viagem, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnPreviewMouseLeftButtonDown.</xref:System.Windows.ContentElement>       Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende de seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes ancestral que também pretende invocar OnPreviewMouseLeftButtonDown. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Button>e substituir OnPreviewMouseLeftButtonDown em sua classe derivada sem chamar a implementação base; no entanto, isso pode substituir desabilita o <xref:System.Windows.Controls.Primitives.ButtonBase.Click>evento.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão esquerdo do mouse foi pressionado."
  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonUp&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>evento parece uma rota de túnel de viagem, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnPreviewMouseLeftButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão esquerdo foi liberado."
  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonDown&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>evento parece uma rota de túnel de viagem, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.MouseRightButtonDown>.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnPreviewMouseRightButtonDown.</xref:System.Windows.ContentElement>       Como alternativa, você pode substituir esse método para alterar a manipulação de eventos para um estado específico de mouse. Se você optar por chamar a implementação base depende de seu cenário. Falha ao chamar base desabilita a manipulação de entrada padrão para o evento do mouse em classes ancestral que também pretende invocar OnPreviewMouseRightButtonDown. Por exemplo, você pode derivar de <xref:System.Windows.Controls.Control>e substituir OnPreviewMouseRightButtonDown em sua classe derivada sem base chamada; no entanto, essa substituição desativa os serviços de menu de contexto do controle, que fazem parte do <xref:System.Windows.Controls.Control>comportamento padrão.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão direito do mouse foi pressionado."
  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonUp&quot;> </xref> evento roteado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "O <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>evento parece uma rota de túnel de viagem, mas realmente passa de uma maneira indireta.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>é o evento subjacente que é roteado de túnel e cada <xref:System.Windows.ContentElement>ao longo do evento rota usa idênticos tratamento para acionar o evento roteado direto <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Embora você pode marcar a <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>evento como manipulado para fins deste elemento, o estado manipulado não perpetuar a outros elementos na rota de evento.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> No entanto, você talvez queira marcar o evento como manipulado para evitar que os manipuladores de instância geral (aquelas que não especificou `handledEventsToo`) seja chamado.       A implementação padrão de mouse geral manipulação de eventos no <xref:System.Windows.ContentElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>e o converte em um evento local apropriado.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Se você deseja substituir essa lógica, você deve criar uma classe derivada. No construtor estático da classe derivada, registra um manipulador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Você não pode alterar o comportamento de manipulação de mouse <xref:System.Windows.ContentElement>substituindo OnPreviewMouseRightButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que o botão direito foi liberado."
  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados de evento. Os dados de evento informa que um ou mais botões foram liberados."
  overload: System.Windows.ContentElement.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "O <xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "O <xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.PreviewTouchDown&quot;> </xref> eventos roteados que ocorre quando um toque pressiona esse elemento."
  remarks: "O método OnPreviewTouchDown não tem nenhuma implementação padrão. Substituir OnPreviewTouchDown em uma classe derivada para manipular o <xref:System.Windows.ContentElement.PreviewTouchDown>evento.</xref:System.Windows.ContentElement.PreviewTouchDown> Certifique-se de chamar o método de OnPreviewTouchDown da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.PreviewTouchMove&quot;> </xref> eventos roteados que ocorre quando um toque se move enquanto está dentro desse elemento."
  remarks: "O método OnPreviewTouchMove não tem nenhuma implementação padrão. Substituir OnPreviewTouchMove em uma classe derivada para manipular o <xref:System.Windows.ContentElement.PreviewTouchMove>evento.</xref:System.Windows.ContentElement.PreviewTouchMove> Certifique-se de chamar o método de OnPreviewTouchMove da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.PreviewTouchUp&quot;> </xref> eventos roteados que ocorre quando um toque seja liberado dentro desse elemento."
  remarks: "O método OnPreviewTouchUp não tem nenhuma implementação padrão. Substituir OnPreviewTouchUp em uma classe derivada para manipular o <xref:System.Windows.ContentElement.PreviewTouchUp>evento.</xref:System.Windows.ContentElement.PreviewTouchUp> Certifique-se de chamar o método de OnPreviewTouchUp da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "O <xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.ContentElement.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "O <xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; anexado é gerado por este elemento. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante ao [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. Marcar o evento como tratado ainda é útil para que os manipuladores de instância típica (aquelas que não especificam `handledEventsToo`) seja chamado."
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; anexado é gerado por este elemento. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "Esse método não tem nenhuma implementação padrão. Como uma classe intermediária na herança pode implementar esse método, é recomendável que você chamar a implementação base em sua implementação. Você pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante ao [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de evento em * métodos: esse método fornece os meios para manipular o evento correspondente de classes derivadas, estabelecendo um manipulador de classe em vez de um manipulador de instância. Nesse caso, o evento correspondente é um evento roteado. Marcar o evento como tratado ainda é útil para que os manipuladores de instância típica (aquelas que não especificam `handledEventsToo`) seja chamado."
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando um sem tratamento &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; evento anexado atinge um elemento em sua rota que é derivada dessa classe. Implemente esse método para adicionar a manipulação de classe para esse evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "O <xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.TouchDown&quot;> </xref> eventos roteados que ocorre quando um toque pressiona dentro desse elemento."
  remarks: "O método OnTouchDown não tem nenhuma implementação padrão. Substituir OnTouchDown em uma classe derivada para manipular o <xref:System.Windows.ContentElement.TouchDown>evento.</xref:System.Windows.ContentElement.TouchDown> Certifique-se de chamar o método de OnTouchDown da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.TouchEnter&quot;> </xref> eventos roteados que ocorre quando um toque move de fora para dentro dos limites deste elemento."
  remarks: "O método OnTouchEnter não tem nenhuma implementação padrão. Substituir OnTouchEnter em uma classe derivada para manipular o <xref:System.Windows.ContentElement.TouchEnter>evento.</xref:System.Windows.ContentElement.TouchEnter> Certifique-se de chamar o método de OnTouchEnter da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.TouchLeave&quot;> </xref> eventos roteados que ocorre quando um toque move de dentro para fora dos limites deste elemento."
  remarks: "O método OnTouchLeave não tem nenhuma implementação padrão. Substituir OnTouchLeave em uma classe derivada para manipular o <xref:System.Windows.ContentElement.TouchLeave>evento.</xref:System.Windows.ContentElement.TouchLeave> Certifique-se de chamar o método de OnTouchLeave da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.TouchMove&quot;> </xref> eventos roteados que ocorre quando um toque se move enquanto está dentro desse elemento."
  remarks: "O método OnTouchMove não tem nenhuma implementação padrão. Substituir OnTouchMove em uma classe derivada para manipular o <xref:System.Windows.ContentElement.TouchMove>evento.</xref:System.Windows.ContentElement.TouchMove> Certifique-se de chamar o método de OnTouchMove da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a manipulação de classe para o <xref href=&quot;System.Windows.ContentElement.TouchUp&quot;> </xref> eventos roteados que ocorre quando um toque seja liberado dentro desse elemento."
  remarks: "O método OnTouchUp não tem nenhuma implementação padrão. Substituir OnTouchUp em uma classe derivada para manipular o <xref:System.Windows.ContentElement.TouchUp>evento.</xref:System.Windows.ContentElement.TouchUp> Certifique-se de chamar o método de OnTouchUp da classe base para que as classes base recebem o evento."
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Um <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Windows.ContentElement.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.ContentElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituído em uma classe derivada, retorna o elemento que deve receber o foco para uma direção de passagem do foco especificado, sem realmente mover o foco para esse elemento."
  remarks: "A implementação padrão desse método nessa classe incompleta e sempre retorna `null`."
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "A direção da passagem foco solicitada."
    return:
      type: System.Windows.DependencyObject
      description: "O elemento que seria recebidos foco se <xref:System.Windows.ContentElement.MoveFocus*>realmente foram chamados.</xref:System.Windows.ContentElement.MoveFocus*>"
  overload: System.Windows.ContentElement.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: ContentElement.PreviewDragEnter
  fullName: System.Windows.ContentElement.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar subjacente com esse elemento como o destino de arrastar."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>anexa para esta classe, para que PreviewDragEnter faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewDragEnter são anexados ao subjacente <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewDragEnterEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.DragEnter>.</xref:System.Windows.ContentElement.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDragEnterEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: ContentElement.PreviewDragEnterEvent
  fullName: System.Windows.ContentElement.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewDragEnter&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: ContentElement.PreviewDragLeave
  fullName: System.Windows.ContentElement.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar subjacente com esse elemento como origem de arrastar."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>anexa para esta classe, para que PreviewDragLeave faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewDragLeave são anexados ao subjacente <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.DragLeave>.</xref:System.Windows.ContentElement.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDragLeaveEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: ContentElement.PreviewDragLeaveEvent
  fullName: System.Windows.ContentElement.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewDragLeave&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: ContentElement.PreviewDragOver
  fullName: System.Windows.ContentElement.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento arrastar subjacente com esse elemento como o destino de soltar potencial."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>anexa para esta classe, para que PreviewDragOver faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewDragOver são anexados ao subjacente <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewDragOverEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.DragOver>.</xref:System.Windows.ContentElement.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDragOverEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewDragOver%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: ContentElement.PreviewDragOverEvent
  fullName: System.Windows.ContentElement.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewDragOver&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: ContentElement.PreviewDrop
  fullName: System.Windows.ContentElement.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada relata um evento soltar subjacente com esse elemento como o destino de soltar."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>anexa para esta classe, para que PreviewDrop faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewDrop são anexados ao subjacente <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewDropEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.Drop>.</xref:System.Windows.ContentElement.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDropEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewDrop%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: ContentElement.PreviewDropEvent
  fullName: System.Windows.ContentElement.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewDrop&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: ContentElement.PreviewGiveFeedback
  fullName: System.Windows.ContentElement.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma operação de arrastar e soltar é iniciada."
  remarks: "O evento PreviewGiveFeedback permite que a origem de um evento arrastar para modificar a aparência do ponteiro do mouse, para fornecer os comentários visuais do usuário durante uma operação de arrastar e soltar.       Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>anexa para esta classe, para que PreviewGiveFeedback faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewGiveFeedback são anexados ao subjacente <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.GiveFeedbackEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.GiveFeedback>.</xref:System.Windows.ContentElement.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: ContentElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewGiveFeedback&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: ContentElement.PreviewGotKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado está focalizado neste elemento."
  remarks: "Como esse evento usa o encapsulamento de roteamento, o elemento que tem o foco seja um elemento filho, em vez do elemento onde o manipulador de eventos, na verdade, está conectado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento que tem o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>anexa para esta classe, para que PreviewGotKeyboardFocus faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewGotKeyboardFocus são anexados ao subjacente <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.GotKeyboardFocus>.</xref:System.Windows.ContentElement.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewGotKeyboardFocus&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: ContentElement.PreviewKeyDown
  fullName: System.Windows.ContentElement.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é pressionada enquanto o teclado está focalizado neste elemento."
  remarks: "Tratamento de chaves interage com outros recursos de plataforma como composição ordenar e texto. O <xref:System.Windows.ContentElement.KeyDown>é um evento de entrada de texto de nível inferior pode não funcionar como esperado em determinados controles.</xref:System.Windows.ContentElement.KeyDown> Isso ocorre porque alguns controles tem composição de controle ou de tratamento de classe que fornece uma versão de nível mais alto de texto manipulação de entrada e eventos relacionados.       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>anexa para esta classe, para que PreviewKeyDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewKeyDown são anexados ao subjacente <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewKeyDownEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.KeyDown>.</xref:System.Windows.ContentElement.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.PreviewKeyDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: ContentElement.PreviewKeyDownEvent
  fullName: System.Windows.ContentElement.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewKeyDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: ContentElement.PreviewKeyUp
  fullName: System.Windows.ContentElement.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é liberada enquanto o teclado está focalizado neste elemento."
  remarks: "Tratamento de chaves interage com outros recursos de plataforma como composição ordenar e texto. O <xref:System.Windows.ContentElement.KeyUp>é um evento de entrada de texto de nível inferior pode não funcionar como esperado em determinados controles.</xref:System.Windows.ContentElement.KeyUp> Isso ocorre porque alguns controles tem composição de controle ou de tratamento de classe que fornece uma versão de nível mais alto de texto manipulação de entrada e eventos relacionados. Para obter detalhes, consulte a documentação para os controles individuais.       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>anexa para esta classe, para que PreviewKeyUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewKeyUp são anexados ao subjacente <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewKeyUpEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.KeyUp>.</xref:System.Windows.ContentElement.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.PreviewKeyUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: ContentElement.PreviewKeyUpEvent
  fullName: System.Windows.ContentElement.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewKeyUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: ContentElement.PreviewLostKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado não está focalizado neste elemento."
  remarks: "Como esse evento usa o encapsulamento de roteamento, o elemento que perdeu o foco pode ser um elemento filho, em vez do elemento em que o manipulador de eventos, na verdade, está anexado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de evento para determinar o elemento real que perdeu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>anexa para esta classe, para que PreviewLostKeyboardFocus faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewLostKeyboardFocus são anexados ao subjacente <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.LostKeyboardFocus>.</xref:System.Windows.ContentElement.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewLostKeyboardFocus&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: ContentElement.PreviewMouseDown
  fullName: System.Windows.ContentElement.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do mouse é pressionado enquanto o ponteiro está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>anexa para esta classe, para que PreviewMouseDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewMouseDown são anexados ao subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       O evento de PreviewMouseDown geralmente é lançado junto com o <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>ou <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, que corresponde a um pressionamento de um dos dois botões de mouse padrão.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>e <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>também são eventos roteados, mas são eventos roteados diretos e o evento específico do botão apropriado é gerado quando o <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento atinge esse elemento na rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseRightButtonDown></xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> Consulte os comentários ou <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseDownEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.MouseDown>.</xref:System.Windows.ContentElement.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: ContentElement.PreviewMouseDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: ContentElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota de túnel por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: ContentElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota de túnel por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: ContentElement.PreviewMouseMove
  fullName: System.Windows.ContentElement.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do mouse se move enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Esse evento ocorre quando o ponteiro do mouse entra pela primeira vez dos limites do elemento, e também quando o ponteiro do mouse se move enquanto ainda resta dentro dos limites do elemento.       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>anexa para esta classe, para que PreviewMouseMove faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewMouseMove são anexados ao subjacente <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.MouseMove>.</xref:System.Windows.ContentElement.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.PreviewMouseMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: ContentElement.PreviewMouseMoveEvent
  fullName: System.Windows.ContentElement.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseMove&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: ContentElement.PreviewMouseRightButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do mouse é pressionado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota de túnel por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: ContentElement.PreviewMouseRightButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Embora isso [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) parece siga uma rota de túnel por meio de uma árvore de elementos, na verdade, é um evento roteado direto que é gerado e geradas novamente ao longo da árvore de elementos por cada <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Esse evento é um dos vários eventos relacionados que relatam as especificações de botão do mouse de uma base <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento, que é um evento que é processado por cada elemento de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Os argumentos desse evento expõem os argumentos de subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Se esse evento é marcado como manipulado na rota de evento, os eventos específicos do botão do mouse ainda são gerados; No entanto, os manipuladores de eventos específicos de botão do mouse devem ser adicionados explicitamente chamando <xref:System.Windows.ContentElement.AddHandler%2A>, com a opção para lidar com eventos que já estão marcados como manipulados, para ser ouvintes para o evento.</xref:System.Windows.ContentElement.AddHandler%2A>       Pense conceitualmente, esse evento (e outros eventos de botão do mouse em <xref:System.Windows.ContentElement>) para ser um mouse &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> O evento adiciona a conveniência de não precisar verificar os estados de botão do mouse (esquerda-direita, para cima para baixo) dos eventos de mouse original nos dados do evento. Para cenários mais avançados, como verificação de estados de botões não padrão, talvez seja necessário usar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] de <xref:System.Windows.Input.Mouse>classe em vez daqueles em <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: ContentElement.PreviewMouseUp
  fullName: System.Windows.ContentElement.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do mouse é liberado enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>anexa para esta classe, para que PreviewMouseUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewMouseUp são anexados ao subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       O evento de PreviewMouseUp geralmente é lançado junto com o <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>ou <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, que corresponde a um pressionamento de um dos dois botões de mouse padrão.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>e <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>também são eventos roteados, mas são eventos roteados diretos e o evento específico do botão apropriado é gerado quando o <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento atinge esse elemento na rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseRightButtonUp></xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> Consulte os comentários ou <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseUpEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.MouseUp>.</xref:System.Windows.ContentElement.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: ContentElement.PreviewMouseUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: ContentElement.PreviewMouseWheel
  fullName: System.Windows.ContentElement.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o usuário gira a roda do mouse enquanto o ponteiro do mouse está sobre este elemento."
  remarks: "Captura de foco ou mouse têm precedência sobre onde o ponteiro do mouse é; Portanto, se você receber esse evento de um elemento focalizado ou capturado, o ponteiro do mouse, na verdade, pode ser em outro elemento.       Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>evento para esta classe anexado para que <xref:System.Windows.ContentElement.PreviewMouseMove>faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.ContentElement.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> Manipuladores de eventos que estão anexados ao <xref:System.Windows.ContentElement.PreviewMouseMove>evento associado subjacente <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseMove>      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseWheelEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.MouseWheel>.</xref:System.Windows.ContentElement.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.ContentElement.PreviewMouseWheelEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: ContentElement.PreviewMouseWheelEvent
  fullName: System.Windows.ContentElement.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewMouseWheel&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: ContentElement.PreviewQueryContinueDrag
  fullName: System.Windows.ContentElement.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando há uma alteração no estado de botão do teclado ou mouse durante uma operação de arrastar e soltar."
  remarks: "O evento PreviewQueryContinueDrag permite que a fonte declarar se a operação de arrastar e soltar deve ser cancelada.       Esse evento cria um alias para o <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>anexa para esta classe, para que PreviewQueryContinueDrag faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewQueryContinueDrag são anexados ao subjacente <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.QueryContinueDragEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.QueryContinueDrag>.</xref:System.Windows.ContentElement.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: ContentElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewQueryContinueDrag&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: ContentElement.PreviewStylusButtonDown
  fullName: System.Windows.ContentElement.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão da caneta é pressionado enquanto o ponteiro está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>anexa para esta classe, para que PreviewStylusButtonDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusButtonDown são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusButtonDown>.</xref:System.Windows.ContentElement.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: ContentElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusButtonDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: ContentElement.PreviewStylusButtonUp
  fullName: System.Windows.ContentElement.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão da caneta é liberado enquanto o ponteiro está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>anexa para esta classe, para que PreviewStylusButtonUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusButtonUp são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusButtonUp>.</xref:System.Windows.ContentElement.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: ContentElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusButtonUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: ContentElement.PreviewStylusDown
  fullName: System.Windows.ContentElement.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta toca o digitalizador enquanto está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>anexa para esta classe, para que PreviewStylusDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusDown são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusDownEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusDownEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusDown>.</xref:System.Windows.ContentElement.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.ContentElement.PreviewStylusDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: ContentElement.PreviewStylusDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: ContentElement.PreviewStylusInAirMove
  fullName: System.Windows.ContentElement.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta se move sobre um elemento sem tocar o digitalizador."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>anexa para esta classe, para que PreviewStylusInAirMove faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusInAirMove são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusInAirMove>.</xref:System.Windows.ContentElement.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: ContentElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusInAirMove&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: ContentElement.PreviewStylusInRange
  fullName: System.Windows.ContentElement.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta está perto o suficiente do digitalizador para ser detectada enquanto está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>anexa para esta classe, para que PreviewStylusInRange faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusInRange são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusInRange>.</xref:System.Windows.ContentElement.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: ContentElement.PreviewStylusInRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusInRange&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: ContentElement.PreviewStylusMove
  fullName: System.Windows.ContentElement.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta se move enquanto está sobre o elemento. A caneta deve mover enquanto está sendo detectada pelo digitalizador para gerar este evento, caso contrário, <xref href=&quot;System.Windows.ContentElement.PreviewStylusInAirMove&quot;> </xref> será gerado."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>anexa para esta classe, para que PreviewStylusMove faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusMove são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusMove>.</xref:System.Windows.ContentElement.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: ContentElement.PreviewStylusMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusMove&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: ContentElement.PreviewStylusOutOfRange
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta está longe demais do digitalizador para ser detectada."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>anexa para esta classe, para que PreviewStylusOutOfRange faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusOutOfRange são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusOutOfRange>.</xref:System.Windows.ContentElement.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusOutOfRange&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: ContentElement.PreviewStylusSystemGesture
  fullName: System.Windows.ContentElement.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um usuário executa um dos diversos gestos da caneta."
  remarks: "Para obter informações sobre gestos da caneta, consulte <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>anexa para esta classe, para que PreviewStylusSystemGesture faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewStylusSystemGesture são anexados ao subjacente <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusSystemGesture>.</xref:System.Windows.ContentElement.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: ContentElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusSystemGesture&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: ContentElement.PreviewStylusUp
  fullName: System.Windows.ContentElement.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o usuário retira a caneta do digitalizador enquanto a caneta está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>evento para esta classe anexado para que <xref:System.Windows.ContentElement.PreviewStylusDown>faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.ContentElement.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> Manipuladores de eventos que estão anexados ao <xref:System.Windows.ContentElement.PreviewStylusDown>evento associado subjacente <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewStylusDown>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewStylusUpEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.StylusUp>.</xref:System.Windows.ContentElement.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: ContentElement.PreviewStylusUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewStylusUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: ContentElement.PreviewTextInput
  fullName: System.Windows.ContentElement.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento obtém texto de forma independente de dispositivo."
  remarks: "O evento PreviewTextInput permite que um componente ou aplicativo para escutar a entrada de texto de forma independente de dispositivo. O teclado é o principal meio de PreviewTextInput; mas fala, manuscrito e outros dispositivos de entrada também podem gerar PreviewTextInput.       Por causa de combinações de teclas — em teclados padrão ou por meio de editores de método de entrada — vários eventos de chave podem gerar um evento de entrada de texto.       Esse evento cria um alias para o <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>anexa para esta classe, para que PreviewTextInput faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> Manipuladores de eventos associados ao evento PreviewTextInput são anexados ao subjacente <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewTextInputEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.Windows.Input.TextCompositionEventHandler>|      -O evento correspondente é <xref:System.Windows.ContentElement.TextInput>.</xref:System.Windows.ContentElement.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.ContentElement.PreviewTextInputEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewTextInput%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: ContentElement.PreviewTextInputEvent
  fullName: System.Windows.ContentElement.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewTextInput&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: ContentElement.PreviewTouchDown
  fullName: System.Windows.ContentElement.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dedo toca a tela enquanto o dedo está sobre este elemento."
  remarks: "Por padrão, o PreviewTouchDown e <xref:System.Windows.ContentElement.TouchDown>eventos não ocorrer até que um dedo toca na tela e move.</xref:System.Windows.ContentElement.TouchDown> Pressionando um dedo na tela e mantendo sem movê-lo faz com que pressione e mantenha o comportamento de <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> O comportamento pressione e segure a tecla é equivalente a um clique do mouse.       Para fazer com que o PreviewTouchDown e <xref:System.Windows.ContentElement.TouchDown>eventos ocorrer como um dedo toca a tela, defina o <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>anexado a propriedade `false` para este elemento.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.ContentElement.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewTouchDownEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento correspondente é <xref:System.Windows.ContentElement.TouchDown>.</xref:System.Windows.ContentElement.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.PreviewTouchDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: ContentElement.PreviewTouchDownEvent
  fullName: System.Windows.ContentElement.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewTouchDown&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: ContentElement.PreviewTouchMove
  fullName: System.Windows.ContentElement.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dedo se move na tela enquanto o dedo está sobre este elemento."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento correspondente é <xref:System.Windows.ContentElement.TouchMove>.</xref:System.Windows.ContentElement.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.PreviewTouchMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: ContentElement.PreviewTouchMoveEvent
  fullName: System.Windows.ContentElement.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewTouchMove&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: ContentElement.PreviewTouchUp
  fullName: System.Windows.ContentElement.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dedo é gerado fora da tela enquanto o dedo está sobre este elemento."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.PreviewTouchUpEvent>|   | Estratégia de roteamento | Túnel |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento correspondente é <xref:System.Windows.ContentElement.TouchUp>.</xref:System.Windows.ContentElement.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.PreviewTouchUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: ContentElement.PreviewTouchUpEvent
  fullName: System.Windows.ContentElement.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.PreviewTouchUp&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: ContentElement.QueryContinueDrag
  fullName: System.Windows.ContentElement.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando há uma alteração no estado de botão do teclado ou mouse durante uma operação de arrastar e soltar."
  remarks: "O evento QueryContinueDrag permite que a fonte determinar se a operação de arrastar e soltar deve ser cancelada.       Esse evento cria um alias para o <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>anexa para esta classe, para que QueryContinueDrag faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> Manipuladores de eventos associados ao evento QueryContinueDrag são anexados ao subjacente <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.QueryContinueDragEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.QueryContinueDragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.</xref:System.Windows.ContentElement.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.ContentElement.QueryContinueDragEvent>      -Substituir <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: ContentElement.QueryContinueDragEvent
  fullName: System.Windows.ContentElement.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.QueryContinueDrag&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryCursor
  id: QueryCursor
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryCursor
  nameWithType: ContentElement.QueryCursor
  fullName: System.Windows.ContentElement.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o cursor é solicitado a exibição. Esse evento é gerado em um elemento toda vez que o ponteiro do mouse se move para um novo local, o que significa que o objeto de cursor talvez precise ser alterada de acordo com sua nova posição."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>anexa para esta classe, para que QueryCursor faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> Manipuladores de eventos associados ao evento QueryCursor são anexados ao subjacente <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       O cursor está sendo referenciado por este nome de evento não é necessariamente o cursor de texto (também conhecido como o ponto de inserção). Em vez disso, o cursor neste contexto é o objeto que declara a exibição gráfica na tela relacionada a vários dispositivos possíveis relacionados a entrada ou conceitos em [!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)] de programação. Esse objeto é representado pela <xref:System.Windows.Input.Cursor>classe em [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Input.Cursor> O [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] sistema de entrada permite que você altere esse cursor quando ele representa a posição na tela do ponteiro do mouse. Você pode usar valores predefinidos do <xref:System.Windows.Input.Cursors>enumeração, ou você pode declarar um cursor personalizado como um arquivo de imagem.</xref:System.Windows.Input.Cursors>       Escutar o evento QueryCursor não é uma técnica eficiente para o gerenciamento de cursor. Em vez disso, cada elemento deve definir seu próprio comportamento de cursor com <xref:System.Windows.FrameworkContentElement.Cursor%2A>e <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</xref:System.Windows.FrameworkContentElement.ForceCursor%2A> </xref:System.Windows.FrameworkContentElement.Cursor%2A> Você só deve confiar no QueryCursor se você não estiver usando os elementos de base de nível de framework do WPF, ou em extraordinários circunstâncias em que define o comportamento do cursor em uma base por elemento não atender às suas necessidades. Para obter mais informações sobre como implementar o comportamento do cursor em resposta a QueryCursor, consulte <xref:System.Windows.Input.QueryCursorEventHandler>.</xref:System.Windows.Input.QueryCursorEventHandler>      <a name=&quot;routedEventInfo_QueryCursor&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.QueryCursorEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.QueryCursorEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.ContentElement.QueryCursorEvent>      -Substituir <xref:System.Windows.ContentElement.OnQueryCursor%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: ContentElement.QueryCursorEvent
  fullName: System.Windows.ContentElement.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.QueryCursor&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.ContentElement.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gera um evento roteado específico. O <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> a ser gerado é identificado no <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> instância fornecida (como o <xref:System.Windows.RoutedEventArgs.RoutedEvent*>propriedade dos dados de evento).</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "O `e` parâmetro seja tipado como o tipo de base comum para todos os dados de eventos roteados; no entanto, os dados de evento devem ser dadas como o tipo de dados de evento mais específico que está disponível para o evento que está sendo gerado, pois <xref:System.Windows.RoutedEventArgs>classes derivadas contêm as propriedades específicas de dados reais que se destinam-se para o evento específico quando ele é gerado.</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>não é apenas as propriedades de estado para o evento; Ele também identifica quais eventos roteados para gerar.</xref:System.Windows.RoutedEventArgs> Esse padrão de gerar o evento e os dados de eventos roteados ambos diferem [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] classes de eventos e dados, que normalmente contêm apenas as propriedades que são relacionadas ao evento."
  example:
  - "The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \n  \n [!code-cs[ContentElementsSmorgasbord#RaiseEvent](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#raiseevent)]\n [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#raiseevent)]"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Um <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> que contém os dados de evento e também identifica o evento a ser gerado."
  overload: System.Windows.ContentElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: ContentElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.ContentElement.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Libera todos os dispositivos de toque capturada deste elemento."
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: ContentElement.ReleaseMouseCapture()
  fullName: System.Windows.ContentElement.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Libera a captura do mouse, se esse elemento mantidos a captura."
  remarks: "Se esse elemento não continha a captura, chamar este método não tem nenhum efeito. Considere a possibilidade de marcar o valor do <xref:System.Windows.ContentElement.IsMouseCaptured%2A>antes de chamar esse método.</xref:System.Windows.ContentElement.IsMouseCaptured%2A>"
  example:
  - "The following handler captures or releases mouse capture according to mouse button states. The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)].  \n  \n [!code-cs[ContentElementsSmorgasbord#UIElementMouseCapture](~/add/codesnippet/csharp/ContentElementsSmorgasbord/Trackball.cs#uielementmousecapture)]\n [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/add/codesnippet/visualbasic/contentelementssmorgasbord/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: ContentElement.ReleaseStylusCapture()
  fullName: System.Windows.ContentElement.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Libera a captura da caneta dispositivo, se esse elemento mantidos a captura."
  remarks: "Se esse elemento não continha a captura, chamar este método não tem nenhum efeito. Considere a possibilidade de marcar o valor do <xref:System.Windows.ContentElement.IsStylusCaptured%2A>antes de chamar esse método.</xref:System.Windows.ContentElement.IsStylusCaptured%2A>"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.ContentElement.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativa de liberar o dispositivo de toque especificado no elemento."
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "O dispositivo para liberar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o dispositivo de toque é liberado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Remove o manipulador de eventos roteados especificado no elemento."
  remarks: "O cenário mais comum para usar esta [!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)] é quando você implementa o [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] evento &quot;wrapper&quot; que está associado um evento roteado personalizado, especialmente quando você implementar a lógica de &quot;remover&quot; para manipuladores no [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] nível. O exemplo a seguir esta seção ilustra esse cenário de comentários.       Chamar esse método não tem nenhum efeito se não houvesse nenhum manipulador registrado com os critérios que correspondem aos parâmetros de entrada para a chamada do método.       Se mais de um manipulador é anexado que correspondem aos critérios, somente o primeiro manipulador no evento de armazenamento do manipulador é removido. Esse comportamento é consistente com [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] comportamento do `-=` operador.       Nem `routedEvent` nem `handler` pode ser `null`. Tentativa de fornecer um valor como `null` gerará uma exceção.       Esse método ignora o `handledEventsToo` informações de parâmetro, que são fornecidas quando o manipulador foi inicialmente adicionada com o <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>assinatura que permite a manipulação de eventos já tratado.</xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> O tipo de manipulador é removido."
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "O identificador de evento the.routed para o qual o manipulador é anexado."
    - id: handler
      type: System.Delegate
      description: "A implementação do manipulador específico a ser removido da coleção de manipulador de eventos neste elemento."
  overload: System.Windows.ContentElement.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: ContentElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Retorna se processos de serialização devem serializar o conteúdo da <xref:System.Windows.ContentElement.CommandBindings*>propriedade em instâncias desta classe.</xref:System.Windows.ContentElement.CommandBindings*>"
  remarks: "Isso retornará `true` se <xref:System.Windows.ContentElement.CommandBindings%2A>é definido localmente.</xref:System.Windows.ContentElement.CommandBindings%2A>       Isso `ShouldSerialize` método é fornecido, pois o <xref:System.Windows.UIElement.CommandBindings%2A>propriedade não tem um valor padrão simples.</xref:System.Windows.UIElement.CommandBindings%2A> Este método indica se a propriedade foi alterado do valor padrão. Normalmente você invocar esse método se você estiver desenvolvendo um designer ou desenvolver seu próprio controle incorporar <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Para obter mais informações, consulte [definindo valores padrão com o ShouldSerialize e os métodos de redefinição](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Windows.ContentElement.CommandBindings*>o valor da propriedade deve ser serializado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.ContentElement.CommandBindings*>"
  overload: System.Windows.ContentElement.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: ContentElement.ShouldSerializeInputBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Retorna se processos de serialização devem serializar o conteúdo da <xref:System.Windows.ContentElement.InputBindings*>propriedade em instâncias desta classe.</xref:System.Windows.ContentElement.InputBindings*>"
  remarks: "Isso retornará `true` se <xref:System.Windows.ContentElement.InputBindings%2A>é definido localmente.</xref:System.Windows.ContentElement.InputBindings%2A>       Isso `ShouldSerialize` método é fornecido, pois o <xref:System.Windows.UIElement.InputBindings%2A>propriedade não tem um valor padrão simples.</xref:System.Windows.UIElement.InputBindings%2A> Este método indica se a propriedade foi alterado do valor padrão. Normalmente você invocar esse método se você estiver desenvolvendo um designer ou desenvolver seu próprio controle incorporar <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Para obter mais informações, consulte [definindo valores padrão com o ShouldSerialize e os métodos de redefinição](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Windows.ContentElement.InputBindings*>o valor da propriedade deve ser serializado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.ContentElement.InputBindings*>"
  overload: System.Windows.ContentElement.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: ContentElement.StylusButtonDown
  fullName: System.Windows.ContentElement.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão da caneta é pressionado enquanto o ponteiro está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>anexa para esta classe, para que StylusButtonDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusButtonDown são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusButtonDownEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.</xref:System.Windows.ContentElement.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.StylusButtonDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusButtonDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: ContentElement.StylusButtonDownEvent
  fullName: System.Windows.ContentElement.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusButtonDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: ContentElement.StylusButtonUp
  fullName: System.Windows.ContentElement.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão da caneta é liberado enquanto o ponteiro está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>anexa para esta classe, para que StylusButtonUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusButtonUp são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusButtonUpEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.</xref:System.Windows.ContentElement.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.StylusButtonUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusButtonUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: ContentElement.StylusButtonUpEvent
  fullName: System.Windows.ContentElement.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusButtonUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusDown
  id: StylusDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusDown
  nameWithType: ContentElement.StylusDown
  fullName: System.Windows.ContentElement.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta toca o digitalizador enquanto a caneta está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>anexa para esta classe, para que StylusDown faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusDown são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusDownEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusDownEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusDown>.</xref:System.Windows.ContentElement.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.ContentElement.StylusDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: ContentElement.StylusDownEvent
  fullName: System.Windows.ContentElement.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusDown&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusEnter
  id: StylusEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusEnter
  nameWithType: ContentElement.StylusEnter
  fullName: System.Windows.ContentElement.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta entra nos limites deste elemento."
  remarks: "StylusEnter é um [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) que usa o estratégia de roteamento de manipulação de eventos direto. Os eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, elas permitem que outros aspectos do comportamento de eventos roteados, como disparadores em estilos de eventos.       Embora StylusEnter controla quando a caneta entra nos limites de um elemento, esse evento mais literalmente informa que o <xref:System.Windows.ContentElement.IsStylusOver%2A>o valor da propriedade foi alterado de `false` para `true` neste elemento.</xref:System.Windows.ContentElement.IsStylusOver%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>anexa para esta classe, para que StylusEnter faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusEnter são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusEnter&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusEnterEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnStylusEnter%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: ContentElement.StylusEnterEvent
  fullName: System.Windows.ContentElement.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusEnter&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: ContentElement.StylusInAirMove
  fullName: System.Windows.ContentElement.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta se move sobre um elemento sem tocar o digitalizador."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>anexa para esta classe, para que StylusInAirMove é parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusInAirMove são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusInAirMoveEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.</xref:System.Windows.ContentElement.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusInAirMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusInAirMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: ContentElement.StylusInAirMoveEvent
  fullName: System.Windows.ContentElement.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusInAirMove&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInRange
  id: StylusInRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInRange
  nameWithType: ContentElement.StylusInRange
  fullName: System.Windows.ContentElement.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta está perto o suficiente do digitalizador para ser detectada enquanto está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>anexa para esta classe, para que StylusInRange faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusInRange são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInRange&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusInRangeEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusInRange>.</xref:System.Windows.ContentElement.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusInRangeEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusInRange%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: ContentElement.StylusInRangeEvent
  fullName: System.Windows.ContentElement.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusInRange&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusLeave
  id: StylusLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusLeave
  nameWithType: ContentElement.StylusLeave
  fullName: System.Windows.ContentElement.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta sai dos limites do elemento."
  remarks: "StylusLeave é um [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md) que usa o estratégia de roteamento de manipulação de eventos direto. Os eventos roteados diretos não são gerados ao longo de uma rota; em vez disso, eles são manipulados no mesmo elemento em que eles são gerados. No entanto, elas permitem que outros aspectos do comportamento de eventos roteados, como disparadores em estilos de eventos.       Embora StylusLeave controla quando a caneta sai dos limites de um elemento, esse evento mais literalmente informa que o <xref:System.Windows.ContentElement.IsStylusOver%2A>o valor da propriedade foi alterado de `true` para `false` neste elemento.</xref:System.Windows.ContentElement.IsStylusOver%2A>       Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>anexa para esta classe, para que StylusLeave faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusLeave são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusLeave&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusLeaveEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Substituir <xref:System.Windows.ContentElement.OnStylusLeave%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: ContentElement.StylusLeaveEvent
  fullName: System.Windows.ContentElement.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusLeave&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusMove
  id: StylusMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusMove
  nameWithType: ContentElement.StylusMove
  fullName: System.Windows.ContentElement.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta se move sobre este elemento. A caneta deve mover-se enquanto está no digitalizador para gerar este evento. Caso contrário, <xref href=&quot;System.Windows.ContentElement.StylusInAirMove&quot;> </xref> será gerado."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>anexa para esta classe, para que StylusMove faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusMove são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusMoveEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusMove>.</xref:System.Windows.ContentElement.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: ContentElement.StylusMoveEvent
  fullName: System.Windows.ContentElement.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusMove&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: ContentElement.StylusOutOfRange
  fullName: System.Windows.ContentElement.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta está longe demais do digitalizador para ser detectada enquanto está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>anexa para esta classe, para que StylusOutOfRange faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusOutOfRange são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.</xref:System.Windows.ContentElement.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusOutOfRangeEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: ContentElement.StylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusOutOfRange&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: ContentElement.StylusSystemGesture
  fullName: System.Windows.ContentElement.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um usuário executa um dos diversos gestos da caneta."
  remarks: "Para obter mais informações sobre gestos da caneta, consulte <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>anexa para esta classe, para que StylusSystemGesture faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusSystemGesture são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusSystemGestureEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.</xref:System.Windows.ContentElement.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.ContentElement.StylusSystemGestureEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: ContentElement.StylusSystemGestureEvent
  fullName: System.Windows.ContentElement.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusSystemGesture&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusUp
  id: StylusUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusUp
  nameWithType: ContentElement.StylusUp
  fullName: System.Windows.ContentElement.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o usuário retira a caneta do digitalizador enquanto está sobre este elemento."
  remarks: "Esse evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>anexa para esta classe, para que StylusUp faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> Manipuladores de eventos associados ao evento StylusUp são anexados ao subjacente <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       Entrada de caneta, mouse e toque existem em uma relação específica. Para obter mais informações, consulte [visão geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.StylusUpEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewStylusUp>.</xref:System.Windows.ContentElement.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnStylusUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: ContentElement.StylusUpEvent
  fullName: System.Windows.ContentElement.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.StylusUp&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TextInput
  id: TextInput
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TextInput
  nameWithType: ContentElement.TextInput
  fullName: System.Windows.ContentElement.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento obtém texto de forma independente de dispositivo."
  remarks: "> [!IMPORTANT]> Esse evento já pode ser marcado como manipulado pelas implementações internas de controles compostos. Consulte a observação abaixo.       O evento TextInput já pode ser marcado como manipulado pelas implementações internas de controles compostos. Por exemplo, um <xref:System.Windows.Controls.TextBox>é um controle composto onde o evento TextInput já está marcado como manipulado; dentro de sua composição.</xref:System.Windows.Controls.TextBox> Controles de fazem isso, porque o controle precisa interpretar alguns tipos de entrada, como as teclas de direção, como tendo um significado especial para esse controle. Se você usar <xref:System.Windows.ContentElement.PreviewTextInput>como o evento em que você anexa manipuladores para entrada de texto, você pode receber resultados melhores.</xref:System.Windows.ContentElement.PreviewTextInput> Essa técnica contorna a maioria dos casos onde a composição de controle já marcado esse evento tratados e impede que o manipulador de receber o evento ao longo da rota de evento.       O evento TextInput permite que um componente ou aplicativo para escutar a entrada de texto de forma independente de dispositivo. O teclado é o principal meio de manuscrito TextInput, mas fala, e outros dispositivos de entrada também podem gerar TextInput.       Por causa de combinações de teclas — em teclados padrão ou por meio de editores de método de entrada — vários eventos de chave podem disparar um evento de entrada de texto.       Esse evento cria um alias para o <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>anexa para esta classe, para que TextInput faz parte da classe a lista de membros quando <xref:System.Windows.ContentElement>é herdada como um elemento base.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> Manipuladores de eventos associados ao evento TextInput são anexados ao subjacente <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>evento anexado e receber a mesma instância de dados de evento.</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_TextInput&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.TextInputEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.Windows.Input.TextCompositionEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewTextInput>.</xref:System.Windows.ContentElement.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.ContentElement.TextInputEvent>      -Substituir <xref:System.Windows.ContentElement.OnTextInput%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: ContentElement.TextInputEvent
  fullName: System.Windows.ContentElement.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.TextInput&quot;> </xref> eventos roteados."
  remarks: "Identificadores de eventos roteados são criados quando os eventos roteados são registrados. Esses identificadores contém um nome de identificação, tipo de proprietário, tipo de manipulador, estratégia de roteamento e método de utilitário para adicionar proprietários para o evento. Você pode usar esses identificadores para adicionar manipuladores de classe.       Para obter mais informações sobre como registrar eventos roteados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre o uso de identificadores de evento roteado para adicionar manipuladores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchDown
  id: TouchDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchDown
  nameWithType: ContentElement.TouchDown
  fullName: System.Windows.ContentElement.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dedo toca a tela enquanto o dedo está sobre este elemento."
  remarks: "Por padrão, o <xref:System.Windows.ContentElement.PreviewTouchDown>e TouchDown não ocorrem até que um dedo toca na tela e move.</xref:System.Windows.ContentElement.PreviewTouchDown> Pressionando um dedo na tela e mantendo sem movê-lo faz com que pressione e mantenha o comportamento de <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> O comportamento pressione e segure a tecla é equivalente a um clique do mouse.       Para fazer com que o <xref:System.Windows.ContentElement.PreviewTouchDown>e TouchDown eventos como um dedo toca a tela, defina o <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>anexado a propriedade `false` para este elemento.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.TouchDownEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewTouchDown>.</xref:System.Windows.ContentElement.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchDownEvent>      -Substituir <xref:System.Windows.ContentElement.OnTouchDown%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: ContentElement.TouchDownEvent
  fullName: System.Windows.ContentElement.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.TouchDown&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchEnter
  id: TouchEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchEnter
  nameWithType: ContentElement.TouchEnter
  fullName: System.Windows.ContentElement.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um toque move de fora para dentro dos limites deste elemento."
  remarks: "Esse evento é gerado sempre se ou não o dispositivo de toque é capturado para este elemento de interface do usuário.      <a name=&quot;routedEventInfo_TouchEnter&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.TouchEnterEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Substituir <xref:System.Windows.ContentElement.OnTouchEnter%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: ContentElement.TouchEnterEvent
  fullName: System.Windows.ContentElement.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.TouchEnter&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
  fullName: System.Windows.ContentElement.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos de toque que são capturados para esse elemento."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração de <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que são capturados para esse elemento."
  overload: System.Windows.ContentElement.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
  fullName: System.Windows.ContentElement.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos de toque que são capturados para esse elemento ou elementos filho na árvore visual."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração de <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que são capturados para esse elemento ou elementos filho na árvore visual."
  overload: System.Windows.ContentElement.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
  fullName: System.Windows.ContentElement.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos de toque estão sobre este elemento."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração de <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que são sobre este elemento."
  overload: System.Windows.ContentElement.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesOver
  id: TouchesOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
  fullName: System.Windows.ContentElement.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos de toque estão sobre este elemento ou elementos filho na árvore visual."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração de <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que são feitas por este elemento ou elementos filho na árvore visual."
  overload: System.Windows.ContentElement.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchLeave
  id: TouchLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchLeave
  nameWithType: ContentElement.TouchLeave
  fullName: System.Windows.ContentElement.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um toque move de dentro para fora dos limites deste elemento."
  remarks: "<a name=&quot;routedEventInfo_TouchLeave&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.TouchLeaveEvent>|   | Estratégia de roteamento | Direct |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Substituir <xref:System.Windows.ContentElement.OnTouchLeave%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: ContentElement.TouchLeaveEvent
  fullName: System.Windows.ContentElement.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.TouchLeave&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchMove
  id: TouchMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchMove
  nameWithType: ContentElement.TouchMove
  fullName: System.Windows.ContentElement.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dedo se move na tela enquanto o dedo está sobre este elemento."
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.TouchMoveEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewTouchMove>.</xref:System.Windows.ContentElement.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchMoveEvent>      -Substituir <xref:System.Windows.ContentElement.OnTouchMove%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: ContentElement.TouchMoveEvent
  fullName: System.Windows.ContentElement.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.TouchMove&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchUp
  id: TouchUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchUp
  nameWithType: ContentElement.TouchUp
  fullName: System.Windows.ContentElement.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dedo é gerado fora da tela enquanto o dedo está sobre este elemento."
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a># # Roteadas informações de evento | | |   |-|-|   | Campo de identificador | <xref:System.Windows.ContentElement.TouchUpEvent>|   | Estratégia de roteamento | Bolha |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento de túnel correspondente é <xref:System.Windows.ContentElement.PreviewTouchUp>.</xref:System.Windows.ContentElement.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchUpEvent>      -Substituir <xref:System.Windows.ContentElement.OnTouchUp%2A>para implementar a manipulação de classe para esse evento em classes derivadas.</xref:System.Windows.ContentElement.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: ContentElement.TouchUpEvent
  fullName: System.Windows.ContentElement.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.ContentElement.TouchUp&quot;> </xref> eventos roteados."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.ContentElement.#ctor
  parent: System.Windows.ContentElement
  isExternal: false
  name: ContentElement()
  nameWithType: ContentElement.ContentElement()
  fullName: System.Windows.ContentElement.ContentElement()
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.ContentElement.AllowDrop
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
  fullName: System.Windows.ContentElement.AllowDrop
- uid: System.Windows.ContentElement.AllowDropProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDropProperty
  nameWithType: ContentElement.AllowDropProperty
  fullName: System.Windows.ContentElement.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
  fullName: System.Windows.ContentElement.AreAnyTouchesCaptured
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.ContentElement.AreAnyTouchesOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
  fullName: System.Windows.ContentElement.AreAnyTouchesOver
- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: ContentElement.AreAnyTouchesOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesOverProperty
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.ContentElement.CaptureMouse
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureMouse()
  nameWithType: ContentElement.CaptureMouse()
  fullName: System.Windows.ContentElement.CaptureMouse()
- uid: System.Windows.ContentElement.CaptureStylus
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureStylus()
  nameWithType: ContentElement.CaptureStylus()
  fullName: System.Windows.ContentElement.CaptureStylus()
- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: ContentElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.ContentElement.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.ContentElement.CommandBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
  fullName: System.Windows.ContentElement.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.ContentElement.DragEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragEnter
  nameWithType: ContentElement.DragEnter
  fullName: System.Windows.ContentElement.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.ContentElement.DragEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragEnterEvent
  nameWithType: ContentElement.DragEnterEvent
  fullName: System.Windows.ContentElement.DragEnterEvent
- uid: System.Windows.ContentElement.DragLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragLeave
  nameWithType: ContentElement.DragLeave
  fullName: System.Windows.ContentElement.DragLeave
- uid: System.Windows.ContentElement.DragLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragLeaveEvent
  nameWithType: ContentElement.DragLeaveEvent
  fullName: System.Windows.ContentElement.DragLeaveEvent
- uid: System.Windows.ContentElement.DragOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragOver
  nameWithType: ContentElement.DragOver
  fullName: System.Windows.ContentElement.DragOver
- uid: System.Windows.ContentElement.DragOverEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragOverEvent
  nameWithType: ContentElement.DragOverEvent
  fullName: System.Windows.ContentElement.DragOverEvent
- uid: System.Windows.ContentElement.Drop
  parent: System.Windows.ContentElement
  isExternal: false
  name: Drop
  nameWithType: ContentElement.Drop
  fullName: System.Windows.ContentElement.Drop
- uid: System.Windows.ContentElement.DropEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DropEvent
  nameWithType: ContentElement.DropEvent
  fullName: System.Windows.ContentElement.DropEvent
- uid: System.Windows.ContentElement.Focus
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focus()
  nameWithType: ContentElement.Focus()
  fullName: System.Windows.ContentElement.Focus()
- uid: System.Windows.ContentElement.Focusable
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focusable
  nameWithType: ContentElement.Focusable
  fullName: System.Windows.ContentElement.Focusable
- uid: System.Windows.ContentElement.FocusableChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: FocusableChanged
  nameWithType: ContentElement.FocusableChanged
  fullName: System.Windows.ContentElement.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.ContentElement.FocusableProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: FocusableProperty
  nameWithType: ContentElement.FocusableProperty
  fullName: System.Windows.ContentElement.FocusableProperty
- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.ContentElement.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.ContentElement.GetUIParentCore
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: ContentElement.GetUIParentCore()
  fullName: System.Windows.ContentElement.GetUIParentCore()
- uid: System.Windows.ContentElement.GiveFeedback
  parent: System.Windows.ContentElement
  isExternal: false
  name: GiveFeedback
  nameWithType: ContentElement.GiveFeedback
  fullName: System.Windows.ContentElement.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.ContentElement.GiveFeedbackEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: ContentElement.GiveFeedbackEvent
  fullName: System.Windows.ContentElement.GiveFeedbackEvent
- uid: System.Windows.ContentElement.GotFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotFocus
  nameWithType: ContentElement.GotFocus
  fullName: System.Windows.ContentElement.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.ContentElement.GotFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotFocusEvent
  nameWithType: ContentElement.GotFocusEvent
  fullName: System.Windows.ContentElement.GotFocusEvent
- uid: System.Windows.ContentElement.GotKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: ContentElement.GotKeyboardFocus
  fullName: System.Windows.ContentElement.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.ContentElement.GotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: ContentElement.GotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.GotKeyboardFocusEvent
- uid: System.Windows.ContentElement.GotMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotMouseCapture
  nameWithType: ContentElement.GotMouseCapture
  fullName: System.Windows.ContentElement.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.ContentElement.GotMouseCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: ContentElement.GotMouseCaptureEvent
  fullName: System.Windows.ContentElement.GotMouseCaptureEvent
- uid: System.Windows.ContentElement.GotStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotStylusCapture
  nameWithType: ContentElement.GotStylusCapture
  fullName: System.Windows.ContentElement.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.ContentElement.GotStylusCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: ContentElement.GotStylusCaptureEvent
  fullName: System.Windows.ContentElement.GotStylusCaptureEvent
- uid: System.Windows.ContentElement.GotTouchCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotTouchCapture
  nameWithType: ContentElement.GotTouchCapture
  fullName: System.Windows.ContentElement.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.ContentElement.GotTouchCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: ContentElement.GotTouchCaptureEvent
  fullName: System.Windows.ContentElement.GotTouchCaptureEvent
- uid: System.Windows.ContentElement.HasAnimatedProperties
  parent: System.Windows.ContentElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
  fullName: System.Windows.ContentElement.HasAnimatedProperties
- uid: System.Windows.ContentElement.InputBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: InputBindings
  nameWithType: ContentElement.InputBindings
  fullName: System.Windows.ContentElement.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.ContentElement.IsEnabled
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
  fullName: System.Windows.ContentElement.IsEnabled
- uid: System.Windows.ContentElement.IsEnabledChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledChanged
  nameWithType: ContentElement.IsEnabledChanged
  fullName: System.Windows.ContentElement.IsEnabledChanged
- uid: System.Windows.ContentElement.IsEnabledCore
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
  fullName: System.Windows.ContentElement.IsEnabledCore
- uid: System.Windows.ContentElement.IsEnabledProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledProperty
  nameWithType: ContentElement.IsEnabledProperty
  fullName: System.Windows.ContentElement.IsEnabledProperty
- uid: System.Windows.ContentElement.IsFocused
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocused
  nameWithType: ContentElement.IsFocused
  fullName: System.Windows.ContentElement.IsFocused
- uid: System.Windows.ContentElement.IsFocusedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocusedProperty
  nameWithType: ContentElement.IsFocusedProperty
  fullName: System.Windows.ContentElement.IsFocusedProperty
- uid: System.Windows.ContentElement.IsInputMethodEnabled
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
  fullName: System.Windows.ContentElement.IsInputMethodEnabled
- uid: System.Windows.ContentElement.IsKeyboardFocused
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
  fullName: System.Windows.ContentElement.IsKeyboardFocused
- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: ContentElement.IsKeyboardFocusedChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusedChanged
- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: ContentElement.IsKeyboardFocusedProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusedProperty
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithin
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: ContentElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: ContentElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
- uid: System.Windows.ContentElement.IsMouseCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
  fullName: System.Windows.ContentElement.IsMouseCaptured
- uid: System.Windows.ContentElement.IsMouseCapturedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: ContentElement.IsMouseCapturedChanged
  fullName: System.Windows.ContentElement.IsMouseCapturedChanged
- uid: System.Windows.ContentElement.IsMouseCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: ContentElement.IsMouseCapturedProperty
  fullName: System.Windows.ContentElement.IsMouseCapturedProperty
- uid: System.Windows.ContentElement.IsMouseCaptureWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
  fullName: System.Windows.ContentElement.IsMouseCaptureWithin
- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: ContentElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinChanged
- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: ContentElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinProperty
- uid: System.Windows.ContentElement.IsMouseDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
  fullName: System.Windows.ContentElement.IsMouseDirectlyOver
- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: ContentElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverChanged
- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: ContentElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverProperty
- uid: System.Windows.ContentElement.IsMouseOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
  fullName: System.Windows.ContentElement.IsMouseOver
- uid: System.Windows.ContentElement.IsMouseOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: ContentElement.IsMouseOverProperty
  fullName: System.Windows.ContentElement.IsMouseOverProperty
- uid: System.Windows.ContentElement.IsStylusCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
  fullName: System.Windows.ContentElement.IsStylusCaptured
- uid: System.Windows.ContentElement.IsStylusCapturedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: ContentElement.IsStylusCapturedChanged
  fullName: System.Windows.ContentElement.IsStylusCapturedChanged
- uid: System.Windows.ContentElement.IsStylusCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: ContentElement.IsStylusCapturedProperty
  fullName: System.Windows.ContentElement.IsStylusCapturedProperty
- uid: System.Windows.ContentElement.IsStylusCaptureWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
  fullName: System.Windows.ContentElement.IsStylusCaptureWithin
- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: ContentElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinChanged
- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: ContentElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinProperty
- uid: System.Windows.ContentElement.IsStylusDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
  fullName: System.Windows.ContentElement.IsStylusDirectlyOver
- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: ContentElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverChanged
- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: ContentElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverProperty
- uid: System.Windows.ContentElement.IsStylusOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
  fullName: System.Windows.ContentElement.IsStylusOver
- uid: System.Windows.ContentElement.IsStylusOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: ContentElement.IsStylusOverProperty
  fullName: System.Windows.ContentElement.IsStylusOverProperty
- uid: System.Windows.ContentElement.KeyDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyDown
  nameWithType: ContentElement.KeyDown
  fullName: System.Windows.ContentElement.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.ContentElement.KeyDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyDownEvent
  nameWithType: ContentElement.KeyDownEvent
  fullName: System.Windows.ContentElement.KeyDownEvent
- uid: System.Windows.ContentElement.KeyUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyUp
  nameWithType: ContentElement.KeyUp
  fullName: System.Windows.ContentElement.KeyUp
- uid: System.Windows.ContentElement.KeyUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyUpEvent
  nameWithType: ContentElement.KeyUpEvent
  fullName: System.Windows.ContentElement.KeyUpEvent
- uid: System.Windows.ContentElement.LostFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostFocus
  nameWithType: ContentElement.LostFocus
  fullName: System.Windows.ContentElement.LostFocus
- uid: System.Windows.ContentElement.LostFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostFocusEvent
  nameWithType: ContentElement.LostFocusEvent
  fullName: System.Windows.ContentElement.LostFocusEvent
- uid: System.Windows.ContentElement.LostKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: ContentElement.LostKeyboardFocus
  fullName: System.Windows.ContentElement.LostKeyboardFocus
- uid: System.Windows.ContentElement.LostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: ContentElement.LostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.LostKeyboardFocusEvent
- uid: System.Windows.ContentElement.LostMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostMouseCapture
  nameWithType: ContentElement.LostMouseCapture
  fullName: System.Windows.ContentElement.LostMouseCapture
- uid: System.Windows.ContentElement.LostMouseCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: ContentElement.LostMouseCaptureEvent
  fullName: System.Windows.ContentElement.LostMouseCaptureEvent
- uid: System.Windows.ContentElement.LostStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostStylusCapture
  nameWithType: ContentElement.LostStylusCapture
  fullName: System.Windows.ContentElement.LostStylusCapture
- uid: System.Windows.ContentElement.LostStylusCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: ContentElement.LostStylusCaptureEvent
  fullName: System.Windows.ContentElement.LostStylusCaptureEvent
- uid: System.Windows.ContentElement.LostTouchCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostTouchCapture
  nameWithType: ContentElement.LostTouchCapture
  fullName: System.Windows.ContentElement.LostTouchCapture
- uid: System.Windows.ContentElement.LostTouchCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: ContentElement.LostTouchCaptureEvent
  fullName: System.Windows.ContentElement.LostTouchCaptureEvent
- uid: System.Windows.ContentElement.MouseDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseDown
  nameWithType: ContentElement.MouseDown
  fullName: System.Windows.ContentElement.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.ContentElement.MouseDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseDownEvent
  nameWithType: ContentElement.MouseDownEvent
  fullName: System.Windows.ContentElement.MouseDownEvent
- uid: System.Windows.ContentElement.MouseEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseEnter
  nameWithType: ContentElement.MouseEnter
  fullName: System.Windows.ContentElement.MouseEnter
- uid: System.Windows.ContentElement.MouseEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseEnterEvent
  nameWithType: ContentElement.MouseEnterEvent
  fullName: System.Windows.ContentElement.MouseEnterEvent
- uid: System.Windows.ContentElement.MouseLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeave
  nameWithType: ContentElement.MouseLeave
  fullName: System.Windows.ContentElement.MouseLeave
- uid: System.Windows.ContentElement.MouseLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: ContentElement.MouseLeaveEvent
  fullName: System.Windows.ContentElement.MouseLeaveEvent
- uid: System.Windows.ContentElement.MouseLeftButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: ContentElement.MouseLeftButtonDown
  fullName: System.Windows.ContentElement.MouseLeftButtonDown
- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: ContentElement.MouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonDownEvent
- uid: System.Windows.ContentElement.MouseLeftButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: ContentElement.MouseLeftButtonUp
  fullName: System.Windows.ContentElement.MouseLeftButtonUp
- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: ContentElement.MouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonUpEvent
- uid: System.Windows.ContentElement.MouseMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseMove
  nameWithType: ContentElement.MouseMove
  fullName: System.Windows.ContentElement.MouseMove
- uid: System.Windows.ContentElement.MouseMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseMoveEvent
  nameWithType: ContentElement.MouseMoveEvent
  fullName: System.Windows.ContentElement.MouseMoveEvent
- uid: System.Windows.ContentElement.MouseRightButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: ContentElement.MouseRightButtonDown
  fullName: System.Windows.ContentElement.MouseRightButtonDown
- uid: System.Windows.ContentElement.MouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: ContentElement.MouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.MouseRightButtonDownEvent
- uid: System.Windows.ContentElement.MouseRightButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: ContentElement.MouseRightButtonUp
  fullName: System.Windows.ContentElement.MouseRightButtonUp
- uid: System.Windows.ContentElement.MouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: ContentElement.MouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.MouseRightButtonUpEvent
- uid: System.Windows.ContentElement.MouseUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseUp
  nameWithType: ContentElement.MouseUp
  fullName: System.Windows.ContentElement.MouseUp
- uid: System.Windows.ContentElement.MouseUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseUpEvent
  nameWithType: ContentElement.MouseUpEvent
  fullName: System.Windows.ContentElement.MouseUpEvent
- uid: System.Windows.ContentElement.MouseWheel
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseWheel
  nameWithType: ContentElement.MouseWheel
  fullName: System.Windows.ContentElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.ContentElement.MouseWheelEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseWheelEvent
  nameWithType: ContentElement.MouseWheelEvent
  fullName: System.Windows.ContentElement.MouseWheelEvent
- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.ContentElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: ContentElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.ContentElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.ContentElement.OnCreateAutomationPeer
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: ContentElement.OnCreateAutomationPeer()
  fullName: System.Windows.ContentElement.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragLeave(DragEventArgs)
- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: ContentElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragOver(DragEventArgs)
- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: ContentElement.OnDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDrop(DragEventArgs)
- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyUp(KeyEventArgs)
- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseMove(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.ContentElement.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusUp(StylusEventArgs)
- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchDown(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchMove(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchUp(TouchEventArgs)
- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.ContentElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.ContentElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.ContentElement.PreviewDragEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragEnter
  nameWithType: ContentElement.PreviewDragEnter
  fullName: System.Windows.ContentElement.PreviewDragEnter
- uid: System.Windows.ContentElement.PreviewDragEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: ContentElement.PreviewDragEnterEvent
  fullName: System.Windows.ContentElement.PreviewDragEnterEvent
- uid: System.Windows.ContentElement.PreviewDragLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragLeave
  nameWithType: ContentElement.PreviewDragLeave
  fullName: System.Windows.ContentElement.PreviewDragLeave
- uid: System.Windows.ContentElement.PreviewDragLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: ContentElement.PreviewDragLeaveEvent
  fullName: System.Windows.ContentElement.PreviewDragLeaveEvent
- uid: System.Windows.ContentElement.PreviewDragOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragOver
  nameWithType: ContentElement.PreviewDragOver
  fullName: System.Windows.ContentElement.PreviewDragOver
- uid: System.Windows.ContentElement.PreviewDragOverEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: ContentElement.PreviewDragOverEvent
  fullName: System.Windows.ContentElement.PreviewDragOverEvent
- uid: System.Windows.ContentElement.PreviewDrop
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDrop
  nameWithType: ContentElement.PreviewDrop
  fullName: System.Windows.ContentElement.PreviewDrop
- uid: System.Windows.ContentElement.PreviewDropEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDropEvent
  nameWithType: ContentElement.PreviewDropEvent
  fullName: System.Windows.ContentElement.PreviewDropEvent
- uid: System.Windows.ContentElement.PreviewGiveFeedback
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: ContentElement.PreviewGiveFeedback
  fullName: System.Windows.ContentElement.PreviewGiveFeedback
- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: ContentElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.ContentElement.PreviewGiveFeedbackEvent
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: ContentElement.PreviewGotKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocus
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
- uid: System.Windows.ContentElement.PreviewKeyDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyDown
  nameWithType: ContentElement.PreviewKeyDown
  fullName: System.Windows.ContentElement.PreviewKeyDown
- uid: System.Windows.ContentElement.PreviewKeyDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: ContentElement.PreviewKeyDownEvent
  fullName: System.Windows.ContentElement.PreviewKeyDownEvent
- uid: System.Windows.ContentElement.PreviewKeyUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyUp
  nameWithType: ContentElement.PreviewKeyUp
  fullName: System.Windows.ContentElement.PreviewKeyUp
- uid: System.Windows.ContentElement.PreviewKeyUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: ContentElement.PreviewKeyUpEvent
  fullName: System.Windows.ContentElement.PreviewKeyUpEvent
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: ContentElement.PreviewLostKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocus
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
- uid: System.Windows.ContentElement.PreviewMouseDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseDown
  nameWithType: ContentElement.PreviewMouseDown
  fullName: System.Windows.ContentElement.PreviewMouseDown
- uid: System.Windows.ContentElement.PreviewMouseDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: ContentElement.PreviewMouseDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseDownEvent
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: ContentElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDown
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: ContentElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUp
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.ContentElement.PreviewMouseMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseMove
  nameWithType: ContentElement.PreviewMouseMove
  fullName: System.Windows.ContentElement.PreviewMouseMove
- uid: System.Windows.ContentElement.PreviewMouseMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: ContentElement.PreviewMouseMoveEvent
  fullName: System.Windows.ContentElement.PreviewMouseMoveEvent
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: ContentElement.PreviewMouseRightButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDown
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: ContentElement.PreviewMouseRightButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUp
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
- uid: System.Windows.ContentElement.PreviewMouseUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseUp
  nameWithType: ContentElement.PreviewMouseUp
  fullName: System.Windows.ContentElement.PreviewMouseUp
- uid: System.Windows.ContentElement.PreviewMouseUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: ContentElement.PreviewMouseUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseUpEvent
- uid: System.Windows.ContentElement.PreviewMouseWheel
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: ContentElement.PreviewMouseWheel
  fullName: System.Windows.ContentElement.PreviewMouseWheel
- uid: System.Windows.ContentElement.PreviewMouseWheelEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: ContentElement.PreviewMouseWheelEvent
  fullName: System.Windows.ContentElement.PreviewMouseWheelEvent
- uid: System.Windows.ContentElement.PreviewQueryContinueDrag
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: ContentElement.PreviewQueryContinueDrag
  fullName: System.Windows.ContentElement.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: ContentElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.ContentElement.PreviewQueryContinueDragEvent
- uid: System.Windows.ContentElement.PreviewStylusButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: ContentElement.PreviewStylusButtonDown
  fullName: System.Windows.ContentElement.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: ContentElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonDownEvent
- uid: System.Windows.ContentElement.PreviewStylusButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: ContentElement.PreviewStylusButtonUp
  fullName: System.Windows.ContentElement.PreviewStylusButtonUp
- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: ContentElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonUpEvent
- uid: System.Windows.ContentElement.PreviewStylusDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusDown
  nameWithType: ContentElement.PreviewStylusDown
  fullName: System.Windows.ContentElement.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.ContentElement.PreviewStylusDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: ContentElement.PreviewStylusDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusDownEvent
- uid: System.Windows.ContentElement.PreviewStylusInAirMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: ContentElement.PreviewStylusInAirMove
  fullName: System.Windows.ContentElement.PreviewStylusInAirMove
- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: ContentElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
- uid: System.Windows.ContentElement.PreviewStylusInRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: ContentElement.PreviewStylusInRange
  fullName: System.Windows.ContentElement.PreviewStylusInRange
- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: ContentElement.PreviewStylusInRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusInRangeEvent
- uid: System.Windows.ContentElement.PreviewStylusMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusMove
  nameWithType: ContentElement.PreviewStylusMove
  fullName: System.Windows.ContentElement.PreviewStylusMove
- uid: System.Windows.ContentElement.PreviewStylusMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: ContentElement.PreviewStylusMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusMoveEvent
- uid: System.Windows.ContentElement.PreviewStylusOutOfRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: ContentElement.PreviewStylusOutOfRange
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRange
- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
- uid: System.Windows.ContentElement.PreviewStylusSystemGesture
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: ContentElement.PreviewStylusSystemGesture
  fullName: System.Windows.ContentElement.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: ContentElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
- uid: System.Windows.ContentElement.PreviewStylusUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusUp
  nameWithType: ContentElement.PreviewStylusUp
  fullName: System.Windows.ContentElement.PreviewStylusUp
- uid: System.Windows.ContentElement.PreviewStylusUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: ContentElement.PreviewStylusUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusUpEvent
- uid: System.Windows.ContentElement.PreviewTextInput
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTextInput
  nameWithType: ContentElement.PreviewTextInput
  fullName: System.Windows.ContentElement.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.ContentElement.PreviewTextInputEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: ContentElement.PreviewTextInputEvent
  fullName: System.Windows.ContentElement.PreviewTextInputEvent
- uid: System.Windows.ContentElement.PreviewTouchDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchDown
  nameWithType: ContentElement.PreviewTouchDown
  fullName: System.Windows.ContentElement.PreviewTouchDown
- uid: System.Windows.ContentElement.PreviewTouchDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: ContentElement.PreviewTouchDownEvent
  fullName: System.Windows.ContentElement.PreviewTouchDownEvent
- uid: System.Windows.ContentElement.PreviewTouchMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchMove
  nameWithType: ContentElement.PreviewTouchMove
  fullName: System.Windows.ContentElement.PreviewTouchMove
- uid: System.Windows.ContentElement.PreviewTouchMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: ContentElement.PreviewTouchMoveEvent
  fullName: System.Windows.ContentElement.PreviewTouchMoveEvent
- uid: System.Windows.ContentElement.PreviewTouchUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchUp
  nameWithType: ContentElement.PreviewTouchUp
  fullName: System.Windows.ContentElement.PreviewTouchUp
- uid: System.Windows.ContentElement.PreviewTouchUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: ContentElement.PreviewTouchUpEvent
  fullName: System.Windows.ContentElement.PreviewTouchUpEvent
- uid: System.Windows.ContentElement.QueryContinueDrag
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryContinueDrag
  nameWithType: ContentElement.QueryContinueDrag
  fullName: System.Windows.ContentElement.QueryContinueDrag
- uid: System.Windows.ContentElement.QueryContinueDragEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: ContentElement.QueryContinueDragEvent
  fullName: System.Windows.ContentElement.QueryContinueDragEvent
- uid: System.Windows.ContentElement.QueryCursor
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryCursor
  nameWithType: ContentElement.QueryCursor
  fullName: System.Windows.ContentElement.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.ContentElement.QueryCursorEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryCursorEvent
  nameWithType: ContentElement.QueryCursorEvent
  fullName: System.Windows.ContentElement.QueryCursorEvent
- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.ContentElement.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: ContentElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.ContentElement.ReleaseAllTouchCaptures()
- uid: System.Windows.ContentElement.ReleaseMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: ContentElement.ReleaseMouseCapture()
  fullName: System.Windows.ContentElement.ReleaseMouseCapture()
- uid: System.Windows.ContentElement.ReleaseStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: ContentElement.ReleaseStylusCapture()
  fullName: System.Windows.ContentElement.ReleaseStylusCapture()
- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.ContentElement.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: ContentElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeCommandBindings()
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: ContentElement.ShouldSerializeInputBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeInputBindings()
- uid: System.Windows.ContentElement.StylusButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonDown
  nameWithType: ContentElement.StylusButtonDown
  fullName: System.Windows.ContentElement.StylusButtonDown
- uid: System.Windows.ContentElement.StylusButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: ContentElement.StylusButtonDownEvent
  fullName: System.Windows.ContentElement.StylusButtonDownEvent
- uid: System.Windows.ContentElement.StylusButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonUp
  nameWithType: ContentElement.StylusButtonUp
  fullName: System.Windows.ContentElement.StylusButtonUp
- uid: System.Windows.ContentElement.StylusButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: ContentElement.StylusButtonUpEvent
  fullName: System.Windows.ContentElement.StylusButtonUpEvent
- uid: System.Windows.ContentElement.StylusDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusDown
  nameWithType: ContentElement.StylusDown
  fullName: System.Windows.ContentElement.StylusDown
- uid: System.Windows.ContentElement.StylusDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusDownEvent
  nameWithType: ContentElement.StylusDownEvent
  fullName: System.Windows.ContentElement.StylusDownEvent
- uid: System.Windows.ContentElement.StylusEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusEnter
  nameWithType: ContentElement.StylusEnter
  fullName: System.Windows.ContentElement.StylusEnter
- uid: System.Windows.ContentElement.StylusEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusEnterEvent
  nameWithType: ContentElement.StylusEnterEvent
  fullName: System.Windows.ContentElement.StylusEnterEvent
- uid: System.Windows.ContentElement.StylusInAirMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInAirMove
  nameWithType: ContentElement.StylusInAirMove
  fullName: System.Windows.ContentElement.StylusInAirMove
- uid: System.Windows.ContentElement.StylusInAirMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: ContentElement.StylusInAirMoveEvent
  fullName: System.Windows.ContentElement.StylusInAirMoveEvent
- uid: System.Windows.ContentElement.StylusInRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInRange
  nameWithType: ContentElement.StylusInRange
  fullName: System.Windows.ContentElement.StylusInRange
- uid: System.Windows.ContentElement.StylusInRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: ContentElement.StylusInRangeEvent
  fullName: System.Windows.ContentElement.StylusInRangeEvent
- uid: System.Windows.ContentElement.StylusLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusLeave
  nameWithType: ContentElement.StylusLeave
  fullName: System.Windows.ContentElement.StylusLeave
- uid: System.Windows.ContentElement.StylusLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: ContentElement.StylusLeaveEvent
  fullName: System.Windows.ContentElement.StylusLeaveEvent
- uid: System.Windows.ContentElement.StylusMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusMove
  nameWithType: ContentElement.StylusMove
  fullName: System.Windows.ContentElement.StylusMove
- uid: System.Windows.ContentElement.StylusMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusMoveEvent
  nameWithType: ContentElement.StylusMoveEvent
  fullName: System.Windows.ContentElement.StylusMoveEvent
- uid: System.Windows.ContentElement.StylusOutOfRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusOutOfRange
  nameWithType: ContentElement.StylusOutOfRange
  fullName: System.Windows.ContentElement.StylusOutOfRange
- uid: System.Windows.ContentElement.StylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: ContentElement.StylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.StylusOutOfRangeEvent
- uid: System.Windows.ContentElement.StylusSystemGesture
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusSystemGesture
  nameWithType: ContentElement.StylusSystemGesture
  fullName: System.Windows.ContentElement.StylusSystemGesture
- uid: System.Windows.ContentElement.StylusSystemGestureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: ContentElement.StylusSystemGestureEvent
  fullName: System.Windows.ContentElement.StylusSystemGestureEvent
- uid: System.Windows.ContentElement.StylusUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusUp
  nameWithType: ContentElement.StylusUp
  fullName: System.Windows.ContentElement.StylusUp
- uid: System.Windows.ContentElement.StylusUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusUpEvent
  nameWithType: ContentElement.StylusUpEvent
  fullName: System.Windows.ContentElement.StylusUpEvent
- uid: System.Windows.ContentElement.TextInput
  parent: System.Windows.ContentElement
  isExternal: false
  name: TextInput
  nameWithType: ContentElement.TextInput
  fullName: System.Windows.ContentElement.TextInput
- uid: System.Windows.ContentElement.TextInputEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TextInputEvent
  nameWithType: ContentElement.TextInputEvent
  fullName: System.Windows.ContentElement.TextInputEvent
- uid: System.Windows.ContentElement.TouchDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchDown
  nameWithType: ContentElement.TouchDown
  fullName: System.Windows.ContentElement.TouchDown
- uid: System.Windows.ContentElement.TouchDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchDownEvent
  nameWithType: ContentElement.TouchDownEvent
  fullName: System.Windows.ContentElement.TouchDownEvent
- uid: System.Windows.ContentElement.TouchEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchEnter
  nameWithType: ContentElement.TouchEnter
  fullName: System.Windows.ContentElement.TouchEnter
- uid: System.Windows.ContentElement.TouchEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchEnterEvent
  nameWithType: ContentElement.TouchEnterEvent
  fullName: System.Windows.ContentElement.TouchEnterEvent
- uid: System.Windows.ContentElement.TouchesCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
  fullName: System.Windows.ContentElement.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.ContentElement.TouchesCapturedWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
  fullName: System.Windows.ContentElement.TouchesCapturedWithin
- uid: System.Windows.ContentElement.TouchesDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
  fullName: System.Windows.ContentElement.TouchesDirectlyOver
- uid: System.Windows.ContentElement.TouchesOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
  fullName: System.Windows.ContentElement.TouchesOver
- uid: System.Windows.ContentElement.TouchLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchLeave
  nameWithType: ContentElement.TouchLeave
  fullName: System.Windows.ContentElement.TouchLeave
- uid: System.Windows.ContentElement.TouchLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: ContentElement.TouchLeaveEvent
  fullName: System.Windows.ContentElement.TouchLeaveEvent
- uid: System.Windows.ContentElement.TouchMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchMove
  nameWithType: ContentElement.TouchMove
  fullName: System.Windows.ContentElement.TouchMove
- uid: System.Windows.ContentElement.TouchMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchMoveEvent
  nameWithType: ContentElement.TouchMoveEvent
  fullName: System.Windows.ContentElement.TouchMoveEvent
- uid: System.Windows.ContentElement.TouchUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchUp
  nameWithType: ContentElement.TouchUp
  fullName: System.Windows.ContentElement.TouchUp
- uid: System.Windows.ContentElement.TouchUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchUpEvent
  nameWithType: ContentElement.TouchUpEvent
  fullName: System.Windows.ContentElement.TouchUpEvent
- uid: System.Windows.ContentElement.#ctor*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ContentElement
  nameWithType: ContentElement.ContentElement
- uid: System.Windows.ContentElement.AddHandler*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler
  nameWithType: ContentElement.AddHandler
- uid: System.Windows.ContentElement.AddToEventRoute*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddToEventRoute
  nameWithType: ContentElement.AddToEventRoute
- uid: System.Windows.ContentElement.AllowDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
- uid: System.Windows.ContentElement.ApplyAnimationClock*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: ContentElement.ApplyAnimationClock
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.ContentElement.AreAnyTouchesOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
- uid: System.Windows.ContentElement.BeginAnimation*
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation
  nameWithType: ContentElement.BeginAnimation
- uid: System.Windows.ContentElement.CaptureMouse*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureMouse
  nameWithType: ContentElement.CaptureMouse
- uid: System.Windows.ContentElement.CaptureStylus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureStylus
  nameWithType: ContentElement.CaptureStylus
- uid: System.Windows.ContentElement.CaptureTouch*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureTouch
  nameWithType: ContentElement.CaptureTouch
- uid: System.Windows.ContentElement.CommandBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
- uid: System.Windows.ContentElement.Focus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focus
  nameWithType: ContentElement.Focus
- uid: System.Windows.ContentElement.Focusable*
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focusable
  nameWithType: ContentElement.Focusable
- uid: System.Windows.ContentElement.GetAnimationBaseValue*
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: ContentElement.GetAnimationBaseValue
- uid: System.Windows.ContentElement.GetUIParentCore*
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: ContentElement.GetUIParentCore
- uid: System.Windows.ContentElement.HasAnimatedProperties*
  parent: System.Windows.ContentElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
- uid: System.Windows.ContentElement.InputBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: InputBindings
  nameWithType: ContentElement.InputBindings
- uid: System.Windows.ContentElement.IsEnabled*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
- uid: System.Windows.ContentElement.IsEnabledCore*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
- uid: System.Windows.ContentElement.IsFocused*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocused
  nameWithType: ContentElement.IsFocused
- uid: System.Windows.ContentElement.IsInputMethodEnabled*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
- uid: System.Windows.ContentElement.IsKeyboardFocused*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
- uid: System.Windows.ContentElement.IsMouseCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
- uid: System.Windows.ContentElement.IsMouseCaptureWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
- uid: System.Windows.ContentElement.IsMouseDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
- uid: System.Windows.ContentElement.IsMouseOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
- uid: System.Windows.ContentElement.IsStylusCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
- uid: System.Windows.ContentElement.IsStylusCaptureWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
- uid: System.Windows.ContentElement.IsStylusDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
- uid: System.Windows.ContentElement.IsStylusOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
- uid: System.Windows.ContentElement.MoveFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: MoveFocus
  nameWithType: ContentElement.MoveFocus
- uid: System.Windows.ContentElement.OnCreateAutomationPeer*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: ContentElement.OnCreateAutomationPeer
- uid: System.Windows.ContentElement.OnDragEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragEnter
  nameWithType: ContentElement.OnDragEnter
- uid: System.Windows.ContentElement.OnDragLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragLeave
  nameWithType: ContentElement.OnDragLeave
- uid: System.Windows.ContentElement.OnDragOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragOver
  nameWithType: ContentElement.OnDragOver
- uid: System.Windows.ContentElement.OnDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDrop
  nameWithType: ContentElement.OnDrop
- uid: System.Windows.ContentElement.OnGiveFeedback*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGiveFeedback
  nameWithType: ContentElement.OnGiveFeedback
- uid: System.Windows.ContentElement.OnGotFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotFocus
  nameWithType: ContentElement.OnGotFocus
- uid: System.Windows.ContentElement.OnGotKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: ContentElement.OnGotKeyboardFocus
- uid: System.Windows.ContentElement.OnGotMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: ContentElement.OnGotMouseCapture
- uid: System.Windows.ContentElement.OnGotStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: ContentElement.OnGotStylusCapture
- uid: System.Windows.ContentElement.OnGotTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: ContentElement.OnGotTouchCapture
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: ContentElement.OnIsMouseCapturedChanged
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: ContentElement.OnIsStylusCapturedChanged
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged
- uid: System.Windows.ContentElement.OnKeyDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyDown
  nameWithType: ContentElement.OnKeyDown
- uid: System.Windows.ContentElement.OnKeyUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyUp
  nameWithType: ContentElement.OnKeyUp
- uid: System.Windows.ContentElement.OnLostFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostFocus
  nameWithType: ContentElement.OnLostFocus
- uid: System.Windows.ContentElement.OnLostKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: ContentElement.OnLostKeyboardFocus
- uid: System.Windows.ContentElement.OnLostMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: ContentElement.OnLostMouseCapture
- uid: System.Windows.ContentElement.OnLostStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: ContentElement.OnLostStylusCapture
- uid: System.Windows.ContentElement.OnLostTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: ContentElement.OnLostTouchCapture
- uid: System.Windows.ContentElement.OnMouseDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseDown
  nameWithType: ContentElement.OnMouseDown
- uid: System.Windows.ContentElement.OnMouseEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseEnter
  nameWithType: ContentElement.OnMouseEnter
- uid: System.Windows.ContentElement.OnMouseLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeave
  nameWithType: ContentElement.OnMouseLeave
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: ContentElement.OnMouseLeftButtonDown
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: ContentElement.OnMouseLeftButtonUp
- uid: System.Windows.ContentElement.OnMouseMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseMove
  nameWithType: ContentElement.OnMouseMove
- uid: System.Windows.ContentElement.OnMouseRightButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: ContentElement.OnMouseRightButtonDown
- uid: System.Windows.ContentElement.OnMouseRightButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: ContentElement.OnMouseRightButtonUp
- uid: System.Windows.ContentElement.OnMouseUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseUp
  nameWithType: ContentElement.OnMouseUp
- uid: System.Windows.ContentElement.OnMouseWheel*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseWheel
  nameWithType: ContentElement.OnMouseWheel
- uid: System.Windows.ContentElement.OnPreviewDragEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: ContentElement.OnPreviewDragEnter
- uid: System.Windows.ContentElement.OnPreviewDragLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: ContentElement.OnPreviewDragLeave
- uid: System.Windows.ContentElement.OnPreviewDragOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: ContentElement.OnPreviewDragOver
- uid: System.Windows.ContentElement.OnPreviewDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDrop
  nameWithType: ContentElement.OnPreviewDrop
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: ContentElement.OnPreviewGiveFeedback
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus
- uid: System.Windows.ContentElement.OnPreviewKeyDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: ContentElement.OnPreviewKeyDown
- uid: System.Windows.ContentElement.OnPreviewKeyUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: ContentElement.OnPreviewKeyUp
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus
- uid: System.Windows.ContentElement.OnPreviewMouseDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: ContentElement.OnPreviewMouseDown
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp
- uid: System.Windows.ContentElement.OnPreviewMouseMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: ContentElement.OnPreviewMouseMove
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp
- uid: System.Windows.ContentElement.OnPreviewMouseUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: ContentElement.OnPreviewMouseUp
- uid: System.Windows.ContentElement.OnPreviewMouseWheel*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: ContentElement.OnPreviewMouseWheel
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: ContentElement.OnPreviewQueryContinueDrag
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: ContentElement.OnPreviewStylusButtonDown
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: ContentElement.OnPreviewStylusButtonUp
- uid: System.Windows.ContentElement.OnPreviewStylusDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: ContentElement.OnPreviewStylusDown
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: ContentElement.OnPreviewStylusInAirMove
- uid: System.Windows.ContentElement.OnPreviewStylusInRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: ContentElement.OnPreviewStylusInRange
- uid: System.Windows.ContentElement.OnPreviewStylusMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: ContentElement.OnPreviewStylusMove
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: ContentElement.OnPreviewStylusOutOfRange
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: ContentElement.OnPreviewStylusSystemGesture
- uid: System.Windows.ContentElement.OnPreviewStylusUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: ContentElement.OnPreviewStylusUp
- uid: System.Windows.ContentElement.OnPreviewTextInput*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: ContentElement.OnPreviewTextInput
- uid: System.Windows.ContentElement.OnPreviewTouchDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: ContentElement.OnPreviewTouchDown
- uid: System.Windows.ContentElement.OnPreviewTouchMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: ContentElement.OnPreviewTouchMove
- uid: System.Windows.ContentElement.OnPreviewTouchUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: ContentElement.OnPreviewTouchUp
- uid: System.Windows.ContentElement.OnQueryContinueDrag*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: ContentElement.OnQueryContinueDrag
- uid: System.Windows.ContentElement.OnQueryCursor*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryCursor
  nameWithType: ContentElement.OnQueryCursor
- uid: System.Windows.ContentElement.OnStylusButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: ContentElement.OnStylusButtonDown
- uid: System.Windows.ContentElement.OnStylusButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: ContentElement.OnStylusButtonUp
- uid: System.Windows.ContentElement.OnStylusDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusDown
  nameWithType: ContentElement.OnStylusDown
- uid: System.Windows.ContentElement.OnStylusEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusEnter
  nameWithType: ContentElement.OnStylusEnter
- uid: System.Windows.ContentElement.OnStylusInAirMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: ContentElement.OnStylusInAirMove
- uid: System.Windows.ContentElement.OnStylusInRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInRange
  nameWithType: ContentElement.OnStylusInRange
- uid: System.Windows.ContentElement.OnStylusLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusLeave
  nameWithType: ContentElement.OnStylusLeave
- uid: System.Windows.ContentElement.OnStylusMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusMove
  nameWithType: ContentElement.OnStylusMove
- uid: System.Windows.ContentElement.OnStylusOutOfRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: ContentElement.OnStylusOutOfRange
- uid: System.Windows.ContentElement.OnStylusSystemGesture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: ContentElement.OnStylusSystemGesture
- uid: System.Windows.ContentElement.OnStylusUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusUp
  nameWithType: ContentElement.OnStylusUp
- uid: System.Windows.ContentElement.OnTextInput*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTextInput
  nameWithType: ContentElement.OnTextInput
- uid: System.Windows.ContentElement.OnTouchDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchDown
  nameWithType: ContentElement.OnTouchDown
- uid: System.Windows.ContentElement.OnTouchEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchEnter
  nameWithType: ContentElement.OnTouchEnter
- uid: System.Windows.ContentElement.OnTouchLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchLeave
  nameWithType: ContentElement.OnTouchLeave
- uid: System.Windows.ContentElement.OnTouchMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchMove
  nameWithType: ContentElement.OnTouchMove
- uid: System.Windows.ContentElement.OnTouchUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchUp
  nameWithType: ContentElement.OnTouchUp
- uid: System.Windows.ContentElement.PredictFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: PredictFocus
  nameWithType: ContentElement.PredictFocus
- uid: System.Windows.ContentElement.RaiseEvent*
  parent: System.Windows.ContentElement
  isExternal: false
  name: RaiseEvent
  nameWithType: ContentElement.RaiseEvent
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: ContentElement.ReleaseAllTouchCaptures
- uid: System.Windows.ContentElement.ReleaseMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: ContentElement.ReleaseMouseCapture
- uid: System.Windows.ContentElement.ReleaseStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: ContentElement.ReleaseStylusCapture
- uid: System.Windows.ContentElement.ReleaseTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: ContentElement.ReleaseTouchCapture
- uid: System.Windows.ContentElement.RemoveHandler*
  parent: System.Windows.ContentElement
  isExternal: false
  name: RemoveHandler
  nameWithType: ContentElement.RemoveHandler
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: ContentElement.ShouldSerializeCommandBindings
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: ContentElement.ShouldSerializeInputBindings
- uid: System.Windows.ContentElement.TouchesCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
- uid: System.Windows.ContentElement.TouchesCapturedWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
- uid: System.Windows.ContentElement.TouchesDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
- uid: System.Windows.ContentElement.TouchesOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
