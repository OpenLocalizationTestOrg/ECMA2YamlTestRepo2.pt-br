### YamlMime:ManagedReference
items:
- uid: System.Web.Services.WebService
  id: WebService
  children:
  - System.Web.Services.WebService.#ctor
  - System.Web.Services.WebService.Application
  - System.Web.Services.WebService.Context
  - System.Web.Services.WebService.Server
  - System.Web.Services.WebService.Session
  - System.Web.Services.WebService.SoapVersion
  - System.Web.Services.WebService.User
  langs:
  - csharp
  name: WebService
  nameWithType: WebService
  fullName: System.Web.Services.WebService
  type: Class
  summary: "Define a classe base opcional para XML Web services, que fornece acesso direto a objetos comuns do ASP.NET, como o estado de sessão e de aplicativo."
  remarks: "Se você não precisar de acesso a objetos comuns do ASP.NET, você ainda pode criar um serviço Web XML sem derivando de serviço Web. Objetos ASP.NET adicionais podem ser acessados por meio de <xref:System.Web.Services.WebService.Context%2A>.</xref:System.Web.Services.WebService.Context%2A>       Métodos de serviço da Web em XML que têm o <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A>propriedade do <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>ou <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>definida como `true`, não têm acesso a seus <xref:System.Web.HttpContext>.</xref:System.Web.HttpContext> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A> Assim, acessar qualquer uma das propriedades da classe de serviço Web, de dentro desse método de serviço da Web em XML, retornar `null`.       Se você estiver usando métodos do .NET Framework versão 1.0 XML Web Services que tenham o <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>ou <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>atributo aplicado a eles com o <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A>propriedade de conjunto para `true`, não têm acesso a seus <xref:System.Web.HttpContext>usando estático <xref:System.Web.HttpContext.Current%2A>propriedade.</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> Para acessar o <xref:System.Web.HttpContext>, derive a classe que implementa o método de serviço da Web em XML de serviço Web e acesso a <xref:System.Web.Services.WebService.Context%2A>propriedade.</xref:System.Web.Services.WebService.Context%2A> </xref:System.Web.HttpContext>"
  example:
  - "The example below creates an XML Web service, deriving from WebService, in order to use the <xref:System.Web.Services.WebService.Context%2A> property to obtain the time of the request on the server.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public class WebService : System.ComponentModel.MarshalByValueComponent'
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Web.Services.WebService.#ctor
  id: '#ctor'
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: WebService()
  nameWithType: WebService.WebService()
  fullName: System.Web.Services.WebService.WebService()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.Services.WebService&quot;> </xref> classe."
  remarks: ''
  example:
  - '[!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]'
  syntax:
    content: public WebService ();
    parameters: []
  overload: System.Web.Services.WebService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Application
  id: Application
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Application
  nameWithType: WebService.Application
  fullName: System.Web.Services.WebService.Application
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Obtém o objeto de aplicativo para a solicitação HTTP atual."
  remarks: "Os XML Web services podem usar o estado do aplicativo e o estado da sessão. Estado do aplicativo é mantido em todas as sessões acessando um serviço da Web em XML, independentemente de quando o estado da sessão é desativado para um método (usando o <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A>propriedade o <xref:System.Web.Services.WebMethodAttribute>).</xref:System.Web.Services.WebMethodAttribute> </xref:System.Web.Services.WebMethodAttribute.EnableSession%2A>"
  example:
  - "The example below demonstrates a hit counter, incrementing the count every time a browser calls the XML Web service method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "Um <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> objeto."
  overload: System.Web.Services.WebService.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Context
  id: Context
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Context
  nameWithType: WebService.Context
  fullName: System.Web.Services.WebService.Context
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Obtém o ASP.NET <xref href=&quot;System.Web.HttpContext&quot;> </xref> para a solicitação atual, que encapsula todo o contexto HTTP específica usada pelo servidor de HTTP para processar solicitações da Web."
  remarks: "Métodos de serviço da Web em XML que tenham o <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>ou <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>atributo aplicado a eles com o <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A>propriedade de conjunto para `true`, não têm acesso a seus <xref:System.Web.HttpContext>usando estático <xref:System.Web.HttpContext.Current%2A>propriedade.</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> </xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> Para acessar o <xref:System.Web.HttpContext>, derive a classe que implementa o método de serviço da Web em XML de <xref:System.Web.Services.WebService>e acessar a propriedade de contexto.</xref:System.Web.Services.WebService> </xref:System.Web.HttpContext>"
  example:
  - "The Example below uses the Context property to obtain the time of the request on the server.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "O ASP.NET <xref href=&quot;System.Web.HttpContext&quot;> </xref> para a solicitação atual."
  overload: System.Web.Services.WebService.Context*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "<code>Context</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.WebService.Server
  id: Server
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Server
  nameWithType: WebService.Server
  fullName: System.Web.Services.WebService.Server
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Obtém o <xref href=&quot;System.Web.HttpServerUtility&quot;> </xref> para a solicitação atual."
  remarks: "O <xref:System.Web.HttpServerUtility>classe fornece vários métodos que podem ser usados no processamento de solicitações da Web, incluindo <xref:System.Web.HttpServerUtility.CreateObject%2A>(para instanciar objetos COM).</xref:System.Web.HttpServerUtility.CreateObject%2A> </xref:System.Web.HttpServerUtility>"
  example:
  - "The example below returns the computer name of the Web server using the Server property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "Um <xref href=&quot;System.Web.HttpServerUtility&quot;> </xref> objeto."
  overload: System.Web.Services.WebService.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Session
  id: Session
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Session
  nameWithType: WebService.Session
  fullName: System.Web.Services.WebService.Session
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Obtém o <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref> instância para a solicitação atual."
  remarks: ''
  example:
  - "The example below uses session state to determine how many times a particular session accesses the XML Web service method `SessionHitCounter`. In this example, the <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> property of the <xref:System.Web.Services.WebMethodAttribute> is set to `true` in order to gain access to session state.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "Um <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref> que representa o objeto de estado de sessão ASP.NET para a sessão atual."
  overload: System.Web.Services.WebService.Session*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: SoapVersion
  nameWithType: WebService.SoapVersion
  fullName: System.Web.Services.WebService.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Obtém a versão do protocolo SOAP usada para fazer a solicitação SOAP para o serviço Web XML."
  remarks: "Se o protocolo SOAP não foi usado para se comunicar com o serviço da Web em XML, como HTTP GET ou POST HTTP, o valor da propriedade SoapVersion é <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion>       Para XML Web services que não derivam de <xref:System.Web.Services.WebService>classe, a versão do protocolo SOAP usada para fazer a solicitação SOAP para o serviço ser também podem ser acessados usando a entrada &quot;WebServiceSoapVersion&quot; do XML Web o <xref:System.Web.HttpContext.Items%2A?displayProperty=fullName>propriedade.</xref:System.Web.HttpContext.Items%2A?displayProperty=fullName> </xref:System.Web.Services.WebService> Essa entrada é do tipo <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion>"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "Uma da <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref> valores. O padrão é <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>."
  overload: System.Web.Services.WebService.SoapVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.User
  id: User
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: User
  nameWithType: WebService.User
  fullName: System.Web.Services.WebService.User
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Obtém o servidor ASP.NET <xref:System.Web.HttpContext.User*>objeto.</xref:System.Web.HttpContext.User*> Pode ser usado para autenticar se um usuário está autorizado a executar a solicitação."
  remarks: "Both Internet Information Services (IIS) and the .NET Framework need to be configured for authentication in order for the User property to be meaningful. Authentication is the process of accepting credentials from a user and validating those credentials against some authority. If the credentials are valid, you have an authenticated identity. Authentication in the .NET Framework is configured by placing entries in the web.config file.  \n  \n The following example demonstrates the entries you place in the web.config file to enable Windows authentication.  \n  \n```  \n<security>  \n <authentication mode=\"Windows\"> <!-- Mode Options are Windows, Cookie, Passport and None or Empty String -->  \n </authentication>  \n </security>  \n```  \n  \n For more information on setting up security for an XML Web service see [&#91;\\<topic://cpconSecuringASPNETWebServices>&#93;](http://msdn.microsoft.com/en-us/354b2ab1-2782-4542-b32a-dc560178b90c)."
  example:
  - "The example below looks up the authenticated user name and returns that name.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "Um <xref:System.Security.Principal.IPrincipal>que representa o servidor do ASP.NET <xref:System.Web.HttpContext.User*>objeto.</xref:System.Web.HttpContext.User*> </xref:System.Security.Principal.IPrincipal>"
  overload: System.Web.Services.WebService.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Web.Services.WebService.#ctor
  parent: System.Web.Services.WebService
  isExternal: false
  name: WebService()
  nameWithType: WebService.WebService()
  fullName: System.Web.Services.WebService.WebService()
- uid: System.Web.Services.WebService.Application
  parent: System.Web.Services.WebService
  isExternal: false
  name: Application
  nameWithType: WebService.Application
  fullName: System.Web.Services.WebService.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.Services.WebService.Context
  parent: System.Web.Services.WebService
  isExternal: false
  name: Context
  nameWithType: WebService.Context
  fullName: System.Web.Services.WebService.Context
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.Services.WebService.Server
  parent: System.Web.Services.WebService
  isExternal: false
  name: Server
  nameWithType: WebService.Server
  fullName: System.Web.Services.WebService.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.Services.WebService.Session
  parent: System.Web.Services.WebService
  isExternal: false
  name: Session
  nameWithType: WebService.Session
  fullName: System.Web.Services.WebService.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.Services.WebService.SoapVersion
  parent: System.Web.Services.WebService
  isExternal: false
  name: SoapVersion
  nameWithType: WebService.SoapVersion
  fullName: System.Web.Services.WebService.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.WebService.User
  parent: System.Web.Services.WebService
  isExternal: false
  name: User
  nameWithType: WebService.User
  fullName: System.Web.Services.WebService.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Services.WebService.#ctor*
  parent: System.Web.Services.WebService
  isExternal: false
  name: WebService
  nameWithType: WebService.WebService
- uid: System.Web.Services.WebService.Application*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Application
  nameWithType: WebService.Application
- uid: System.Web.Services.WebService.Context*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Context
  nameWithType: WebService.Context
- uid: System.Web.Services.WebService.Server*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Server
  nameWithType: WebService.Server
- uid: System.Web.Services.WebService.Session*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Session
  nameWithType: WebService.Session
- uid: System.Web.Services.WebService.SoapVersion*
  parent: System.Web.Services.WebService
  isExternal: false
  name: SoapVersion
  nameWithType: WebService.SoapVersion
- uid: System.Web.Services.WebService.User*
  parent: System.Web.Services.WebService
  isExternal: false
  name: User
  nameWithType: WebService.User
