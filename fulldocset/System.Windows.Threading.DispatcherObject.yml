### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "Representa um objeto que está associado com um <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "Somente o thread que o <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>foi criado na pode acessar o DispatcherObject diretamente.</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>  Para acessar um DispatcherObject de um thread que não seja o thread de DispatcherObject foi criado, chamar <xref:System.Windows.Threading.Dispatcher.Invoke%2A>ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>no <xref:System.Windows.Threading.Dispatcher>o DispatcherObject está associado.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       As subclasses de DispatcherObject que precisam para impor a segurança do thread podem fazer isso chamando <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>em todos os métodos públicos.</xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>  Isso garante que o thread de chamada é o thread em que o DispatcherObject foi criado.       Não é possível instanciar independentemente um DispatcherObject; ou seja, todos os construtores são protegidos.       Objetos que derivam DispatcherObject têm afinidade de thread.       Objetos que derivam de <xref:System.Windows.Freezable>são free-thread quando eles estão congelados.</xref:System.Windows.Freezable>  Para obter mais informações, consulte o [visão geral de objetos Freezable](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> classe."
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Determina se o thread de chamada tem acesso a esse <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Somente o thread de <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>foi criado na pode acessar <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Qualquer thread pode verificar se ele tem acesso a esta <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>       A diferença entre CheckAccess e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>é que CheckAccess retorna um valor booleano que especifica se o thread de chamada tem acesso a esse <xref:System.Windows.Threading.DispatcherObject>e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>lança uma exceção se o thread de chamada não tem acesso a esta <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>       Chamar esse método é idêntico ao chamar <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>em associado <xref:System.Windows.Threading.Dispatcher>objeto.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o thread de chamada tem acesso a este objeto; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Obtém o <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> isso <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> está associado."
  remarks: "Somente o thread em que o Dispatcher foi criado pode acessar o <xref:System.Windows.Threading.DispatcherObject>diretamente.</xref:System.Windows.Threading.DispatcherObject>  Para acessar um <xref:System.Windows.Threading.DispatcherObject>de um thread que não seja o thread a <xref:System.Windows.Threading.DispatcherObject>foi criada, chame <xref:System.Windows.Threading.Dispatcher.Invoke%2A>e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>no <xref:System.Windows.Threading.Dispatcher>o <xref:System.Windows.Threading.DispatcherObject>está associado.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject>"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "O dispatcher."
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Impõe que o thread de chamada tem acesso a esse <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Somente o thread de <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>foi criado na pode acessar <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Qualquer thread pode verificar se ele tem acesso a esta <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>       A diferença entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>e VerifyAccess é que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>retorna um valor booleano que especifica se o thread de chamada tem acesso a esse <xref:System.Windows.Threading.DispatcherObject>e VerifyAccess lança uma exceção se o thread de chamada não tem acesso a esta <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "o thread de chamada não tem acesso a esse <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
