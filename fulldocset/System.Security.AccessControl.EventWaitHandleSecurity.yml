### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  id: EventWaitHandleSecurity
  children:
  - System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  langs:
  - csharp
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
  type: Class
  summary: "Representa a segurança de controle de acesso do Windows aplicada a um identificador de espera do sistema nomeado. Essa classe não pode ser herdada."
  remarks: "Um objeto EventWaitHandleSecurity Especifica os direitos de acesso para um identificador de espera do sistema nomeado e também especifica a maneira como as tentativas de acesso são auditadas. Direitos de acesso para o identificador de espera são expressos como regras, com cada regra de acesso representado por um <xref:System.Security.AccessControl.EventWaitHandleAccessRule>objeto.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> Cada regra de auditoria é representada por um <xref:System.Security.AccessControl.EventWaitHandleAuditRule>objeto.</xref:System.Security.AccessControl.EventWaitHandleAuditRule>       Isso reflete o sistema de segurança de Windows subjacente, em que cada objeto protegível tem no máximo um controle lista de acesso discricionário (DACL) que controla o acesso para o objeto protegido e no máximo um sistema controle lista de acesso (SACL) que especifica que as tentativas de acesso são auditadas. A DACL e SACL são ordenados listas de entradas de controle de acesso (ACE) que especificam o acesso e auditoria para usuários e grupos. Um <xref:System.Security.AccessControl.EventWaitHandleAccessRule>ou <xref:System.Security.AccessControl.EventWaitHandleAuditRule>objeto pode representar mais de uma ACE.</xref:System.Security.AccessControl.EventWaitHandleAuditRule> </xref:System.Security.AccessControl.EventWaitHandleAccessRule>      > [!NOTE] > Um <xref:System.Threading.EventWaitHandle>objeto pode representar um identificador de espera local ou identificador de espera de um sistema nomeado.</xref:System.Threading.EventWaitHandle> Segurança de controle de acesso do Windows é significativa apenas para os identificadores de espera do sistema nomeado.       EventWaitHandleSecurity, <xref:System.Security.AccessControl.EventWaitHandleAccessRule>, e <xref:System.Security.AccessControl.EventWaitHandleAuditRule>classes ocultar os detalhes de implementação de ACLs e ACEs.</xref:System.Security.AccessControl.EventWaitHandleAuditRule> </xref:System.Security.AccessControl.EventWaitHandleAccessRule> Elas permitem que você ignore os diferentes tipos ACE dezessete e a complexidade de manter corretamente herança e propagação de direitos de acesso. Esses objetos também foram projetados para impedir que os seguintes erros comuns de controle de acesso:-criar um descritor de segurança com uma DACL null. Uma referência nula para uma DACL permite que qualquer usuário adicionar regras de acesso a um objeto, potencialmente, criando um ataque de negação de serviço. Um novo objeto EventWaitHandleSecurity sempre começa com uma DACL vazia, o que nega todo o acesso para todos os usuários.      -Violando a ordem canônica de ACEs. Se a lista ACE na DACL não é mantida na ordem canônica, os usuários podem inadvertidamente receberá acesso para o objeto protegido. Por exemplo, os direitos de acesso negado sempre devem aparecer antes de direitos de acesso permitido. Objetos EventWaitHandleSecurity mantém a ordem correta internamente.      -Manipulando os sinalizadores de descritor de segurança, que devem estar sob controle do Gerenciador de recursos somente.      -Criar combinações inválidas de sinalizadores ACE.      -Manipulação de ACEs herdadas. Herança e propagação são manipulados pelo Gerenciador de recursos, em resposta a alterações feitas às regras de acesso e auditoria.      -Inserir ACEs sentidas em ACLs.       Os recursos somente os objetos de segurança do .NET não oferece suportados são perigosas atividades que devem ser evitadas, a maioria dos desenvolvedores de aplicativos, como o seguinte:-tarefas de nível inferior que são normalmente executadas pelo Gerenciador de recursos.      -Adicionar ou remover entradas de controle de acesso de maneiras que não precisam manter a ordem canônica.       Para modificar a segurança de controle de acesso do Windows para um identificador de espera nomeado, use o <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>método para obter o objeto EventWaitHandleSecurity.</xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> Modificar o objeto de segurança, adicionando e removendo regras e, em seguida, use o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>método anexar novamente o proprietário.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > As alterações feitas a um objeto EventWaitHandleSecurity não afetam os níveis de acesso do identificador nomeada espera até que você chamar o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>método para atribuir o objeto de segurança alterado para o identificador de espera nomeado.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>       Para copiar a segurança de controle de acesso do identificador de espera de um para outro, use o <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>método para obter um objeto EventWaitHandleSecurity que representa as regras de acesso e auditoria para o identificador de espera primeiro e, em seguida, use o <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>método ou um construtor que aceita um objeto EventWaitHandleSecurity, para atribuir essas regras para a segunda espera tratar.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       Os usuários com um investimento em linguagem de definição de descritor de segurança (SDDL) podem usar o <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>método para definir regras de acesso para um identificador de espera nomeada e o <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>método para obter uma cadeia de caracteres que representa as regras de acesso no formato SDDL.</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> Isso não é recomendado para novo desenvolvimento."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an EventWaitHandleSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_14_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_14_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe com valores padrão."
  remarks: "Um novo <xref:System.Security.AccessControl.EventWaitHandleSecurity>objeto sempre começa com uma lista vazia de acesso discricionário (DACL), que nega todo o acesso para todos os usuários.</xref:System.Security.AccessControl.EventWaitHandleSecurity>"
  syntax:
    content: public EventWaitHandleSecurity ();
    parameters: []
  overload: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Essa classe não tem suporte no Windows 98 ou Windows Millennium Edition."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o tipo de enumeração que o <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe usa para representar os direitos de acesso."
  remarks: "Classes que derivam de <xref:System.Security.AccessControl.ObjectSecurity>classe substituição de <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>propriedade e retornar o tipo que eles usam para representar os direitos de acesso.</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Quando você trabalha com matrizes ou coleções que contêm vários tipos de objetos de segurança, use essa propriedade para determinar o tipo de enumeração correto a ser usado com cada objeto de segurança."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "Um <xref:System.Type>objeto representando o <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> enumeração.</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cria uma nova regra de controle de acesso para o usuário especificado, com direitos de acesso especificado, o controle de acesso e os sinalizadores."
  remarks: "A maneira recomendada para criar regras de controle de acesso é usar os construtores de <xref:System.Security.AccessControl.EventWaitHandleAccessRule>classe.</xref:System.Security.AccessControl.EventWaitHandleAccessRule>      > [!NOTE] > Embora sinalizadores de herança e propagação fazem sentidos para eventos nomeados, ainda é possível especificá-los. Isso não é recomendável, pois ela desnecessariamente complica a manutenção de regras, por exemplo por interferir com a combinação de regras que seriam compatíveis."
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Um <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> que identifica o usuário ou grupo a regra se aplica a."
    - id: accessMask
      type: System.Int32
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valores que especificam os direitos de acesso para permitir ou negar, convertido em um número inteiro."
    - id: isInherited
      type: System.Boolean
      description: "Sentido de identificadores de espera nomeada, porque eles têm nenhuma hierarquia."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Sentido de identificadores de espera nomeada, porque eles têm nenhuma hierarquia."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Sentido de identificadores de espera nomeada, porque eles têm nenhuma hierarquia."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uma da <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valores que especificam se os direitos são permitidos ou negados."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "Um <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> objeto que representa os direitos especificados para o usuário especificado."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, ou <code>type</code> Especifica um valor inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>accessMask</code> é zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>não é nem do tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, nem de um tipo como <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> que pode ser convertido no tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o tipo que o <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe usa para representar as regras de acesso."
  remarks: "Classes que derivam de <xref:System.Security.AccessControl.ObjectSecurity>classe substituição a <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>propriedade e retornar o tipo que eles usam para representar as regras de acesso.</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Quando você trabalha com matrizes ou coleções que contêm vários tipos de objetos de segurança, use essa propriedade para determinar o tipo de regra de acesso corretas para usar com cada objeto de segurança."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "Um <xref:System.Type>objeto representando o <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> classe</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Procura por uma regra de controle de acesso correspondente com a qual a nova regra pode ser mesclada. Se nenhum for encontrado, adiciona a nova regra."
  remarks: "O método AddAccessRule procura regras com o mesmo usuário ou grupo e o mesmo <xref:System.Security.AccessControl.AccessControlType>como `rule`.</xref:System.Security.AccessControl.AccessControlType> Se nenhum for encontrado, `rule` é adicionado. Se uma regra de correspondência for encontrada, os direitos no `rule` são mescladas com a regra existente."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/729692a8-5e98-486a-9864-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/729692a8-5e98-486a-9864-_1.vb)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "A regra de controle de acesso para adicionar."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Procura por uma regra de auditoria com a qual a nova regra pode ser mesclada. Se nenhum for encontrado, adiciona a nova regra."
  remarks: "O método AddAuditRule procura regras com o mesmo usuário ou grupo como `rule`. Se nenhum for encontrado, `rule` é adicionado. Se uma regra de correspondência for encontrada, os sinalizadores no `rule` são mesclados para a regra existente."
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "A regra de auditoria para adicionar. O usuário especificado por essa regra determina a pesquisa."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cria uma nova regra de auditoria, especificando o usuário que a regra se aplica, os direitos de acesso para auditoria e o resultado que dispara a regra de auditoria."
  remarks: "A maneira recomendada para criar regras de auditoria é usar os construtores de <xref:System.Security.AccessControl.EventWaitHandleAuditRule>classe.</xref:System.Security.AccessControl.EventWaitHandleAuditRule>      > [!NOTE] > Embora sinalizadores de herança e propagação fazem sentidos para eventos nomeados, ainda é possível especificá-los. Isso não é recomendável, pois ela desnecessariamente complica a manutenção de regras, por exemplo por interferir com a combinação de regras que seriam compatíveis."
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Um <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> que identifica o usuário ou grupo a regra se aplica a."
    - id: accessMask
      type: System.Int32
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valores que especificam os direitos de acesso para auditoria, convertido em um número inteiro."
    - id: isInherited
      type: System.Boolean
      description: "Sentido de identificadores de espera nomeada, porque eles têm nenhuma hierarquia."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Sentido de identificadores de espera nomeada, porque eles têm nenhuma hierarquia."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Sentido de identificadores de espera nomeada, porque eles têm nenhuma hierarquia."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> valores que especificam se a auditoria de acesso com êxito, falhas de acesso ou ambos."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "Um <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> objeto que representa a regra de auditoria para o usuário especificado. O tipo de retorno do método é a classe base, <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>, mas o valor de retorno pode ser convertido com segurança para a classe derivada."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, ou <code>flags</code> Especifica um valor inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>accessMask</code> é zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>não é nem do tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, nem de um tipo como <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> que pode ser convertido no tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o tipo que o <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe usa para representar as regras de auditoria."
  remarks: "Classes que derivam de <xref:System.Security.AccessControl.ObjectSecurity>classe substituição a <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>propriedade e retornar o tipo que eles usam para representar os direitos de auditoria.</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Quando você trabalha com matrizes ou coleções que contêm vários tipos de objetos de segurança, use essa propriedade para determinar o tipo de regra de auditoria correto a ser usado com cada objeto de segurança."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "Um <xref:System.Type>objeto representando o <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> classe</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Procura uma regra de controle de acesso com o mesmo usuário e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (permitir ou negar) como a regra de acesso especificado e com herança compatível e sinalizadores de propagação; se tal uma regra for encontrada, os direitos contidos na regra de acesso especificado serão removidos dele."
  remarks: "Atual <xref:System.Security.AccessControl.EventWaitHandleSecurity>é pesquisada para uma regra que tem o mesmo usuário e o mesmo <xref:System.Security.AccessControl.AccessControlType>valor como `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.EventWaitHandleSecurity> Se nenhuma regra for encontrada, nenhuma ação é executada e o método retornará `false`. Se as regras de correspondência for encontradas, seus sinalizadores de herança e compatibilidade são verificados quanto à compatibilidade com os sinalizadores especificados na `rule`. Se nenhuma regra compatível foi encontrada, nenhuma ação é executada e o método retornará `false`. Se uma regra com sinalizadores compatíveis for encontrada, os direitos especificados em `rule` são removidos da regra compatível, e o método retornará `true`. Se `rule` Especifica direitos não contidos na regra compatível, nenhuma ação será tomada em relação a esses direitos. Se todos os direitos são removidos da regra compatível, toda a regra será removida do atual <xref:System.Security.AccessControl.EventWaitHandleSecurity>objeto.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Embora você possa especificar sinalizadores de herança e propagação para regras de acesso de eventos, criando-as com o <xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A>método, isso não é recomendado.</xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A> Herança e propagação não têm significado para eventos nomeados e façam a manutenção de regras de acesso mais complicado."
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.EventWaitHandleRights>, <xref:System.Security.AccessControl.EventWaitHandleRights>, and <xref:System.Security.AccessControl.EventWaitHandleRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.EventWaitHandleRights> and <xref:System.Security.AccessControl.EventWaitHandleRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.EventWaitHandleRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The <xref:System.Security.AccessControl.EventWaitHandleRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/22dce09a-3e98-48e6-a61f-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/22dce09a-3e98-48e6-a61f-_1.vb)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Um <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> que especifica o usuário e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> para pesquisa e um conjunto de sinalizadores de herança e propagação que a correspondência de uma regra, se encontrado, deve ser compatível com. Especifica os direitos para remover a regra compatíveis, se encontrado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se for encontrada uma regra compatível; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Pesquisas para todas as regras de controle com o mesmo usuário de acesso e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (permitir ou negar) conforme o especificado regra e, se encontrado, remove-los."
  remarks: "Atual <xref:System.Security.AccessControl.EventWaitHandleSecurity>é pesquisada para regras que têm o mesmo usuário e o mesmo <xref:System.Security.AccessControl.AccessControlType>valor como `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.EventWaitHandleSecurity> Quaisquer direitos especificados pelo `rule` são ignorados quando executar esta pesquisa. Todas as regras correspondentes são removidas. Se nenhuma regra de correspondência for encontrada, nenhuma ação é executada."
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/a6ff73cc-4227-4079-abe7-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/a6ff73cc-4227-4079-abe7-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Um <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> que especifica o usuário e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> para pesquisar. Quaisquer direitos especificados por essa regra são ignorados."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Procura por uma regra de controle de acesso que corresponda exatamente ao especificado regra e, se encontrado, remove-lo."
  remarks: "A regra será removida somente se ele corresponde exatamente `rule` em todos os detalhes, incluindo sinalizadores. Outras regras com o mesmo usuário e <xref:System.Security.AccessControl.AccessControlType>não são afetados.</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > Uma regra representa um ou mais subjacente entradas controle de acesso (ACE), e essas entradas são divididas ou combinadas conforme necessário, quando você modificar as regras de segurança de acesso para um usuário. Portanto, uma regra talvez não exista mais no formulário específico que tinha quando foi adicionado, e nesse caso o método RemoveAccessRuleSpecific não pode removê-lo."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/4b0413fe-85b1-4175-8dfd-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/4b0413fe-85b1-4175-8dfd-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "O <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> para remover."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Procura uma regra de auditoria com o mesmo usuário conforme a regra especificada e com herança compatível e sinalizadores de propagação; Se uma regra compatível for encontrada, os direitos contidos na regra especificada são removidos dele."
  remarks: "Atual <xref:System.Security.AccessControl.EventWaitHandleSecurity>é pesquisada para uma regra de auditoria que tenha o mesmo usuário conforme `rule`.</xref:System.Security.AccessControl.EventWaitHandleSecurity> Se nenhuma regra for encontrada, nenhuma ação é executada e o método retornará `false`. Se as regras de correspondência for encontradas, seus sinalizadores de herança e compatibilidade são verificados quanto à compatibilidade com os sinalizadores especificados na `rule`. Se nenhuma regra compatível foi encontrada, nenhuma ação é executada e o método retornará `false`. Se uma regra com sinalizadores compatíveis for encontrada, os direitos especificados em `rule` são removidos da regra compatível, e o método retornará `true`. Se `rule` Especifica direitos não contidos na regra compatível, nenhuma ação será tomada em relação a esses direitos. Se todos os direitos são removidos da regra compatível, toda a regra será removida do atual <xref:System.Security.AccessControl.EventWaitHandleSecurity>objeto.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Embora você possa especificar sinalizadores de herança e propagação para regras de auditoria de eventos, criando-as com o <xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A>método, isso não é recomendado.</xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A> Herança e propagação não têm significado para eventos nomeados e façam a manutenção de regras de auditoria mais complicado."
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Um <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> que especifica o usuário para procurar e um conjunto de sinalizadores de herança e propagação de uma correspondência de regra, se encontrado, deve ser compatível com. Especifica os direitos para remover a regra compatíveis, se encontrado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se for encontrada uma regra compatível; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Pesquisa para todas as regras com o mesmo usuário conforme a regra especificada de auditoria e, se encontrado, remove-los."
  remarks: "Atual <xref:System.Security.AccessControl.EventWaitHandleSecurity>é pesquisada para regras de auditoria que têm o mesmo usuário conforme `rule`.</xref:System.Security.AccessControl.EventWaitHandleSecurity> Quaisquer direitos especificados pelo `rule` são ignorados quando executar esta pesquisa. Todas as regras correspondentes são removidas. Se nenhuma regra de correspondência for encontrada, nenhuma ação é executada."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Um <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> que especifica o usuário a ser pesquisado. Quaisquer direitos especificados por essa regra são ignorados."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Procura por uma regra de auditoria que corresponda exatamente ao especificado regra e, se encontrado, remove-lo."
  remarks: "A regra será removida somente se ele corresponde exatamente `rule` em todos os detalhes, incluindo sinalizadores. Outras regras de auditoria para o mesmo usuário não são afetadas.      > [!IMPORTANT] > Uma regra representa um ou mais subjacente entradas controle de acesso (ACE), e essas entradas são divididas ou combinadas conforme necessário, quando você modificar as regras de segurança de auditoria para um usuário. Portanto, uma regra talvez não exista mais no formulário específico que tinha quando foi adicionado, e nesse caso o método RemoveAuditRuleSpecific não pode removê-lo."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "O <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> para remover."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Remove todas as regras de controle de acesso com o mesmo usuário conforme a regra especificada, independentemente de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>e, em seguida, adiciona a regra especificada."
  remarks: "Se não houver nenhuma regra de acesso cujo usuário corresponder a regra especificada, `rule` é adicionado."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/831b1f62-72fc-4f57-bcc7-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/831b1f62-72fc-4f57-bcc7-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. O usuário especificado por essa regra determina as regras para remover antes de é adicionada a essa regra."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Remove todas as regras de controle de acesso com o mesmo usuário e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (permitir ou negar) como a regra especificada e, em seguida, adiciona a regra especificada."
  remarks: "Se a regra especificada tem <xref:System.Security.AccessControl.AccessControlType>, é o efeito desse método para remover todos os <xref:System.Security.AccessControl.AccessControlType>regras para o usuário especificado, substituindo-os com a regra especificada.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> Se a regra especificada tem <xref:System.Security.AccessControl.AccessControlType>, todos os <xref:System.Security.AccessControl.AccessControlType>regras para o usuário especificado são substituídas com a regra especificada.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       Se não houver nenhuma regra cujo usuário e <xref:System.Security.AccessControl.AccessControlType>correspondem à regra especificada, `rule` é adicionado.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing <xref:System.Security.AccessControl.AccessControlType> rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/2e843fc0-0bf3-426e-ae6b-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/csharp/2e843fc0-0bf3-426e-ae6b-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. O usuário e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> desta regra determinam as regras para remover antes de é adicionada a essa regra."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Remove todas as regras com o mesmo usuário conforme a regra especificada, de auditoria independentemente do <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> valor e, em seguida, adiciona a regra especificada."
  remarks: "Se não houver nenhuma regra de auditoria cujo usuário corresponder a regra especificada, `rule` é adicionado."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;></xref> to add. O usuário especificado por essa regra determina as regras para remover antes de é adicionada a essa regra."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAuditRule
  nameWithType: EventWaitHandleAuditRule
  fullName: System.Security.AccessControl.EventWaitHandleAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: EventWaitHandleSecurity.AddAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: EventWaitHandleSecurity.AddAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: EventWaitHandleSecurity.ResetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: EventWaitHandleSecurity.SetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: EventWaitHandleSecurity.SetAuditRule
