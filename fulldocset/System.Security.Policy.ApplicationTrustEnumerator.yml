### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.ApplicationTrustEnumerator
  id: ApplicationTrustEnumerator
  children:
  - System.Security.Policy.ApplicationTrustEnumerator.Current
  - System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  - System.Security.Policy.ApplicationTrustEnumerator.Reset
  - System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: ApplicationTrustEnumerator
  nameWithType: ApplicationTrustEnumerator
  fullName: System.Security.Policy.ApplicationTrustEnumerator
  type: Class
  summary: "Representa o enumerador para <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> objetos no <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref> coleção."
  remarks: "Enumeradores permitem apenas ler os dados na coleção. Enumeradores não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. O <xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>método também traz o enumerador de volta para essa posição.</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> AT isso posicionar, chamando o <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>propriedade gera uma exceção.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> Portanto, você deve chamar o <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>método para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor da <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>propriedade.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>ou <xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>é chamado.</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>define <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>para o próximo elemento.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       Após o final da coleção for passado, o enumerador está posicionado após o último elemento da coleção e chamada <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>retorna `false`.</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> Se a última chamada <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>retornado `false`, chamar <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>lança uma exceção.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> Redefinir <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>para o primeiro elemento da coleção, chame <xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>seguido por uma chamada para <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>.</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>ou <xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>lança um <xref:System.InvalidOperationException>exceção.</xref:System.InvalidOperationException> </xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> Se a coleção é modificada entre chamar <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>e <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>, <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>retorna o elemento ao qual ela está definida, mesmo se o enumerador já é invalidado.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de thread-safe. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ApplicationTrustEnumerator : System.Collections.IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current
  id: Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Obtém a atual <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> objeto o <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref> coleção."
  remarks: "Quando o enumerador é criado, ele não aponta para um objeto para a propriedade atual não é válida e lançará uma exceção se ele for acessado. Você deve primeiro chamar o <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>método para posicionar o cursor no primeiro objeto na coleção.</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       Várias chamadas atual com nenhuma intervenção chamadas para <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>retornará o mesmo <xref:System.Security.Policy.ApplicationTrust>objeto.</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Security.Policy.ApplicationTrust Current { get; }
    return:
      type: System.Security.Policy.ApplicationTrust
      description: "The current <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref> in the <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>."
  overload: System.Security.Policy.ApplicationTrustEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: ApplicationTrustEnumerator.MoveNext()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Move para o próximo elemento o <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref> coleção."
  remarks: "O método MoveNext retorna imediatamente `false` se não existem objetos na coleção.       MoveNext retornará `true` até que ele tenha atingido o final da coleção. Em seguida, ele retornará `false` para cada chamada sucessiva. No entanto, após MoveNext retornou `false`, acessando o <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>propriedade gerará uma exceção.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>       Após a criação, um enumerador está posicionado antes da primeira <xref:System.Security.Policy.ApplicationTrust>objeto na coleção e a primeira chamada para MoveNext posiciona o enumerador no primeiro objeto na coleção.</xref:System.Security.Policy.ApplicationTrust>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o enumerador foi avançado com êxito para o próximo elemento; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o enumerador tiver passado o final da coleção."
  overload: System.Security.Policy.ApplicationTrustEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset
  id: Reset
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: ApplicationTrustEnumerator.Reset()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Redefine o enumerador para o início do <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref> coleção."
  remarks: "Um enumerador move em uma direção de somente avanço. Use esse método para retornar o enumerador para o início da coleção de <xref:System.Security.Policy.ApplicationTrust>objetos.</xref:System.Security.Policy.ApplicationTrust>       O método Reset posiciona o cursor no primeiro objeto na coleção. Depois de chamar redefinir, você não precisa chamar o <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>método para mover o cursor para frente para o primeiro objeto.</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Policy.ApplicationTrustEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Obtém a atual <xref:System.Object>no <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref> coleção.</xref:System.Object>"
  remarks: "Não chame este método; Use o <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>propriedade em vez disso.</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Atual <xref:System.Object>no <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>.</xref:System.Object>"
  overload: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Current
- uid: System.Security.Policy.ApplicationTrust
  parent: System.Security.Policy
  isExternal: false
  name: ApplicationTrust
  nameWithType: ApplicationTrust
  fullName: System.Security.Policy.ApplicationTrust
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: ApplicationTrustEnumerator.MoveNext()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Reset()
  nameWithType: ApplicationTrustEnumerator.Reset()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Reset()
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: ApplicationTrustEnumerator.MoveNext
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Reset
  nameWithType: ApplicationTrustEnumerator.Reset
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
