### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "Seleciona um membro de uma lista de candidatos e executa a conversão de tipo de argumento de tipo para o tipo de argumento formal."
  remarks: "Implementações de classe associador são usadas por métodos como <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, que seleciona um conjunto de membros possíveis para ser executada, com base em um conjunto de tipos de parâmetro e valores de argumento. <xref:System.Type.GetMethod%2A?displayProperty=fullName>, que seleciona um método com base em tipos de parâmetro; e assim por diante.</xref:System.Type.GetMethod%2A?displayProperty=fullName> </xref:System.Type.InvokeMember%2A?displayProperty=fullName>       Uma implementação padrão da classe associador é fornecida pelo <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>propriedade.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName>"
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Reflection.Binder&quot;> </xref> classe."
  remarks: "Este construtor é chamado pelos construtores de classes derivadas, para inicializar o estado nesse tipo."
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona um campo de um determinado conjunto de campos, com base nos critérios especificados."
  remarks: "Se `bindingAttr` não inclui <xref:System.Reflection.BindingFlags?displayProperty=fullName>, a implementação de fichário padrão fornecida pelo <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>simplesmente retorna o primeiro elemento da `match`.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Nenhuma seleção for feita.       Esse método controla a associação fornecida pelo <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "O conjunto de campos que são candidatos para correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é usado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, esse parâmetro especifica o conjunto de campos reflexão determinou ser possível corresponde, normalmente porque eles têm o nome do membro correto. A implementação padrão fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; altera a ordem dessa matriz."
    - id: value
      type: System.Object
      description: "O valor do campo usado para localizar um campo correspondente."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>que é usada para controlar a coerção de tipos de dados, em implementações de binder que tipos de forçar.</xref:System.Globalization.CultureInfo> Se `culture` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o <xref:System.Globalization.CultureInfo>para o segmento atual é usado.</xref:System.Globalization.CultureInfo>       Observação: por exemplo, se uma implementação de associador de coerção de valores de cadeia de caracteres em tipos numéricos, permite que esse parâmetro é necessário para converter um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> de valor, porque 1000 é representados de maneira diferente por diferentes culturas. O associador padrão não tais coerções de cadeia de caracteres."
    return:
      type: System.Reflection.FieldInfo
      description: "O campo de correspondência."
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o associador de padrão <code> bindingAttr </code> inclui <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, e <code> match </code> contém vários campos que são igualmente bom correspondências para <code> value </code>. Por exemplo, <code> value </code> contém um `MyClass` objeto que implementa o `IMyClass` interface, e <code> match </code> contém um campo do tipo `MyClass` e um campo do tipo `IMyClass`."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "Para o associador de padrão <code> bindingAttr </code> inclui <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, e <code> match </code> não contém campos que podem aceitar <code> value </code>."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "Para o associador de padrão <code> bindingAttr </code> inclui <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, e <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia.       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona um método para invocação de um determinado conjunto de métodos, de acordo com os argumentos fornecidos."
  remarks: "O associador padrão leva em consideração os dois parâmetros que têm valores e `params` matrizes (`ParamArray` matrizes no Visual Basic). Portanto, é possível encontrar uma correspondência em casos onde `args` e `match` não contêm o mesmo número de elementos.       O associador permite que um cliente mapear a matriz de argumentos de volta para seu formato original se a matriz de argumentos foram manipulada pelo BindToMethod. Use esse recurso remapear obter argumentos por referência quando esses argumentos estão presentes. Quando você passar argumentos por nome, o associador reorganiza a matriz de argumentos. O `state` parâmetro mantém o controle de argumento reordenação, permitindo que o associador <xref:System.Reflection.Binder.ReorderArgumentArray%2A>método para reordenar a matriz de argumentos para seu formato original.</xref:System.Reflection.Binder.ReorderArgumentArray%2A>       O método BindToMethod é usado pelo <xref:System.Type.InvokeMember%2A?displayProperty=fullName>método.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "O conjunto de métodos que são candidatos para correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é usado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, esse parâmetro especifica o conjunto de métodos de reflexão determinou ser possível corresponde, normalmente porque eles têm o nome do membro correto. A implementação padrão fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; altera a ordem dessa matriz."
    - id: args
      type: System.Object[]
      description: "Os argumentos que são transmitidos. O associador pode alterar a ordem dos argumentos nesta matriz; Por exemplo, o associador padrão altera a ordem dos argumentos, se o `names` parâmetro é usado para especificar uma ordem diferente da ordem posicional. Se uma implementação de fichário converte tipos de argumento, os tipos e valores dos argumentos podem ser alterados também."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz dos modificadores de parâmetro que permitem a associação trabalhar com assinaturas de parâmetro no qual os tipos foram modificados. A implementação padrão de associador não use esse parâmetro."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>que é usada para controlar a coerção de tipos de dados, em implementações de binder que tipos de forçar.</xref:System.Globalization.CultureInfo> Se `culture` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o <xref:System.Globalization.CultureInfo>para o segmento atual é usado.</xref:System.Globalization.CultureInfo>       Observação: por exemplo, se uma implementação de associador de coerção de valores de cadeia de caracteres em tipos numéricos, permite que esse parâmetro é necessário para converter um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> de valor, porque 1000 é representados de maneira diferente por diferentes culturas. O associador padrão não tais coerções de cadeia de caracteres."
    - id: names
      type: System.String[]
      description: "Os nomes de parâmetro, se os nomes de parâmetro devem ser considerados ao combinar, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se os argumentos devem ser tratados como puramente posicional. Por exemplo, nomes de parâmetro devem ser usados se os argumentos não são fornecidos na ordem posicional."
    - id: state
      type: System.Object
      description: "Depois que o método retorna, `state` contém um objeto fornecido pelo associador que mantém o controle de reordenação de argumento. O associador cria esse objeto e o associador é o único consumidor deste objeto. Se `state` não é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> quando <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref> retorna, você deve passar `state` para o <xref:System.Reflection.Binder.ReorderArgumentArray*>método se você deseja restaurar `args` seu original ordem, por exemplo, para que você possa recuperar os valores de <xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;> </xref> parâmetros (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref> parâmetros no Visual Basic).</xref:System.Reflection.Binder.ReorderArgumentArray*>"
    return:
      type: System.Reflection.MethodBase
      description: "O método de correspondência."
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o associador de padrão <code> match </code> contém vários métodos que são igualmente bom correspondências para <code> args </code>. Por exemplo, <code> args </code> contém um `MyClass` objeto que implementa o `IMyClass` interface, e <code> match </code> contém um método que usa `MyClass` e um método que usa `IMyClass`."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "Para o associador de padrão <code> match </code> não contém nenhum método que pode aceitar os argumentos fornecidos em <code> args </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Para o associador de padrão <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia."
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Altera o tipo da determinado <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> para o determinado <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Reflexão de modelos de regras de acessibilidade do sistema de tipo comum. Por exemplo, se o chamador estiver no mesmo assembly, o chamador não precisa de permissões especiais para membros internos. Caso contrário, o chamador precisa <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission> Isso é consistente com a pesquisa de membros que são protegidas, privadas e assim por diante.       O princípio geral é que `ChangeType` devem ser executadas somente widening coerções, que nunca perderem dados. Um exemplo de uma coerção de ampliação é forçar o uso de um valor que é um inteiro assinado de 32 bits para um valor que é um inteiro assinado de 64 bits. Isso é diferenciado de uma restrição coerção, que pode perder dados. Um exemplo de uma restrição coerção é forçar o uso de um inteiro assinado de 64 bits em um inteiro assinado de 32 bits.       A tabela a seguir lista as coerções executadas pelo padrão `ChangeType`.      | Tipo de fonte | Tipo de destino |   |-----------------|-----------------|   | Qualquer tipo | Seu tipo base. |   | Qualquer tipo | A interface que ele implementa. |   | Char | UInt16, UInt32, Int32, UInt64, Int64, Single, Double |   | Byte | Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double |   | SByte | Int16, Int32, Int64, Single, Double |   | UInt16 | UInt32, Int32, UInt64, Int64, Single, Double |   | Int16 | Int32, Int64, Single, Double |   | UInt32 | UInt64, Int64, Single, Double |   | Int32 | Int64, único, duplo |   | UInt64 | Único, duplo |   | Int64 | Único, duplo |   | Único | Duplo |   | Referência não | Por referência. |"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "O objeto para alterar para uma nova <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
    - id: type
      type: System.Type
      description: "O novo <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> que `value` ficará."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>que é usada para controlar a coerção de tipos de dados.</xref:System.Globalization.CultureInfo> Se `culture` é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o <xref:System.Globalization.CultureInfo>para o segmento atual é usado.</xref:System.Globalization.CultureInfo>       Observação: por exemplo, este parâmetro é necessário para converter um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> de valor, porque 1000 é representados de maneira diferente por diferentes culturas."
    return:
      type: System.Object
      description: "Um objeto que contém o valor especificado como o novo tipo."
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "No retorno de <xref:System.Reflection.Binder.BindToMethod*>, restaura o <code> args </code> argumento para a qual ela era quando ele veio <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.Binder.BindToMethod*>"
  remarks: "O common language runtime chama esse método se `state` não é `null` após um retorno de `BindToMethod`."
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "Os argumentos reais que são transmitidos. Os tipos e os valores dos argumentos podem ser alterados."
    - id: state
      type: System.Object
      description: "Um objeto fornecido pelo associador que mantém o controle de reordenação de argumento."
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona um método de determinado conjunto de métodos, de acordo com o tipo de argumento."
  remarks: "Esse método deve retornar `null` se nenhum método corresponde aos critérios. Esse método controla a seleção fornecida pelo `GetConstructor` e `GetMethod` métodos em `Type`."
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "O conjunto de métodos que são candidatos para correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é usado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, esse parâmetro especifica o conjunto de métodos de reflexão determinou ser possível corresponde, normalmente porque eles têm o nome do membro correto. A implementação padrão fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; altera a ordem dessa matriz."
    - id: types
      type: System.Type[]
      description: "Os tipos de parâmetro usados para localizar um método correspondente."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz dos modificadores de parâmetro que permitem a associação trabalhar com assinaturas de parâmetro no qual os tipos foram modificados."
    return:
      type: System.Reflection.MethodBase
      description: "A correspondência de método, se encontrado; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o associador de padrão <code> match </code> contém vários métodos que são igualmente boas correspondências para os tipos de parâmetro descritos por <code> types </code>. Por exemplo, a matriz de <code> types </code> contém um <xref:System.Type>de objeto para `MyClass` e a matriz de <code> match </code> contém um método que usa uma classe base de `MyClass` e um método que usa uma interface que `MyClass` implementa.</xref:System.Type>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Para o associador de padrão <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia.       - ou - um elemento de <code> types </code> deriva <xref:System.Type>, mas não é do tipo <xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Seleciona uma propriedade de um determinado conjunto de propriedades, com base nos critérios especificados."
  remarks: "Esse método controla a seleção fornecida pelo `GetProperty` método `Type`."
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Uma combinação bit a bit de <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> valores."
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "O conjunto de propriedades que são candidatos para correspondência. Por exemplo, quando um <xref href=&quot;System.Reflection.Binder&quot;> </xref> objeto é usado pelo &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, esse parâmetro especifica o conjunto de propriedades reflexão determinou ser possível corresponde, normalmente porque eles têm o nome do membro correto. A implementação padrão fornecida pelo &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; altera a ordem dessa matriz."
    - id: returnType
      type: System.Type
      description: "Deve ter o valor de retorno a propriedade correspondente."
    - id: indexes
      type: System.Type[]
      description: "Os tipos de índice da propriedade que está sendo pesquisado. Usado para propriedades de índice como o indexador para uma classe."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz dos modificadores de parâmetro que permitem a associação trabalhar com assinaturas de parâmetro no qual os tipos foram modificados."
    return:
      type: System.Reflection.PropertyInfo
      description: "A propriedade correspondente."
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Para o associador de padrão <code> match </code> contiver várias propriedades que são igualmente bom correspondências para <code> returnType </code> e <code> indexes </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Para o associador de padrão <code> match </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz vazia."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
