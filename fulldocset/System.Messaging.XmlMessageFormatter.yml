### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "Serializa e desserializa objetos de corpo de uma mensagem, usando o formato XML com base na definição de esquema XSD."
  remarks: "O XmlMessageFormatter é o formatador padrão que uma instância de <xref:System.Messaging.MessageQueue>usa para serializar mensagens gravadas na fila.</xref:System.Messaging.MessageQueue> Quando você cria uma instância do <xref:System.Messaging.MessageQueue>, uma instância de XmlMessageFormatter é criada e associada <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue> Você pode especificar um formatador diferente ao criá-lo no seu código e atribuí-la para a <xref:System.Messaging.MessageQueue.Formatter%2A>propriedade de <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Formatter%2A>       Instância de XmlMessageFormatter da fila padrão pode ser usada para gravar na fila, mas ele não pode ser usado para ler da fila até que você definir o <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>propriedade no formatador.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Você pode definir um ou ambos os valores na instância de formatador padrão, ou você pode criar uma nova instância do formatador e defina os valores automaticamente, passando-os como argumentos em apropriada <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>construtor.</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>       Ao especificar <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>em vez de <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, a existência de tipo é verificada em tempo de compilação em vez de hora de leitura, reduzindo a possibilidade de erros.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>requer que cada entrada totalmente qualificados, especificando seu nome de assembly.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Além disso, ao trabalhar com várias versões simultâneas, o número de versão deve ser anexado ao nome de tipo do destino.       O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades informam ao formatador que esquemas para tentar corresponder ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isso permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar de acordo com um dos esquemas representados na matriz de tipo. Quando você ler a mensagem usando o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem para o proprietário.</xref:System.Messaging.MessageQueue.Receive%2A>       Somente uma das duas propriedades precisa ser definida durante a leitura da fila, mas você pode definir ambos. O conjunto de tipos é o conjunto combinado de duas propriedades. A decisão de qual propriedade a ser usada é específica para seu aplicativo. Se o corpo da mensagem contém um tipo cujo esquema não corresponde a nenhum dos tipos de matriz para qualquer uma das propriedades, uma exceção será lançada quando a mensagem é lida.       O XmlMessageFormatter é um componente crucial do menos rígida de mensagens baseadas em XML. A utilitário XSD.exe usa que o formato XML é usado para gerar o esquema XML, como quando você usa o utilitário para serializar uma classe usada por seu aplicativo. A classe deve ter um construtor padrão.       O formato é usado novamente no processo de reverter quando o utilitário gera uma classe com base no esquema distribuir para descrever os dados de classe. O uso do utilitário e o esquema XML gera permite que você evite redistributing.dll arquivos toda vez que você recompilar uma classe após a implementação de sua classe ter sido alterado. Como o esquema não for alterado no cliente ou servidor, outras alterações em ambos os lados não afetará os outros."
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> conjunto de tipos de classe sem destino."
  remarks: "Essa sobrecarga de construtor é usada com mais frequência durante a gravação da fila, como tipos de destino não são necessários durante a gravação.       Para ler uma mensagem de uma fila usando uma instância de <xref:System.Messaging.XmlMessageFormatter>criado usando este construtor, você deve definir o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades para o formatador Saiba quais tipos de tentativa de desserializar.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter>       Quando você cria um novo <xref:System.Messaging.MessageQueue>, um padrão <xref:System.Messaging.XmlMessageFormatter>instância é criada, sem o conjunto de tipos de destino.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue> Assim como acontece com um formatador criado usando este construtor, você deve definir tipos de destino para essa instância de formatador se você quiser ler da fila."
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> classe, definindo tipos de destino transmitidos como uma matriz de valores de cadeia de caracteres (totalmente qualificado)."
  remarks: "Os construtores com parâmetros de tipo de destino são usados com mais frequência durante a leitura da fila. Ao escrever, não é necessário especificar os tipos de destino.       Esta sobrecarga do <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>conjuntos de construtor o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>propriedade para os valores da matriz passado por meio de `targetTypeNames` parâmetro.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Definir essa propriedade permite um <xref:System.Messaging.MessageQueue>usando esse <xref:System.Messaging.XmlMessageFormatter>instância para ler as mensagens que contêm objetos de tipos.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades informam ao formatador que esquemas para tentar corresponder ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isso permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar de acordo com um dos esquemas representados na matriz de tipo. Quando você ler a mensagem usando o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem para o proprietário.</xref:System.Messaging.MessageQueue.Receive%2A>       Somente uma das duas propriedades precisa ser definida durante a leitura da fila, mas você pode definir ambos. O conjunto de tipos é o conjunto combinado de duas propriedades. A decisão de qual usar é específico para seu aplicativo. Se o corpo da mensagem contém um tipo cujo esquema não corresponde a nenhum dos tipos de matriz para qualquer uma das propriedades, uma exceção será lançada em tempo de leitura."
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "Uma matriz do tipo <xref:System.String>que especifica o conjunto dos possíveis tipos que serão desserializados pelo formatador da mensagem fornecida.</xref:System.String> Esses valores devem ser totalmente qualificados, por exemplo, &quot;MyNamespace.MyOrders, MyOrdersAssemblyName&quot;."
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> classe, definindo tipos de destino transmitidos como uma matriz de tipos de objeto."
  remarks: "Os construtores com parâmetros de tipo de destino são usados com mais frequência durante a leitura da fila. Ao escrever, não é necessário especificar os tipos de destino.       Esta sobrecarga do <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>conjuntos de construtor o <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedade para os valores da matriz passado por meio de `targetTypes` parâmetro.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Definir essa propriedade permite um <xref:System.Messaging.MessageQueue>usando esse <xref:System.Messaging.XmlMessageFormatter>instância para ler mensagens que contém objetos dos tipos dados.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades informam ao formatador que esquemas para tentar corresponder ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isso permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar de acordo com um dos esquemas representados na matriz de tipo. Quando você ler a mensagem usando o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem para o proprietário.</xref:System.Messaging.MessageQueue.Receive%2A>       Somente uma das duas propriedades precisa ser definida durante a leitura da fila, mas você pode definir ambos. O conjunto de tipos é o conjunto combinado de duas propriedades. A decisão de qual usar é específico para seu aplicativo. Se o corpo da mensagem contém um tipo cujo esquema não corresponde a nenhum dos tipos de matriz para qualquer uma das propriedades, uma exceção será lançada em tempo de leitura.       Ao especificar <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>em vez de <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, a existência de tipo é verificada em tempo de compilação em vez de hora de leitura, reduzindo a possibilidade de erros.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>requer que cada entrada totalmente qualificados, especificando seu nome de assembly.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Além disso, ao trabalhar com várias versões simultâneas, o número de versão deve ser anexado ao nome de tipo do destino.       Ao usar <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, você pode adicionar cada objeto (por exemplo, `MyClass`) à lista de forma demonstrada pelo código c# a seguir.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "Uma matriz do tipo <xref:System.Type>que especifica o conjunto dos possíveis tipos que serão desserializados pelo formatador da mensagem fornecida.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Determina se o formatador pode desserializar a mensagem."
  remarks: "Quando CanRead é chamado, o formatador tenta determinar se o conteúdo da mensagem é algo pode desserializar. O formatador só pode desserializar a mensagem se o tipo no corpo da mensagem tem o mesmo esquema como um dos tipos na matriz representada pelo <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> CanRead retorna `false` nas duas seguintes circunstâncias:-a mensagem não foi formatada usando <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      -O esquema do corpo da mensagem não está entre aqueles listados em ambos os <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedade.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades informam ao formatador que tipos de objetos deve ser capaz de desserializar.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Se qualquer tipo está ausente na lista, ainda não foi encontrado dentro da mensagem, CanRead retorna `false`."
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "O <xref href=&quot;System.Messaging.Message&quot;> </xref> para inspecionar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o formatador XML pode desserializar a mensagem. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem o <> </> *> nem <> </> *> propriedade foi definida."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Cria uma instância do <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> classe cuja leitura/gravação (os conjuntos de tipos de destino) de propriedades são os mesmos atual <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> instância."
  remarks: "Esse método cria uma cópia do formatador e inicializa a todas as suas propriedades para os valores deste <xref:System.Messaging.XmlMessageFormatter>objeto.</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Um objeto cujas propriedades são idênticas desse <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> instância, mas cujos metadados não especifique-o para ser uma instância da classe de formatador."
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Lê o conteúdo da mensagem determinada e cria um objeto que contém a mensagem desserializada."
  remarks: "Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades informam ao formatador que esquemas para tentar corresponder ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Uma dessas propriedades deve ser definida antes da mensagem pode ser desserializada.       A instância serializada no corpo da mensagem deve estar de acordo com um dos esquemas representados na matriz de tipo. Quando você ler a mensagem usando o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem para o proprietário.</xref:System.Messaging.MessageQueue.Receive%2A>       Os tipos de destino não precisam ser especificado para gravar na fila."
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "O <xref href=&quot;System.Messaging.Message&quot;> </xref>, em formato XML, a ser desserializado."
    return:
      type: System.Object
      description: "A mensagem desserializada."
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nem o <> </> *> nem <> </> *> propriedade foi definida.       - ou - a instância serializada no corpo da mensagem não é compatível com qualquer um dos esquemas representados pelos tipos de no <> </> *> e <> </> *> propriedades."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Especifica o conjunto dos possíveis tipos que serão desserializados pelo formatador da mensagem fornecida."
  remarks: "Ambos os TargetTypeNames e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Propriedades informam ao formatador que esquemas para tentar corresponder ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Isso permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar de acordo com um dos esquemas representados na matriz de tipo. Quando você ler a mensagem usando o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem para o proprietário.</xref:System.Messaging.MessageQueue.Receive%2A>       Somente uma das duas propriedades precisa ser definida durante a leitura da fila, mas você pode definir ambos. O conjunto de tipos é o conjunto combinado de duas propriedades. A decisão de qual propriedade a ser usada é específica para seu aplicativo. Se o corpo da mensagem contém um tipo cujo esquema não corresponde a nenhum dos tipos de matriz para qualquer uma das propriedades, uma exceção será lançada quando a mensagem é lida.       TargetTypeNames requer que toda entrada para ser totalmente qualificado, especificando seu nome de assembly. Além disso, ao trabalhar com várias versões simultâneas, o número de versão deve ser anexado ao nome de tipo do destino.       Os tipos de destino somente são necessárias durante a leitura da fila. O TargetTypeNames e <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedades não precisam ser configurado para gravar na fila.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "Uma matriz do tipo <xref:System.String>que especifica os tipos de objetos a ser desserializado do corpo da mensagem ao ler a mensagem.</xref:System.String>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A propriedade TargetTypeNames é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Especifica o conjunto dos possíveis tipos que serão desserializados pelo formatador da mensagem fornecida."
  remarks: "Tanto o <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e TargetTypes propriedades informam ao formatador que esquemas para tentar corresponder ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Isso permite que o formatador interpretar o corpo da mensagem.       A instância serializada no corpo da mensagem deve estar de acordo com um dos esquemas representados na matriz de tipo. Quando você ler a mensagem usando o <xref:System.Messaging.MessageQueue.Receive%2A>método, o método cria um objeto do tipo que corresponde ao esquema identificado e lê o corpo da mensagem para o proprietário.</xref:System.Messaging.MessageQueue.Receive%2A>       Somente uma das duas propriedades precisa ser definida durante a leitura da fila, mas você pode definir ambos. O conjunto de tipos é o conjunto combinado de duas propriedades. A decisão de qual propriedade a ser usada é específica para seu aplicativo. Se o corpo da mensagem contém um tipo cujo esquema não corresponde a nenhum dos tipos de matriz para qualquer uma das propriedades, uma exceção será lançada quando a mensagem é lida.       Os tipos de destino somente são necessárias durante a leitura da fila. O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>e propriedades TargetTypes não precisam ser configurado para gravar na fila.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Ao especificar TargetTypes em vez de <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, a existência de tipo é verificada em tempo de compilação em vez de hora de leitura, reduzindo a possibilidade de erros.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Ao usar TargetTypes, você pode adicionar cada objeto (por exemplo, `MyClass`) à lista de forma demonstrada pelo código do c# `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "Uma matriz do tipo <xref:System.Type>que especifica os tipos de objetos a ser desserializado do corpo da mensagem ao ler a mensagem.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A propriedade TargetTypes é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Serializa um objeto no corpo da mensagem."
  remarks: "Os tipos de destino não precisam ser especificados para gravar na fila como eles devem ser durante a leitura. O <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>ou <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>propriedade é usada pelo formatador apenas ao desserializar uma mensagem.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       O <xref:System.Messaging.XmlMessageFormatter>usa o <xref:System.Xml.Serialization.XmlSerializer>classe, que define o que pode ser serializado.</xref:System.Xml.Serialization.XmlSerializer> </xref:System.Messaging.XmlMessageFormatter> Somente campos públicos e as propriedades públicas podem ser serializadas. Estruturas, estruturas com matrizes e matrizes de estruturas são todos serializável, desde que eles não usam o estilo de codificação com o protocolo SOAP."
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "O <xref href=&quot;System.Messaging.Message&quot;> </xref> cujo <xref:System.Messaging.Message.Body*>propriedade conterá o objeto serializado.</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "O <xref:System.Object>a ser serializado no corpo da mensagem.</xref:System.Object>"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
