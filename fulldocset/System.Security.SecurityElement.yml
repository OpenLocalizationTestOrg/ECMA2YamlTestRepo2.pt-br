### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityElement
  id: SecurityElement
  children:
  - System.Security.SecurityElement.#ctor(System.String)
  - System.Security.SecurityElement.#ctor(System.String,System.String)
  - System.Security.SecurityElement.AddAttribute(System.String,System.String)
  - System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  - System.Security.SecurityElement.Attribute(System.String)
  - System.Security.SecurityElement.Attributes
  - System.Security.SecurityElement.Children
  - System.Security.SecurityElement.Copy
  - System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  - System.Security.SecurityElement.Escape(System.String)
  - System.Security.SecurityElement.FromString(System.String)
  - System.Security.SecurityElement.IsValidAttributeName(System.String)
  - System.Security.SecurityElement.IsValidAttributeValue(System.String)
  - System.Security.SecurityElement.IsValidTag(System.String)
  - System.Security.SecurityElement.IsValidText(System.String)
  - System.Security.SecurityElement.SearchForChildByTag(System.String)
  - System.Security.SecurityElement.SearchForTextOfTag(System.String)
  - System.Security.SecurityElement.Tag
  - System.Security.SecurityElement.Text
  - System.Security.SecurityElement.ToString
  langs:
  - csharp
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
  type: Class
  summary: "Representa o modelo de objeto para objetos de segurança de codificação XML. Essa classe não pode ser herdada."
  remarks: "Essa classe é destinada para ser uma simples implementação de um modelo de objeto XML simples para uso dentro do sistema de segurança e não para uso como um modelo de objeto XML geral. Esta documentação pressupõe um conhecimento básico de XML.       O modelo de objeto XML simple para um elemento consiste das seguintes partes:-a marca é o nome do elemento.      -Os atributos são zero ou mais pares de atributo no elemento de nome/valor.      -Os filhos são zero ou mais elementos aninhados `<tag>` e `</tag>`.       É altamente recomendável que representação do atributo com base em XML é usada para expressar os elementos de segurança e seus valores. Isso significa que propriedades de um elemento são expressas como atributos e valores de propriedade são expressos como valores de atributo. Evite aninhamento texto dentro de marcas. Para qualquer `<tag>text</tag>` representação de uma representação de tipo `<tag value=&quot;text&quot;/>` normalmente está disponível. Usando essa representação de XML com base em atributo aumenta a legibilidade e permite a portabilidade WMI fácil de serialização XML resultante.       Um nome de atributo deve ser um caractere ou maior e não pode ser `null`. Se o valor com base no elemento de representação é usada, os elementos com um texto de cadeia de caracteres que é `null` são representados no `<tag/>` formulário; caso contrário, o texto é delimitado pelo `<tag>` e `</tag>` tokens. Ambos os formulários podem ser combinados com atributos, que são mostrados se estiver presente.       As marcas, atributos e texto de elementos, se presente, sempre diferenciam maiusculas de minúsculas. O formulário XML contém aspas e ignora quando necessário. Valores de cadeia de caracteres que incluam caracteres inválidos para uso em XML resultam em um <xref:System.ArgumentException>.</xref:System.ArgumentException> Essas regras se aplicam a todas as propriedades e métodos.      > [!NOTE] > Por motivos de desempenho, validade de caractere é verificada apenas quando o elemento está codificado no formato de texto XML e não em cada conjunto de uma propriedade ou método. Métodos estáticos permitem explícitos de verificação quando necessário."
  example:
  - "The following example shows the use of members of the SecurityElement class.  \n  \n [!code-vb[SecurityElementMembers#1](~/add/codesnippet/visualbasic/t-system.security.securi_1.vb)]\n [!code-cpp[SecurityElementMembers#1](~/add/codesnippet/cpp/t-system.security.securi_1.cpp)]\n [!code-cs[SecurityElementMembers#1](~/add/codesnippet/csharp/t-system.security.securi_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityElement.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.SecurityElement&quot;> </xref> classe com a marca especificada."
  remarks: "O `tag` parâmetro deve conter um nome de marca XML válido. Use <xref:System.Security.SecurityElement.Escape%2A>para remover caracteres inválidos de cadeia de caracteres.</xref:System.Security.SecurityElement.Escape%2A>"
  example:
  - "The following code shows the use of  the SecurityElement constructor to create a new <xref:System.Security.SecurityElement> object.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#2](~/add/codesnippet/visualbasic/m-system.security.securi_8_1.vb)]\n [!code-cpp[SecurityElementMembers#2](~/add/codesnippet/cpp/m-system.security.securi_8_1.cpp)]\n [!code-cs[SecurityElementMembers#2](~/add/codesnippet/csharp/m-system.security.securi_8_1.cs)]"
  syntax:
    content: public SecurityElement (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "O nome da marca de um elemento XML."
  overload: System.Security.SecurityElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> tag </code> parâmetro é inválido no XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.SecurityElement&quot;> </xref> classe com o texto e a marca especificada."
  remarks: "Se o `text` parâmetro é `null` este construtor produz um elemento idêntico para o construtor padrão."
  syntax:
    content: public SecurityElement (string tag, string text);
    parameters:
    - id: tag
      type: System.String
      description: "O nome da marca do elemento XML."
    - id: text
      type: System.String
      description: "O conteúdo do texto dentro do elemento."
  overload: System.Security.SecurityElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> tag </code> parâmetro ou <code> text </code> parâmetro é inválido no XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  id: AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Adiciona um atributo de nome/valor para um elemento XML."
  remarks: "Nomes e valores de atributos só devem conter caracteres de atributo XML válidos. Nomes de atributo do XML devem ser exclusivos. Use <xref:System.Security.SecurityElement.Escape%2A>para remover caracteres inválidos de cadeia de caracteres.</xref:System.Security.SecurityElement.Escape%2A>       Não há nenhum suporte para cadeias de caracteres entre aspas, para que cadeias de caracteres de pares nome/valor não devem conter aspas ou outros caracteres necessidade de delimitação."
  example:
  - "The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#4](~/add/codesnippet/visualbasic/m-system.security.securi_5_1.vb)]\n [!code-cpp[SecurityElementMembers#4](~/add/codesnippet/cpp/m-system.security.securi_5_1.cpp)]\n [!code-cs[SecurityElementMembers#4](~/add/codesnippet/csharp/m-system.security.securi_5_1.cs)]"
  syntax:
    content: public void AddAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "O nome do atributo."
    - id: value
      type: System.String
      description: "O valor do atributo."
  overload: System.Security.SecurityElement.AddAttribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter or <code>value</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> name </code> parâmetro ou <code> value </code> parâmetro é inválido no XML.       Um atributo com o nome especificado pelo - ou - o <code> name </code> parâmetro já existe."
  platform:
  - net462
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  id: AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Adiciona um elemento filho ao elemento XML."
  remarks: "O elemento filho é adicionado após os elementos de filho anteriormente existentes."
  example:
  - "The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#5](~/add/codesnippet/visualbasic/m-system.security.securi_11_1.vb)]\n [!code-cpp[SecurityElementMembers#5](~/add/codesnippet/cpp/m-system.security.securi_11_1.cpp)]\n [!code-cs[SecurityElementMembers#5](~/add/codesnippet/csharp/m-system.security.securi_11_1.cs)]"
  syntax:
    content: public void AddChild (System.Security.SecurityElement child);
    parameters:
    - id: child
      type: System.Security.SecurityElement
      description: "O elemento filho para adicionar."
  overload: System.Security.SecurityElement.AddChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>child</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Attribute(System.String)
  id: Attribute(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Localiza um atributo por nome em um elemento XML."
  remarks: "Com o XML da seguinte maneira, `Attribute(&quot;B&quot;)` retornaria &quot;456&quot;.      ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;>text</thetag>   ```"
  example:
  - "The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#13](~/add/codesnippet/visualbasic/m-system.security.securi_9_1.vb)]\n [!code-cpp[SecurityElementMembers#13](~/add/codesnippet/cpp/m-system.security.securi_9_1.cpp)]\n [!code-cs[SecurityElementMembers#13](~/add/codesnippet/csharp/m-system.security.securi_9_1.cs)]"
  syntax:
    content: public string Attribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do atributo que deseja pesquisar."
    return:
      type: System.String
      description: "O valor associado com o atributo nomeado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum atributo com <code> name </code> existe."
  overload: System.Security.SecurityElement.Attribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Attributes
  id: Attributes
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Obtém ou define os atributos de um elemento XML como pares nome/valor."
  remarks: "Cada atributo é armazenado no <xref:System.Collections.Hashtable>como um par nome/valor.</xref:System.Collections.Hashtable>       Nomes e valores de atributos devem conter apenas caracteres de atributo XML válidos. Use <xref:System.Security.SecurityElement.Escape%2A>para remover caracteres inválidos de cadeia de caracteres.</xref:System.Security.SecurityElement.Escape%2A>       Não há nenhum suporte para cadeias de caracteres entre aspas, para que cadeias de caracteres de pares nome/valor não devem conter aspas ou outros caracteres necessidade de delimitação."
  example:
  - "The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#15](~/add/codesnippet/visualbasic/p-system.security.securi_3_1.vb)]\n [!code-cpp[SecurityElementMembers#15](~/add/codesnippet/cpp/p-system.security.securi_3_1.cpp)]\n [!code-cs[SecurityElementMembers#15](~/add/codesnippet/csharp/p-system.security.securi_3_1.cs)]"
  syntax:
    content: public System.Collections.Hashtable Attributes { get; set; }
    return:
      type: System.Collections.Hashtable
      description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto para os valores de atributo do elemento XML."
  overload: System.Security.SecurityElement.Attributes*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O nome ou o valor da <xref href=&quot;System.Collections.Hashtable&quot;> </xref> o objeto é inválido."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome não é um nome de atributo XML válido."
  platform:
  - net462
- uid: System.Security.SecurityElement.Children
  id: Children
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Obtém ou define a matriz de elementos filho do elemento XML."
  remarks: "Se um <xref:System.Security.SecurityElement>contém <xref:System.Security.SecurityElement.Text%2A>e filhos, <xref:System.Security.SecurityElement.Text%2A>aparecerão primeiro.</xref:System.Security.SecurityElement.Text%2A> </xref:System.Security.SecurityElement.Text%2A> </xref:System.Security.SecurityElement>"
  example:
  - "The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#14](~/add/codesnippet/visualbasic/p-system.security.securi_0_1.vb)]\n [!code-cpp[SecurityElementMembers#14](~/add/codesnippet/cpp/p-system.security.securi_0_1.cpp)]\n [!code-cs[SecurityElementMembers#14](~/add/codesnippet/csharp/p-system.security.securi_0_1.cs)]"
  syntax:
    content: public System.Collections.ArrayList Children { get; set; }
    return:
      type: System.Collections.ArrayList
      description: "Os elementos filho ordenados do elemento XML como elementos de segurança."
  overload: System.Security.SecurityElement.Children*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "É um filho do nó pai XML <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Copy
  id: Copy
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Cria e retorna uma cópia idêntica do atual <xref href=&quot;System.Security.SecurityElement&quot;> </xref> objeto."
  remarks: "A cópia inclui tanto o <xref:System.Security.SecurityElement.Children%2A>e <xref:System.Security.SecurityElement.Attributes%2A>Propriedades.</xref:System.Security.SecurityElement.Attributes%2A> </xref:System.Security.SecurityElement.Children%2A>"
  syntax:
    content: public System.Security.SecurityElement Copy ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Uma cópia do atual <xref href=&quot;System.Security.SecurityElement&quot;> </xref> objeto."
  overload: System.Security.SecurityElement.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  id: Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Compara dois objetos de elemento XML para igualdade."
  remarks: "Se houver elementos filho, comparação estende recursivamente a eles.       Não há nenhum suporte para comparar as representações XML diferentes dos mesmos caracteres."
  example:
  - "The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#22](~/add/codesnippet/visualbasic/m-system.security.securi_6_1.vb)]\n [!code-cpp[SecurityElementMembers#22](~/add/codesnippet/cpp/m-system.security.securi_6_1.cpp)]\n [!code-cs[SecurityElementMembers#22](~/add/codesnippet/csharp/m-system.security.securi_6_1.cs)]"
  syntax:
    content: public bool Equal (System.Security.SecurityElement other);
    parameters:
    - id: other
      type: System.Security.SecurityElement
      description: "Um objeto de elemento XML para o qual comparar o objeto atual do elemento XML."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a marca, nomes de atributos e valores, elementos filho e campos de texto no elemento XML atual são idênticos às contrapartes no <code> other </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.Equal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.Escape(System.String)
  id: Escape(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Substitui caracteres XML inválidos em uma cadeia de caracteres com seus equivalentes XML válido."
  remarks: "Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>. If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.  \n  \n The following table shows the invalid XML characters and their escaped equivalents.  \n  \n|invalid XML Character|Replaced With|  \n|---------------------------|-------------------|  \n|\"\\<\"|\"&lt;\"|  \n|\">\"|\"&gt;\"|  \n|\"\\\\\"\"|\"&quot;\"|  \n|\"\\\\'\"|\"&apos;\"|  \n|\"&\"|\"&amp;\"|"
  example:
  - "The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#19](~/add/codesnippet/visualbasic/m-system.security.securi_7_1.vb)]\n [!code-cpp[SecurityElementMembers#19](~/add/codesnippet/cpp/m-system.security.securi_7_1.cpp)]\n [!code-cs[SecurityElementMembers#19](~/add/codesnippet/csharp/m-system.security.securi_7_1.cs)]"
  syntax:
    content: public static string Escape (string str);
    parameters:
    - id: str
      type: System.String
      description: "A cadeia de caracteres dentro do qual escapar caracteres inválidos."
    return:
      type: System.String
      description: "A cadeia de entrada com caracteres inválidos substituídos."
  overload: System.Security.SecurityElement.Escape*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.FromString(System.String)
  id: FromString(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Cria um elemento de segurança de uma cadeia de caracteres codificados em XML."
  remarks: "Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of \"`<value name='Company'>Microsoft</value>\"` use \"`<value name=\\\"Company\\\">Microsoft</value>\"`.  \n  \n Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string."
  syntax:
    content: public static System.Security.SecurityElement FromString (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "A cadeia codificada em XML do qual criar o elemento de segurança."
    return:
      type: System.Security.SecurityElement
      description: "Um <xref href=&quot;System.Security.SecurityElement&quot;> </xref> criada do XML."
  overload: System.Security.SecurityElement.FromString*
  exceptions:
  - type: System.Security.XmlSyntaxException
    commentId: T:System.Security.XmlSyntaxException
    description: "<code>xml</code>contém um ou mais caracteres de aspas simples."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xml</code>is<xref uid=&quot;langword_csharp_ null&quot; name=&quot; null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  id: IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina se uma cadeia de caracteres é um nome de atributo válido."
  remarks: "Esse método pode ser usado para testar um atributo antes de adicionar um elemento de segurança."
  example:
  - "The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#6](~/add/codesnippet/visualbasic/m-system.security.securi_10_1.vb)]\n [!code-cpp[SecurityElementMembers#6](~/add/codesnippet/cpp/m-system.security.securi_10_1.cpp)]\n [!code-cs[SecurityElementMembers#6](~/add/codesnippet/csharp/m-system.security.securi_10_1.cs)]"
  syntax:
    content: public static bool IsValidAttributeName (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do atributo para testar a validade."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <code> name </code> parâmetro é um atributo XML válido nome; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidAttributeName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  id: IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina se uma cadeia de caracteres é um valor de atributo válido."
  remarks: "Esse método pode ser usado para testar um atributo antes de adicionar um elemento de segurança."
  example:
  - "The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#7](~/add/codesnippet/visualbasic/m-system.security.securi_4_1.vb)]\n [!code-cpp[SecurityElementMembers#7](~/add/codesnippet/cpp/m-system.security.securi_4_1.cpp)]\n [!code-cs[SecurityElementMembers#7](~/add/codesnippet/csharp/m-system.security.securi_4_1.cs)]"
  syntax:
    content: public static bool IsValidAttributeValue (string value);
    parameters:
    - id: value
      type: System.String
      description: "O valor do atributo para testar a validade."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <code> value </code> parâmetro é um valor de atributo XML válido; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidAttributeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  id: IsValidTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina se uma cadeia de caracteres é uma marca válida."
  remarks: "Isso pode ser usado para testar um <xref:System.Security.SecurityElement.Tag%2A>antes de definir o proprietário.</xref:System.Security.SecurityElement.Tag%2A>"
  example:
  - "The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#10](~/add/codesnippet/visualbasic/m-system.security.securi_3_1.vb)]\n [!code-cpp[SecurityElementMembers#10](~/add/codesnippet/cpp/m-system.security.securi_3_1.cpp)]\n [!code-cs[SecurityElementMembers#10](~/add/codesnippet/csharp/m-system.security.securi_3_1.cs)]"
  syntax:
    content: public static bool IsValidTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "A marca para testar a validade."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <code> tag </code> parâmetro é uma marca XML válida; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidTag*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidText(System.String)
  id: IsValidText(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina se uma cadeia de caracteres é válida como texto dentro de um elemento XML."
  remarks: "Esse método pode ser usado para testar <xref:System.Security.SecurityElement.Text%2A>antes de definir o proprietário.</xref:System.Security.SecurityElement.Text%2A>"
  example:
  - "The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#9](~/add/codesnippet/visualbasic/m-system.security.securi_2_1.vb)]\n [!code-cpp[SecurityElementMembers#9](~/add/codesnippet/cpp/m-system.security.securi_2_1.cpp)]\n [!code-cs[SecurityElementMembers#9](~/add/codesnippet/csharp/m-system.security.securi_2_1.cs)]"
  syntax:
    content: public static bool IsValidText (string text);
    parameters:
    - id: text
      type: System.String
      description: "O texto para testar a validade."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <code> text </code> parâmetro é um elemento de texto XML válido; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidText*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  id: SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Localiza um filho por seu nome de marca."
  remarks: "Com o XML da seguinte maneira, `SearchForChildByTag(&quot;second&quot;)` retornaria o elemento filho `<second>`.      ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;> <first>text1</first>          <second>text2</second></thetag>   ```"
  example:
  - "The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#17](~/add/codesnippet/visualbasic/m-system.security.securi_1_1.vb)]\n [!code-cpp[SecurityElementMembers#17](~/add/codesnippet/cpp/m-system.security.securi_1_1.cpp)]\n [!code-cs[SecurityElementMembers#17](~/add/codesnippet/csharp/m-system.security.securi_1_1.cs)]"
  syntax:
    content: public System.Security.SecurityElement SearchForChildByTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "A marca para a qual pesquisar nos elementos filho."
    return:
      type: System.Security.SecurityElement
      description: "O primeiro elemento XML filho com o valor da marca especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum elemento filho com <code> tag </code> existe."
  overload: System.Security.SecurityElement.SearchForChildByTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  id: SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Localiza um filho por seu nome de marca e retorna o texto contido."
  remarks: "Esse método é equivalente ao seguinte: [!code-vb [System.Security.SecurityElement#1](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)][!code-cpp[System.Security.SecurityElement#1](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)][!code-cs[System.Security.SecurityElement#1](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs) ] com XML, como segue, `SearchForTextOfTag(&quot;second&quot;)` retornaria &quot;Texto2&quot;.          ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;> <first>text1</first>       <second>text2</second></thetag>   ```"
  example:
  - "The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#18](~/add/codesnippet/visualbasic/m-system.security.securi_0_2.vb)]\n [!code-cpp[SecurityElementMembers#18](~/add/codesnippet/cpp/m-system.security.securi_0_2.cpp)]\n [!code-cs[SecurityElementMembers#18](~/add/codesnippet/csharp/m-system.security.securi_0_2.cs)]"
  syntax:
    content: public string SearchForTextOfTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "A marca para a qual pesquisar nos elementos filho."
    return:
      type: System.String
      description: "O conteúdo de texto do primeiro elemento filho com o valor da marca especificado."
  overload: System.Security.SecurityElement.SearchForTextOfTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tag</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Tag
  id: Tag
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Obtém ou define o nome da marca de um elemento XML."
  remarks: "Em XML, a marca aparece no script conforme é exibida abaixo: ```   <tag attributes>text</tag>   ``` se este elemento tem elementos filho, os filhos substitui `text`.       Atribua apenas cadeias de marca XML válidas para essa propriedade. Use <xref:System.Security.SecurityElement.Escape%2A>para remover caracteres inválidos de cadeia de caracteres.</xref:System.Security.SecurityElement.Escape%2A>"
  example:
  - "The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#11](~/add/codesnippet/visualbasic/p-system.security.securi_1_1.vb)]\n [!code-cpp[SecurityElementMembers#11](~/add/codesnippet/cpp/p-system.security.securi_1_1.cpp)]\n [!code-cs[SecurityElementMembers#11](~/add/codesnippet/csharp/p-system.security.securi_1_1.cs)]"
  syntax:
    content: public string Tag { get; set; }
    return:
      type: System.String
      description: "O nome da marca de um elemento XML."
  overload: System.Security.SecurityElement.Tag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The tag is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A marca não é válida em XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.Text
  id: Text
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Obtém ou define o texto dentro de um elemento XML."
  remarks: "O texto não deve conter caracteres especiais de XML. Use <xref:System.Security.SecurityElement.Escape%2A>para remover caracteres inválidos de cadeia de caracteres.</xref:System.Security.SecurityElement.Escape%2A>       Se um <xref:System.Security.SecurityElement>contém tanto texto e <xref:System.Security.SecurityElement.Children%2A>, o texto será exibido primeiro.</xref:System.Security.SecurityElement.Children%2A> </xref:System.Security.SecurityElement>"
  example:
  - "The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#12](~/add/codesnippet/visualbasic/p-system.security.securi_2_1.vb)]\n [!code-cpp[SecurityElementMembers#12](~/add/codesnippet/cpp/p-system.security.securi_2_1.cpp)]\n [!code-cs[SecurityElementMembers#12](~/add/codesnippet/csharp/p-system.security.securi_2_1.cs)]"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "O valor do texto dentro de um elemento XML."
  overload: System.Security.SecurityElement.Text*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O texto não é válido no XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.ToString
  id: ToString
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Produz uma representação de cadeia de caracteres de um elemento XML e seus atributos constituintes, elementos filho e texto."
  remarks: "Esse método é útil para depuração para ver a representação XML do elemento."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "O elemento XML e seu conteúdo."
  overload: System.Security.SecurityElement.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Security.XmlSyntaxException
  parent: System.Security
  isExternal: false
  name: XmlSyntaxException
  nameWithType: XmlSyntaxException
  fullName: System.Security.XmlSyntaxException
- uid: System.Security.SecurityElement.#ctor(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.SecurityElement.Attribute(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
- uid: System.Security.SecurityElement.Attributes
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Security.SecurityElement.Children
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Security.SecurityElement.Copy
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityElement.Escape(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
- uid: System.Security.SecurityElement.FromString(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
- uid: System.Security.SecurityElement.IsValidText(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
- uid: System.Security.SecurityElement.Tag
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
- uid: System.Security.SecurityElement.Text
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
- uid: System.Security.SecurityElement.ToString
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
- uid: System.Security.SecurityElement.#ctor*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement.SecurityElement
- uid: System.Security.SecurityElement.AddAttribute*
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute
  nameWithType: SecurityElement.AddAttribute
- uid: System.Security.SecurityElement.AddChild*
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild
  nameWithType: SecurityElement.AddChild
- uid: System.Security.SecurityElement.Attribute*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute
  nameWithType: SecurityElement.Attribute
- uid: System.Security.SecurityElement.Attributes*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
- uid: System.Security.SecurityElement.Children*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
- uid: System.Security.SecurityElement.Copy*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy
  nameWithType: SecurityElement.Copy
- uid: System.Security.SecurityElement.Equal*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal
  nameWithType: SecurityElement.Equal
- uid: System.Security.SecurityElement.Escape*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape
  nameWithType: SecurityElement.Escape
- uid: System.Security.SecurityElement.FromString*
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString
  nameWithType: SecurityElement.FromString
- uid: System.Security.SecurityElement.IsValidAttributeName*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName
  nameWithType: SecurityElement.IsValidAttributeName
- uid: System.Security.SecurityElement.IsValidAttributeValue*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue
  nameWithType: SecurityElement.IsValidAttributeValue
- uid: System.Security.SecurityElement.IsValidTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag
  nameWithType: SecurityElement.IsValidTag
- uid: System.Security.SecurityElement.IsValidText*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText
  nameWithType: SecurityElement.IsValidText
- uid: System.Security.SecurityElement.SearchForChildByTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag
  nameWithType: SecurityElement.SearchForChildByTag
- uid: System.Security.SecurityElement.SearchForTextOfTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag
  nameWithType: SecurityElement.SearchForTextOfTag
- uid: System.Security.SecurityElement.Tag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
- uid: System.Security.SecurityElement.Text*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
- uid: System.Security.SecurityElement.ToString*
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString
  nameWithType: SecurityElement.ToString
