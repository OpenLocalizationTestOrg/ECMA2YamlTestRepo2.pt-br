### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptor
  id: TypeDescriptor
  children:
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  - System.ComponentModel.TypeDescriptor.ComObjectType
  - System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptor.InterfaceType
  - System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  - System.ComponentModel.TypeDescriptor.Refreshed
  - System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  langs:
  - csharp
  name: TypeDescriptor
  nameWithType: TypeDescriptor
  fullName: System.ComponentModel.TypeDescriptor
  type: Class
  summary: "Fornece informações sobre as características de um componente, como seus atributos, propriedades e eventos. Essa classe não pode ser herdada."
  remarks: "O .NET Framework fornece duas maneiras de acessar os metadados em um tipo: a reflexão API fornecida no <xref:System.Reflection?displayProperty=fullName>namespace e classe TypeDescriptor.</xref:System.Reflection?displayProperty=fullName> Reflexão é um mecanismo geral disponível para todos os tipos de porque sua base é estabelecida no <xref:System.Object.GetType%2A>método da raiz de <xref:System.Object>classe.</xref:System.Object> </xref:System.Object.GetType%2A> As informações que ele retorna para um tipo não são extensíveis, em que ele não pode ser modificado após a compilação do tipo de destino. Para obter mais informações, consulte os tópicos [reflexão](~/add/includes/ajax-current-ext-md.md).       Por outro lado, o TypeDescriptor é um mecanismo de inspeção extensível para componentes: as classes que implementam o <xref:System.ComponentModel.IComponent>interface.</xref:System.ComponentModel.IComponent> Ao contrário de reflexão, ele não inspeciona para métodos. TypeDescriptor pode ser estendido por vários serviços disponíveis por meio do componente de destino <xref:System.ComponentModel.Component.Site%2A>.</xref:System.ComponentModel.Component.Site%2A> dinamicamente A tabela a seguir mostra esses serviços.      | Nome do serviço | Descrição |   |------------------|-----------------|   | <xref:System.ComponentModel.IExtenderProvider>| Permite que a outra classe, como <xref:System.Windows.Forms.ToolTip>, para fornecer propriedades adicionais para um componente. |   | <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>| Permite que o outro objeto para modificar os metadados padrão que é exposto por um componente. |   | <xref:System.ComponentModel.ICustomTypeDescriptor>| Permite que uma classe completamente e dinamicamente especificar seus próprios metadados, substituindo o mecanismo de inspeção padrão do TypeDescriptor. |       A extensibilidade fornecida pelo TypeDescriptor permite a representação de tempo de design de um componente seja diferente da sua representação de tempo de execução real, o que torna o TypeDescriptor úteis para a criação da infraestrutura de tempo de design.</xref:System.ComponentModel.ICustomTypeDescriptor> </xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.Windows.Forms.ToolTip> </xref:System.ComponentModel.IExtenderProvider>       Todos os métodos no TypeDescriptor são `static`. Não é possível criar uma instância dessa classe, e essa classe não pode ser herdada.       Você pode definir a propriedade e evento valores de duas maneiras diferentes: especificá-los na classe de componente ou alterá-los em tempo de design. Como você pode definir esses valores de duas maneiras, os métodos sobrecarregados do TypeDescriptor levam dois tipos diferentes de parâmetros: um tipo de classe ou uma instância do objeto.       Quando você deseja acessar informações TypeDescriptor e você tiver uma instância do objeto, use o método que chama um componente. Use o método que chama para o tipo de classe somente quando você não tem uma instância do objeto.       Propriedades e eventos são armazenados em cache por TypeDescriptor para maior velocidade. Normalmente, eles são constantes para o tempo de vida de um objeto. No entanto, os designers e provedores de extensor podem alterar o conjunto de propriedades em um objeto. Se esse for o caso, o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>método deve ser chamado para atualizar o cache.</xref:System.ComponentModel.TypeDescriptor.Refresh%2A>"
  syntax:
    content: public sealed class TypeDescriptor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  id: AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona os atributos de nível de classe para a instância do componente de destino."
  remarks: "O método AddAttributes adiciona os atributos de nível de classe para a instância especificada de um componente. Como esse é um requisito comum de aplicativos usando o [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] Windows Forms Designer e a janela Propriedades, esse método fornece um atalho, criando um provedor de descrição de tipo que mescla os atributos fornecidos com os atributos que já existem na classe. O valor de retorno é o provedor de descrição de tipo que foi usado para adicionar os atributos. Este provedor posteriormente pode ser passado para o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método quando os atributos adicionados não são mais necessários.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (object instance, Attribute[] attributes);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz de <xref:System.Attribute>objetos para adicionar a classe. do componente</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Recém-criado <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> que foi usado para adicionar os atributos especificados."
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  id: AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona os atributos de nível de classe para o tipo de componente de destino."
  remarks: "O método AddAttributes adiciona os atributos de nível de classe para o tipo de um componente especificado. Como esse é um requisito comum de aplicativos usando o [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] Windows Forms Designer e a janela Propriedades, esse método fornece um atalho, criando um provedor de descrição de tipo que mescla os atributos fornecidos com os atributos que já existem na classe. O valor de retorno é o provedor de descrição de tipo que foi usado para adicionar os atributos. Este provedor posteriormente pode ser passado para o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método quando os atributos adicionados não são mais necessários.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (Type type, Attribute[] attributes);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz de <xref:System.Attribute>objetos para adicionar a classe. do componente</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Recém-criado <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> que foi usado para adicionar os atributos especificados."
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  id: AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona uma tabela de editor para o tipo base do editor especificado."
  remarks: "O método AddEditorTable adiciona uma tabela de editor para o tipo base do editor especificado. Normalmente, os editores são especificados como metadados em um componente. No entanto, se nenhum metadado editor solicitado base de tipo pode ser encontrado no componente, associado <xref:System.ComponentModel.TypeDescriptor>irá procurar uma tabela de editor para o tipo de editor, se pode ser encontrado.</xref:System.ComponentModel.TypeDescriptor> Após a adição de uma tabela de editor para um descritor de tipo, ele não pode ser removido e pertence ao descritor de tipo. O descritor de tipo livremente pode fazer modificações nesta tabela.       O formato de uma tabela de editor usa tipos de dados como chaves e editores como valores. A parte do valor de uma entrada na tabela representa uma instância do editor. Ele pode ter um dos três valores. Se ele contém uma cadeia de caracteres, o descritor de tipo assumirá que este é um nome totalmente qualificado de um tipo e, em seguida, carregar o tipo do objeto. Se ele contém um tipo, uma instância desse tipo será criada para obter um editor. Por fim, a parte de valor pode conter uma instância do editor real. Se o descritor de tipo resolve um editor para uma instância, ele armazena a instância de volta na tabela para uso futuro."
  syntax:
    content: public static void AddEditorTable (Type editorBaseType, System.Collections.Hashtable table);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "O tipo base editor para adicionar a tabela de editor para. Se uma tabela já existe para este tipo, esse método não fará nada."
    - id: table
      type: System.Collections.Hashtable
      description: "The <xref href=&quot;System.Collections.Hashtable&quot;></xref> to add."
  overload: System.ComponentModel.TypeDescriptor.AddEditorTable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um provedor de descrição de tipo de uma única instância de um componente."
  remarks: "O método AddProvider adiciona um provedor de descrição de tipo que fornece informações de tipo para uma única instância de um componente. Se um provedor é adicionado por esse método, o provedor <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>método não será chamado porque a instância já existe.</xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>       Esse método não mantém uma referência de disco rígida para o componente, para que ela não impede que o componente finalizando.       É possível adicionar vários provedores de descrição de tipo para o mesmo tipo ou objeto. Se isso ocorrer, o primeiro tipo descrição provedor encontrado que fornece informações de tipo será usado exclusivamente. Como provedores de informações de tipo são armazenadas em uma pilha, o último provedor adicionado será o primeiro deles consultada. Esse comportamento permite que o AddProvider e <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>provedor de descrição de tipos de métodos a serem usados para enviar por push e pop conforme necessário para cenários específicos.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       Se for bem-sucedida, este método chama o <xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>método sobre o `instance` parâmetro.</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>      > [!NOTE] > As duas versões do método produzirem resultados com escopos diferentes. O <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>método que utiliza um <xref:System.Object>parâmetro afeta somente uma instância única do componente especificado.</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Por outro lado, a outra sobrecarga, que usa um <xref:System.Type>parâmetro afeta todas as instâncias do componente descrita por tipo.</xref:System.Type>       Use o <xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se você precisar chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um provedor de descrição de tipo para uma classe de componente."
  remarks: "O método AddProvider adiciona um provedor de descrição de tipo que fornece informações de tipo para a classe especificada, as classes derivadas e todas as instâncias desses tipos.      > [!NOTE] > O `type` parâmetro pode ser qualquer tipo, incluindo uma interface. Por exemplo, para fornecer informações de instância para todos os componentes e tipo personalizado, você especificaria `typeof(IComponent)`. Passando `typeof(object)` chamará o provedor para fornecer informações de tipo para todos os tipos.       Esse método não manter uma referência de disco rígida para qualquer objeto, para que ela não impede que objetos finalizando.       É possível adicionar vários provedores de descrição de tipo para o mesmo tipo ou objeto. Se isso ocorrer, o primeiro tipo descrição provedor encontrado que fornece informações de tipo será usado exclusivamente. Como provedores de informações de tipo são armazenadas em uma pilha, o último provedor adicionado será o primeiro deles consultada. Esse comportamento permite que o AddProvider e <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>provedor de descrição de tipos de métodos a serem usados para enviar por push e pop conforme necessário para cenários específicos.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       Se for bem-sucedida, este método chama o <xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>método sobre o `type` parâmetro.</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>      > [!NOTE] > As duas versões do método produzirem resultados com escopos diferentes. O <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>método que utiliza um <xref:System.Object>parâmetro afeta somente uma instância única do componente especificado.</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Por outro lado, a outra sobrecarga, que usa um <xref:System.Type>parâmetro afeta todas as instâncias do componente descrita por tipo.</xref:System.Type>       Use o <xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se você precisar chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um provedor de descrição de tipo de uma única instância de um componente."
  remarks: "Esse método pode ser chamado de código parcialmente confiável. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>for definido, o chamador pode registrar um provedor para a instância especificada se seu tipo também é parcialmente confiável.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Use o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se você não precisa chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um provedor de descrição de tipo para uma classe de componente."
  remarks: "Esse método pode ser chamado de código parcialmente confiável. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>for definido, o chamador pode registrar um provedor para o tipo especificado se também for parcialmente confiável.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Use o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se você não precisa chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  id: ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém ou define o provedor para as informações de tipo de modelo de objeto de componente (COM) para o componente de destino."
  remarks: "A propriedade ComNativeDescriptorHandler e o <xref:System.ComponentModel.IComNativeDescriptorHandler>interface está obsoleta.</xref:System.ComponentModel.IComNativeDescriptorHandler> Para obter mais informações, consulte o <xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>propriedade.</xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>"
  syntax:
    content: public static System.ComponentModel.IComNativeDescriptorHandler ComNativeDescriptorHandler { get; set; }
    return:
      type: System.ComponentModel.IComNativeDescriptorHandler
      description: "Um <xref href=&quot;System.ComponentModel.IComNativeDescriptorHandler&quot;> </xref> que representa o provedor de informações COM tipo de instância."
  overload: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  id: ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o tipo do objeto de modelo de objeto de componente (COM) representado pelo componente de destino."
  remarks: "A propriedade ComObjectType retorna um tipo que pode ser passado para o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método para definir um provedor de descrição de tipo para tipos COM.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>       A propriedade ComObjectType e outros membros dessa classe substituem a funcionalidade de obsoleto <xref:System.ComponentModel.IComNativeDescriptorHandler>interface.</xref:System.ComponentModel.IComNativeDescriptorHandler> Para implementar uma camada de mapeamento entre um objeto COM e <xref:System.ComponentModel.TypeDescriptor>, adicione um <xref:System.ComponentModel.TypeDescriptionProvider>para lidar com o tipo de ComObjectType.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static Type ComObjectType { get; }
    return:
      type: System.Type
      description: "O <xref:System.Type>do objeto COM representado por esse componente, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para objetos COM não.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.ComObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  id: CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria uma associação primário secundário entre dois objetos."
  remarks: "O método CreateAssociation cria uma associação entre um principal e um objeto secundário. Quando uma associação é criada, um designer ou outro mecanismo de filtragem pode adicionar propriedades roteiam para qualquer objeto no conjunto de propriedades do objeto principal. Quando é feita uma chamada de propriedade do objeto principal, o <xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>método será chamado para resolver a instância do objeto real que está relacionada ao seu parâmetro de tipo.</xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>       Um <xref:System.WeakReference>é usado para manter a associação entre o objeto principal e secundário; portanto, esse método não impede que qualquer objeto que está sendo finalizado e recuperada pela coleta de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static void CreateAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "O principal <xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "O secundário <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.CreateAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>primary</code>é igual a <code>secondary</code>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria uma instância do designer associado ao componente especificado e do tipo especificado do designer."
  remarks: "Se esse método não é possível localizar um válido <xref:System.ComponentModel.DesignerAttribute>, ele procura a hierarquia de classe para um designer.</xref:System.ComponentModel.DesignerAttribute> Se ele não é possível localizar um designer na hierarquia de classe, ele retorna `null`."
  syntax:
    content: public static System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, Type designerBaseType);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "Um <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> que especifica o componente para associar com o designer."
    - id: designerBaseType
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo de designer para criar.</xref:System.Type>"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "Um <xref href=&quot;System.ComponentModel.Design.IDesigner&quot;> </xref> que é uma instância do designer para o componente, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum designer pode ser encontrado."
  overload: System.ComponentModel.TypeDescriptor.CreateDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  id: CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo descritor de evento que é idêntico a um descritor de eventos existentes, quando passado existente <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>."
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O tipo do componente para o qual criar o novo evento."
    - id: oldEventDescriptor
      type: System.ComponentModel.EventDescriptor
      description: "As informações de evento existente."
    - id: attributes
      type: System.Attribute[]
      description: "Os novos atributos."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um novo <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> que foi mesclado os atributos de metadados especificado com os atributos de metadados existentes."
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo descritor de evento que é idêntico a um descritor de evento existente Gerando informações de descritor dinamicamente de um evento específico em um tipo."
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O tipo do evento componente reside."
    - id: name
      type: System.String
      description: "O nome do evento."
    - id: type
      type: System.Type
      description: "O tipo de representante que manipula o evento."
    - id: attributes
      type: System.Attribute[]
      description: "Os atributos para este evento."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> que está associado a um tipo."
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um objeto que pode substituir por outro tipo de dados."
  remarks: "O método CreateInstance procurará um <xref:System.ComponentModel.TypeDescriptionProvider>associado especificado `objectType` tipo de dados.</xref:System.ComponentModel.TypeDescriptionProvider> Esse método primeiro tenta obter um provedor de descrição de tipo do `provider` parâmetro. Se isso falhar, ele procura suas próprias tabelas internas por um provedor (essas entradas foram criadas por meio de chamadas anteriores para <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>).</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Se ele encontrar um provedor, esse método delegará a chamada de criação para o objeto."
  syntax:
    content: public static object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "O provedor de serviço que fornece um <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> service. Esse parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: objectType
      type: System.Type
      description: "O <xref:System.Type>do objeto a ser criado.</xref:System.Type>"
    - id: argTypes
      type: System.Type[]
      description: "Uma matriz opcional de tipos de parâmetro a ser passado para o construtor do objeto. Esse parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz de comprimento zero."
    - id: args
      type: System.Object[]
      description: "Uma matriz opcional de valores de parâmetro para passar para o construtor do objeto. Se não <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o número de elementos deve ser o mesmo que `argTypes`."
    return:
      type: System.Object
      description: "Uma instância do tipo de dados de substituição se associadas <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> for encontrado; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeDescriptor.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or <code>args</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> when <code>argTypes</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argTypes</code>e <code>args</code> têm números diferentes de elementos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  id: CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo descritor de propriedade de um descritor de propriedade existente, com o uso especificado <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> e matriz de atributos."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente que a propriedade é um membro de.</xref:System.Type>"
    - id: oldPropertyDescriptor
      type: System.ComponentModel.PropertyDescriptor
      description: "O descritor de propriedade existente."
    - id: attributes
      type: System.Attribute[]
      description: "Os novos atributos para essa propriedade."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Um novo <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com os atributos de metadados especificado mesclados com os atributos de metadados existentes."
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria e associa dinamicamente um descritor de propriedade para um tipo, usando o nome da propriedade especificado, o tipo e a matriz de atributos."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente que a propriedade é um membro de.</xref:System.Type>"
    - id: name
      type: System.String
      description: "O nome da propriedade."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>da propriedade.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Os novos atributos para essa propriedade."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> que está associado ao tipo especificado e com os atributos de metadados especificado mesclados com os atributos de metadados existentes."
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  id: GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna uma instância do tipo associado ao objeto principal especificado."
  remarks: "Se uma associação anterior foi feita o `type` parâmetro usando o <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>método e, em seguida, o método GetAssociation retorna o objeto de secundário correto para invocar para o tipo solicitado.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A> Caso contrário, GetAssociation procura por um designer compatível para `type` e retorna o designer, caso seja encontrado. Este método nunca retorna `null`.       Um <xref:System.WeakReference>é usado para manter a associação entre o objeto principal e secundário; portanto, esse método não impede que o objeto primário ou secundário que está sendo finalizado e recuperada pela coleta de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static object GetAssociation (Type type, object primary);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: primary
      type: System.Object
      description: "O objeto principal da associação."
    return:
      type: System.Object
      description: "Uma instância do tipo secundário que foi associado ao objeto principal se existir uma associação. Caso contrário, <code> primary </code> existe de associação se não for especificado."
  overload: System.ComponentModel.TypeDescriptor.GetAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  id: GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de atributos para o componente especificado."
  remarks: "Os atributos retornados pelo <xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>método pode ser modificado dinamicamente de fonte do componente original listando por provedores de extensor (<xref:System.ComponentModel.IExtenderProvider>), serviços de filtro (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>) e filtros de atributo.</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       Quando você define um atributo personalizado com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, você deve substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade para torná-lo exclusivo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Se todas as instâncias do seu atributo forem exclusivas, substituir <xref:System.Attribute.TypeId%2A?displayProperty=fullName>para retornar a identidade do objeto do seu atributo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Se apenas algumas instâncias do seu atributo são exclusivas, retornar um valor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>que retornaria igualdade nesses casos.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Por exemplo, alguns atributos tem um parâmetro de construtor que atua como uma chave exclusiva. Para esses atributos, retornar o valor do parâmetro de construtor do <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      > [!NOTE] > A implementação padrão de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>retorna a identidade de tipo independentemente do valor de <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>propriedade.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Para retornar várias instâncias de um <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>de atributo do <xref:System.ComponentModel.AttributeCollection>, o atributo deve substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method.
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para o qual você deseja obter atributos."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> que contém os atributos para o componente. Se <code> component </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, esse método retorna uma coleção vazia."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  id: GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna uma coleção de atributos para o tipo de componente especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       Para atributos com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, a coleção de atributos remove instâncias duplicadas.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Essas são as instâncias em que o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade retorna valores iguais.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>       Quando você define um atributo personalizado com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, você deve substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade para torná-lo exclusivo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Se todas as instâncias do seu atributo forem exclusivas, substituir <xref:System.Attribute.TypeId%2A?displayProperty=fullName>para retornar a identidade do objeto do seu atributo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Se apenas algumas instâncias do seu atributo são exclusivas, retornar um valor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>que retornaria igualdade nesses casos.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Por exemplo, alguns atributos tem um parâmetro de construtor que atua como uma chave exclusiva. Para esses atributos, retornar o valor do parâmetro de construtor do <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      > [!NOTE] > A implementação padrão de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>retorna a identidade de tipo independentemente do valor de <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>propriedade.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Para retornar várias instâncias de um <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>de atributo do <xref:System.ComponentModel.AttributeCollection>, o atributo deve substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> com os atributos para o tipo do componente. Se o componente for <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, esse método retorna uma coleção vazia."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  id: GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna uma coleção de atributos para o componente especificado e um valor booleano que indica que um descritor de tipo personalizado foi criado."
  remarks: "Os atributos retornados pelo <xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>método pode ser modificado dinamicamente do original componentes listando por provedores de extensor (<xref:System.ComponentModel.IExtenderProvider>), serviços de filtro (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>) e filtros de atributo.</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       Quando você define um atributo personalizado com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, você deve substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade para torná-lo exclusivo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Se todas as instâncias do seu atributo forem exclusivas, substituir <xref:System.Attribute.TypeId%2A?displayProperty=fullName>para retornar a identidade do objeto do seu atributo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Se apenas algumas instâncias do seu atributo são exclusivas, retornar um valor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>que retornaria igualdade nesses casos.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Por exemplo, alguns atributos tem um parâmetro de construtor que atua como uma chave exclusiva. Para esses atributos, retornar o valor do parâmetro de construtor do <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      > [!NOTE] > A implementação padrão de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>retorna a identidade de tipo independentemente do valor de <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>propriedade.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Para retornar várias instâncias de um <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>de atributo do <xref:System.ComponentModel.AttributeCollection>, o atributo deve substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para o qual você deseja obter atributos."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para usar um conjunto de linha de base de atributos do descritor de tipo personalizado se `component` é do tipo <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> com os atributos para o componente. Se o componente for <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, esse método retorna uma coleção vazia."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  id: GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome da classe para o componente especificado usando o descritor de tipo padrão."
  remarks: "Normalmente, esse método retorna o total <xref:System.Type>nome para o `component` tipo de parâmetro.</xref:System.Type> Por exemplo, o nome da classe para um botão é &quot;System.Windows.Forms.Button&quot;. Se `component` implementa <xref:System.ComponentModel.ICustomTypeDescriptor>, ele pode retornar um nome alternativo.</xref:System.ComponentModel.ICustomTypeDescriptor>       Esse método é equivalente a sobrecarregados <xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>método com um segundo parâmetro do `false`.</xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static string GetClassName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual você deseja que o nome da classe.</xref:System.Object>"
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o nome da classe para o componente especificado.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome da classe para o tipo especificado."
  remarks: "Esse método usa o descritor de tipo personalizado em cache para o tipo especificado para descobrir o nome da classe associada."
  syntax:
    content: public static string GetClassName (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o nome da classe para o tipo de componente especificado.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  id: GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome da classe para o componente especificado usando um descritor de tipo personalizado."
  remarks: "Normalmente, esse método retorna o total <xref:System.Type>nome para o `component` tipo de parâmetro.</xref:System.Type> Por exemplo, o nome da classe para um botão é &quot;System.Windows.Forms.Button&quot;. Se o `component` parâmetro implementa <xref:System.ComponentModel.ICustomTypeDescriptor>, ele pode retornar um nome alternativo.</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetClassName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual você deseja que o nome da classe.</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o nome da classe para o componente especificado.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  id: GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome do componente especificado usando o descritor de tipo padrão."
  remarks: "Normalmente, esse método retorna o nome para o site do componente, se houver. Por exemplo, o nome da classe para um botão é &quot;System.Windows.Forms.Button&quot;.       Esse método é equivalente a sobrecarregados <xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>método com um segundo parâmetro do `false`.</xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>       Esse método é usado em tempo de design para recuperar o nome de uma instância de um componente."
  syntax:
    content: public static string GetComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual você deseja que o nome da classe.</xref:System.Object>"
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o nome do componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum nome de componente.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  id: GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome do componente especificado usando um descritor de tipo personalizado."
  remarks: "Esse método é usado em tempo de design para recuperar o nome de uma instância de um componente. Normalmente, esse método retorna o nome para o site do componente, se houver. Por exemplo, o nome da classe para um botão é &quot;System.Windows.Forms.Button&quot;. Se o componente implementa o <xref:System.ComponentModel.ICustomTypeDescriptor>interface, ele pode retornar um nome alternativo.</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetComponentName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual você deseja que o nome da classe.</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "O nome da classe para o componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum nome de componente."
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  id: GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um conversor de tipo para o tipo do componente especificado."
  remarks: "Esse método localiza um conversor de tipo apropriado, procurando <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Se ele não encontrar um <xref:System.ComponentModel.TypeConverterAttribute>, ele percorre a hierarquia de classe base da classe até encontrar um tipo primitivo.</xref:System.ComponentModel.TypeConverterAttribute>       Esse método é equivalente a sobrecarregados <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>método com um segundo parâmetro do `false`.</xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter o conversor."
    return:
      type: System.ComponentModel.TypeConverter
      description: "Um <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  id: GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um conversor de tipo para o tipo especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       Esse método procura o conversor de tipo apropriado, procurando <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Se ele não encontrar um <xref:System.ComponentModel.TypeConverterAttribute>, ele percorre a hierarquia de classe base da classe até encontrar um tipo primitivo.</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeConverter
      description: "Um <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> para o tipo especificado."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  id: GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um conversor de tipo para o tipo do componente especificado com um descritor de tipo personalizado."
  remarks: "Esse método procura o conversor de tipo apropriado tentando encontrar <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Se ele não encontrar um <xref:System.ComponentModel.TypeConverterAttribute>, ele percorre a hierarquia de classe base da classe até encontrar um tipo primitivo.</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter o conversor."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.TypeConverter
      description: "Um <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  id: GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o evento padrão para o componente especificado."
  remarks: "Esse método é equivalente a sobrecarregados <xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>método com um segundo parâmetro do `false`.</xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o evento."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> com o evento padrão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum evento."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  id: GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o evento padrão para o tipo de componente especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto."
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> com o evento padrão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum evento."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  id: GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o evento padrão de um componente com um descritor de tipo personalizado."
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o evento."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> com o evento padrão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum evento."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  id: GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a propriedade padrão para o componente especificado."
  remarks: "Se o `component` parâmetro é `null`, esse método retornará `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter a propriedade padrão."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com a propriedade padrão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhuma propriedade."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  id: GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a propriedade padrão para o tipo de componente especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       Se o `componentType` parâmetro é `null`, esse método retornará `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "Um <xref:System.Type>que representa a classe para obter o loop for de propriedade</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com a propriedade padrão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhuma propriedade."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  id: GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a propriedade padrão para o componente especificado com um descritor de tipo personalizado."
  remarks: "Se o `component` parâmetro é `null`, esse método retornará `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter a propriedade padrão."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com a propriedade padrão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhuma propriedade."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  id: GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um editor com o tipo base especificado para o componente especificado."
  remarks: "O tipo de `editorBaseType` geralmente é <xref:System.Drawing.Design.UITypeEditor>, mas você também pode usar outros tipos (por exemplo, <xref:System.ComponentModel.ComponentEditor>e <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Você pode definir vários editores para uma propriedade. Você pode usar esse método para selecionar o editor que você deseja usar."
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o editor."
    - id: editorBaseType
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo base do editor que você deseja localizar.</xref:System.Type>"
    return:
      type: System.Object
      description: "Uma instância do editor que pode ser convertido para o tipo de editor especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum editor do tipo solicitado pode ser encontrado."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  id: GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um editor com o tipo base especificado para o tipo especificado."
  remarks: "O tipo de `editorBaseType` geralmente é <xref:System.Drawing.Design.UITypeEditor>, mas você também pode usar outros tipos (por exemplo <xref:System.ComponentModel.ComponentEditor>e <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Você pode definir vários editores de um tipo. Você pode usar esse método para selecionar o que você deseja usar.       Chame esta versão deste método somente quando você não tem uma instância do objeto."
  syntax:
    content: public static object GetEditor (Type type, Type editorBaseType);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: editorBaseType
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo base do editor que você está tentando localizar.</xref:System.Type>"
    return:
      type: System.Object
      description: "Uma instância do objeto editor que pode ser convertido para o tipo de base fornecido, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum editor do tipo solicitado pode ser encontrado."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  id: GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um editor com o tipo base especificado e com um descritor de tipo personalizado para o componente especificado."
  remarks: "O tipo de `editorBaseType` geralmente é <xref:System.Drawing.Design.UITypeEditor>, mas você também pode usar outros tipos (por exemplo <xref:System.ComponentModel.ComponentEditor>e <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Você pode definir vários editores para uma propriedade. Você pode usar esse método para selecionar o editor que você deseja usar."
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o editor."
    - id: editorBaseType
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo base do editor que você deseja localizar.</xref:System.Type>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "Um sinalizador que indica se as informações de descrição de tipo personalizado devem ser consideradas."
    return:
      type: System.Object
      description: "Uma instância do editor que pode ser convertido para o tipo de editor especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum editor do tipo solicitado pode ser encontrado."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  id: GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de eventos para o componente especificado."
  remarks: "Recupera uma coleção de eventos que o determinado `component` parâmetro instância fornece. Essa coleção pode ser diferente do conjunto de eventos que fornece a classe. Se o `component` parâmetro é localizado, o site pode adicionar ou remover eventos adicionais.       Se `component` é `null`, em seguida, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  example:
  - For an example of this method, see the <xref:System.ComponentModel.EventDescriptorCollection.Count%2A> property.
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter os eventos."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de eventos para um tipo de componente especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       Se o `componentType` parâmetro é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  id: GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de eventos para um componente especificado usando uma matriz de atributos especificada como um filtro."
  remarks: "Os eventos para o `component` parâmetro pode ser diferente dos eventos de uma classe, porque o site pode adicionar ou remover eventos, se o `component` parâmetro é localizado.       O `attributes` matriz pode ter uma mistura de <xref:System.Type>e <xref:System.Attribute>objetos.</xref:System.Attribute> </xref:System.Type> A filtragem é definida pelas seguintes regras: - um <xref:System.Type>é tratado como um curinga; corresponde a qualquer evento que tem o <xref:System.Type>em seu conjunto de atributos.</xref:System.Type> </xref:System.Type>      -Se um evento não tem um <xref:System.Attribute>da mesma classe, o evento não está incluído na matriz retornada.</xref:System.Attribute>      -Se o atributo é uma ocorrência da <xref:System.Attribute>classe, o evento deve ser uma correspondência exata ou ele não está incluído na matriz retornada.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é o evento padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <xref:System.Attribute>no evento.</xref:System.Attribute> </xref:System.Attribute>       Se `component` é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter os eventos."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que você pode usar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  id: GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de eventos para um componente especificado com um descritor de tipo personalizado."
  remarks: "Esse método retorna uma coleção de eventos que o determinado `component` parâmetro instância fornece. Isso pode ser diferente do conjunto de eventos que fornece a classe. Se o `component` parâmetro é localizado, o site pode adicionar ou remover eventos adicionais.       Se `component` é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter os eventos."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  id: GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de eventos para um tipo de componente usando uma matriz de atributos especificada como um filtro especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       O `attributes` matriz de parâmetro pode ter uma mistura de <xref:System.Type>e <xref:System.Attribute>objetos.</xref:System.Attribute> </xref:System.Type> A filtragem é definida pelas seguintes regras: - um <xref:System.Type>é tratado como um curinga; corresponde a qualquer evento que tem o <xref:System.Type>em seu conjunto de atributos.</xref:System.Type> </xref:System.Type>      -Se um evento não tem um <xref:System.Attribute>da mesma classe, o evento não está incluído na matriz retornada.</xref:System.Attribute>      -Se o atributo é uma ocorrência da <xref:System.Attribute>classe, o evento deve ser uma correspondência exata ou ele não está incluído na matriz retornada.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é o evento padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <xref:System.Attribute>no evento.</xref:System.Attribute> </xref:System.Attribute>       Se o `componentType` parâmetro é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que você pode usar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  id: GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de eventos para um componente especificado usando uma matriz de atributos especificada como um filtro e um descritor de tipo personalizado."
  remarks: "Os eventos para o `component` parâmetro pode ser diferente dos eventos de uma classe, porque o site pode adicionar ou remover eventos, se o `component` parâmetro é localizado.       O `attributes` matriz de parâmetro pode ter uma mistura de <xref:System.Type>e <xref:System.Attribute>objetos.</xref:System.Attribute> </xref:System.Type> A filtragem é definida pelas seguintes regras: - um <xref:System.Type>é tratado como um curinga; corresponde a qualquer evento que tem o <xref:System.Type>em seu conjunto de atributos.</xref:System.Type> </xref:System.Type>      -Se um evento não tem um <xref:System.Attribute>da mesma classe, o evento não está incluído na matriz retornada.</xref:System.Attribute>      -Se o atributo é uma ocorrência da <xref:System.Attribute>classe, o evento deve ser uma correspondência exata ou ele não está incluído na matriz retornada.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é o evento padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <xref:System.Attribute>no evento.</xref:System.Attribute> </xref:System.Attribute>       Se `component` é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter os eventos."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para usar como um filtro.</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome totalmente qualificado do componente."
  remarks: "Em muitos casos, o método GetFullComponentName retornará o mesmo valor que o <xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A>método.</xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A> No entanto, se o componente reside em um contêiner aninhado ou se tiver outras semânticas aninhadas, poderá retornar um nome totalmente qualificado diferente."
  syntax:
    content: public static string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref href=&quot;System.ComponentModel.Component&quot;> </xref> para localizar o nome."
    return:
      type: System.String
      description: "O nome totalmente qualificado do componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o componente não tem nome."
  overload: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de propriedades de um componente especificado."
  remarks: "As propriedades de um componente podem ser diferente das propriedades de uma classe, porque o site pode adicionar ou remover propriedades, se o componente está localizado.       Se o `component` parâmetro é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  example:
  - "The following code example demonstrates the use of the GetProperties method to access the properties of a control. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.ComponentDesigner> class.  \n  \n [!code-vb[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/visualbasic/m-system.componentmodel._38_1.vb)]\n [!code-cs[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/csharp/m-system.componentmodel._38_1.cs)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de propriedades para um tipo de componente especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       Se o `componentType` parâmetro é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "Um <xref:System.Type>que representa o componente para obter propriedades for...in</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades de um tipo de componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  id: GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de propriedades de um componente especificado usando uma matriz de atributos especificada como um filtro."
  remarks: "As propriedades para o `component` parâmetro pode ser diferentes das propriedades de uma classe, porque o site pode adicionar ou remover propriedades, se o `component` parâmetro é localizado.       O `attributes` matriz de parâmetros é usada para filtrar a matriz. A filtragem é definida pelas seguintes regras: - se uma propriedade não tem um <xref:System.Attribute>da mesma classe, a propriedade não está incluída na matriz retornada.</xref:System.Attribute>      -Se o atributo é uma ocorrência da <xref:System.Attribute>classe, a propriedade deve ser uma correspondência exata ou ele não está incluído na matriz retornada.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é a propriedade padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <xref:System.Attribute>na propriedade.</xref:System.Attribute> </xref:System.Attribute>      -Se `attributes` tem um atributo padrão, o GetProperties método corresponde o caso quando a propriedade não tem o atributo aplicado.       Se `component` é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/0d160e65-8e23-4623-ad72-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/0d160e65-8e23-4623-ad72-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/0d160e65-8e23-4623-ad72-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para usar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades que correspondem aos atributos especificados para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  id: GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de propriedades de um componente especificado usando o descritor de tipo padrão."
  remarks: "As propriedades para o `component` parâmetro pode ser diferentes das propriedades de uma classe, porque o site pode adicionar ou remover propriedades, se o `component` parâmetro é localizado.       Se `component` é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>não considere informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades de um componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  id: GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de propriedades para um tipo de componente usando uma matriz de atributos especificada como um filtro especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       O `attributes` matriz de parâmetros é usada para filtrar a matriz. A filtragem é definida pelas seguintes regras: - se uma propriedade não tem um <xref:System.Attribute>da mesma classe, a propriedade não está incluída na matriz retornada.</xref:System.Attribute>      -Se o atributo é uma ocorrência da <xref:System.Attribute>classe, a propriedade deve ser uma correspondência exata ou ele não está incluído na matriz retornada.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é a propriedade padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <xref:System.Attribute>na propriedade.</xref:System.Attribute> </xref:System.Attribute>      -Se `attributes` tem um atributo padrão, o GetProperties método corresponde o caso quando a propriedade não tem o atributo aplicado.       Se o `componentType` parâmetro é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/af245915-0d17-4307-99bf-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/af245915-0d17-4307-99bf-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/af245915-0d17-4307-99bf-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para usar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades que correspondem aos atributos especificados para esse tipo de componente."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  id: GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna a coleção de propriedades de um componente especificado usando uma matriz de atributos especificada como um filtro e um descritor de tipo personalizado."
  remarks: "As propriedades de um `component` podem diferir das propriedades de uma classe, porque o site pode adicionar ou remover propriedades, se o `component` está localizado.       O `attributes` matriz de parâmetros é usada para filtrar a matriz. A filtragem é definida pelas seguintes regras: - se uma propriedade não tem um <xref:System.Attribute>da mesma classe, a propriedade não está incluída na matriz retornada.</xref:System.Attribute>      -Se o atributo é uma ocorrência da <xref:System.Attribute>classe, a propriedade deve ser uma correspondência exata ou ele não está incluído na matriz retornada.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é a propriedade padrão, ele está incluído na matriz retornada mesmo se não houver nenhuma instância do <xref:System.Attribute>na propriedade.</xref:System.Attribute> </xref:System.Attribute>      -Se `attributes` tem um atributo padrão, o GetProperties método corresponde o caso quando a propriedade não tem o atributo aplicado.       Se o `component` parâmetro é `null`, uma coleção vazia será retornada.       A ordem da coleção retornada não é garantida para ser idêntico entre as chamadas, portanto, sempre solicitá-lo antes do uso."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para usar como um filtro.</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Considere as informações de descrição de tipo personalizado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto remoto entre processos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  id: GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o provedor de descrição de tipo para o componente especificado."
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>método sempre retornará um provedor de descrição de tipo.</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> Até mesmo o padrão <xref:System.ComponentModel.TypeDescriptor>implementação baseia-se em <xref:System.ComponentModel.TypeDescriptionProvider>.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Um <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> associado ao componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  id: GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o provedor de descrição de tipo para o tipo especificado."
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>método sempre retornará um provedor de descrição de tipo.</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> Até mesmo o padrão <xref:System.ComponentModel.TypeDescriptor>implementação baseia-se em <xref:System.ComponentModel.TypeDescriptionProvider>.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Um <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> associado ao tipo especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um <xref:System.Type>que pode ser usado para executar a reflexão, considerando um objeto.</xref:System.Type>"
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>método é uma versão de nível baixo do <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>normalmente é usado para executar a reflexão padrão em um objeto quando nenhum descritor de tipo personalizado pode ser localizado para ele.</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
    return:
      type: System.Type
      description: "Um <xref:System.Type>para o objeto especificado.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna um <xref:System.Type>que pode ser usado para executar a reflexão, recebe um tipo de classe.</xref:System.Type>"
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>método é uma versão de nível baixo do <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>normalmente é usado para executar reflexão padrão em uma classe quando nenhum descritor de tipo personalizado pode ser localizado para ele.</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.Type
      description: "Um <xref:System.Type>de classe especificada.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  id: InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um tipo que representa um provedor de descrição de tipo para todos os tipos de interface."
  remarks: "A propriedade obtém InterfaceType um <xref:System.Type>objeto que você pode passar para o <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>métodos para definir um provedor de descrição de tipo para tipos de interface.</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> </xref:System.Type>"
  syntax:
    content: public static Type InterfaceType { get; }
    return:
      type: System.Type
      description: "Um <xref:System.Type>que representa um provedor de descrição de tipo personalizado para todos os tipos de interface.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.InterfaceType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  id: Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o componente especificado do cache."
  remarks: "Propriedades e eventos são armazenados em cache por <xref:System.ComponentModel.TypeDescriptor>para maior velocidade.</xref:System.ComponentModel.TypeDescriptor> Normalmente, eles são constantes para o tempo de vida de um objeto. No entanto, os designers e provedores de extensor podem alterar o conjunto de propriedades em um objeto. Se isso ocorrer, eles devem chamar este método para limpar os descritores de evento e propriedade do objeto. Esse método é usado somente em tempo de design. Ele não é usado durante o tempo de execução.       Esse método também gera um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento ao alteram as propriedades ou eventos de um componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed> Esse evento é gerado apenas se não houver uma chamada anterior para o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>ou <xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>método que as informações armazenadas em cache.</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static void Refresh (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para o qual as propriedades ou eventos foram alterados."
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  id: Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o assembly especificado do cache."
  remarks: "Propriedades e eventos são armazenados em cache por <xref:System.ComponentModel.TypeDescriptor>para maior velocidade.</xref:System.ComponentModel.TypeDescriptor> Normalmente, eles são constantes para o tempo de vida de um objeto. No entanto, os designers e provedores de extensor podem alterar o conjunto de propriedades em um objeto. Se isso ocorrer, eles podem chamar este método para limpar os descritores de evento e propriedade do objeto. Esse método é usado somente em tempo de design. Ele não é usado durante o tempo de execução.       Antes de fazer uma chamada para o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>método para limpar o cache, você precisa chamar o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>método para o assembly específico para armazenar em cache as informações primeiro.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       Esse método também gera um <xref:System.ComponentModel.TypeDescriptor.Refreshed>eventos para notificar a todas as classes que deseja ser notificado quando a propriedade de conjunto de alterações de um componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "O <xref:System.Reflection.Assembly>que representa o assembly para atualizar.</xref:System.Reflection.Assembly> Cada <xref:System.Type>neste assembly serão atualizados.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  id: Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o módulo especificado do cache."
  remarks: "Propriedades e eventos são armazenados em cache por <xref:System.ComponentModel.TypeDescriptor>para maior velocidade.</xref:System.ComponentModel.TypeDescriptor> Normalmente, eles são constantes para o tempo de vida de um objeto. No entanto, os designers e provedores de extensor podem alterar o conjunto de propriedades em um objeto. Se isso ocorrer, eles podem chamar este método para limpar os descritores de evento e propriedade do objeto. Esse método é usado somente em tempo de design. Ele não é usado durante o tempo de execução.       Antes de fazer uma chamada para o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>método para limpar o cache, você precisa chamar o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>método para o módulo específico ao armazenar em cache as informações primeiro.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       Esse método também gera um <xref:System.ComponentModel.TypeDescriptor.Refreshed>eventos para notificar a todas as classes que deseja ser notificado quando a propriedade de conjunto de alterações de um componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Module module);
    parameters:
    - id: module
      type: System.Reflection.Module
      description: "O <xref:System.Reflection.Module>que representa o módulo para atualizar.</xref:System.Reflection.Module> Cada <xref:System.Type>neste módulo, serão atualizados.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  id: Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o tipo de componente do cache especificado."
  remarks: "Chame esta versão deste método somente quando você não tem uma instância do objeto.       Propriedades e eventos são armazenados em cache por <xref:System.ComponentModel.TypeDescriptor>para maior velocidade.</xref:System.ComponentModel.TypeDescriptor> Normalmente, eles são constantes para o tempo de vida de um objeto. No entanto, os designers e provedores de extensor podem alterar o conjunto de propriedades em um objeto. Se isso ocorrer, eles podem chamar este método para limpar os descritores de evento e propriedade do objeto. Esse método é usado somente em tempo de design. Ele não é usado durante o tempo de execução.       Esse método também gera um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento ao alteram as propriedades ou eventos de um componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed> Esse evento é gerado apenas se não houver uma chamada anterior para o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>ou <xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>método que as informações armazenadas em cache.</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public static void Refresh (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  id: Refreshed
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Ocorre quando o cache para um componente é limpo."
  remarks: 'Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - For an example of using this event, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static event System.ComponentModel.RefreshEventHandler Refreshed;
    return:
      type: System.ComponentModel.RefreshEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  id: RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove uma associação entre dois objetos."
  remarks: "O método RemoveAssociation remove uma associação entre dois objetos formado pelo <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>método.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       Um <xref:System.WeakReference>é usado para manter a associação entre o objeto principal e secundário; portanto, esse método não influencia quando o objeto é finalizado ou recuperado pela coleta de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "O principal <xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "O secundário <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  id: RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove todas as associações de um objeto principal."
  remarks: "O método RemoveAssociations remove todas as associações entre um objeto principal e todos os seus objetos secundários, criados por chamadas para o <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>método.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       Um <xref:System.WeakReference>é usado para manter a associação entre o objeto principal e secundário; portanto, esse método não influencia quando primário dos objetos secundários são finalizadas ou recuperada pela coleta de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociations (object primary);
    parameters:
    - id: primary
      type: System.Object
      description: "O principal <xref:System.Object>em uma associação.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>primary</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um provedor de descrição de tipo adicionado anteriormente que está associado ao objeto especificado."
  remarks: "Este método Remove um provedor de descrição de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> Remoção de um provedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento ser gerado para o objeto associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Use o <xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se você precisar chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um provedor de descrição de tipo adicionado anteriormente que está associado com o tipo especificado."
  remarks: "Este método Remove um provedor de descrição de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> Remoção de um provedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento ser gerado para o tipo associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Use o <xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se você precisar chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um provedor de descrição de tipo adicionado anteriormente que está associado ao objeto especificado."
  remarks: "Este método Remove um provedor de descrição de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> Remoção de um provedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento ser gerado para o objeto associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Esse método pode ser chamado de código parcialmente confiável. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>for definido, o chamador pode registrar um provedor para a instância especificada se seu tipo também é parcialmente confiável.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Use o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se você não precisa chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um provedor de descrição de tipo adicionado anteriormente que está associado com o tipo especificado."
  remarks: "Este método Remove um provedor de descrição de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> Remoção de um provedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento ser gerado para o tipo associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Esse método pode ser chamado de código parcialmente confiável. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>for definido, o chamador pode cancelar o registro de um provedor para o tipo especificado se também for parcialmente confiável.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Use o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se você não precisa chamar a partir de código parcialmente confiável.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  id: SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Descritores de classificações usando o nome do descritor."
  syntax:
    content: public static void SortDescriptorArray (System.Collections.IList infos);
    parameters:
    - id: infos
      type: System.Collections.IList
      description: "Um <xref:System.Collections.IList>que contém os descritores para classificar.</xref:System.Collections.IList>"
  overload: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>infos</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.IComNativeDescriptorHandler
  parent: System.ComponentModel
  isExternal: false
  name: IComNativeDescriptorHandler
  nameWithType: IComNativeDescriptorHandler
  fullName: System.ComponentModel.IComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptorCollection
  nameWithType: EventDescriptorCollection
  fullName: System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
- uid: System.ComponentModel.RefreshEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RefreshEventHandler
  nameWithType: RefreshEventHandler
  fullName: System.ComponentModel.RefreshEventHandler
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.TypeDescriptor.AddAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes
  nameWithType: TypeDescriptor.AddAttributes
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable
  nameWithType: TypeDescriptor.AddEditorTable
- uid: System.ComponentModel.TypeDescriptor.AddProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider
  nameWithType: TypeDescriptor.AddProvider
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent
  nameWithType: TypeDescriptor.AddProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation
  nameWithType: TypeDescriptor.CreateAssociation
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner
  nameWithType: TypeDescriptor.CreateDesigner
- uid: System.ComponentModel.TypeDescriptor.CreateEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent
  nameWithType: TypeDescriptor.CreateEvent
- uid: System.ComponentModel.TypeDescriptor.CreateInstance*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptor.CreateInstance
- uid: System.ComponentModel.TypeDescriptor.CreateProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty
  nameWithType: TypeDescriptor.CreateProperty
- uid: System.ComponentModel.TypeDescriptor.GetAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation
  nameWithType: TypeDescriptor.GetAssociation
- uid: System.ComponentModel.TypeDescriptor.GetAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes
  nameWithType: TypeDescriptor.GetAttributes
- uid: System.ComponentModel.TypeDescriptor.GetClassName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName
  nameWithType: TypeDescriptor.GetClassName
- uid: System.ComponentModel.TypeDescriptor.GetComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName
  nameWithType: TypeDescriptor.GetComponentName
- uid: System.ComponentModel.TypeDescriptor.GetConverter*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter
  nameWithType: TypeDescriptor.GetConverter
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent
  nameWithType: TypeDescriptor.GetDefaultEvent
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty
  nameWithType: TypeDescriptor.GetDefaultProperty
- uid: System.ComponentModel.TypeDescriptor.GetEditor*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: TypeDescriptor.GetEditor
- uid: System.ComponentModel.TypeDescriptor.GetEvents*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents
  nameWithType: TypeDescriptor.GetEvents
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptor.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptor.GetProperties*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties
  nameWithType: TypeDescriptor.GetProperties
- uid: System.ComponentModel.TypeDescriptor.GetProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider
  nameWithType: TypeDescriptor.GetProvider
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptor.GetReflectionType
- uid: System.ComponentModel.TypeDescriptor.InterfaceType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh
  nameWithType: TypeDescriptor.Refresh
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation
  nameWithType: TypeDescriptor.RemoveAssociation
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations
  nameWithType: TypeDescriptor.RemoveAssociations
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider
  nameWithType: TypeDescriptor.RemoveProvider
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent
  nameWithType: TypeDescriptor.RemoveProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray
  nameWithType: TypeDescriptor.SortDescriptorArray
