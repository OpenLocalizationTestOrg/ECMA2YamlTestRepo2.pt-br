### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Representa uma posição dentro de um <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> ou <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "A classe TextPointer apresenta a seguinte terminologia: - Posicione - inerentemente, um TextPointer sempre aponta para um *posição* no conteúdo.  Essas posições em se encaixam entre caracteres do conteúdo ou fluxo de conteúdo de elemento marcas que definem a estrutura do conteúdo.      -Atual posicione - porque um TextPointer sempre indica uma posição, e porque muitas das operações que podem ser executadas por um TextPointer em relação à posição apontada atualmente pelo TextPointer, faz sentido para referir-se à posição indicada por um TextPointer como simplesmente o *posição atual*.      -Posição de inserção - um *posição de inserção* é uma posição em que o novo conteúdo pode ser adicionado sem interromper todas as regras semânticas para o conteúdo associado.  Na prática, uma posição de inserção é em qualquer lugar no conteúdo em que um cursor pode ser posicionado.  Um exemplo de uma posição TextPointer válida que não é uma posição de inserção é a posição entre dois adjacentes <xref:System.Windows.Documents.Paragraph>marcas (ou seja, entre a marca de fechamento de parágrafo anterior e a marca de abertura do próximo parágrafo).</xref:System.Windows.Documents.Paragraph>      -Símbolo - para fins de TextPointer operações que envolvem símbolos, qualquer um dos seguintes é considerado um *símbolo*: - uma abertura ou marca de fechamento para um <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>          -Um <xref:System.Windows.UIElement>elemento contido em um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observe que essa um <xref:System.Windows.UIElement>sempre são contados como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pela <xref:System.Windows.UIElement>não são contadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Cada 16-bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caracteres dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>      -Texto contêiner - um *recipiente de texto* é o elemento que faz a borda final para o conteúdo de fluxo em questão; posição indicada por um TextPointer sempre fica dentro de um contêiner de texto.  No momento, um contêiner de texto deve ser um <xref:System.Windows.Documents.FlowDocument>ou <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  Em geral, não há suporte para operações entre instâncias de TextPointer em contêineres de texto diferente.      Contêiner - documento - o conteúdo em um texto é conhecido como um *documento*, como no <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>método e o <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>e <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>Propriedades.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       A classe TextPointer destina-se para facilitar a passagem e a manipulação de conteúdo que é representado por [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elementos de conteúdo de fluxo; em geral, esses elementos derivam de <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Algumas das operações que facilita a TextPointer incluem o seguinte:-executar uma comparação ordinal da posição atual com uma segunda posição especificada.  Consulte o <xref:System.Windows.Documents.TextPointer.CompareTo%2A>método.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      -Determinam o tipo de conteúdo adjacente à posição atual em uma direção especificada.  Consulte o <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>método e <xref:System.Windows.Documents.TextPointerContext>enumeração.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -Obter o <xref:System.Windows.Documents.TextElement>que os escopos ou adjacente à posição atual.</xref:System.Windows.Documents.TextElement>  Consulte <xref:System.Windows.Documents.Paragraph>e o <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>método.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      -Obtém o contêiner de texto que tem como escopo o documento atual.  Consulte o <xref:System.Windows.Documents.TextPointer.Parent%2A>propriedade.</xref:System.Windows.Documents.TextPointer.Parent%2A>      -Obter um número especificado de caracteres antes ou após a posição atual.  Consulte o <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>método.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Inserir uma cadeia de caracteres na posição atual.  Consulte o <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>método.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -Localize os limites de linha no conteúdo.  Consulte o <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>método e <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>propriedade.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -Converte entre TextPointer posições e deslocamentos de símbolo em conteúdo.  Consulte o <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>métodos.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      -Execute o teste de clique visual convertendo entre uma posição TextPointer e um <xref:System.Windows.Point>representar coordenadas relativas.</xref:System.Windows.Point>      -Localizar uma posição de inserção próximo ou verifique se a posição atual é uma posição de inserção.  Consulte o <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>métodos e <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>propriedade.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       A posição e <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>indicado por um objeto TextPointer são imutáveis.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  Quando o conteúdo é editado ou modificado, a posição indicada por um TextPointer não altera em relação ao texto ao redor; em vez disso, o deslocamento da posição do início do conteúdo é ajustado correspondente para refletir a nova posição relativa no conteúdo.  Por exemplo, um que indica uma posição no início de um determinado parágrafo TextPointer continua apontar para o início desse parágrafo, mesmo quando o conteúdo é inserido ou excluído antes ou depois do parágrafo.       A classe TextPointer não fornece nenhum construtor público.  Uma instância do TextPointer é criada usando propriedades ou métodos de outros objetos (incluindo outros objetos TextPointer). A lista a seguir fornece alguns exemplos de métodos e propriedades que criam e retorna um TextPointer.  Esta lista não é exaustiva: - de um <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A>e <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> </xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -De um <xref:System.Windows.Controls.TextBlock>(contêiner de texto): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>e <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -De um <xref:System.Windows.Documents.FlowDocument>(contêiner de texto): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, e <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>- de um existente TextPointer: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Executa uma comparação ordinal entre as posições especificado por atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e um segundo especificado <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Um valor de -1 indica que a posição especificada pelo atual <xref:System.Windows.Documents.TextPointer>precede a posição especificada pelo `position`.</xref:System.Windows.Documents.TextPointer>  Um valor de 0 indica que as posições indicadas são iguais.  Um valor de +&1; positivo indica que a posição especificada pelo atual <xref:System.Windows.Documents.TextPointer>segue a posição especificada pelo `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que especifica uma posição para comparar com a posição atual."
    return:
      type: System.Int32
      description: "– 1 se o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede <code> position </code>; 0 se os locais forem iguais; + 1 se o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> segue <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Especifica uma posição fora o contêiner de texto associado à posição atual."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Exclui o número especificado de caracteres da posição indicada pelo atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Especifique um valor positivo para excluir um caractere que segue a posição atual (como em <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); Especifique um valor negativo para excluir os caracteres que precedem a posição atual (como em <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       O número de caracteres realmente excluído pode ser menor que o número especificado por `count`.  Isso ocorre em casos onde `count` especifica mais caracteres que existem para ser excluído."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "O número de caracteres a serem excluídos, começando na posição atual. Especifique um valor positivo para excluir um caractere que segue a posição atual. Especifique um valor negativo para excluir os caracteres que precedem a posição atual."
    return:
      type: System.Int32
      description: "O número de caracteres realmente excluído."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O método é chamado em uma posição em que o texto não é permitido."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no final do conteúdo no contêiner de texto associado à posição atual."
  remarks: "O <xref:System.Windows.Documents.TextPointer.Parent%2A>para retornado <xref:System.Windows.Documents.TextPointer>sempre é um contêiner de texto (<xref:System.Windows.Controls.TextBlock> ou <xref:System.Windows.Documents.FlowDocument>), em vez de <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no final do conteúdo no contêiner de texto associado à posição atual."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no início do conteúdo no contêiner de texto associado à posição atual."
  remarks: "Use a posição retornada por essa propriedade como uma posição de linha de base para trabalhar com deslocamentos relativos às outras posições.  O <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>métodos fornecem uma maneira de converter entre posições e posição desloca.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       O <xref:System.Windows.Documents.TextPointer.Parent%2A>para retornado <xref:System.Windows.Documents.TextPointer>sempre é um contêiner de texto (<xref:System.Windows.Controls.TextBlock> ou <xref:System.Windows.Documents.FlowDocument>), em vez de <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> no início do conteúdo no contêiner de texto associado à posição atual."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna o elemento, se houver, que limita o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: "O elemento retornado normalmente é <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Um <xref:System.Windows.UIElement>pode ser retornado quando o <xref:System.Windows.Documents.TextPointer>indica uma posição dentro de um <xref:System.Windows.Documents.BlockUIContainer>elemento ou um <xref:System.Windows.Documents.InlineUIContainer>elemento.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual procurar um elemento adjacente."
    return:
      type: System.Windows.DependencyObject
      description: "O elemento adjacente especificado na <code> direction </code>, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não existe nenhum elemento adjacente."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna uma caixa delimitadora (<xref href=&quot;System.Windows.Rect&quot;></xref>) para o conteúdo que bordas atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: "<xref:System.Windows.Documents.TextElement>as bordas não são consideradas conteúdo para os fins deste método.</xref:System.Windows.Documents.TextElement>  Se o <xref:System.Windows.Documents.TextPointer>é posicionado antes de uma <xref:System.Windows.Documents.TextElement>borda, o valor de retorno é uma caixa delimitadora para o próximo não<xref:System.Windows.Documents.TextElement> conteúdo na direção especificada.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Se não houver nenhum conteúdo na direção especificada, uma largura zero <xref:System.Windows.Rect>é retornado com uma altura correspondente a altura de qualquer precedente conteúda.</xref:System.Windows.Rect>       A operação executada por esse método depende de um layout válido.  Quando necessário, esse método tenta gerar automaticamente um layout válido antes de continuar com a operação.  Regenerar um layout pode ser uma operação relativamente cara.  Use o <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>propriedade para verificar se há um layout válido antes de executar operações que podem regenerar o layout.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Para obter mais informações, consulte [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual localizar conteúdo de um caixa delimitadora."
    return:
      type: System.Windows.Rect
      description: "Uma caixa delimitadora para o conteúdo que bordas atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção especificada, ou &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; se atual, informações de layout válido não estão disponíveis."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição de inserção mais próxima na direção lógica especificada."
  remarks: "Uma posição de inserção é uma posição em que o novo conteúdo pode ser adicionado sem interromper todas as regras semânticas para o conteúdo associado.  Na prática, uma posição de inserção é em qualquer lugar no conteúdo em que um cursor pode ser posicionado.  Um exemplo de uma opção válida <xref:System.Windows.Documents.TextPointer>posição que não é uma posição de inserção é a posição entre dois adjacentes <xref:System.Windows.Documents.Paragraph>marcas (ou seja, entre a marca de fechamento de parágrafo anterior e a marca de abertura do próximo parágrafo).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Se o <xref:System.Windows.Documents.TextPointer>já aponta para uma posição de inserção válido, mas a marca de fechamento para uma sequência de formatação não vazia logo após a posição na direção determinada, o <xref:System.Windows.Documents.TextPointer>retornado por esse método é ajustado para apontar para a posição de inserção logo após o fechamento da sequência de formatação.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Por exemplo, considere a sequência de marcação `<Bold>``a``</Bold>``b`.  Observe que há duas posições de inserção entre as letras `a` e `b`— uma que precede o `Bold` marca e um diretamente após o fechamento `Bold` marca.  Se GetInsertionPosition for chamado em um <xref:System.Windows.Documents.TextPointer>para a posição diretamente após a letra `a` e antes do fechamento `Bold` marca e com um `direction` de <xref:System.Windows.Documents.LogicalDirection>, retornado <xref:System.Windows.Documents.TextPointer>é ajustado para apontar para a posição apenas antes da letra `b`, após o fechamento `Bold` marca.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  Um ajuste semelhante é feito para abrir as marcas de formatação ao trabalhar na direção oposta lógica.  Este método destina-se a fornecer um meio de ambiguidades entre as posições de inserção em casos semelhantes.       Esse método também pode ser usado para ser seletivo sobre pontos de inserção quando uma sequência de marcas estruturais envolvida. Por exemplo, quando estiver em uma posição entre marcas de parágrafo de abertura e fechamento, a direção de parâmetro pode ser usada para selecionar o mais próximo ponto de inserção no início do parágrafo seguinte (especificando <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) ou no final do parágrafo anterior (especificando <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Se o ponteiro já está na posição de inserção e não há nenhum marcas de formatação adjacentes especificado na `direction`, o retornado <xref:System.Windows.Documents.TextPointer>aponta para a mesma posição de chamada <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>       É possível que nenhuma posição de inserção válido existe em relação à posição apontada to pelo <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>  Isso pode acontecer se o conteúdo referenciado é estruturalmente incompleto, como em uma tabela vazia ou lista.  Nesses casos, esse método retorna apenas um <xref:System.Windows.Documents.TextPointer>para a mesma posição que o <xref:System.Windows.Documents.TextPointer>de que esse método foi chamado.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Esse método sempre retornará <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> válido"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual procurar a posição de inserção mais próxima."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a posição de inserção mais próxima na direção especificada."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o início de uma linha que é especificada em relação ao atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>aponta para uma posição ambígua, por exemplo, entre duas linhas, a linha na direção especificada pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>é selecionado como a linha de início relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       A operação executada por esse método depende de um layout válido.  Quando necessário, esse método tenta gerar automaticamente um layout válido antes de continuar com a operação.  Regenerar um layout pode ser uma operação relativamente cara.  Use <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>para verificar se há um layout válido antes de executar operações que podem regenerar o layout.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Para obter mais informações, consulte [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "O número de marcadores de início de linha para ignorar ao determinar a linha para o qual retornar a posição inicial. Valores negativos especificam linhas precedentes, 0 especifica que a linha atual e especificam valores positivos linhas a seguir."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> apontando para o início da linha especificada (com o <xref:System.Windows.Documents.TextPointer.LogicalDirection*>definido como <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a linha especificada está fora do intervalo ou caso contrário, não pode ser localizada.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o início de uma linha que é especificada em relação ao atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>e informa quantas linhas foram ignoradas."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>aponta para uma posição ambígua, por exemplo, entre duas linhas, a linha na direção especificada pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>propriedade for selecionada como a linha de início relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "O número de marcadores de início de linha para ignorar ao determinar a linha para o qual retornar a posição inicial. Valores negativos especificam linhas precedentes, 0 especifica que a linha atual e especificam valores positivos linhas a seguir."
    - id: actualCount
      type: System.Int32
      description: "Quando este método retorna, contém o número real de marcadores de início de linha que foram ignorados ao determinar a linha para o qual retornar a posição inicial.  Esse valor pode ser menor que `count` se o início ou término de conteúdo for encontrado antes que o número especificado de linhas é ignorado. Esse parâmetro é passado não inicializado."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> apontando para o início da linha especificada (com o <xref:System.Windows.Documents.TextPointer.LogicalDirection*>definido como <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), ou para o início da linha mais próximo à linha especificada se a linha especificada está fora do intervalo.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um ponteiro para o próximo símbolo na direção lógica especificada."
  remarks: "Qualquer um dos seguintes é considerado um símbolo: - uma abertura ou marca de fechamento para um <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contido em um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observe que essa um <xref:System.Windows.UIElement>sempre são contados como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pela <xref:System.Windows.UIElement>não são contadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -De 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caracteres dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>       Se o próximo símbolo é categorizado como <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, ou <xref:System.Windows.Documents.TextPointerContext>(conforme identificado pelo <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>método), o <xref:System.Windows.Documents.TextPointer>retornado por esse método é adiantado por exatamente um símbolo da posição atual.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       Se o próximo símbolo é categorizado como <xref:System.Windows.Documents.TextPointerContext>, o <xref:System.Windows.Documents.TextPointer>retornado por este método é ultrapassaram o texto para o próximo símbolo não texto (ou seja, a próxima posição onde a <xref:System.Windows.Documents.TextPointerContext>não é <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  A contagem exata de símbolo cruzada pode ser calculada com antecedência chamando o <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>método.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual procurar o próximo símbolo."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o próximo símbolo na direção solicitada, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> bordas de início ou término de conteúdo."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para a próxima posição de inserção na direção lógica especificada."
  remarks: "Um *posição de inserção* é uma posição em que o novo conteúdo pode ser adicionado sem interromper todas as regras semânticas para o conteúdo associado.  Na prática, uma posição de inserção é em qualquer lugar no conteúdo em que um cursor pode ser posicionado.  Um exemplo de uma opção válida <xref:System.Windows.Documents.TextPointer>posição que não é uma posição de inserção é a posição entre dois adjacentes <xref:System.Windows.Documents.Paragraph>marcas (ou seja, entre a marca de fechamento de parágrafo anterior e a marca de abertura do próximo parágrafo).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual procurar a próxima posição de inserção."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que identifica a próxima posição de inserção na direção solicitada, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a próxima posição de inserção pode ser encontrada."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna a contagem de símbolos entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e um segundo especificado <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Qualquer um dos seguintes é considerado um símbolo: - uma abertura ou marca de fechamento para um <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contido em um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observe que essa um <xref:System.Windows.UIElement>sempre são contados como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pela <xref:System.Windows.UIElement>não são contadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -De 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caracteres dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que especifica uma posição para encontrar a distância (em símbolos)."
    return:
      type: System.Int32
      description: "O número relativo de símbolos entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e <code> position </code>.  Um valor negativo indica que o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> segue a posição especificada pelo <code> position </code>, 0 indica que as posições são iguais, e um valor positivo indica que o atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede a posição especificada pelo <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Especifica uma posição fora o contêiner de texto associado à posição atual."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um indicador de categoria para o conteúdo adjacente atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual determinar a categoria para o conteúdo adjacente."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "Uma da <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> valores que indicam a categoria para o conteúdo adjacente na direção lógica especificada."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> à posição indicada pelo deslocamento especificado, símbolos, desde o início do atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Qualquer um dos seguintes é considerado um símbolo: - uma abertura ou marca de fechamento para o <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contido em um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observe que essa um <xref:System.Windows.UIElement>sempre são contados como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pela <xref:System.Windows.UIElement>não são contadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -De 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caracteres dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Um deslocamento, em símbolos para o qual calcular e retornar a posição.  Se o deslocamento for negativo, a posição é calculada na direção oposta lógica do que o indicado pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection*>propriedade.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> à posição indicada pelo deslocamento especificado, ou<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se nenhuma posição correspondente pode ser encontrada."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> à posição indicada pelo deslocamento especificado, símbolos, desde o início do atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e na direção especificada."
  remarks: "Qualquer um dos seguintes é considerado um símbolo: - uma abertura ou marca de fechamento para o <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contido em um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observe que essa um <xref:System.Windows.UIElement>sempre são contados como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pela <xref:System.Windows.UIElement>não são contadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -De 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caracteres dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "Um deslocamento, em símbolos para o qual calcular e retornar a posição.  Se o deslocamento for negativo, retornado <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>; caso contrário, ele segue."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção de lógica de retornado <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> à posição indicada pelo deslocamento especificado, ou<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se o deslocamento ultrapassa o final do conteúdo."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna uma cadeia de caracteres que contém qualquer texto adjacente a atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> na direção lógica especificada."
  remarks: "Esse método retorna apenas ininterruptas sequências de texto.  Nada será retornado se nenhum tipo de símbolo que <xref:System.Windows.Documents.TextPointerContext>adjacente ao atual <xref:System.Windows.Documents.TextPointer>na direção especificada.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Da mesma forma, o texto é retornado somente até o próximo símbolo não texto."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica para localizar e retornar qualquer texto adjacente."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém qualquer texto adjacente na direção especificada lógico, ou &lt;xref:System.String?displayProperty=fullName&gt; se nenhum texto adjacente pode ser encontrado."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Copia o número máximo especificado de caracteres de qualquer texto adjacente na direção especificada em uma matriz de caracteres fornecida pelo chamador."
  remarks: "Esse método retorna apenas ininterruptas sequências de texto.  Nada será retornado se nenhum tipo de símbolo que <xref:System.Windows.Documents.TextPointerContext>adjacente ao atual <xref:System.Windows.Documents.TextPointer>na direção especificada.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Da mesma forma, o texto é retornado somente até o próximo símbolo não texto."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica para localizar e copiar qualquer texto adjacente."
    - id: textBuffer
      type: System.Char[]
      description: "Um buffer em que qualquer texto é copiado."
    - id: startIndex
      type: System.Int32
      description: "Um índice em `textBuffer` no qual começar a gravar copiado texto."
    - id: count
      type: System.Int32
      description: "O número máximo de caracteres a serem copiados."
    return:
      type: System.Int32
      description: "O número de caracteres, na verdade, copiados para <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>é menor que 0 ou maior que o <xref:System.Array.Length*> propriedade <code>textBuffer</code>.       - ou - <code>count</code> é menor que 0 ou maior que o espaço restante no <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> menos <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retorna o número de caracteres Unicode entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e o próximo símbolo não texto, na direção lógica especificada."
  remarks: "Qualquer um dos seguintes é considerado um símbolo: - uma abertura ou marca de fechamento para o <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Um <xref:System.Windows.UIElement>elemento contido em um <xref:System.Windows.Documents.InlineUIContainer>ou <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Observe que essa um <xref:System.Windows.UIElement>sempre são contados como exatamente um símbolo; qualquer conteúdo adicional ou elementos contidos pela <xref:System.Windows.UIElement>não são contadas como símbolos.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -De 16 bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] caracteres dentro de um texto <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uma da <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valores que especifica a direção lógica na qual contar o número de caracteres."
    return:
      type: System.Int32
      description: "O número de caracteres Unicode entre atual <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e o próximo símbolo não texto.  Esse número pode ser 0 se não houver nenhum texto adjacente."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um valor que indica se o contêiner de texto associado à posição atual tem um layout (atualizado) válido."
  remarks: "Quando necessário, as operações que dependem de um layout válido (como o <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>método <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>método, e <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>propriedade) tentar gerar automaticamente um layout válido antes de continuar com a operação.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  Regenerar um layout pode ser uma operação relativamente cara.  Use essa propriedade para verificar se há um layout válido antes de executar operações que podem regenerar o layout.  Para obter mais informações, consulte [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o layout atual e válido. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Insere uma quebra de linha na posição atual."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> posicionado imediatamente após o <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> elemento inserido por este método."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Insere uma quebra de parágrafo na posição atual."
  remarks: "Se esse método é chamado quando a posição atual está dentro de uma existente <xref:System.Windows.Documents.Paragraph>elemento, o parágrafo existente e qualquer conteúdo que ele contém são divididas em dois parágrafos na posição atual.</xref:System.Windows.Documents.Paragraph>  Se esse método é chamado quando a posição atual não está dentro de um parágrafo existente, um novo parágrafo vazio é inserido.  Se esse método for chamado em uma posição inadequado para dividir ou inserindo um parágrafo (por exemplo, se a posição atual está dentro de um <xref:System.Windows.Documents.Hyperlink>elemento), uma exceção será lançada.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> para o início (<xref:System.Windows.Documents.TextElement.ContentStart*>) do novo parágrafo.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Esse método é chamado em uma posição que não pode ser dividida para acomodar um novo parágrafo, como no escopo de um <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> ou <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Insere o texto especificado no texto <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> na posição atual."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>não é limitado por um <xref:System.Windows.Documents.Run>elemento, um <xref:System.Windows.Documents.Run>é inserida junto com o `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "O texto a ser inserido."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A posição atual não está em um <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> elemento."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um valor que indica se a posição atual é uma posição de inserção."
  remarks: "Uma posição de inserção é uma posição em que o novo conteúdo pode ser adicionado sem interromper todas as regras semânticas para o conteúdo associado.  Na prática, uma posição de inserção é em qualquer lugar no conteúdo em que um cursor pode ser posicionado.  Um exemplo de uma opção válida <xref:System.Windows.Documents.TextPointer>posição que não é uma posição de inserção é a posição entre dois adjacentes <xref:System.Windows.Documents.Paragraph>marcas (ou seja, entre a marca de fechamento de parágrafo anterior e a marca de abertura do próximo parágrafo).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a posição atual é uma posição de inserção. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém um valor que indica se a posição atual está no início de uma linha."
  remarks: "Se o <xref:System.Windows.Documents.TextPointer>aponta para uma posição ambígua, por exemplo, entre duas linhas, a linha na direção especificada pelo <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>propriedade for selecionada como a linha de início relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       A operação executada por esta propriedade depende de um layout válido.  Quando necessário, esse método tenta gerar automaticamente um layout válido antes de continuar com a operação.  Regenerar um layout pode ser uma operação relativamente cara.  Use o <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>propriedade para verificar se há um layout válido antes de executar operações que podem regenerar o layout.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Para obter mais informações, consulte [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a posição atual está no início de uma linha. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Indica se a posição especificada está no mesmo contêiner de texto como a posição atual."
  remarks: "A maioria das operações que envolvem vários <xref:System.Windows.Documents.TextPointer>instâncias são válidas somente se as instâncias em questão indicam posições que estão no mesmo escopo de contêiner de texto.</xref:System.Windows.Documents.TextPointer>  Por exemplo o <xref:System.Windows.Documents.TextPointer.CompareTo%2A>e <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>métodos não podem ser usados com um <xref:System.Windows.Documents.TextPointer>para uma posição fora o contêiner de texto associado à posição atual.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Use esse método para verificar se determinado <xref:System.Windows.Documents.TextPointer>é compatível com a posição atual para essas operações.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "Um <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> que especifica uma posição para comparar com a posição atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> textPosition </code> indica uma posição que está no mesmo contêiner de texto como a posição atual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém a direção lógica associada à posição atual que é usada para resolver a ambiguidade conteúdo associado à posição atual."
  remarks: "Como um exemplo de como essa propriedade é usada, o <xref:System.Windows.Documents.LogicalDirection>do <xref:System.Windows.Documents.TextPointer>retornado por um teste de hit método fornece uma dica que entre dois caracteres de texto.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> A direção da lógica Especifica que os dois caracteres, na verdade, foi atingido, à esquerda ou à direita."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "O <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valor associado com a posição atual."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém o parágrafo que tem como escopo a posição atual, se houver."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "O <xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> que a posição atual, os escopos ou<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se tal parágrafo não existe."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Obtém o pai lógico que tem como escopo a posição atual."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "O pai lógico que tem como escopo a posição atual."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Esse tipo ou membro oferece suporte a [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infraestrutura e não se destina a ser usado diretamente no seu código."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A cadeia de caracteres que representa o objeto."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
