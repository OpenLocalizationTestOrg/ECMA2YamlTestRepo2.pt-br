### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlType
  id: XamlType
  children:
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  - System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.AllowedContentTypes
  - System.Xaml.XamlType.BaseType
  - System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  - System.Xaml.XamlType.ConstructionRequiresArguments
  - System.Xaml.XamlType.ContentProperty
  - System.Xaml.XamlType.ContentWrappers
  - System.Xaml.XamlType.DeferringLoader
  - System.Xaml.XamlType.Equals(System.Object)
  - System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  - System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.GetAllAttachableMembers
  - System.Xaml.XamlType.GetAllMembers
  - System.Xaml.XamlType.GetAttachableMember(System.String)
  - System.Xaml.XamlType.GetHashCode
  - System.Xaml.XamlType.GetMember(System.String)
  - System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  - System.Xaml.XamlType.GetXamlNamespaces
  - System.Xaml.XamlType.Invoker
  - System.Xaml.XamlType.IsAmbient
  - System.Xaml.XamlType.IsArray
  - System.Xaml.XamlType.IsCollection
  - System.Xaml.XamlType.IsConstructible
  - System.Xaml.XamlType.IsDictionary
  - System.Xaml.XamlType.IsGeneric
  - System.Xaml.XamlType.IsMarkupExtension
  - System.Xaml.XamlType.IsNameScope
  - System.Xaml.XamlType.IsNameValid
  - System.Xaml.XamlType.IsNullable
  - System.Xaml.XamlType.IsPublic
  - System.Xaml.XamlType.IsUnknown
  - System.Xaml.XamlType.IsUsableDuringInitialization
  - System.Xaml.XamlType.IsWhitespaceSignificantCollection
  - System.Xaml.XamlType.IsXData
  - System.Xaml.XamlType.ItemType
  - System.Xaml.XamlType.KeyType
  - System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.LookupAllAttachableMembers
  - System.Xaml.XamlType.LookupAllMembers
  - System.Xaml.XamlType.LookupAllowedContentTypes
  - System.Xaml.XamlType.LookupAttachableMember(System.String)
  - System.Xaml.XamlType.LookupBaseType
  - System.Xaml.XamlType.LookupCollectionKind
  - System.Xaml.XamlType.LookupConstructionRequiresArguments
  - System.Xaml.XamlType.LookupContentProperty
  - System.Xaml.XamlType.LookupContentWrappers
  - System.Xaml.XamlType.LookupCustomAttributeProvider
  - System.Xaml.XamlType.LookupDeferringLoader
  - System.Xaml.XamlType.LookupInvoker
  - System.Xaml.XamlType.LookupIsAmbient
  - System.Xaml.XamlType.LookupIsConstructible
  - System.Xaml.XamlType.LookupIsMarkupExtension
  - System.Xaml.XamlType.LookupIsNameScope
  - System.Xaml.XamlType.LookupIsNullable
  - System.Xaml.XamlType.LookupIsPublic
  - System.Xaml.XamlType.LookupIsUnknown
  - System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  - System.Xaml.XamlType.LookupIsXData
  - System.Xaml.XamlType.LookupItemType
  - System.Xaml.XamlType.LookupKeyType
  - System.Xaml.XamlType.LookupMarkupExtensionReturnType
  - System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  - System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  - System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  - System.Xaml.XamlType.LookupSetTypeConverterHandler
  - System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  - System.Xaml.XamlType.LookupTypeConverter
  - System.Xaml.XamlType.LookupUnderlyingType
  - System.Xaml.XamlType.LookupUsableDuringInitialization
  - System.Xaml.XamlType.LookupValueSerializer
  - System.Xaml.XamlType.MarkupExtensionReturnType
  - System.Xaml.XamlType.Name
  - System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.PreferredXamlNamespace
  - System.Xaml.XamlType.SchemaContext
  - System.Xaml.XamlType.ToString
  - System.Xaml.XamlType.TrimSurroundingWhitespace
  - System.Xaml.XamlType.TypeArguments
  - System.Xaml.XamlType.TypeConverter
  - System.Xaml.XamlType.UnderlyingType
  - System.Xaml.XamlType.ValueSerializer
  langs:
  - csharp
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
  type: Class
  summary: "Relata informações sobre os tipos de XAML, como parte do sistema geral de XAML que é implementado no serviços de XAML do .NET Framework."
  remarks: "Várias APIs na classe XamlType fornecem informações sobre os tipos XAML, onde o conceito que eles relatam é semelhante a seções específicas da especificação de XAML [MS-XAML].       XamlType é usado extensivamente na API de serviços do .NET Framework XAML para relatório de informações sobre um tipo XAML. XamlType relata as informações que você talvez precise saber sobre um tipo XAML para trabalhar com uma instância ou para acessar seus membros de um fluxo do nó XAML, ou uma representação de XAML semelhante. Seu relatório é semelhante ao modo como o <xref:System.Type>no CLR, digite sistema, junto com as classes de reflexão como <xref:System.Reflection.MemberInfo>, fornecem informações sobre um tipo CLR e seu uso.</xref:System.Reflection.MemberInfo> </xref:System.Type>       Para estender o sistema de tipo XAML, você pode derivar de XamlType. Para fazer assim efetivamente, você também precisará implementar <xref:System.Xaml.Schema.XamlTypeInvoker>.</xref:System.Xaml.Schema.XamlTypeInvoker> O <xref:System.Xaml.Schema.XamlTypeInvoker>permite que o sistema de tipo XAML generalizado trabalhar com o sistema de tipo fazendo o que você especificar como parte do comportamento de invocação.</xref:System.Xaml.Schema.XamlTypeInvoker> Personalizado específico <xref:System.Xaml.Schema.XamlTypeInvoker>fornece uma maneira de reduzir as dependências no sistema de tipos CLR, que são usadas pelo comportamento padrão do XamlType.</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: 'public class XamlType : IEquatable<System.Xaml.XamlType>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlType>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlType&quot;> </xref> classe com base nas informações de tipo CLR subjacentes."
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "O CLR subjacente <xref:System.Type>para o tipo XAML para construir.</xref:System.Type>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "Contexto do esquema XAML para leitores XAML ou gravadores XAML."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlType&quot;> </xref> classe com base em um nome de cadeia de caracteres para o tipo."
  remarks: "Este é um construtor protegido. Sem classes derivadas de públicas atuais existem que usam esse caminho específico para a construção. Como um consumidor de existente <xref:System.Xaml.XamlType>, você deve usar as outras assinaturas de construtor (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, ou <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) para inicializar um <xref:System.Xaml.XamlType>objeto.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> </xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29> </xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29> </xref:System.Xaml.XamlType>"
  syntax:
    content: protected XamlType (string typeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: typeName
      type: System.String
      description: "O nome do tipo a ser criado."
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Os argumentos de tipo para um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> que representa um tipo genérico. Pode ser (e geralmente é) <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, que indica o tipo representado não é um tipo genérico."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "Contexto do esquema XAML para leitores XAML e gravadores XAML."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>typeName</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlType&quot;> </xref> classe com base nas informações de tipo subjacente e um <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> implementação."
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "O tipo subjacente para o tipo XAML para construir."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "Contexto do esquema XAML para o leitor XAML."
    - id: invoker
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> implementação que manipula a reflexão em tempo de execução chama em relação a <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlType&quot;> </xref> classe com base no namespace XAML e um nome de cadeia de caracteres para o tipo. Este construtor é exclusivamente para análise e a gravação do nó XAML de usos de tipo que não tem suporte no sistema de tipos de suporte e contexto do esquema XAML."
  remarks: "Use este construtor somente para tipos &quot;desconhecidos&quot;, onde um tipo XAML que é mapeado para um sistema de tipo subjacente não está disponível. Este construtor não pode produzir um resultado onde <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName>é `true`.</xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName> Em vez disso, a lógica de refletor padrão informa o tipo subjacente como <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName>.</xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName> No entanto, esse comportamento pode alterar devido a <xref:System.Xaml.XamlType.LookupIsUnknown%2A>Substituir.</xref:System.Xaml.XamlType.LookupIsUnknown%2A>"
  syntax:
    content: public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: unknownTypeNamespace
      type: System.String
      description: "O namespace XAML para o tipo, como uma cadeia de caracteres."
    - id: unknownTypeName
      type: System.String
      description: "O nome do tipo fornecidos `unknownTypeNamespace` namespace XAML."
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Os argumentos de tipo para um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> que representa um tipo genérico. Pode ser (e geralmente é) <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, que indica o tipo representado não é um tipo genérico."
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "Contexto do esquema XAML para leitores XAML ou gravadores XAML."
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>unknownTypeNamespace</code>, <code>unknownTypeName</code>, or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.AllowedContentTypes
  id: AllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém uma coleção somente leitura dos tipos que podem ser usados como o <xref:System.Xaml.XamlType.ContentProperty*>valor <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Xaml.XamlType.ContentProperty*>"
  remarks: "Tipos de pode ser atribuídos um tipo específico de conteúdo (por exemplo, pode ser atribuído a um tipo base que é um tipo de conteúdo permitido) não são considerados para vários tipos para fins de AllowedContentTypes.       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> AllowedContentTypes { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma coleção somente leitura de possíveis tipos de conteúdo."
  overload: System.Xaml.XamlType.AllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.BaseType
  id: BaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo de base imediato desse tipo de XAML. Determinação desse valor é baseada no tipo base deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref> e contexto do esquema."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupBaseType%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupBaseType%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupBaseType%2A>neste tipo.</xref:System.Xaml.XamlType.LookupBaseType%2A> Por padrão, o BaseType retorna uma constante interna que representa um <xref:System.Object>se <xref:System.Xaml.XamlType.UnderlyingType%2A>é `null`.</xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Object>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupBaseType%2A>é virtual e, portanto, pode ser substituído.</xref:System.Xaml.XamlType.LookupBaseType%2A> A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar as informações de tipo informada sobre um tipo XAML, para que ele não se alinha de forma esperada com as informações de seu tipo CLR subjacente do sistema de tipo. Para verificações de acesso e operações de atribuição críticas de segurança, use o tipo CLR subjacente."
  syntax:
    content: public System.Xaml.XamlType BaseType { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo de base imediato desse tipo de XAML."
  overload: System.Xaml.XamlType.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  id: CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se uma instância deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref> foi especificado <xref href=&quot;System.Xaml.XamlType&quot;> </xref> em sua lista de tipos atribuíveis."
  remarks: "Embora o tipo pode ser atribuído não tem todos os recursos do tipo de referência, você pode usá-lo para atribuição. Por exemplo, você pode usar a atribuição para fazer a correspondência de tipo para os valores de uma propriedade. O conceito de tipos atribuíveis em XAML é semelhante ao conceito de conversão de backup no sistema de tipos CLR. Por exemplo, em um sistema de tipos CLR, cada tipo tem um <xref:System.Object>na sua lista de tipos atribuíveis.</xref:System.Object>       Se um dos dois <xref:System.Xaml.XamlType>instâncias que são usadas para comparação tem <xref:System.Xaml.XamlType.IsUnknown%2A>igual a `true`, esse método tem um modo desconhecido especial que retorna `true` se os dois <xref:System.Xaml.XamlType>instâncias forem equivalentes.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.IsUnknown%2A> </xref:System.Xaml.XamlType>       A implementação padrão usa o CLR <xref:System.Type>de <xref:System.Xaml.XamlType.UnderlyingType%2A>para este <xref:System.Xaml.XamlType>e a entrada <xref:System.Xaml.XamlType>e chama <xref:System.Type.IsAssignableFrom%2A>.</xref:System.Type.IsAssignableFrom%2A> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Type> Substitua este método se você quiser uma determinação de diferente tipos atribuíveis.       Passando um valor nulo `xamlType` não gerará uma exceção e sempre retornará `false`.      > [!IMPORTANT] > CanAssignTo é virtual e, portanto, pode ser substituído. A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar assignability de um tipo XAML, de forma que ele não se alinha de forma esperada com o comportamento de conversão de tipo de seu tipo CLR subjacente. Para verificações de acesso e operações de atribuição críticas de segurança, use o tipo CLR subjacente."
  syntax:
    content: public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);
    parameters:
    - id: xamlType
      type: System.Xaml.XamlType
      description: "O tipo de verificação atual <xref href=&quot;System.Xaml.XamlType&quot;> </xref> ."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> xamlType </code> está na lista de tipos atribuíveis; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.CanAssignTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  id: ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> deve ter argumentos (restrições genéricas por meio de <xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;> </xref>, texto de inicialização ou outras técnicas XAML) para construir uma instância válida do tipo."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>neste tipo.</xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>"
  syntax:
    content: public bool ConstructionRequiresArguments { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se algum valor de argumento; requer a construção de uma instância Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.ConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentProperty
  id: ContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> informações para a propriedade content <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Quando usando a associação ou fazendo do sistema de tipo CLR, a propriedade de conteúdo XAML pode ser especificada em um tipo aplicando <xref:System.Windows.Markup.ContentPropertyAttribute>à definição de tipo.</xref:System.Windows.Markup.ContentPropertyAttribute>       Essa propriedade se alinha com o `[content property]` item de informação na especificação [MS-XAML].       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupContentProperty%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupContentProperty%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupContentProperty%2A>neste tipo.</xref:System.Xaml.XamlType.LookupContentProperty%2A>"
  syntax:
    content: public System.Xaml.XamlMember ContentProperty { get; }
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref>informações para a propriedade content <xref href=&quot;System.Xaml.XamlType&quot;> </xref>. Pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se existir nenhuma propriedade de conteúdo."
  overload: System.Xaml.XamlType.ContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentWrappers
  id: ContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém os tipos que são usados para encapsular o conteúdo de uma propriedade de conteúdo quando não é uma correspondência de tipo estrito, como cadeias de caracteres em um fortemente tipada <xref uid=&quot;langword_csharp_Collection&lt;T&gt;&quot; name=&quot;Collection&lt;T&gt;&quot; href=&quot;&quot;> </xref>."
  remarks: "Se não houver nenhum wrappers para flexibilizar de correspondência de tipo de conta, essa propriedade é `null`.       Tipos que são avaliadas como <xref:System.Xaml.XamlType.CanAssignTo%2A>para um tipo específico de conteúdo não são considerados o vários tipos para fins de ContentWrappers.</xref:System.Xaml.XamlType.CanAssignTo%2A>       Na associação de CLR e <xref:System.Xaml> <xref:System.Xaml.XamlType>, o tipo de conteúdo de wrapper XAML pode ser especificado em um tipo como <xref:System.Windows.Markup.ContentWrapperAttribute>.</xref:System.Windows.Markup.ContentWrapperAttribute> </xref:System.Xaml.XamlType> </xref:System.Xaml>       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupContentWrappers%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupContentWrappers%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupContentWrappers%2A>neste tipo.</xref:System.Xaml.XamlType.LookupContentWrappers%2A>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> ContentWrappers { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma coleção somente leitura de tipos possíveis de wrapper de conteúdo; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Consulte comentários."
  overload: System.Xaml.XamlType.ContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; que representa o adiada comportamento de conversão para esse tipo de carregamento."
  remarks: "Comportamento do modelo XAML no WPF é um exemplo de comportamento de carregamento adiado.       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupDeferringLoader%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupDeferringLoader%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupDeferringLoader%2A>neste tipo.</xref:System.Xaml.XamlType.LookupDeferringLoader%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "O &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> que representa o comportamento de carregamento adiado para este tipo de restrição."
  overload: System.Xaml.XamlType.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indica se o objeto atual é igual a outro objeto."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto a ser comparado com este objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto atual é igual a <code> obj </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  id: Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indica se o objeto atual é igual a outro objeto do mesmo tipo."
  syntax:
    content: public bool Equals (System.Xaml.XamlType other);
    parameters:
    - id: other
      type: System.Xaml.XamlType
      description: "Um objeto a ser comparado com este objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto atual é igual a <code> other </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  id: GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o membro XAML que é um alias para uma diretiva XAML, por isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para esse método podem invocar <xref:System.Xaml.XamlType.LookupAliasedProperty%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAliasedProperty%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupAliasedProperty%2A>neste tipo.</xref:System.Xaml.XamlType.LookupAliasedProperty%2A>"
  syntax:
    content: public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "A diretiva para a qual localizar o membro de um alias."
    return:
      type: System.Xaml.XamlMember
      description: "O membro de um alias, se encontrado; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.GetAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  id: GetAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma coleção que contém todas as propriedades anexadas que são expostas por esse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Cada <xref:System.Xaml.XamlMember>na coleção retornada deve conter valores que suportam o conceito que o <xref:System.Xaml.XamlMember>é um membro anexável.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember> Por exemplo, os membros devem retornar `true` para <xref:System.Xaml.XamlMember.IsAttachable%2A>, um tipo para <xref:System.Xaml.XamlMember.TargetType%2A>, e assim por diante.</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.IsAttachable%2A>       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para esse método podem invocar <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>neste tipo.</xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "Uma coleção que contém zero ou mais <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> valores."
  overload: System.Xaml.XamlType.GetAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllMembers
  id: GetAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma coleção que contém todos os membros que são expostos por esse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Chamadas para esse método podem invocar <xref:System.Xaml.XamlType.LookupAllMembers%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllMembers%2A>"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "Uma coleção que contém zero ou mais <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> valores."
  overload: System.Xaml.XamlType.GetAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  id: GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa uma determinada chamada anexável deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Chamadas para esse método podem invocar <xref:System.Xaml.XamlType.LookupAttachableMember%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAttachableMember%2A>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupAttachableMember%2A>é virtual e, portanto, pode ser substituído.</xref:System.Xaml.XamlType.LookupAttachableMember%2A> A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar os membros relatados de um tipo XAML, para que elas não se alinham de forma esperada com a <xref:System.ComponentModel.TypeDescriptor> `Get*` informações sobre o tipo CLR subjacente.</xref:System.ComponentModel.TypeDescriptor> Para verificações críticas de segurança de membro de emissão de relatórios, use o tipo CLR subjacente."
  syntax:
    content: public System.Xaml.XamlMember GetAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro anexável obter, `ownerTypeName.MemberName` formulário."
    return:
      type: System.Xaml.XamlMember
      description: "Um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objeto para o membro anexável solicitado; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se não existe nenhum membro anexável com esse nome."
  overload: System.Xaml.XamlType.GetAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o código hash para este objeto."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código de hash de número inteiro."
  overload: System.Xaml.XamlType.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> para um determinado nomeado membro neste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "O valor de `name` deve ser qualificado. Nomes de tipo qualificado que indicam que um membro anexado devem ser enviados para <xref:System.Xaml.XamlType.GetAttachableMember%2A>em vez disso.</xref:System.Xaml.XamlType.GetAttachableMember%2A> O prefixo de membro não devem ser usados nomes; um prefixo é situacional para um uso e o sistema de tipo XAML não pode saber o contexto de tal uso e como o prefixo é mapeado.       Chamadas para esse método podem invocar <xref:System.Xaml.XamlType.LookupMember%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupMember%2A>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupMember%2A>é virtual e, portanto, pode ser substituído.</xref:System.Xaml.XamlType.LookupMember%2A> A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar os membros relatados de um tipo XAML, para que elas não se alinham de forma esperada com a <xref:System.ComponentModel.TypeDescriptor> `Get*` informações sobre o tipo CLR subjacente.</xref:System.ComponentModel.TypeDescriptor> Para verificações críticas de segurança de membro de emissão de relatórios, use o tipo CLR subjacente."
  syntax:
    content: public System.Xaml.XamlMember GetMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro (como uma cadeia de caracteres)."
    return:
      type: System.Xaml.XamlMember
      description: "O <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> informações do membro, se este membro foi encontrada; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  id: GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Para tipos de extensão de marcação, retorna os tipos dos parâmetros posicionais que têm suporte no uso de extensão de marcação específica para este <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Essa API só será relevante se este <xref:System.Xaml.XamlType>representa uma extensão de marcação (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> é `true`).</xref:System.Xaml.XamlType.IsMarkupExtension%2A> </xref:System.Xaml.XamlType>       A entrada `parameterCount` não é para solicitar o tipo de um parâmetro posicional específico. Ele é para especificar a aridade do uso de uma extensão de marcação. Uso de extensão de marcação geralmente tem várias &quot;assinaturas&quot; e usa parâmetros diferentes arity (contagem) de parâmetros posicionais para diferenciar. No entanto, você pode configurar um contexto de esquema para permitir arities duplicados e usar tipos dos parâmetros posicionais para diferenciação. Para obter mais informações, consulte <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> Para uma aridade específica (contagem), as posições de parâmetro e tipos podem variar. Para obter o tipo de posição do uso de extensão de marcação do arity um específico, você primeiro chamar GetPositionalParameters Especifica a contagem de arity. Em seguida, obtenha o item à sua posição na coleção retornada.       Chamadas para esse método podem invocar <xref:System.Xaml.XamlType.LookupPositionalParameters%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupPositionalParameters%2A>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> GetPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "A contagem (arity) de modo sintaxe ou construtor específico que você deseja obter informações sobre."
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlType&quot;> </xref> valores, onde cada <xref href=&quot;System.Xaml.XamlType&quot;> </xref> é o tipo de posição na sintaxe. Você deve especificar os tipos na mesma ordem quando você fornecer a entrada de marcação para a extensão de marcação."
  overload: System.Xaml.XamlType.GetPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma lista de identificadores de cadeia de caracteres para namespaces XAML que o tipo é incluído no."
  remarks: "Identificadores de namespace XAML típicos são cadeias de caracteres em forma de URI.       A implementação padrão verifica o seguinte, em ordem: o namespace XAML que é fornecido na construção (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> somente assinatura); e os namespaces que estão disponíveis a partir do contexto do esquema.</xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> Se cada `null`, uma nova lista é gerada que contém uma única cadeia de caracteres vazia. Você pode substituir esse método para alterar a metodologia de pesquisa."
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "Uma lista de valores de cadeia de caracteres, onde cada cadeia de caracteres é o identificador URI de namespace do XAML."
  overload: System.Xaml.XamlType.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Invoker
  id: Invoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> implementação que está associada a essa <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamar o chamador pode invocar o <xref:System.Xaml.XamlType.LookupInvoker%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlType.LookupInvoker%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupInvoker%2A>neste tipo.</xref:System.Xaml.XamlType.LookupInvoker%2A>       Se um <xref:System.Xaml.XamlType.LookupInvoker%2A>Substituir retorna `null`, ou se a implementação padrão retorna `null` devido à falta de <xref:System.Xaml.XamlType.UnderlyingType%2A>para essa <xref:System.Xaml.XamlType>em seguida, o chamador retorna <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Xaml.XamlType.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> implementação que está associada a essa <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  overload: System.Xaml.XamlType.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo de ambiente, de acordo com a definição XAML."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsAmbient%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsAmbient%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupIsAmbient%2A>neste tipo.</xref:System.Xaml.XamlType.LookupIsAmbient%2A>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo de ambiente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsArray
  id: IsArray
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma matriz."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupCollectionKind%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupCollectionKind%2A>neste tipo.</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsArray { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma matriz; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsArray*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsCollection
  id: IsCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma coleção."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupCollectionKind%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupCollectionKind%2A>neste tipo.</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma coleção; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsConstructible
  id: IsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo pode ser construído, de acordo com a definição XAML."
  remarks: "Essa propriedade se alinha com o `[is default constructible]` item de informação na especificação [MS-XAML].       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsConstructible%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsConstructible%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupIsConstructible%2A>neste tipo.</xref:System.Xaml.XamlType.LookupIsConstructible%2A>"
  syntax:
    content: public bool IsConstructible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo pode ser construído; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsDictionary
  id: IsDictionary
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um dicionário, de acordo com a definição XAML."
  remarks: "Essa propriedade se alinha com o `[is dictionary]` item de informação na especificação [MS-XAML].       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupCollectionKind%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupCollectionKind%2A>neste tipo.</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsDictionary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um dicionário; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsDictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsGeneric
  id: IsGeneric
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo genérico."
  remarks: "Essa propriedade é uma propriedade de auxiliar que verifica um valor nulo de <xref:System.Xaml.XamlType.TypeArguments%2A>.</xref:System.Xaml.XamlType.TypeArguments%2A> Não há nenhum específico `Lookup` método relacionados a IsGeneric."
  syntax:
    content: public bool IsGeneric { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo genérico; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsGeneric*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsMarkupExtension
  id: IsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma extensão de marcação."
  remarks: "Em termos de especificação de XAML, esse tipo deve ser atribuível a `x:MarkupExtension` para retornar `true` para IsMarkupExtension.       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>neste tipo.</xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>"
  syntax:
    content: public bool IsMarkupExtension { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma extensão de marcação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameScope
  id: IsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um namescope XAML, de acordo com a definição XAML."
  remarks: "Um namescope XAML impõe a exclusividade do nome da propriedade ou propriedades usadas para `x:Name`  /  `[name property]`. Se for IsNameScope `true`, algum mecanismo para impor exclusividade deve existir e deve avaliar da perspectiva desse tipo possui um namescope XAML. O XAML namescope estende ao conteúdo do tipo até que outro tipo XAML possui namescope encontrado.       Essa propriedade se alinha com o `[is name scope]` item de informação na especificação [MS-XAML].       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsNameScope%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsNameScope%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsNameScope { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um namescope XAML; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> é inicializada usando uma opção válida <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> cadeia de caracteres como seu <xref:System.Xaml.XamlType.Name*>.</xref:System.Xaml.XamlType.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> é inicializada usando uma opção válida <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> de cadeia de caracteres; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNullable
  id: IsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo anulável, de acordo com a definição XAML."
  remarks: "Essa propriedade se alinha com o `[is nullable]` item de informação na especificação [MS-XAML].       Se você não estiver usando a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsNullable%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsNullable%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsNullable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo anulável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsPublic
  id: IsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo público no sistema de tipo relevante."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsPublic%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsPublic%2A> </xref:System.Xaml.XamlType>      > [!IMPORTANT] > <xref:System.Xaml.XamlType.LookupIsPublic%2A>é virtual e, portanto, pode ser substituído.</xref:System.Xaml.XamlType.LookupIsPublic%2A> A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar as informações de acesso reportadas sobre um tipo XAML, para que ele não se alinha de forma esperada com as informações do sistema e o acesso do tipo do seu tipo CLR subjacente. Para verificações de acesso e operações de atribuição críticas de segurança, use o tipo CLR subjacente."
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo público; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo que não pode ser resolvido no sistema de tipo subjacente."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsUnknown%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsUnknown%2A> </xref:System.Xaml.XamlType>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, um <xref:System.Xaml.XamlType>com `true` para IsUnknown não pode ser gravado em um gráfico de objeto.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlObjectWriter> Sob as implementações padrão no <xref:System.Xaml>, o <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName>chamar lança um <xref:System.Xaml.XamlObjectWriterException>quando relevante <xref:System.Xaml.XamlType>relatórios `true` para IsUnknown.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName> </xref:System.Xaml> Você não deve transmitir um <xref:System.Xaml.XamlType>com IsUnknown como `true` , a menos que você esteja preparado para lidar com as exceções de <xref:System.Xaml.XamlObjectWriter>, ou você tiver outras maneiras de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento ou o fluxo do nó XAML antes de gravar o gráfico de objeto.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo não pode ser resolvido; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  id: IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> é compilado de cima para baixo durante a inicialização do XAML."
  remarks: "De cima para baixo é uma metáfora que aproxima o comportamento do processador de XAML ao criar o gráfico de objeto. Quando criado de cima para baixo, um tipo é instanciado, anexados para o pai, e, em seguida, configurou suas propriedades. Construção de cima para baixo evita invocar os manipuladores de propriedade alterada várias vezes. Tal tratamento ripples se o gráfico de objeto e, portanto, elimina as várias chamadas do manipulador e fornece uma otimização de desempenho da inicialização do gráfico do objeto.       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>neste tipo.</xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>"
  syntax:
    content: public bool IsUsableDuringInitialization { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> baseia-se de cima para baixo durante a inicialização do XAML; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  id: IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma coleção de significativa de espaço em branco, de acordo com a definição de XML."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>neste tipo.</xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>"
  syntax:
    content: public bool IsWhitespaceSignificantCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma coleção de espaço em branco significativo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsXData
  id: IsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa XML <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;> </xref>, como, por definição de XAML."
  remarks: "Essa propriedade se alinha com o `[is xdata]` item de informação na especificação [MS-XAML].       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsXData%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsXData%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupIsXData%2A>neste tipo.</xref:System.Xaml.XamlType.LookupIsXData%2A>"
  syntax:
    content: public bool IsXData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ItemType
  id: ItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que fornece as informações de tipo para o <xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;> </xref> propriedade deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Essa propriedade só será relevante se este <xref:System.Xaml.XamlType>representa uma coleção (<xref:System.Xaml.XamlType.IsCollection%2A> é `true`).</xref:System.Xaml.XamlType.IsCollection%2A> </xref:System.Xaml.XamlType> O `Items` é de propriedade de qualquer propriedade que contém os itens nesse tipo de coleção ou matriz.       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupItemType%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupItemType%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupItemType%2A>neste tipo.</xref:System.Xaml.XamlType.LookupItemType%2A>"
  syntax:
    content: public System.Xaml.XamlType ItemType { get; }
    return:
      type: System.Xaml.XamlType
      description: "Um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objeto para o tipo dos itens na coleção; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa uma coleção."
  overload: System.Xaml.XamlType.ItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.KeyType
  id: KeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que fornece as informações de tipo para a propriedade de chave deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, se o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um dicionário."
  remarks: "Essa propriedade só será relevante se este <xref:System.Xaml.XamlType>representa um dicionário (<xref:System.Xaml.XamlType.IsDictionary%2A> é `true`).</xref:System.Xaml.XamlType.IsDictionary%2A> </xref:System.Xaml.XamlType>       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupKeyType%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupKeyType%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupKeyType%2A>neste tipo.</xref:System.Xaml.XamlType.LookupKeyType%2A>"
  syntax:
    content: public System.Xaml.XamlType KeyType { get; }
    return:
      type: System.Xaml.XamlType
      description: "Um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objeto para o tipo da chave para uso do dicionário, caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa um dicionário."
  overload: System.Xaml.XamlType.KeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  id: LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o membro XAML que é um alias para uma diretiva XAML, por isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.GetAliasedProperty%2A>.</xref:System.Xaml.XamlType.GetAliasedProperty%2A>       A implementação padrão pode retornar resultados para as seguintes diretivas XAML: `Key`; `Name`; `Uid`; and `xml:lang`. Valores para eles dependem de reflexão subjacente e ainda podem retornar `null` se nenhuma propriedade de alias for encontrada.       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou as informações de esquema de um tipo de relatório."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "A diretiva para a qual localizar o membro de um alias."
    return:
      type: System.Xaml.XamlMember
      description: "O membro de um alias, se encontrado; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  id: LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um conjunto enumerável que contém todas as propriedades anexadas que são expostas por esse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>.</xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>       Embora <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>retorna uma coleção genérica, isso `Lookup` método retorna um conjunto enumerável genérico.</xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>       A implementação padrão usa a reflexão interna do CLR. Quando <xref:System.Xaml.XamlType.UnderlyingType%2A>é `null`, pode usar a implementação padrão <xref:System.Xaml.XamlType.BaseType%2A>, se ele está disponível.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> Esse comportamento chama recursivamente LookupAllAttachableMembers para tentar localizar um tipo válido de base e retorna `null` se não existe nenhum tipo base válido.       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório. Um retorno nulo deve ser reservado para casos em que as informações não podem ser determinadas devido à falta de suporte para tipo de sistema ou reflexão. Se um tipo é válido e reflexão ou outras técnicas estão disponíveis, mas um tipo não tem membros anexáveis, em vez disso, você deve retornar vazio <xref:System.Collections.Generic.IEnumerable%601>definido.</xref:System.Collections.Generic.IEnumerable%601>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "Um conjunto enumerável que contém zero ou mais <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> valores; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllMembers
  id: LookupAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um conjunto enumerável que contém todos os membros que são expostos por esse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.GetAllMembers%2A>.</xref:System.Xaml.XamlType.GetAllMembers%2A>       Embora <xref:System.Xaml.XamlType.GetAllMembers%2A>retorna uma coleção genérica, isso `Lookup` método retorna um conjunto enumerável genérico.</xref:System.Xaml.XamlType.GetAllMembers%2A>       A implementação padrão usa a reflexão interna do CLR. Para casos onde <xref:System.Xaml.XamlType.UnderlyingType%2A>é `null`, pode usar a implementação padrão <xref:System.Xaml.XamlType.BaseType%2A>, se ele está disponível.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> Esse comportamento chama recursivamente LookupAllMembers para tentar localizar um tipo válido de base e retorna `null` se não existe nenhum tipo base válido.       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório. Um retorno nulo deve ser reservado para casos em que as informações não podem ser determinadas devido à falta de suporte para tipo de sistema ou reflexão. Se um tipo for válido, reflexão ou outras técnicas estão disponíveis; Se um tipo não tem membros, em vez disso, você deve retornar vazio <xref:System.Collections.Generic.IEnumerable%601>definido.</xref:System.Collections.Generic.IEnumerable%601>       Valores de retorno para LookupAllMembers e <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>devem ser mutuamente.</xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> Se você tiver uma situação em que uma propriedade de sistema de tipo de backup pode dar suporte a um uso de instância padrão, bem como um uso anexável, esse membro deve ser relatado como dois <xref:System.Xaml.XamlMember>valores, com um valor que aparece na lista anexável e outro na lista de membros padrão.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "Um conjunto enumerável que contém zero ou mais <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> valores."
  overload: System.Xaml.XamlType.LookupAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  id: LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma lista dos tipos que podem ser usados como o <xref:System.Xaml.XamlType.ContentProperty*>valor <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Xaml.XamlType.ContentProperty*>"
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</xref:System.Xaml.XamlType.AllowedContentTypes%2A>       Tipos que são avaliadas como <xref:System.Xaml.XamlType.CanAssignTo%2A>para um tipo específico de conteúdo não são considerados o vários tipos para fins de <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</xref:System.Xaml.XamlType.AllowedContentTypes%2A> </xref:System.Xaml.XamlType.CanAssignTo%2A>       A implementação padrão pode usar outras propriedades de <xref:System.Xaml.XamlType>(<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, ou <xref:System.Xaml.XamlType.ItemType%2A>) para obter um resultado.</xref:System.Xaml.XamlType.ItemType%2A> </xref:System.Xaml.XamlType.ContentProperty%2A> </xref:System.Xaml.XamlType.ContentWrappers%2A> </xref:System.Xaml.XamlType> O `Lookup` substituições para a lista de propriedade anterior também pode ser chamada nessa determinação.       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupAllowedContentTypes ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma lista de possíveis tipos de conteúdo."
  overload: System.Xaml.XamlType.LookupAllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  id: LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> para um determinado denominado anexável neste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.GetAttachableMember%2A>.</xref:System.Xaml.XamlType.GetAttachableMember%2A>       A implementação padrão usa a reflexão interna do CLR. Quando <xref:System.Xaml.XamlType.UnderlyingType%2A>é `null`, pode usar a implementação padrão <xref:System.Xaml.XamlType.BaseType%2A>, se ele está disponível.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> Esse comportamento chama recursivamente LookupAttachableMember para tentar localizar um tipo válido de base e retorna `null` se não existe nenhum tipo base válido.       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório.      > [!IMPORTANT] > LookupAttachableMember é virtual e, portanto, pode ser substituído. A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar os membros relatados de um tipo XAML, para que elas não se alinham de forma esperada com a <xref:System.ComponentModel.TypeDescriptor> `Get*` informações sobre o tipo CLR subjacente.</xref:System.ComponentModel.TypeDescriptor> Para verificações críticas de segurança de membro de emissão de relatórios, use o tipo CLR subjacente."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro anexável obter, `ownerTypeName.MemberName` formulário."
    return:
      type: System.Xaml.XamlMember
      description: "Um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objeto para o membro anexável solicitado; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se não existe nenhum membro anexável com esse nome."
  overload: System.Xaml.XamlType.LookupAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupBaseType
  id: LookupBaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo de base imediato desse tipo de XAML. Determinação desse valor é baseada no tipo base deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref> e contexto do esquema."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.BaseType%2A>.</xref:System.Xaml.XamlType.BaseType%2A>       A implementação padrão pode retornar uma constante interna que representa o <xref:System.Object>se <xref:System.Xaml.XamlType.UnderlyingType%2A>é `null`.</xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Object>       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório.      > [!IMPORTANT] > LookupBaseType é virtual e, portanto, pode ser substituído. A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar as informações de tipo informada sobre um tipo XAML, para que ele não se alinha de forma esperada com as informações de seu tipo CLR subjacente do sistema de tipo. Para verificações de acesso e operações de atribuição críticas de segurança, use o tipo CLR subjacente."
  syntax:
    content: protected virtual System.Xaml.XamlType LookupBaseType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo de base imediato desse tipo de XAML."
  overload: System.Xaml.XamlType.LookupBaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCollectionKind
  id: LookupCollectionKind
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor de <xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;> </xref> tipo de enumeração que declara qual coleção específica isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref> usa."
  remarks: "Esse método é invocado por um método privado interno (nenhum public `CollectionKind` ou `GetCollectionKind` API existe em <xref:System.Xaml.XamlType>).</xref:System.Xaml.XamlType>       A implementação padrão usa a reflexão interna do CLR. Para casos onde <xref:System.Xaml.XamlType.UnderlyingType%2A>é `null`, pode usar a implementação padrão <xref:System.Xaml.XamlType.BaseType%2A>, se ele está disponível.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> Esse comportamento indiretamente chama recursivamente LookupCollectionKind para tentar encontrar um tipo base válido; ele retorna <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>se não existe nenhum tipo base válido.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> Em geral, a implementação padrão tenta localizar o `Add` método do tipo subjacente por reflexão. Se encontrado, o <xref:System.Reflection.MethodInfo>do `Add` método é informações suficientes para determinar qual <xref:System.Xaml.Schema.XamlCollectionKind>valor deve ser retornado.</xref:System.Xaml.Schema.XamlCollectionKind> </xref:System.Reflection.MethodInfo> Caso contrário, retornará <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlCollectionKind
      description: "Um valor de <xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;> </xref> enumeração."
  overload: System.Xaml.XamlType.LookupCollectionKind*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  id: LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> deve ter argumentos (restrições genéricas por meio de <xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;> </xref>, texto de inicialização ou outras técnicas XAML) para construir uma instância válida do tipo."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>       A implementação padrão retorna `false` sistema de tipos para tipos considerados tipos de valor no CLR. Para que tipos de valor, reflexão CLR <xref:System.Reflection.ConstructorInfo>é usado para determinar se existe um construtor padrão.</xref:System.Reflection.ConstructorInfo>       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório."
  syntax:
    content: protected virtual bool LookupConstructionRequiresArguments ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se algum valor de argumento; requer a construção de uma instância Caso contrário, false."
  overload: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentProperty
  id: LookupContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> informações para a propriedade content <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.ContentProperty%2A>.</xref:System.Xaml.XamlType.ContentProperty%2A>       A implementação padrão verifica <xref:System.Windows.Markup.ContentPropertyAttribute>na definição de tipo.</xref:System.Windows.Markup.ContentPropertyAttribute> Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se essas verificações não descobrir um tipo de conteúdo, a implementação padrão retorna `null`.       Substitua este método se você não depender de reflexão de CLR interno padrão e estiver usando metadados ou outras técnicas para as informações do sistema de tipo XAML ou informações de esquema de um tipo de relatório."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupContentProperty ();
    parameters: []
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref>informações para a propriedade content <xref href=&quot;System.Xaml.XamlType&quot;> </xref>. May be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentWrappers
  id: LookupContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém uma lista de <xref href=&quot;System.Xaml.XamlType&quot;> </xref> valores que representam os wrappers de conteúdo para este <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Um wrapper de conteúdo é uma classe que representa o tipo de coleção de conteúdo quando os tipos que são usados na coleção não são contíguos no sistema de tipo. Os tipos de itens de coleta para o wrapper de conteúdo devem ser limitadas de alguma maneira além <xref:System.Object>ou um objeto neutro equivalente.</xref:System.Object> No entanto, essa limitação é aplicada apenas pelo design ou finalidade das propriedades que usam esse tipo e não pelo sistema de tipo. Mais de um wrapper de conteúdo pode existir em um tipo.       Para um exemplo de classe e o cenário da implementação do WPF XAML, consulte <xref:System.Windows.Documents.InlineCollection>.</xref:System.Windows.Documents.InlineCollection>"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupContentWrappers ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlType&quot;> </xref> valores que representam os wrappers de conteúdo para este <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, retorna um <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> implementação."
  remarks: "Substitua este método para fornecer a reflexão interna com uma maneira alternativa para obter valores de atributo do CLR. Na ausência de uma substituição, o reflector interno usa a lógica de reflexão de CLR típica.       A implementação padrão retorna `null`."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "Um <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> implementação."
  overload: System.Xaml.XamlType.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é usado para carregamento adiado dos objetos declarado em XAML."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlType.DeferringLoader%2A>.</xref:System.Xaml.XamlType.DeferringLoader%2A> Substitua este método se desejar <xref:System.Xaml.XamlType.DeferringLoader%2A>retornar um valor diferente de é habilitado por reflexão interno padrão e também estiver fornecendo personalizado <xref:System.Xaml.Schema.XamlTypeInvoker>informações.</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType.DeferringLoader%2A>       A implementação padrão retorna um objeto com base em <xref:System.Windows.Markup.XamlDeferLoadAttribute>.</xref:System.Windows.Markup.XamlDeferLoadAttribute> de leitura Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, esse método retorna `null`."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; que tem um <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> restrição genérica."
  overload: System.Xaml.XamlType.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> que é associada a essa <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.Invoker%2A>.</xref:System.Xaml.XamlType.Invoker%2A>       A implementação padrão não requer que um <xref:System.Xaml.XamlType>ser construídas usando um dos construtores que passam um inicial <xref:System.Xaml.Schema.XamlTypeInvoker>.</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType> No entanto, um <xref:System.Xaml.XamlType.UnderlyingType%2A>valor deve existir para o <xref:System.Xaml.XamlType>; caso contrário, retorna a implementação padrão `null`.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A>       Substitua este método se você criar também uma classe derivada de <xref:System.Xaml.Schema.XamlTypeInvoker>pretendia retornar classe derivada.</xref:System.Xaml.Schema.XamlTypeInvoker> Se você retornar `null`, <xref:System.Xaml.XamlType.Invoker%2A>retorna <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>para chamadores.</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlType.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref> informações para este <xref href=&quot;System.Xaml.XamlType&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo de ambiente, de acordo com a definição XAML."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsAmbient%2A>.</xref:System.Xaml.XamlType.IsAmbient%2A>       A implementação padrão usa reflexão de CLR no <xref:System.Xaml.XamlType.UnderlyingType%2A>e poderá verificar se os tipos base.</xref:System.Xaml.XamlType.UnderlyingType%2A> Essa implementação verifica o <xref:System.Windows.Markup.AmbientAttribute>que é aplicado à definição do tipo relevante no nível de classe e retorna `true` nesse caso.</xref:System.Windows.Markup.AmbientAttribute> Retornam todos os outros casos `false`.       Substitua este método se desejar <xref:System.Xaml.XamlType.IsAmbient%2A>retornar um valor diferente de é habilitado por reflexão interno padrão.</xref:System.Xaml.XamlType.IsAmbient%2A>"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo de ambiente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsConstructible
  id: LookupIsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo pode ser construído, de acordo com a definição XAML."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsConstructible%2A>.</xref:System.Xaml.XamlType.IsConstructible%2A>       A implementação padrão usa reflexão CLR em <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> O tipo deve ser concreto, não aninhada e fechada. A implementação padrão verifica se o tipo é um tipo de valor e o retorno de <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A> Para um valor nulo <xref:System.Xaml.XamlType.UnderlyingType%2A>, esse método retorna `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       Substitua este método se desejar <xref:System.Xaml.XamlType.IsConstructible%2A>retornar um valor diferente de é habilitado por reflexão interno padrão.</xref:System.Xaml.XamlType.IsConstructible%2A>"
  syntax:
    content: protected virtual bool LookupIsConstructible ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo pode ser construído; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  id: LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma extensão de marcação."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</xref:System.Xaml.XamlType.IsMarkupExtension%2A>       A implementação padrão consiste apenas essa chamada: `return CanAssignTo(XamlLanguage.MarkupExtension);` substitua este método se desejar <xref:System.Xaml.XamlType.IsMarkupExtension%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsMarkupExtension%2A>       Em termos de especificação de XAML, esse tipo deve ser atribuível a `x:MarkupExtension` para retornar `true` para <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</xref:System.Xaml.XamlType.IsMarkupExtension%2A>"
  syntax:
    content: protected virtual bool LookupIsMarkupExtension ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma extensão de marcação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNameScope
  id: LookupIsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um namescope XAML, de acordo com a definição XAML."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsNameScope%2A>.</xref:System.Xaml.XamlType.IsNameScope%2A>       A implementação padrão faz uma <xref:System.Xaml.XamlType.CanAssignTo%2A>chamada indiretamente com o tipo de <xref:System.Windows.Markup.INameScope>.</xref:System.Windows.Markup.INameScope> </xref:System.Xaml.XamlType.CanAssignTo%2A> <xref:System.Windows.Markup.INameScope>é uma interface que é definida no assembly WindowsBase.</xref:System.Windows.Markup.INameScope> Essa técnica para a identificação de namescope XAML é usada por WPF e [!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)] implementações de XAML.       Substitua este método se desejar <xref:System.Xaml.XamlType.IsNameScope%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsNameScope%2A>       Um namescope XAML impõe a exclusividade do nome da propriedade ou propriedades que são usadas para `x:Name`  /  `[name property]`. Se <xref:System.Xaml.XamlType.IsNameScope%2A>é `true`, em seguida, um mecanismo para impor exclusividade deve existir e deve avaliar da perspectiva desse tipo possui um namescope XAML.</xref:System.Xaml.XamlType.IsNameScope%2A> O XAML namescope estende ao conteúdo do tipo até que outro tipo de propriedade namescope XAML é encontrado."
  syntax:
    content: protected virtual bool LookupIsNameScope ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um namescope XAML; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNullable
  id: LookupIsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo anulável, de acordo com a definição XAML."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsNullable%2A>.</xref:System.Xaml.XamlType.IsNullable%2A>       A implementação padrão faz com que uma decisão baseada no CLR principal biblioteca anulável conceito, comparado <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> Para um valor nulo <xref:System.Xaml.XamlType.UnderlyingType%2A>, ele retorna `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       Substitua este método se desejar <xref:System.Xaml.XamlType.IsNullable%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsNullable%2A>"
  syntax:
    content: protected virtual bool LookupIsNullable ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo anulável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsPublic
  id: LookupIsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo público no sistema de tipo relevante."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsPublic%2A>.</xref:System.Xaml.XamlType.IsPublic%2A>       A implementação padrão usa reflexão do CLR em relação a uma não-nulos <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> Para um valor nulo <xref:System.Xaml.XamlType.UnderlyingType%2A>, ele retorna `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       Substitua este método se desejar <xref:System.Xaml.XamlType.IsPublic%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsPublic%2A>      > [!IMPORTANT] > LookupIsPublic é virtual e, portanto, pode ser substituído. A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar as informações de acesso reportadas sobre um tipo XAML, para que ele não se alinha de forma esperada com as informações do sistema ou o acesso do tipo do seu tipo CLR subjacente. Para verificações de acesso e operações de atribuição críticas de segurança, use o tipo CLR subjacente."
  syntax:
    content: protected virtual bool LookupIsPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo público; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo que não pode ser resolvido no sistema de tipo subjacente."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsUnknown%2A>.</xref:System.Xaml.XamlType.IsUnknown%2A>       A implementação padrão pode usar reflexão do CLR. Para um valor nulo <xref:System.Xaml.XamlType.UnderlyingType%2A>, ele retorna `true`.</xref:System.Xaml.XamlType.UnderlyingType%2A>       Substitua este método se desejar <xref:System.Xaml.XamlType.IsUnknown%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsUnknown%2A>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo nonresolvable; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  id: LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma coleção de significativa de espaço em branco, de acordo com a definição de XML."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.</xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>       A implementação padrão retorna um valor com base em <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>.</xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute> de leitura Ele também pode verificar o <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, ele retorna `false`.       Substitua este método se desejar <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>"
  syntax:
    content: protected virtual bool LookupIsWhitespaceSignificantCollection ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa uma coleção de espaço em branco significativa; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsXData
  id: LookupIsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa XML <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;> </xref>, como, por definição de XAML."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsXData%2A>.</xref:System.Xaml.XamlType.IsXData%2A>       A implementação padrão faz uma <xref:System.Xaml.XamlType.CanAssignTo%2A>chamada indiretamente com o tipo de <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Xaml.XamlType.CanAssignTo%2A>       Substitua este método se desejar <xref:System.Xaml.XamlType.IsXData%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsXData%2A>"
  syntax:
    content: protected virtual bool LookupIsXData ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupItemType
  id: LookupItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que fornece as informações de tipo para o <xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;> </xref> propriedade deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.ItemType%2A>.</xref:System.Xaml.XamlType.ItemType%2A>       A implementação padrão pode usar os conceitos de reflexão do CLR, como verificação de um `Add` método por <xref:System.Reflection.MethodInfo>e usando o <xref:System.Reflection.ParameterInfo>; verificação <xref:System.Xaml.XamlType.IsArray%2A>; e a verificação de <xref:System.Xaml.XamlType.BaseType%2A>e tentar a mesma lógica existe.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.IsArray%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MethodInfo>       Substitua este método se desejar <xref:System.Xaml.XamlType.ItemType%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.ItemType%2A> Casos onde <xref:System.Xaml.XamlType.LookupCollectionKind%2A>retorna <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>devem retornar `null`.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> </xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupItemType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "Um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objeto para o tipo dos itens na coleção; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa uma coleção."
  overload: System.Xaml.XamlType.LookupItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupKeyType
  id: LookupKeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que fornece as informações de tipo para a propriedade de chave deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, se o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um dicionário."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.KeyType%2A>.</xref:System.Xaml.XamlType.KeyType%2A>       A implementação padrão pode usar os conceitos de reflexão do CLR, como verificação de um `Add` método por <xref:System.Reflection.MethodInfo>e usando o <xref:System.Reflection.ParameterInfo>; e a verificação de <xref:System.Xaml.XamlType.BaseType%2A>e tentar a mesma lógica existe.</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MethodInfo>       Substitua este método se desejar <xref:System.Xaml.XamlType.KeyType%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.KeyType%2A> Casos onde <xref:System.Xaml.XamlType.LookupCollectionKind%2A>não retorna <xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>devem retornar `null`.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> </xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupKeyType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "Um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objeto para o tipo da chave para uso de dicionário ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa um dicionário"
  overload: System.Xaml.XamlType.LookupKeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  id: LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que fornece as informações de tipo para retornado <xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;> </xref> deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, se ele representa uma extensão de marcação."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.</xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>       A implementação padrão retorna uma <xref:System.Xaml.XamlType>base <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>.</xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> de leitura</xref:System.Xaml.XamlType> Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, ele retorna `null`.       Substitua este método se desejar <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "Um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objeto para o tipo de retorno para o uso da extensão de marcação; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa uma extensão de marcação."
  overload: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  id: LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> para um determinado nomeado membro neste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.GetMember%2A>.</xref:System.Xaml.XamlType.GetMember%2A>       A implementação padrão retorna um <xref:System.Xaml.XamlType>com base em reflexão interno do CLR e avaliação em relação ao contexto do esquema.</xref:System.Xaml.XamlType>       Substitua este método se desejar <xref:System.Xaml.XamlType.GetMember%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.GetMember%2A>      > [!IMPORTANT] > LookupMember é virtual e, portanto, pode ser substituído. A substituição tem o potencial (se é para fins mal-intencionados ou de outra forma) para alterar os membros relatados de um tipo XAML, para que elas não se alinham de forma esperada com a <xref:System.ComponentModel.TypeDescriptor> `Get*` informações sobre o tipo CLR subjacente.</xref:System.ComponentModel.TypeDescriptor> Para verificações críticas de segurança de membro de emissão de relatórios, use o tipo CLR subjacente."
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro (como uma cadeia de caracteres)."
    - id: skipReadOnlyCheck
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para retornar um membro, mesmo se esse membro tiver uma <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> valor para &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt;; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para não retornar um &lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt; membro. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xaml.XamlMember
      description: "O <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> informações do membro, se um membro foi encontrada; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  id: LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Para tipos de extensão de marcação, retorna os tipos dos parâmetros posicionais que têm suporte no uso de extensão de marcação específica para este <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.GetPositionalParameters%2A>.</xref:System.Xaml.XamlType.GetPositionalParameters%2A>       A implementação padrão usa informações de reflexão interno com base na localização construtores e verificando a aridade. Substitua este método se desejar <xref:System.Xaml.XamlType.GetPositionalParameters%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.GetPositionalParameters%2A>       Essa API só será relevante se este <xref:System.Xaml.XamlType>representa uma extensão de marcação (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> é `true`).</xref:System.Xaml.XamlType.IsMarkupExtension%2A> </xref:System.Xaml.XamlType>       A entrada `parameterCount` não é para solicitar o tipo de um parâmetro posicional específico. Ele é para especificar a aridade do uso de uma extensão de marcação. Uso de extensão de marcação geralmente tem várias assinaturas e usa parâmetros diferentes arity (contagem) de parâmetros posicionais para diferenciar. No entanto, você pode configurar um contexto de esquema para permitir arities duplicados e usar tipos dos parâmetros posicionais para diferenciação. Para obter mais informações, consulte <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> Para uma contagem de arity específicos podem variar as posições de parâmetro e tipos. Para obter o tipo de posição de uso de extensão de marcação de um arity específica, você primeiro chamar <xref:System.Xaml.XamlType.GetPositionalParameters%2A>com a contagem de arity.</xref:System.Xaml.XamlType.GetPositionalParameters%2A> Em seguida, obtenha o item à sua posição na coleção retornada."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "A contagem (arity) de modo sintaxe ou construtor específico que você deseja obter informações sobre."
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlType&quot;> </xref> valores em que cada <xref href=&quot;System.Xaml.XamlType&quot;> </xref> é o tipo de posição na sintaxe. Você deve especificar os tipos na mesma ordem ao fornecer a entrada de marcação para a extensão de marcação."
  overload: System.Xaml.XamlType.LookupPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  id: LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um retorno de chamada do manipulador a ser usado para as operações de conjunto de extensões de marcação."
  remarks: "A implementação padrão retorna um valor com base em <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>.</xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute> de leitura Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, ele retorna `null`."
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
      description: "Um retorno de chamada do manipulador a ser usado para as operações de conjunto de extensões de marcação."
  overload: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  id: LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um manipulador a ser usado para definir casos de conversor de tipo."
  remarks: "A implementação padrão retorna um valor com base em <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>.</xref:System.Windows.Markup.XamlSetTypeConverterAttribute> de leitura Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, ele retorna `null`."
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
      description: "Um manipulador a ser usado para definir casos de conversor de tipo."
  overload: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  id: LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> deve ser serializado usando um modo que corta os espaços em branco ao redor."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.</xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>       A implementação padrão retorna um valor com base em <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>.</xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute> de leitura Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, ele retorna `false`."
  syntax:
    content: protected virtual bool LookupTrimSurroundingWhitespace ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> deve ser serializado em um modo que corta os espaços em branco ao redor; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; que tem um <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> restrição, que representa o comportamento de conversão de tipo para valores desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.TypeConverter%2A>.</xref:System.Xaml.XamlType.TypeConverter%2A>       A implementação padrão retorna um valor com base em <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> de leitura A implementação padrão também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Ele também inclui uma lógica especial para conversão padrão de enumerações, tipos de valor e genéricos. Se um valor não estiver disponível, ele retorna `null`.       Substitua este método se desejar <xref:System.Xaml.XamlType.TypeConverter%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.TypeConverter%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> restrição que representa o comportamento de conversão de tipo para valores desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUnderlyingType
  id: LookupUnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o CLR <xref:System.Type>que dão suporte para isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Type>"
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A>       A implementação padrão retorna um campo interno. Geralmente, esse campo é inicializado durante a construção e seu valor é baseado em qual construtor foi chamado e as informações que você forneceu.       Substitua este método se desejar <xref:System.Xaml.XamlType.UnderlyingType%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.UnderlyingType%2A>"
  syntax:
    content: protected virtual Type LookupUnderlyingType ();
    parameters: []
    return:
      type: System.Type
      description: "O CLR <xref:System.Type>que dão suporte para isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  overload: System.Xaml.XamlType.LookupUnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  id: LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> é compilado de cima para baixo durante a inicialização do XAML."
  remarks: "De cima para baixo é uma metáfora que aproxima o comportamento do processador de XAML quando ele cria o gráfico de objeto. Quando criado de cima para baixo, um tipo é instanciado, anexados para o pai, e tem definido suas propriedades. Construção de cima para baixo evita invocar os manipuladores de propriedade alterada várias vezes. Tal tratamento ripples se o gráfico de objeto e, portanto, elimina as várias chamadas do manipulador e fornece uma otimização de desempenho da inicialização do gráfico do objeto.       Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.</xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>       A implementação padrão retorna um valor com base em <xref:System.Windows.Markup.UsableDuringInitializationAttribute>.</xref:System.Windows.Markup.UsableDuringInitializationAttribute> de leitura Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Se um valor não estiver disponível, ele retorna `false`.       Substitua este método se desejar <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>"
  syntax:
    content: protected virtual bool LookupUsableDuringInitialization ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> baseia-se de cima para baixo durante a inicialização do XAML; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.LookupUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; que tem um <xref:System.Windows.Markup.ValueSerializer>restrição, que representa o comportamento de serialização de valor para valores desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  remarks: "Esse método pode ser chamado por chamadas para <xref:System.Xaml.XamlType.ValueSerializer%2A>.</xref:System.Xaml.XamlType.ValueSerializer%2A>       A implementação padrão retorna um valor com base em <xref:System.Windows.Markup.ValueSerializerAttribute>.</xref:System.Windows.Markup.ValueSerializerAttribute> de leitura Ele também pode verificar <xref:System.Xaml.XamlType.BaseType%2A>para o atributo se nenhum atributo for encontrado no tipo subjacente de imediato.</xref:System.Xaml.XamlType.BaseType%2A> Ele também inclui uma lógica especial para a serialização padrão de enumerações, tipos de valor comuns ou genéricos. Se um valor não estiver disponível, ele retorna `null`.       Substitua este método se desejar <xref:System.Xaml.XamlType.ValueSerializer%2A>para usar uma lógica diferente.</xref:System.Xaml.XamlType.ValueSerializer%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref:System.Windows.Markup.ValueSerializer>restrição que representa o comportamento de serialização de valor para valores desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlType.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  id: MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que fornece as informações de tipo para retornado <xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;> </xref> deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>, se ele representa uma extensão de marcação."
  remarks: "Essa propriedade só será relevante se este <xref:System.Xaml.XamlType>representa uma extensão de marcação (`x:MarkupExtension` está na lista de tipos atribuíveis).</xref:System.Xaml.XamlType>       Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>neste tipo.</xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>"
  syntax:
    content: public System.Xaml.XamlType MarkupExtensionReturnType { get; }
    return:
      type: System.Xaml.XamlType
      description: "Um <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objeto para o tipo de retorno para o uso da extensão de marcação; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa uma extensão de marcação."
  overload: System.Xaml.XamlType.MarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Name
  id: Name
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o nome de cadeia de caracteres do tipo que isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa."
  remarks: "Essa propriedade normalmente obtém o nome do esquema construído (pelo <xref:System.Xaml.XamlType.%23ctor%2A>assinatura), ou o nome do <xref:System.Type>, se ele é construído usando o construtor pertinente do sistema de tipo CLR.</xref:System.Type> </xref:System.Xaml.XamlType.%23ctor%2A>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "O nome da cadeia de caracteres desse tipo de XAML."
  overload: System.Xaml.XamlType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determina se duas especificadas <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objetos têm o mesmo valor."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor de <code> xamlType1 </code> é o mesmo que o valor de <code> xamlType2 </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determina se duas especificadas <xref href=&quot;System.Xaml.XamlType&quot;> </xref> objetos têm valores diferentes."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor de <code> xamlType1 </code> é diferente do valor de <code> xamlType2 </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o namespace XAML único que é o namespace XAML primário para este <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Essa implementação fornece o mesmo valor que a chamada <xref:System.Xaml.XamlType.GetXamlNamespaces%2A>e, em seguida, obter a primeira cadeia de caracteres do valor do conjunto enumerável retornado.</xref:System.Xaml.XamlType.GetXamlNamespaces%2A>"
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "O identificador, como uma cadeia de caracteres do namespace XAML primário para este tipo XAML."
  overload: System.Xaml.XamlType.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o ativo <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> para o processamento desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "<xref:System.Xaml.XamlSchemaContext>é uma entrada de parâmetro obrigatório ao construir um <xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType></xref:System.Xaml.XamlSchemaContext>"
  syntax:
    content: public System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "Ativo <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> para o processamento desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  overload: System.Xaml.XamlType.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ToString
  id: ToString
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma representação de cadeia de caracteres deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "A <xref:System.Xaml.XamlType>implementação de <xref:System.Object.ToString%2A>retorna a <xref:System.Xaml.XamlType.Name%2A>propriedade de <xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.Name%2A> </xref:System.Object.ToString%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma representação de cadeia de caracteres deste <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  overload: System.Xaml.XamlType.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  id: TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> tem o comportamento de serialização que corta o espaço em branco ao redor de seu conteúdo de tratamento de espaço em branco."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>neste tipo.</xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>"
  syntax:
    content: public bool TrimSurroundingWhitespace { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um tipo que usa o espaço em branco cortar; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlType.TrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeArguments
  id: TypeArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém uma lista de argumentos de tipo para casos onde isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref> representa um genérico."
  remarks: "Há certos cenários para um <xref:System.Xaml.XamlType>onde chamando o parâmetro TypeArguments retorna uma lista onde os tipos ainda estão abertos.</xref:System.Xaml.XamlType> No caso, um ou mais dos retornado <xref:System.Xaml.XamlType>valores terão valores de espaço reservado para <xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName>, como `T`, para representar que genérica ainda está aberta.</xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName> </xref:System.Xaml.XamlType> Esse cenário pode ocorrer se você receber um <xref:System.Xaml.XamlType>de uma chamada para <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, em vez de uma implementação de leitor XAML.</xref:System.Xaml.XamlSchemaContext.GetXamlType%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> TypeArguments { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "Uma lista de tipos de argumento de tipo; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se este <xref href=&quot;System.Xaml.XamlType&quot;> </xref> não representa um genérico."
  overload: System.Xaml.XamlType.TypeArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> que representa de comportamento de conversão para valores desse tipo de restrição <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupTypeConverter%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupTypeConverter%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupTypeConverter%2A>neste tipo.</xref:System.Xaml.XamlType.LookupTypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> que representa de comportamento de conversão para valores desse tipo de restrição <xref href=&quot;System.Xaml.XamlType&quot;> </xref>."
  overload: System.Xaml.XamlType.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.UnderlyingType
  id: UnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o CLR <xref:System.Type>que dão suporte para isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Type>"
  syntax:
    content: public Type UnderlyingType { get; }
    return:
      type: System.Type
      description: "O CLR <xref:System.Type>que dão suporte para isso <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Type>"
  overload: System.Xaml.XamlType.UnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref:System.Windows.Markup.ValueSerializer>restrição que representa o comportamento de serialização de valor para valores desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  remarks: "Se você não usar a técnica de reflexão padrão interna CLR para um <xref:System.Xaml.XamlType>, chamadas para essa propriedade podem invocar <xref:System.Xaml.XamlType.LookupValueSerializer%2A>substituições em <xref:System.Xaml.XamlType>classes derivadas.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupValueSerializer%2A> </xref:System.Xaml.XamlType> Para obter mais informações sobre valores de retorno e outro comportamento, consulte a documentação para <xref:System.Xaml.XamlType.LookupValueSerializer%2A>neste tipo.</xref:System.Xaml.XamlType.LookupValueSerializer%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref:System.Windows.Markup.ValueSerializer>restrição que representa o comportamento de serialização de valor para valores desse <xref href=&quot;System.Xaml.XamlType&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlType.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlType>
  nameWithType: IList<XamlType>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
- uid: System.Xaml.Schema.XamlTypeInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
- uid: System.Xaml.XamlType.AllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlType.ContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Equals(System.Object)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlMember>
  nameWithType: ICollection<XamlMember>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.GetAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
- uid: System.Xaml.XamlType.GetHashCode
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlType.GetMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
- uid: System.Xaml.XamlType.GetXamlNamespaces
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Invoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
- uid: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<XamlMember>
  nameWithType: IEnumerable<XamlMember>
  fullName: System.Collections.Generic.IEnumerable<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
- uid: System.Xaml.XamlType.LookupBaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
- uid: System.Xaml.XamlType.LookupCollectionKind
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
- uid: System.Xaml.Schema.XamlCollectionKind
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlCollectionKind
  nameWithType: XamlCollectionKind
  fullName: System.Xaml.Schema.XamlCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
- uid: System.Xaml.XamlType.LookupContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
- uid: System.Xaml.XamlType.LookupContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
- uid: System.Xaml.XamlType.LookupInvoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
- uid: System.Xaml.XamlType.LookupIsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
- uid: System.Xaml.XamlType.LookupIsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
- uid: System.Xaml.XamlType.LookupIsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
- uid: System.Xaml.XamlType.LookupIsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
- uid: System.Xaml.XamlType.LookupIsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
- uid: System.Xaml.XamlType.LookupIsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
- uid: System.Xaml.XamlType.LookupIsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
- uid: System.Xaml.XamlType.LookupItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
- uid: System.Xaml.XamlType.LookupKeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetMarkupExtensionEventArgs>
  nameWithType: EventHandler<XamlSetMarkupExtensionEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetMarkupExtensionEventArgs
    name: XamlSetMarkupExtensionEventArgs
    nameWithType: XamlSetMarkupExtensionEventArgs
    fullName: XamlSetMarkupExtensionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetTypeConverterEventArgs>
  nameWithType: EventHandler<XamlSetTypeConverterEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetTypeConverterEventArgs
    name: XamlSetTypeConverterEventArgs
    nameWithType: XamlSetTypeConverterEventArgs
    fullName: XamlSetTypeConverterEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
- uid: System.Xaml.XamlType.LookupTypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupUnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
- uid: System.Xaml.XamlType.LookupValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
- uid: System.Xaml.XamlType.#ctor*
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType
  nameWithType: XamlType.XamlType
- uid: System.Xaml.XamlType.AllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
- uid: System.Xaml.XamlType.CanAssignTo*
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo
  nameWithType: XamlType.CanAssignTo
- uid: System.Xaml.XamlType.ConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
- uid: System.Xaml.XamlType.ContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
- uid: System.Xaml.XamlType.Equals*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals
  nameWithType: XamlType.Equals
- uid: System.Xaml.XamlType.GetAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty
  nameWithType: XamlType.GetAliasedProperty
- uid: System.Xaml.XamlType.GetAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers
  nameWithType: XamlType.GetAllAttachableMembers
- uid: System.Xaml.XamlType.GetAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers
  nameWithType: XamlType.GetAllMembers
- uid: System.Xaml.XamlType.GetAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember
  nameWithType: XamlType.GetAttachableMember
- uid: System.Xaml.XamlType.GetHashCode*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode
  nameWithType: XamlType.GetHashCode
- uid: System.Xaml.XamlType.GetMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember
  nameWithType: XamlType.GetMember
- uid: System.Xaml.XamlType.GetPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters
  nameWithType: XamlType.GetPositionalParameters
- uid: System.Xaml.XamlType.GetXamlNamespaces*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlType.GetXamlNamespaces
- uid: System.Xaml.XamlType.Invoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty
  nameWithType: XamlType.LookupAliasedProperty
- uid: System.Xaml.XamlType.LookupAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers
  nameWithType: XamlType.LookupAllAttachableMembers
- uid: System.Xaml.XamlType.LookupAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers
  nameWithType: XamlType.LookupAllMembers
- uid: System.Xaml.XamlType.LookupAllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes
  nameWithType: XamlType.LookupAllowedContentTypes
- uid: System.Xaml.XamlType.LookupAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember
  nameWithType: XamlType.LookupAttachableMember
- uid: System.Xaml.XamlType.LookupBaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType
  nameWithType: XamlType.LookupBaseType
- uid: System.Xaml.XamlType.LookupCollectionKind*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind
  nameWithType: XamlType.LookupCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments
  nameWithType: XamlType.LookupConstructionRequiresArguments
- uid: System.Xaml.XamlType.LookupContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty
  nameWithType: XamlType.LookupContentProperty
- uid: System.Xaml.XamlType.LookupContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers
  nameWithType: XamlType.LookupContentWrappers
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlType.LookupCustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlType.LookupDeferringLoader
- uid: System.Xaml.XamlType.LookupInvoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlType.LookupInvoker
- uid: System.Xaml.XamlType.LookupIsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlType.LookupIsAmbient
- uid: System.Xaml.XamlType.LookupIsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible
  nameWithType: XamlType.LookupIsConstructible
- uid: System.Xaml.XamlType.LookupIsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension
  nameWithType: XamlType.LookupIsMarkupExtension
- uid: System.Xaml.XamlType.LookupIsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope
  nameWithType: XamlType.LookupIsNameScope
- uid: System.Xaml.XamlType.LookupIsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable
  nameWithType: XamlType.LookupIsNullable
- uid: System.Xaml.XamlType.LookupIsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic
  nameWithType: XamlType.LookupIsPublic
- uid: System.Xaml.XamlType.LookupIsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlType.LookupIsUnknown
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.LookupIsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData
  nameWithType: XamlType.LookupIsXData
- uid: System.Xaml.XamlType.LookupItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType
  nameWithType: XamlType.LookupItemType
- uid: System.Xaml.XamlType.LookupKeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType
  nameWithType: XamlType.LookupKeyType
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType
  nameWithType: XamlType.LookupMarkupExtensionReturnType
- uid: System.Xaml.XamlType.LookupMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember
  nameWithType: XamlType.LookupMember
- uid: System.Xaml.XamlType.LookupPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters
  nameWithType: XamlType.LookupPositionalParameters
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler
  nameWithType: XamlType.LookupSetMarkupExtensionHandler
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler
  nameWithType: XamlType.LookupSetTypeConverterHandler
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace
  nameWithType: XamlType.LookupTrimSurroundingWhitespace
- uid: System.Xaml.XamlType.LookupTypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlType.LookupTypeConverter
- uid: System.Xaml.XamlType.LookupUnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType
  nameWithType: XamlType.LookupUnderlyingType
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization
  nameWithType: XamlType.LookupUsableDuringInitialization
- uid: System.Xaml.XamlType.LookupValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlType.LookupValueSerializer
- uid: System.Xaml.XamlType.MarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
- uid: System.Xaml.XamlType.op_Equality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality
  nameWithType: XamlType.op_Equality
- uid: System.Xaml.XamlType.op_Inequality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality
  nameWithType: XamlType.op_Inequality
- uid: System.Xaml.XamlType.PreferredXamlNamespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext*
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString
  nameWithType: XamlType.ToString
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
