### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  id: FormViewUpdatedEventArgs
  children:
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  - System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  langs:
  - csharp
  name: FormViewUpdatedEventArgs
  nameWithType: FormViewUpdatedEventArgs
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  type: Class
  summary: "Fornece dados para o <xref href=&quot;System.Web.UI.WebControls.FormView.ItemUpdated&quot;> </xref> eventos."
  remarks: "O <xref:System.Web.UI.WebControls.FormView>controlar gera o <xref:System.Web.UI.WebControls.FormView.ItemUpdated>evento quando um botão de atualização (um botão com sua `CommandName` propriedade definida como &quot;Atualização&quot;) dentro do controle é clicado, mas após o <xref:System.Web.UI.WebControls.FormView>controle atualiza o registro.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.FormView.ItemUpdated> </xref:System.Web.UI.WebControls.FormView> Isso permite que você forneça um método de manipulação de eventos que executa uma rotina personalizada, como verificar os resultados de uma operação de atualização, sempre que esse evento ocorre.       Um objeto FormViewUpdatedEventArgs é passado para o método de manipulação de eventos, que permite que você determine o número de registros afetados e todas as exceções que possam ter ocorrido. Para determinar o número de registros afetados pela operação de atualização, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A> Use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>propriedade para determinar se todas as exceções ocorreram.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> Você também pode indicar se a exceção foi tratada no método de manipulação de eventos, definindo o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> Se você precisar acessar os valores originais do campo de chave de registro atualizado, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A> Os valores originais do campo de chave não podem ser acessados usando o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A> Valores atualizados (que incluem valores de campo de chave atualizado, se você permitir que o usuário edite os campos de chave) são acessados usando o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>       Por padrão, o <xref:System.Web.UI.WebControls.FormView>o controle retorna ao modo especificado pelo <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>propriedade após uma operação de atualização.</xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> </xref:System.Web.UI.WebControls.FormView> Ao manipular uma exceção que ocorreu durante a operação de atualização, você pode manter o <xref:System.Web.UI.WebControls.FormView>controle no modo de edição, definindo o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>propriedade `true`.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> </xref:System.Web.UI.WebControls.FormView>       Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       Para obter uma lista de valores de propriedade inicial para uma instância da classe FormViewUpdatedEventArgs, consulte o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A>construtor.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.%23ctor%2A>"
  example:
  - "The following example demonstrates how to use the FormViewUpdatedEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemUpdated> event to determine whether an exception occurred during an update operation.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_148_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_148_1.aspx)]"
  syntax:
    content: 'public class FormViewUpdatedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)
  id: '#ctor(System.Int32,System.Exception)'
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: FormViewUpdatedEventArgs(Int32,Exception)
  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.FormViewUpdatedEventArgs&quot;> </xref> classe."
  remarks: "Use este construtor para inicializar uma nova instância de <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>classe.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>       A tabela a seguir mostra os valores de propriedade inicial de uma instância de <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>classe.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>| O valor de `affectedRows` parâmetro. |   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>| O objeto <xref:System.Exception?displayProperty=fullName>contido no `e` parâmetro. |   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>| Inicializado para `false`. |   | <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>| Inicializado para `false`. |      > [!NOTE] > Este construtor é usado principalmente por desenvolvedores de controle quando gerar eventos.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A> </xref:System.Exception?displayProperty=fullName> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>"
  syntax:
    content: public FormViewUpdatedEventArgs (int affectedRows, Exception e);
    parameters:
    - id: affectedRows
      type: System.Int32
      description: "O número de linhas afetadas pela operação de atualização."
    - id: e
      type: System.Exception
      description: "Um <xref:System.Exception>que representa a exceção gerada quando a operação de atualização foi executada.</xref:System.Exception> Se nenhuma exceção for gerada, use <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para esse parâmetro."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  id: AffectedRows
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: AffectedRows
  nameWithType: FormViewUpdatedEventArgs.AffectedRows
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém o número de linhas afetadas pela operação de atualização."
  remarks: "Use a propriedade AffectedRows para determinar o número de registros afetados pela operação de atualização. Essa propriedade normalmente é usada para verificar que o número correto de registros foi atualizado nas seguintes situações:-Verifique se apenas um registro foi atualizado. Às vezes, uma instrução update escrito incorretamente pode atualizar vários registros.      -Verifique se um registro foi atualizado quando ocorre um erro durante a operação de atualização que não gera uma exceção.      -Verifique se um registro foi atualizado quando um controle de fonte de dados que oferece suporte a detecção de conflito (verificação de simultaneidade otimista), como o <xref:System.Web.UI.WebControls.SqlDataSource>e <xref:System.Web.UI.WebControls.ObjectDataSource>controla, tem seu <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>propriedade definida como o `ConflictOptions.CompareAllValues` valor de enumeração.</xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.SqlDataSource> Sob essa configuração, um registro que foi modificado por outro usuário ao mesmo tempo não pode ser atualizado."
  example:
  - "The following example demonstrates how to use the AffectedRows property to verify that a record was updated.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1281_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1281_1.aspx)]"
  syntax:
    content: public int AffectedRows { get; }
    return:
      type: System.Int32
      description: "O número de linhas afetadas pela operação de atualização."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: FormViewUpdatedEventArgs.Exception
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém a exceção (se houver) que foi gerado durante a operação de atualização."
  remarks: "Use a propriedade de exceção para determinar a exceção (se houver) que foi gerado durante a operação de atualização. Se nenhuma exceção foi gerada, essa propriedade retornará `null`.      > [!NOTE] > Se uma exceção foi gerada e optar por tratar a exceção no manipulador de eventos, certifique-se de definir o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>propriedade `true`; caso contrário, a exceção é gerada novamente pelo <xref:System.Web.UI.WebControls.FormView>controle.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>"
  example:
  - "The following example demonstrates how to use the Exception property to determine whether an exception occurred during an update operation.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_564_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_564_1.aspx)]"
  syntax:
    content: public Exception Exception { get; }
    return:
      type: System.Exception
      description: "Um <xref:System.Exception>objeto que representa a exceção foi elevada durante a operação de atualização.</xref:System.Exception>"
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se uma exceção foi elevada durante a operação de atualização foi manipulada no evento manipulador."
  remarks: "Quando uma exceção é gerada durante a operação de atualização, use a propriedade ExceptionHandled para indicar se a exceção foi tratada no evento manipulador. Quando essa propriedade é definida como `true`, a exceção será considerada tratadas e não é gerada novamente pelo <xref:System.Web.UI.WebControls.FormView>controle.</xref:System.Web.UI.WebControls.FormView> Se essa propriedade é definida como `false`, a exceção é gerada novamente. Para determinar qual exceção foi gerada, use o <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>"
  example:
  - "The following example demonstrates how to use the ExceptionHandled property to indicate that the exception was handled in the event handler.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_345_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_345_1.aspx)]"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a exceção foi tratada no evento manipulador; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  id: KeepInEditMode
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: KeepInEditMode
  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.FormView&quot;> </xref> controle deve permanecer no modo de edição após uma operação de atualização."
  remarks: "Por padrão, o <xref:System.Web.UI.WebControls.FormView>o controle retorna ao modo especificado pelo <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>propriedade após uma operação de atualização.</xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> </xref:System.Web.UI.WebControls.FormView> Use a propriedade KeepInEditMode para especificar se o <xref:System.Web.UI.WebControls.FormView>controle deve permanecer no modo de edição.</xref:System.Web.UI.WebControls.FormView> Para manter o <xref:System.Web.UI.WebControls.FormView>controle no modo de edição, defina essa propriedade como `true`.</xref:System.Web.UI.WebControls.FormView>      > [!NOTE] > Essa propriedade deve ser usada somente quando uma situação ocorre (por exemplo, uma exceção seja gerada) que requer que o controle para se comportar de maneira diferente que normalmente. Se o <xref:System.Web.UI.WebControls.FormView>controle precisa permanecer no modo de edição, por padrão, defina o <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>propriedade em vez disso.</xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> </xref:System.Web.UI.WebControls.FormView>"
  example:
  - "The following example demonstrates how to use the KeepInEditMode property to keep a <xref:System.Web.UI.WebControls.FormView> control in edit mode when an exception occurs.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1052_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1052_1.aspx)]"
  syntax:
    content: public bool KeepInEditMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para permanecer no modo de edição após uma operação de atualização. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  id: Keys
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: Keys
  nameWithType: FormViewUpdatedEventArgs.Keys
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um dicionário que contém os pares de nome/valor original do campo de chave de registro atualizado."
  remarks: "A propriedade Keys contém os valores originais dos campos de chave listados no <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>propriedade de um <xref:System.Web.UI.WebControls.FormView>controle.</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> Use a propriedade de chaves para acessar os valores do campo de chave para um registro atualizado. Por exemplo, você pode usar esses valores para manter um registro de registros atualizados.      > [!NOTE] > Se você permitir que o usuário atualizar os valores dos campos de chave, o <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>propriedade contém os valores de campo de chave original.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> Os valores atualizados são armazenados no <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>       A propriedade retorna chaves um <xref:System.Collections.Specialized.OrderedDictionary>objeto que implementa o <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName>interface.</xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> O <xref:System.Collections.Specialized.OrderedDictionary>contém objeto <xref:System.Collections.DictionaryEntry?displayProperty=fullName>objetos que representam os campos de registro atualizado.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> Para acessar os nomes de campo, use o <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>propriedade o <xref:System.Collections.Specialized.OrderedDictionary>objeto.</xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> Da mesma forma, você pode acessar os valores do campo usando o <xref:System.Collections.Specialized.OrderedDictionary.Values%2A>propriedade.</xref:System.Collections.Specialized.OrderedDictionary.Values%2A>      > [!NOTE] > Como um atalho, você também pode usar o indexador de <xref:System.Collections.Specialized.OrderedDictionary>objeto para acessar o campo valores diretamente.</xref:System.Collections.Specialized.OrderedDictionary> Controles que contam com a ordem dos campos da fonte de dados (como <xref:System.Web.UI.WebControls.AccessDataSource>) pode acessar os valores do campo somente por índice.</xref:System.Web.UI.WebControls.AccessDataSource>"
  example:
  - "The following example demonstrates how to use the Keys property to access the values of the key field for an updated record.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_531_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_531_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary Keys { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "Um <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> que contém um dicionário de pares de nome/valor original do campo de chave de registro atualizado."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  id: NewValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: NewValues
  nameWithType: FormViewUpdatedEventArgs.NewValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um dicionário que contém os novos pares de nome/valor do campo de registro atualizado."
  remarks: "Use a propriedade NewValues para acessar os novos valores de campo de registro atualizado. Por exemplo, você pode usar esses valores para manter um registro de registros atualizados.      > [!NOTE] > Se você permitir que o usuário atualizar os valores dos campos de chave, o <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>propriedade contém os valores de campo de chave original.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> Os valores atualizados são armazenados no <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>       A propriedade de NewValues retorna um <xref:System.Collections.Specialized.OrderedDictionary>objeto que implementa o <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName>interface.</xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> O <xref:System.Collections.Specialized.OrderedDictionary>contém objeto <xref:System.Collections.DictionaryEntry?displayProperty=fullName>objetos que representam os campos de registro atualizado.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> Para acessar os nomes de campo, use o <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>propriedade o <xref:System.Collections.Specialized.OrderedDictionary>objeto.</xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> Da mesma forma, você pode acessar os valores do campo usando o <xref:System.Collections.Specialized.OrderedDictionary.Values%2A>propriedade.</xref:System.Collections.Specialized.OrderedDictionary.Values%2A>      > [!NOTE] > Como um atalho, você também pode usar o indexador de <xref:System.Collections.Specialized.OrderedDictionary>objeto para acessar o campo valores diretamente.</xref:System.Collections.Specialized.OrderedDictionary> Controles que contam com a ordem dos campos da fonte de dados (como <xref:System.Web.UI.WebControls.AccessDataSource>) pode acessar os valores do campo somente por índice.</xref:System.Web.UI.WebControls.AccessDataSource>"
  example:
  - "The following example demonstrates how to use the NewValues property to access the new values entered by the user for the non-key fields of the updated record.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_253_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_253_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary NewValues { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "Um <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> que contém um dicionário de pares de nome/valor novo campo de registro atualizado."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  id: OldValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  langs:
  - csharp
  name: OldValues
  nameWithType: FormViewUpdatedEventArgs.OldValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um dicionário que contém os pares de nome/valor de campo não-chave original para o registro atualizado."
  remarks: "Use a propriedade OldValues para acessar os valores originais do campo de não-chave de registro atualizado. Por exemplo, você pode usar esses valores para manter um registro de registros atualizados. Um controle de fonte de dados que oferece suporte a detecção de conflito (verificação de simultaneidade otimista), como o <xref:System.Web.UI.WebControls.SqlDataSource>e <xref:System.Web.UI.WebControls.ObjectDataSource>controles, com seu <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>propriedade definida como o `ConflictOptions.CompareAllValues` também compara original com o registro no banco de dados antes de uma operação de atualização é executada.</xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.SqlDataSource> Se um registro foi modificado por outro usuário ao mesmo tempo, o registro não será atualizado.      > [!NOTE] > O <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A>propriedade não tem campos de chave.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> Se você permitir que o usuário atualizar os valores dos campos de chave, os valores originais do campo de chave são armazenados no <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> Os valores atualizados são armazenados no <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>propriedade.</xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>       O <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>propriedade retorna um <xref:System.Collections.Specialized.OrderedDictionary>objeto que implementa o <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName>interface.</xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> O <xref:System.Collections.Specialized.OrderedDictionary>contém objeto <xref:System.Collections.DictionaryEntry?displayProperty=fullName>objetos que representam os campos de registro atualizado.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> </xref:System.Collections.Specialized.OrderedDictionary> Para acessar os nomes de campo, use o <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A>propriedade o <xref:System.Collections.Specialized.OrderedDictionary>objeto.</xref:System.Collections.Specialized.OrderedDictionary> </xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> Da mesma forma, você pode acessar os valores do campo usando o <xref:System.Collections.Specialized.OrderedDictionary.Values%2A>propriedade.</xref:System.Collections.Specialized.OrderedDictionary.Values%2A>      > [!NOTE] > Como um atalho, você também pode usar o indexador de <xref:System.Collections.Specialized.OrderedDictionary>objeto para acessar o campo valores diretamente.</xref:System.Collections.Specialized.OrderedDictionary> Controles que contam com a ordem dos campos da fonte de dados (como <xref:System.Web.UI.WebControls.AccessDataSource>) pode acessar os valores do campo somente por índice.</xref:System.Web.UI.WebControls.AccessDataSource>"
  example:
  - "The following example demonstrates how to use the OldValues property to access the original values of the non-key fields for the updated record.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_164_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_164_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary OldValues { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "Um <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> que contém um dicionário de pares de nome/valor do campo original para o registro atualizado."
  overload: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: FormViewUpdatedEventArgs(Int32,Exception)
  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.FormViewUpdatedEventArgs(Int32,Exception)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: AffectedRows
  nameWithType: FormViewUpdatedEventArgs.AffectedRows
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Exception
  nameWithType: FormViewUpdatedEventArgs.Exception
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: KeepInEditMode
  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Keys
  nameWithType: FormViewUpdatedEventArgs.Keys
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: NewValues
  nameWithType: FormViewUpdatedEventArgs.NewValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: OldValues
  nameWithType: FormViewUpdatedEventArgs.OldValues
  fullName: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.#ctor*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: FormViewUpdatedEventArgs
  nameWithType: FormViewUpdatedEventArgs.FormViewUpdatedEventArgs
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: AffectedRows
  nameWithType: FormViewUpdatedEventArgs.AffectedRows
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Exception
  nameWithType: FormViewUpdatedEventArgs.Exception
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: FormViewUpdatedEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: KeepInEditMode
  nameWithType: FormViewUpdatedEventArgs.KeepInEditMode
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: Keys
  nameWithType: FormViewUpdatedEventArgs.Keys
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: NewValues
  nameWithType: FormViewUpdatedEventArgs.NewValues
- uid: System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues*
  parent: System.Web.UI.WebControls.FormViewUpdatedEventArgs
  isExternal: false
  name: OldValues
  nameWithType: FormViewUpdatedEventArgs.OldValues
