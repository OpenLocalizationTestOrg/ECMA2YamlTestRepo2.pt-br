### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSACryptoServiceProvider
  id: DSACryptoServiceProvider
  children:
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider
  fullName: System.Security.Cryptography.DSACryptoServiceProvider
  type: Class
  summary: "Define um objeto de wrapper para acessar a implementação de CSP (provedor) de serviços de criptografia do <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> algoritmo. Essa classe não pode ser herdada."
  remarks: "Você pode usar a classe DSACryptoServiceProvider para criar assinaturas digitais e proteger a integridade de seus dados.       Para usar um sistema de chave pública para assinar digitalmente uma mensagem, o remetente primeiro se aplica a uma função de hash para a mensagem para criar um resumo da mensagem. O remetente, em seguida, criptografa o resumo de mensagem com a chave privada do remetente para criar assinatura pessoal do remetente. Ao receber a mensagem e a assinatura, o destinatário descriptografa a assinatura usando a chave pública do remetente para recuperar o resumo de mensagem e hashes a mensagem usando o mesmo algoritmo de hash que o remetente usou. Se o resumo de mensagem que o receptor computa corresponde exatamente Resumo da mensagem recebida do remetente, destinatário poderá ter certeza de que a mensagem não foi alterada em trânsito. Observe que uma assinatura pode ser verificada por qualquer pessoa, porque a chave pública do remetente é conhecimento comum.      > [!NOTE] > Algoritmos assimétricos mais recentes estão disponíveis. Considere usar a <xref:System.Security.Cryptography.RSACryptoServiceProvider>classe em vez da classe DSACryptoServiceProvider.</xref:System.Security.Cryptography.RSACryptoServiceProvider> Use DSACryptoServiceProvider somente para compatibilidade com aplicativos herdados e dados.       Esse algoritmo oferece suporte a comprimentos de chave de 512 bits para 1024 bits em incrementos de 64 bits."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.DSA
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe."
  syntax:
    content: public DSACryptoServiceProvider ();
    parameters: []
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe com o tamanho da chave especificado."
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "O tamanho da chave para o algoritmo assimétrico em bits."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe com os parâmetros especificados para o provedor de serviços de criptografia (CSP)."
  syntax:
    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "Os parâmetros para o CSP."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe com os parâmetros para o provedor de serviços de criptografia (CSP) e o tamanho da chave especificado."
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "O tamanho da chave para o algoritmo de criptografia em bits."
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "Os parâmetros para o CSP."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Não é possível adquirir o CSP.       - ou - a chave não pode ser criada."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>dwKeySize</code>está fora do intervalo."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Cria o <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> assinatura de dados especificado."
  syntax:
    content: public override byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "Os dados a ser assinado."
    return:
      type: System.Byte[]
      description: "A assinatura digital de dados especificado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém um <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref> objeto que descreve informações adicionais sobre um par de chaves criptográficas."
  remarks: "Use a propriedade CspKeyContainerInfo para recuperar informações adicionais sobre um par de chaves criptográficas.  Retornado <xref:System.Security.Cryptography.CspKeyContainerInfo>objeto descreve se a chave é exportável e especifica o nome do contêiner de chave, informações sobre o provedor e outras informações.</xref:System.Security.Cryptography.CspKeyContainerInfo>       Em casos em que uma chave aleatória é gerada, um contêiner de chave não será criado até você chamar um método que usa a chave.  Algumas propriedades do <xref:System.Security.Cryptography.CspKeyContainerInfo>objeto retornado pela propriedade CspKeyContainerInfo lançará um <xref:System.Security.Cryptography.CryptographicException>se um contêiner de chave não tiver sido criado.</xref:System.Security.Cryptography.CryptographicException> </xref:System.Security.Cryptography.CspKeyContainerInfo>  Para certificar-se de que um contêiner de chave foi criado, chamar um método, como <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>e assim por diante, antes de chamar a propriedade CspKeyContainerInfo.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> </xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> </xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A> </xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>"
  syntax:
    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }
    return:
      type: System.Security.Cryptography.CspKeyContainerInfo
      description: "Um <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref> objeto que descreve informações adicionais sobre um par de chaves criptográficas."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "A ser adicionado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  id: ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Exporta um blob que contém as informações da chave associadas com um <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> objeto."
  remarks: "O método ExportCspBlob retorna um blob que contém informações de chave que é compatíveis com o não gerenciado Microsoft Cryptographic API (CAPI)."
  syntax:
    content: public byte[] ExportCspBlob (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para incluir a chave privada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Byte[]
      description: "Uma matriz de bytes que contém as informações de chave associadas com um <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> objeto."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Exporta o <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>."
  syntax:
    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para incluir parâmetros privados. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "Os parâmetros para <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "A chave não pode ser exportada."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "A ser adicionado."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "A ser adicionado."
    return:
      type: System.Byte[]
      description: "A ser adicionado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "A ser adicionado."
    - id: offset
      type: System.Int32
      description: "A ser adicionado."
    - id: count
      type: System.Int32
      description: "A ser adicionado."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "A ser adicionado."
    return:
      type: System.Byte[]
      description: "A ser adicionado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  id: ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Importa um blob que representa as informações de chave DSA."
  remarks: "O método ImportCspBlob inicializa os dados da chave de um <xref:System.Security.Cryptography.DSACryptoServiceProvider>usando um blob que é compatível com o não gerenciado Microsoft Cryptographic API (CAPI) do objeto.</xref:System.Security.Cryptography.DSACryptoServiceProvider>"
  syntax:
    content: public void ImportCspBlob (byte[] keyBlob);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "Uma matriz de bytes que representa um blob de chave DSA."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Importa especificado <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>."
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "Os parâmetros para <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Não é possível obter o provedor de serviços de criptografia (CSP).       - ou - <code> parameters </code> parâmetro tem campos ausentes."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém o nome do algoritmo de troca de chaves."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "O nome do algoritmo de troca de chaves."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  id: KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém o tamanho da chave usada pelo algoritmo assimétrico em bits."
  remarks: "Esse algoritmo oferece suporte a comprimentos de chave de 512 bits para 1024 bits em incrementos de 64 bits.       O <xref:System.Security.Cryptography.DSACryptoServiceProvider>classe não permite alterar os tamanhos de chave usando a propriedade KeySize.</xref:System.Security.Cryptography.DSACryptoServiceProvider>  Qualquer valor gravado para essa propriedade não atualizarão a propriedade sem erro.  Para alterar o tamanho da chave, use uma das sobrecargas de construtor."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "O tamanho da chave usada pelo algoritmo assimétrico."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  id: PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define um valor que indica se a chave deve ser persistente no provedor de serviços de criptografia (CSP)."
  remarks: "Use essa propriedade quando você deseja manter uma chave em um contêiner de chave."
  syntax:
    content: public bool PersistKeyInCsp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a chave deve ser persistente no CSP; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  id: PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> objeto contém somente uma chave pública."
  remarks: "O <xref:System.Security.Cryptography.DSACryptoServiceProvider>classe pode ser inicializado ou com uma chave pública apenas ou com ambos os uma pública e privada chave.</xref:System.Security.Cryptography.DSACryptoServiceProvider>  Use a propriedade PublicOnly para determinar se a instância atual contém somente uma chave pública ou uma chave pública e privada."
  syntax:
    content: public bool PublicOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> objeto contém apenas um público chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém o nome do algoritmo de assinatura."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "O nome do algoritmo de assinatura."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  id: SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcula o valor de hash da matriz de bytes especificada e assina o valor de hash resultante."
  remarks: "Esse método cria uma assinatura digital é verificada usando o <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>método.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>       <xref:System.Security.Cryptography.DSA>usa o <xref:System.Security.Cryptography.SHA1>algoritmo de hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Os dados de entrada para o qual calcular o hash."
    return:
      type: System.Byte[]
      description: "O <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> assinatura de dados especificado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  id: SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcula o valor de hash do fluxo de entrada especificado e o assina o valor de hash resultante."
  remarks: "<xref:System.Security.Cryptography.DSA>usa o <xref:System.Security.Cryptography.SHA1>algoritmo de hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "Os dados de entrada para o qual calcular o hash."
    return:
      type: System.Byte[]
      description: "O <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> assinatura de dados especificado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  id: SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Sinais de ponto de uma matriz de bytes do início especificado para o ponto de extremidade especificado."
  remarks: "Esse método cria uma assinatura digital é verificada usando o <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>método.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>       <xref:System.Security.Cryptography.DSA>usa o <xref:System.Security.Cryptography.SHA1>algoritmo de hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Os dados de entrada para entrar."
    - id: offset
      type: System.Int32
      description: "O deslocamento na matriz da qual começar a usar os dados."
    - id: count
      type: System.Int32
      description: "O número de bytes na matriz para usar como dados."
    return:
      type: System.Byte[]
      description: "O <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> assinatura de dados especificado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  id: SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcula a assinatura para o valor de hash especificado, criptografando-os com a chave privada."
  remarks: "Esse método cria uma assinatura digital é verificada usando o <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>método.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>       <xref:System.Security.Cryptography.DSA>usa o <xref:System.Security.Cryptography.SHA1>algoritmo de hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignHash (byte[] rgbHash, string str);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "O valor de hash dos dados a ser assinado."
    - id: str
      type: System.String
      description: "O nome do algoritmo de hash usado para criar o valor de hash dos dados."
    return:
      type: System.Byte[]
      description: "O <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> assinatura para o valor de hash especificado."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Não é possível obter o provedor de serviços de criptografia (CSP).       - ou - nenhuma chave privada."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  id: UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define um valor que indica se a chave deve ser persistente no repositório de chaves do computador em vez de repositório de perfil do usuário."
  remarks: "A definição dessa propriedade como true é equivalente ao passar o sinalizador UseMachineKeyStore para um <xref:System.Security.Cryptography.CspParameters>objeto.</xref:System.Security.Cryptography.CspParameters> A propriedade UseMachineKeyStore se aplica a todo o código no domínio atual do aplicativo, ao mesmo tempo em que o <xref:System.Security.Cryptography.CspParameters>objeto se aplica apenas às classes que fazem referência explícita proprietário.</xref:System.Security.Cryptography.CspParameters> Essas configurações são úteis quando representando ou executado sob uma conta cujo perfil de usuário não está carregado."
  syntax:
    content: public static bool UseMachineKeyStore { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a chave deve ser persistente no repositório de chave do computador; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  id: VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica os dados de assinatura especificada, comparando-à assinatura calculada para os dados especificados."
  remarks: "Este método verifica a <xref:System.Security.Cryptography.DSA>assinatura digital produzida pelo <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.</xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A> </xref:System.Security.Cryptography.DSA>       <xref:System.Security.Cryptography.DSA>usa o <xref:System.Security.Cryptography.SHA1>algoritmo de hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "Os dados que foi assinados."
    - id: rgbSignature
      type: System.Byte[]
      description: "Os dados de assinatura a ser verificado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a assinatura verifica como válido. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  id: VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica os dados de assinatura especificada, comparando-à assinatura calculada para o valor de hash especificado."
  remarks: "Este método verifica a <xref:System.Security.Cryptography.DSA>assinatura digital produzida pelo <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.</xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A> </xref:System.Security.Cryptography.DSA>       Se o `str` parâmetro é `null`, o algoritmo de hash (SHA1) padrão é usado. Os algoritmos de hash válido é <xref:System.Security.Cryptography.SHA1>.</xref:System.Security.Cryptography.SHA1>"
  syntax:
    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "O valor de hash dos dados a ser assinado."
    - id: str
      type: System.String
      description: "O nome do algoritmo de hash usado para criar o valor de hash dos dados."
    - id: rgbSignature
      type: System.Byte[]
      description: "Os dados de assinatura a ser verificado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a assinatura verifica como válido. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Não é possível obter o provedor de serviços de criptografia (CSP).       - ou - a assinatura não pode ser verificada."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica o <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> assinatura de dados especificado."
  syntax:
    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "Os dados assinados com `rgbSignature`."
    - id: rgbSignature
      type: System.Byte[]
      description: "A assinatura a ser verificado para `rgbData`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> rgbSignature </code> corresponde à assinatura calculada usando o algoritmo de hash especificado e a chave em <code> rgbHash </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DSA
  isExternal: false
  name: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.CspKeyContainerInfo
  parent: System.Security.Cryptography
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature
  nameWithType: DSACryptoServiceProvider.CreateSignature
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose
  nameWithType: DSACryptoServiceProvider.Dispose
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob
  nameWithType: DSACryptoServiceProvider.ExportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters
  nameWithType: DSACryptoServiceProvider.ExportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData
  nameWithType: DSACryptoServiceProvider.HashData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob
  nameWithType: DSACryptoServiceProvider.ImportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters
  nameWithType: DSACryptoServiceProvider.ImportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData
  nameWithType: DSACryptoServiceProvider.SignData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash
  nameWithType: DSACryptoServiceProvider.SignHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData
  nameWithType: DSACryptoServiceProvider.VerifyData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash
  nameWithType: DSACryptoServiceProvider.VerifyHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature
  nameWithType: DSACryptoServiceProvider.VerifySignature
