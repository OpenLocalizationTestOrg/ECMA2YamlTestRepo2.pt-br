### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceProcessInstaller
  id: ServiceProcessInstaller
  children:
  - System.ServiceProcess.ServiceProcessInstaller.#ctor
  - System.ServiceProcess.ServiceProcessInstaller.Account
  - System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceProcessInstaller.HelpText
  - System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceProcessInstaller.Password
  - System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceProcessInstaller.Username
  langs:
  - csharp
  name: ServiceProcessInstaller
  nameWithType: ServiceProcessInstaller
  fullName: System.ServiceProcess.ServiceProcessInstaller
  type: Class
  summary: "Instala um executável que contém classes que estendem <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>. Essa classe é chamada por utilitários de instalação, como o InstallUtil.exe, ao instalar um aplicativo de serviço."
  remarks: "O ServiceProcessInstaller funcionam comuns a todos os serviços em um executável. Ele é usado pelo utilitário de instalação para gravar valores do Registro associados aos serviços que você deseja instalar.       Para instalar um serviço, crie uma classe de instalador de projeto que herda de <xref:System.Configuration.Install.Installer>e defina o <xref:System.ComponentModel.RunInstallerAttribute>na classe para `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> Dentro de seu projeto, instanciar uma instância de ServiceProcessInstaller por aplicativo de serviço e um <xref:System.ServiceProcess.ServiceInstaller>instância para cada serviço no aplicativo.</xref:System.ServiceProcess.ServiceInstaller> Finalmente, adicione a instância ServiceProcessInstaller e as <xref:System.ServiceProcess.ServiceInstaller>instâncias de classe de instalador seu projeto</xref:System.ServiceProcess.ServiceInstaller>       Quando o InstallUtil.exe é executado, o utilitário procura por classes do assembly de serviço com o <xref:System.ComponentModel.RunInstallerAttribute>definido como `true`.</xref:System.ComponentModel.RunInstallerAttribute> Adicionar classes para o assembly de serviço ao adicioná-los para o <xref:System.Configuration.Install.Installer.Installers%2A>coleção associada com o instalador de seu projeto.</xref:System.Configuration.Install.Installer.Installers%2A> Se <xref:System.ComponentModel.RunInstallerAttribute>é `false`, o utilitário de instalação ignora o instalador do projeto.</xref:System.ComponentModel.RunInstallerAttribute>       Para uma instância de um ServiceProcessInstaller, propriedades, que você pode modificar incluem a especificação de que um aplicativo de serviço executado sob uma conta que não seja o usuário conectado. Você pode especificar um determinado <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>par sob a qual o serviço deve ser executado, ou você pode usar <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>para especificar que o serviço executado sob a conta do sistema do computador, local ou conta de serviço de rede ou uma conta de usuário.</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>      > [!NOTE] > Conta do sistema do computador não é o mesmo que a conta de administrador.       Normalmente, você não chama os métodos em <xref:System.ServiceProcess.ServiceInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceInstaller> O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName>e <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName>métodos durante o processo de instalação.</xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) em todos os componentes instalados anteriormente.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>       Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Essas informações de estado são atualizadas continuamente como a instância ServiceProcessInstaller e cada <xref:System.ServiceProcess.ServiceInstaller>instância é instalada pelo utilitário.</xref:System.ServiceProcess.ServiceInstaller> Normalmente, é desnecessário para seu código modificar essas informações de estado explicitamente.       Criando um ServiceProcessInstaller faz com que o construtor da classe base, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, para ser chamado.</xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>"
  example:
  - "The following example creates a project installer called MyProjectInstaller, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for MyProjectInstaller (which would be called by the install utility), <xref:System.ServiceProcess.ServiceInstaller> objects are created for each service, and a ServiceProcessInstaller is created for the executable. For the install utility to recognize MyProjectInstaller as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses MyProjectInstaller, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each object can be backed out in turn in case of an installation failure.  \n  \n Normally, you would not instantiate your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute>, but the install utility actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._0_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._0_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._0_1.vb)]"
  syntax:
    content: 'public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: ServiceProcessInstaller()
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()
  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Cria uma nova instância do <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> classe."
  syntax:
    content: public ServiceProcessInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceProcessInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Account
  id: Account
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Account
  nameWithType: ServiceProcessInstaller.Account
  fullName: System.ServiceProcess.ServiceProcessInstaller.Account
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Obtém ou define o tipo de conta sob a qual executar esse aplicativo de serviço."
  remarks: "Quando a propriedade de conta for `User`, o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>propriedades são usadas para definir uma conta na qual o aplicativo de serviço é executado.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       O <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>par permite que o serviço executado sob uma conta diferente da conta do sistema.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Isso pode, por exemplo, que o serviço para iniciar automaticamente na reinicialização, quando nenhum usuário estiver conectado. Se você deixar o o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>vazios e definir a conta `User`, você será solicitado um nome de usuário válido e a senha durante a instalação.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       Você também pode especificar que o serviço executado sob a conta sistema local, ou como um local ou serviço de rede. Consulte o <xref:System.ServiceProcess.ServiceAccount>enumeração para obter detalhes sobre tipos de contas.</xref:System.ServiceProcess.ServiceAccount>"
  syntax:
    content: public System.ServiceProcess.ServiceAccount Account { get; set; }
    return:
      type: System.ServiceProcess.ServiceAccount
      description: "Um <xref href=&quot;System.ServiceProcess.ServiceAccount&quot;> </xref> que define o tipo de conta sob a qual o sistema executa esse serviço. O padrão é <xref uid=&quot;langword_csharp_User&quot; name=&quot;User&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceProcessInstaller.Account*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Implementa a classe base &lt;xref:System.Configuration.Install.ComponentInstaller.CopyFromComponent%2A?displayProperty=fullName&gt; método sem nenhum <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> comportamento específico de classe."
  remarks: "Este método não deve ser chamado dentro de seu código. O método de classe base em <xref:System.Configuration.Install.ComponentInstaller>é `abstract`, portanto, ele é implementado aqui na classe derivada.</xref:System.Configuration.Install.ComponentInstaller> No entanto, não há nenhum <xref:System.ServiceProcess.ServiceProcessInstaller>na implementação do método de processamento específicas de classe.</xref:System.ServiceProcess.ServiceProcessInstaller>"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent comp);
    parameters:
    - id: comp
      type: System.ComponentModel.IComponent
      description: "O <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> que representa o processo do serviço."
  overload: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText
  id: HelpText
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Obtém ajuda o texto exibido para opções de instalação do serviço."
  remarks: "Este texto de Ajuda pode ser usado quando um serviço é iniciado manualmente. Ele indica ao usuário como inserir informações de nome e a senha do usuário."
  syntax:
    content: public override string HelpText { get; }
    return:
      type: System.String
      description: "Texto que fornece uma descrição das etapas para definir o nome de usuário e senha para executar o serviço em uma determinada conta de Ajuda."
  overload: System.ServiceProcess.ServiceProcessInstaller.HelpText*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceProcessInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Grava informações do aplicativo de serviço no registro. Este método destina-se a ser usada por ferramentas de instalação, o qual chamar os métodos apropriados automaticamente."
  remarks: "Normalmente, você não chama os métodos em <xref:System.ServiceProcess.ServiceProcessInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceProcessInstaller> O utilitário de instalação automaticamente chama o método de instalação durante o processo de instalação. Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>em todos os componentes instalados anteriormente.</xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> Esse método passa a instalação para a classe base <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName>método.</xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName>       Normalmente, você não irá chamar os métodos em <xref:System.ServiceProcess.ServiceInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceInstaller> O utilitário de instalação chama automaticamente a instalação e <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName>métodos durante o processo de instalação.</xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) em todos os componentes instalados anteriormente a rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> Essas informações de estado passado para instalar como o `stateSaver` parâmetro, é atualizado continuamente como o <xref:System.ServiceProcess.ServiceProcessInstaller>instância e cada <xref:System.ServiceProcess.ServiceInstaller>instância é instalada pelo utilitário.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Normalmente, é desnecessário para seu código modificar essas informações de estado explicitamente.       Instalação passa para o método de chamada todas as exceções lançadas pelos métodos da classe base ou <xref:System.Configuration.Install.Installer.BeforeInstall>/ <xref:System.Configuration.Install.Installer.AfterInstall>manipuladores de eventos.</xref:System.Configuration.Install.Installer.AfterInstall> </xref:System.Configuration.Install.Installer.BeforeInstall>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "Um <xref:System.Collections.IDictionary>que contém as informações de contexto associadas à instalação.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceProcessInstaller.Install*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>stateSaver</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Password
  id: Password
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Password
  nameWithType: ServiceProcessInstaller.Password
  fullName: System.ServiceProcess.ServiceProcessInstaller.Password
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Obtém ou define a senha associada à conta de usuário sob a qual o aplicativo de serviço é executado."
  remarks: "A senha e <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>par permite que o serviço executado sob uma conta diferente da conta do sistema.</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Isso pode, por exemplo, que o serviço para iniciar automaticamente na reinicialização, quando nenhum usuário estiver conectado.       Senha e <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>são tratadas de forma segura em que eles nunca são serializados ou salvas para o estado de instalação (o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) ou em outro local com acesso público.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       Definindo o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>e senha permite que uma conta a ser associado automaticamente o serviço no momento da instalação.</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Se você deixar o o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>ou senha vazia e defina <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>para `User`, você será solicitado um nome de usuário válido e a senha durante a instalação.</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       Outra opção para executar um serviço sob uma conta separada é usar a conta do sistema do computador. Essa conta, que é diferente da conta de administrador, não requer nenhuma senha. Privilégios da conta de sistema podem exceder do usuário conectado no momento. Em execução sob a conta do sistema em vez de uma conta de usuário evita problemas resultantes do usuário sem uma permissão que requer que o serviço se <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>for qualquer valor diferente de `User`, a conta especificada (local ou serviço de rede ou sistema local) é usada, mesmo se o <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>e propriedades de senha são populadas.</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>"
  syntax:
    content: public string Password { get; set; }
    return:
      type: System.String
      description: "A senha associada à conta sob a qual o serviço deve ser executado. O padrão é uma cadeia de caracteres vazia (&quot;&quot;). A propriedade não é pública e nunca é serializada."
  overload: System.ServiceProcess.ServiceProcessInstaller.Password*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Retorna informações de aplicativo de serviço gravadas no registro, o procedimento de instalação. Este método destina-se a ser usada por ferramentas de instalação, que processam os métodos apropriados automaticamente."
  remarks: "Normalmente, você não chama os métodos em <xref:System.ServiceProcess.ServiceProcessInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceProcessInstaller> O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName>método durante o processo de instalação.</xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> Ele desfaz falhas, se necessário, ao chamar reversão no objeto que gerou a exceção.       Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Essas informações de estado passado para reversão como o `savedState` parâmetro, é atualizado continuamente como o <xref:System.ServiceProcess.ServiceProcessInstaller>instância e cada <xref:System.ServiceProcess.ServiceInstaller>instância é instalada pelo utilitário.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Normalmente, é desnecessário para seu código modificar essas informações de estado explicitamente.       Reversão passa para o método de chamada todas as exceções lançadas pelos métodos da classe base ou <xref:System.Configuration.Install.Installer.BeforeInstall>/ <xref:System.Configuration.Install.Installer.AfterInstall>manipuladores de eventos.</xref:System.Configuration.Install.Installer.AfterInstall> </xref:System.Configuration.Install.Installer.BeforeInstall>"
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Um <xref:System.Collections.IDictionary>que contém as informações de contexto associadas à instalação.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceProcessInstaller.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>savedState</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code> savedState </code> está corrompido ou não existente."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Username
  id: Username
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Username
  nameWithType: ServiceProcessInstaller.Username
  fullName: System.ServiceProcess.ServiceProcessInstaller.Username
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Obtém ou define a conta de usuário que executará o aplicativo de serviço."
  remarks: "O nome de usuário e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>par permite que o serviço executado sob uma conta diferente da conta do sistema.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Isso pode, por exemplo, que o serviço para iniciar automaticamente na reinicialização, quando nenhum usuário estiver conectado.       <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>e o nome de usuário são tratadas de forma segura em que eles nunca são serializados ou salvas para o estado de instalação (o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) ou em outro local com acesso público.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>       Definir o nome de usuário e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>permite que uma conta a ser associado automaticamente o serviço no momento da instalação.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Se você deixar o nome de usuário ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>vazio e defina <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>para `User`, você será solicitado um nome de usuário válido e a senha durante a instalação.</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>       Outra opção para executar um serviço sob uma conta separada é usar a conta do sistema do computador. Essa conta, que é diferente da conta de administrador, não requer nenhuma senha. Privilégios da conta de sistema podem exceder do usuário conectado no momento. Em execução sob a conta do sistema em vez de uma conta de usuário evita problemas resultantes do usuário sem uma permissão que requer que o serviço se <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>for qualquer valor diferente de `User`, a conta especificada (local ou serviço de rede ou sistema local) é usada, mesmo se o nome de usuário e <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>propriedades são preenchidas.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "A conta sob a qual o serviço deve ser executado. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceProcessInstaller.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: ServiceProcessInstaller()
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()
  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()
- uid: System.ServiceProcess.ServiceProcessInstaller.Account
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Account
  nameWithType: ServiceProcessInstaller.Account
  fullName: System.ServiceProcess.ServiceProcessInstaller.Account
- uid: System.ServiceProcess.ServiceAccount
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceAccount
  nameWithType: ServiceAccount
  fullName: System.ServiceProcess.ServiceAccount
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceProcessInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceProcessInstaller.Password
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Password
  nameWithType: ServiceProcessInstaller.Password
  fullName: System.ServiceProcess.ServiceProcessInstaller.Password
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceProcessInstaller.Username
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Username
  nameWithType: ServiceProcessInstaller.Username
  fullName: System.ServiceProcess.ServiceProcessInstaller.Username
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: ServiceProcessInstaller
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller
- uid: System.ServiceProcess.ServiceProcessInstaller.Account*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Account
  nameWithType: ServiceProcessInstaller.Account
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceProcessInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
- uid: System.ServiceProcess.ServiceProcessInstaller.Install*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceProcessInstaller.Install
- uid: System.ServiceProcess.ServiceProcessInstaller.Password*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Password
  nameWithType: ServiceProcessInstaller.Password
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceProcessInstaller.Rollback
- uid: System.ServiceProcess.ServiceProcessInstaller.Username*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Username
  nameWithType: ServiceProcessInstaller.Username
