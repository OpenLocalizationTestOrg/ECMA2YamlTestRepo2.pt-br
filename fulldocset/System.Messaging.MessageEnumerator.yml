### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageEnumerator
  id: MessageEnumerator
  children:
  - System.Messaging.MessageEnumerator.Close
  - System.Messaging.MessageEnumerator.Current
  - System.Messaging.MessageEnumerator.CursorHandle
  - System.Messaging.MessageEnumerator.Dispose
  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageEnumerator.MoveNext
  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.Reset
  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
  type: Class
  summary: "Fornece um cursor somente de avanço para enumerar por meio de mensagens em uma fila de mensagens."
  remarks: "Use MessageEnumerator para dinâmica interação com as mensagens em uma fila. Métodos disponíveis por meio de <xref:System.Messaging.MessageQueue>classe pode retornar qualquer um MessageEnumerator apontando para uma lista dinâmica de mensagens na fila, ou uma matriz que contém uma cópia em um dado momento - um instantâneo - da fila no momento em que o método especificado foi chamado.</xref:System.Messaging.MessageQueue>       Ao contrário de um instantâneo estático, um enumerador permite modificar a coleção. Usando um MessageEnumerator, você pode remover mensagens da fila e imediatamente, a alteração será refletida na fila.       Um enumerador não remove as mensagens da fila quando a consulta a fila. Retorna informações sobre a mensagem na posição atual do cursor, mas deixa a mensagem na fila.       Um MessageEnumerator é um cursor, inicializado para o início de uma lista dinâmica. A ordem da lista é igual à ordem das mensagens na fila, de acordo com a prioridade da mensagem. Você pode mover o cursor para a primeira mensagem na fila chamando <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Depois que o enumerador foi inicializado, você pode usar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>para percorrer as mensagens restantes para a frente.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Você pode especificar se deseja aguardar uma mensagem se torne disponível, passando um tempo limite para o <xref:System.Messaging.MessageEnumerator.MoveNext%2A>método.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Como o enumerador é dinâmico, uma mensagem que é anexada além a posição atual do cursor (por exemplo, devido à baixa prioridade), pode ser acessado pelo enumerador. Uma mensagem que é inserida antes da posição atual do cursor não pode ser acessada. Não é possível retroceder uma etapa com um MessageEnumerator. Um cursor permite a movimentação de somente avanço. O <xref:System.Messaging.MessageEnumerator.Reset%2A>método permite que você coloque o cursor no início da fila.</xref:System.Messaging.MessageEnumerator.Reset%2A>       Instâncias do MessageEnumerator para uma determinada fila trabalhar de forma independente. Você pode criar duas instâncias de MessageEnumerator que se aplicam à mesma fila. As alterações que faz um MessageEnumerator para as mensagens na fila serão refletidas imediatamente em um segundo enumerador se o segundo enumerador está posicionado antes da primeira. No entanto, se duas enumeradores têm a mesma posição e um deles remove a mensagem da posição, uma exceção será lançada se o enumerador outros tenta obter o valor da <xref:System.Messaging.MessageEnumerator.Current%2A>propriedade na mensagem excluída agora.</xref:System.Messaging.MessageEnumerator.Current%2A>      > [!NOTE] > Se você criar uma instância de <xref:System.Messaging.MessageQueue>com <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName>definido como `true`, nenhum outro aplicativo pode modificar as mensagens na sua enumerador enquanto você tem a conexão para a fila.</xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue>"
  example:
  - "The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/csharp/t-system.messaging.messa_2_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/cpp/t-system.messaging.messa_2_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_2_1.vb)]"
  syntax:
    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Close
  id: Close
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Libera os recursos associados com o enumerador."
  remarks: "O sistema operacional retém um identificador aberto para a fila durante o tempo de vida do cursor. Quando você terminar de trabalhar com o enumerador, chamada Fechar para liberar os recursos associados a alça."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Current
  id: Current
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém a atual <xref href=&quot;System.Messaging.Message&quot;> </xref> que este enumerador aponta para."
  remarks: "Quando o enumerador é criado, ele aponta para o início da fila em um local antes da primeira mensagem. Nesse caso, o atual não é válido e lançará uma exceção se ele for acessado. Você deve chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>para posicionar o cursor a primeira mensagem na fila.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message Current { get; }
    return:
      type: System.Messaging.Message
      description: "A mensagem atual."
  overload: System.Messaging.MessageEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Chamado atual antes da primeira chamada para <> </> *>. O cursor está localizado antes do primeiro elemento da enumeração de mensagem.       - ou - chamado atual após uma chamada para <> </> *> retornou <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (indicando que o cursor está localizado depois do último elemento da enumeração de mensagem.)"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A mensagem que o enumerador está apontando atualmente não existe. Ele pode ter sido excluído."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.CursorHandle
  id: CursorHandle
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o identificador de cursor enfileiramento nativo usado para procurar mensagens na fila."
  remarks: "Esta propriedade contém o identificador nativo para a enumeração. Quando você terminar de trabalhar com o enumerador, chame <xref:System.Messaging.MessageEnumerator.Close%2A>para liberar esse recurso.</xref:System.Messaging.MessageEnumerator.Close%2A>"
  syntax:
    content: public IntPtr CursorHandle { get; }
    return:
      type: System.IntPtr
      description: "O identificador nativo do cursor."
  overload: System.Messaging.MessageEnumerator.CursorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O identificador não existe."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref>."
  remarks: "Chamar Dispose permite que os recursos usados pelo <xref:System.Messaging.MessageEnumerator>para ser realocada para outros fins.</xref:System.Messaging.MessageEnumerator> Para obter mais informações sobre Dispose, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público <xref:System.Messaging.MessageEnumerator.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageEnumerator.Dispose%2A> `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Messaging.MessageEnumerator>referências.</xref:System.Messaging.MessageEnumerator> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Avança o enumerador para a próxima mensagem na fila, se houver um disponível no momento."
  remarks: "Essa sobrecarga retorna imediatamente se não há nenhuma mensagem na fila. Há outra sobrecarga que espera um especificado <xref:System.TimeSpan>para uma mensagem chegue.</xref:System.TimeSpan>       Se uma mensagem não está disponível no momento porque a fila está vazia ou porque você ultrapassou o último elemento da coleção, MoveNext retorna `false` para o método de chamada.       Após a criação, conceitualmente, um enumerador está posicionado antes da primeira mensagem da fila e a primeira chamada para MoveNext traz a primeira mensagem da fila para o modo de exibição."
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o enumerador foi avançado para a próxima mensagem; de com êxito <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o enumerador atingiu o final da fila."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Foi lançada uma exceção específica de enfileiramento de mensagens."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  id: MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Avança o enumerador para a próxima mensagem na fila. Se o enumerador está posicionado no final da fila, <xref:System.Messaging.MessageEnumerator.MoveNext*>aguardará até uma mensagem está disponível ou o tempo limite determinado.</xref:System.Messaging.MessageEnumerator.MoveNext*>"
  remarks: "Essa sobrecarga de espera se não houver nenhuma mensagem na fila ou se o cursor atingiu o final da fila. Se uma mensagem não está disponível no momento porque a fila está vazia ou porque você ultrapassou o último elemento da coleção, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>aguarda o tempo limite especificado.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se o cursor estiver no final da fila, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>só retorna `true` se a nova mensagem chega no intervalo de tempo especificado, tem prioridade inferior todas as mensagens atualmente na fila e é colocado no final da fila.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Uma sobrecarga sem nenhum parâmetro retorna imediatamente se nenhuma outra mensagem está na fila.       Após a criação, um enumerador é conceitualmente posicionado antes da primeira mensagem de enumeração e a primeira chamada para <xref:System.Messaging.MessageEnumerator.MoveNext%2A>coloca a primeira mensagem da enumeração em modo de exibição.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public bool MoveNext (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>ao aguardar uma mensagem esteja disponível se o enumerador está posicionado no final da fila.</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o enumerador foi avançado com êxito para a próxima mensagem; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o enumerador atingiu o fim da fila e uma mensagem não ficar disponível dentro do tempo especificado o <code> timeout </code> parâmetro."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o parâmetro de tempo limite é inválido. Ele pode representar um número negativo."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Foi lançada uma exceção específica de enfileiramento de mensagens.       - ou - o tempo limite expirou."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  id: RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual de uma fila transacional ou não transacional e retorna a mensagem para o aplicativo de chamada. Não há nenhum tempo limite especificado para uma mensagem chegar na fila."
  remarks: "RemoveCurrent remove e retorna a mensagem no local atual do cursor.       Se você estiver usando o diário da fila, removendo a mensagem faz com que uma cópia sejam mantidas na fila do diário, assim como o <xref:System.Messaging.MessageQueue>da classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando você remove a mensagem atual, o cursor é movido para a próxima mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar RemoveCurrent.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se você chamar essa sobrecarga em uma fila transacional, enfileiramento de mensagens cria uma única transação interna."
  syntax:
    content: public System.Messaging.Message RemoveCurrent ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual de uma fila transacional e retorna a mensagem para o aplicativo de chamada. Não há nenhum tempo limite especificado para uma mensagem chegar na fila."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e retorna a mensagem no local do cursor atual, usando o contexto de transação interna definido pelo `transaction` parâmetro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Se você estiver usando o diário da fila, removendo a mensagem faz com que uma cópia sejam mantidas na fila do diário, assim como o <xref:System.Messaging.MessageQueue>da classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Ao trabalhar com filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>a ser retornado para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação é confirmada.       Quando você remove a mensagem atual, o cursor é movido para a próxima mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "O <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> objeto que especifica a transação na qual a mensagem será removida."
    return:
      type: System.Messaging.Message
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual de uma fila e retorna a mensagem para o aplicativo de chamada. Não há nenhum tempo limite especificado para uma mensagem chegar na fila."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e retorna a mensagem o local atual do cursor, usando um contexto de transação definido pelo `transactionType` parâmetro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Especifique `Automatic` para o `transactionType` parâmetro se já houver um contexto de transação externa é anexado ao thread que você deseja usar para receber a mensagem. Especificar `Single` se você deseja receber a mensagem como uma única transação interna. Você pode especificar `None` se você quiser receber uma mensagem de uma fila transacional fora de um contexto de transação.       Se você estiver usando o diário da fila, removendo a mensagem faz com que uma cópia sejam mantidas na fila do diário, assim como o <xref:System.Messaging.MessageQueue>da classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Ao trabalhar com filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>a ser retornado para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação é confirmada.       Quando você remove a mensagem atual, o cursor é movido para a próxima mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Uma da <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> valores, que descreve o tipo de contexto de transação para associar com a mensagem."
    return:
      type: System.Messaging.Message
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "O <code> transactionType </code> parâmetro não é um do <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> membros."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  id: RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual da fila e retorna a mensagem para o aplicativo de chamada. Se houver uma mensagem a ser removido, o método retorna imediatamente. Caso contrário, o método aguarda o tempo limite especificado para uma nova mensagem chegue."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e retorna a mensagem no local atual do cursor.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se o cursor estiver no final da fila, essa sobrecarga do método aguarda uma mensagem está disponível ou o intervalo especificado pelo `timeout` parâmetro expirou.       Se você estiver usando o diário da fila, removendo a mensagem faz com que uma cópia sejam mantidas na fila do diário, assim como o <xref:System.Messaging.MessageQueue>da classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando você remove a mensagem atual, o cursor é movido para a próxima mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se você chamar essa sobrecarga em uma fila transacional, enfileiramento de mensagens cria uma única transação interna."
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo de tempo de espera por uma mensagem para chegar na fila."
    return:
      type: System.Messaging.Message
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o <code> timeout </code> parâmetro é inválido."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O tempo limite expirou."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual de uma fila transacional e retorna a mensagem para o aplicativo de chamada. Se houver uma mensagem a ser removido, o método retorna imediatamente. Caso contrário, o método aguarda o tempo limite especificado para uma nova mensagem chegue."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e retorna a mensagem no local atual do cursor.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se o cursor estiver no final da fila, essa sobrecarga do método aguarda uma mensagem está disponível ou o intervalo especificado pelo `timeout` parâmetro expirou.       Ao trabalhar com filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>a ser retornado para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação é confirmada.       Se você estiver usando o diário da fila, removendo a mensagem faz com que uma cópia sejam mantidas na fila do diário, assim como o <xref:System.Messaging.MessageQueue>da classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando você remove a mensagem atual, o cursor é movido para a próxima mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo de tempo de espera para a mensagem a ser removido."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "O <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> objeto que especifica o contexto de transação para a mensagem."
    return:
      type: System.Messaging.Message
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o <code> timeout </code> parâmetro é inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O tempo limite expirou."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual de uma fila e retorna a mensagem para o aplicativo de chamada. Se houver uma mensagem a ser removido, o método retorna imediatamente. Caso contrário, o método aguarda o tempo limite especificado para uma nova mensagem chegue."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e retorna a mensagem o local atual do cursor, usando um contexto de transação definido pelo `transactionType` parâmetro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se o cursor estiver no final da fila, essa sobrecarga do método aguarda uma mensagem está disponível ou o intervalo especificado pelo `timeout` parâmetro expirou.       Especifique `Automatic` para o `transactionType` parâmetro se já houver um contexto de transação externa é anexado ao thread que você deseja usar para receber a mensagem. Especificar `Single` se você deseja receber a mensagem como uma única transação interna. Você pode especificar `None` se você quiser receber uma mensagem de uma fila transacional fora de um contexto de transação.       Se você estiver usando o diário da fila, removendo a mensagem faz com que uma cópia sejam mantidas na fila do diário, assim como o <xref:System.Messaging.MessageQueue>da classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Ao trabalhar com filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>a ser retornado para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação é confirmada.       Quando você remove a mensagem atual, o cursor é movido para a próxima mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O intervalo de tempo de espera para a mensagem a ser removido."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Uma da <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> valores, que descreve o tipo de contexto de transação para associar com a mensagem."
    return:
      type: System.Messaging.Message
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o <code> timeout </code> parâmetro é inválido."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O tempo limite expirou."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "O <code> transactionType </code> parâmetro não é um do <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> membros."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Redefine o enumerador atual para que ele aponta para o início da fila."
  remarks: "Um enumerador só poderá mover avançando. Use esse método para recomeçar no início da fila.       Depois de chamar redefinir, o cursor aponta para a primeira mensagem. Você não precisa chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar Redefinir para mover o cursor para encaminhar a primeira mensagem na fila.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retorna um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a mensagem na posição atual do cursor."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Um <xref href=&quot;System.Messaging.Message&quot;> </xref> que faz referência a mensagem na posição atual do cursor."
  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.MessageEnumerator.Close
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
- uid: System.Messaging.MessageEnumerator.Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageEnumerator.CursorHandle
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageEnumerator.Dispose
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageEnumerator.MoveNext
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageEnumerator.Reset
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageEnumerator.Close*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageEnumerator.Close
- uid: System.Messaging.MessageEnumerator.Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
- uid: System.Messaging.MessageEnumerator.CursorHandle*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
- uid: System.Messaging.MessageEnumerator.Dispose*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageEnumerator.Dispose
- uid: System.Messaging.MessageEnumerator.MoveNext*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageEnumerator.MoveNext
- uid: System.Messaging.MessageEnumerator.RemoveCurrent*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent
  nameWithType: MessageEnumerator.RemoveCurrent
- uid: System.Messaging.MessageEnumerator.Reset*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageEnumerator.Reset
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
