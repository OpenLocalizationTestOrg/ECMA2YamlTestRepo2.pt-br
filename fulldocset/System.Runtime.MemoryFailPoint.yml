### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Verifica se há recursos suficientes de memória antes de executar uma operação. Essa classe não pode ser herdada."
  remarks: "> [!NOTE]> Essa classe é destinada para uso em desenvolvimento avançado.       Criar uma instância da classe MemoryFailPoint cria um portão de memória. Verifica um portão de memória para recursos suficientes antes de iniciar uma atividade que requer uma grande quantidade de memória. Falha na verificação resulta em um <xref:System.InsufficientMemoryException>exceção sendo lançada.</xref:System.InsufficientMemoryException> Essa exceção impede que uma operação seja iniciado e reduz a possibilidade de falha devido à falta de recursos. Isso permite que você diminuir o desempenho para evitar um <xref:System.OutOfMemoryException>qualquer corrupção de estado que pode resultar de tratamento inadequado de exceção arbitrários locais no seu código e exceção.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Este tipo implementa o <xref:System.IDisposable>interface.</xref:System.IDisposable> Quando você terminar de usar o tipo, descarte-direta ou indiretamente. Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A>método em um `try` / `catch` bloco.</xref:System.IDisposable.Dispose%2A> Para descartar indiretamente dele, use uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic). Para obter mais informações, consulte a seção &quot;Usando um objeto que implementa IDisposable&quot; o <xref:System.IDisposable>tópico da interface.</xref:System.IDisposable>       Lançando um <xref:System.InsufficientMemoryException>exceção, um aplicativo pode distinguir entre uma previsão que uma operação não poderá concluir e uma operação concluída parcialmente que pode ter corrompido o estado do aplicativo.</xref:System.InsufficientMemoryException> Isso permite que um aplicativo reduzir a frequência de uma política de escalação pessimista, que pode exigir a descarregar atual <xref:System.AppDomain>ou reciclar o processo.</xref:System.AppDomain>       MemoryFailPoint verifica para ver se há memória suficiente e espaço de endereço virtual consecutivas estão disponíveis na coleta de lixo todos os heaps e podem aumentar o tamanho do arquivo de permuta.  MemoryFailPoint não garante em relação à disponibilidade de longo prazo da memória durante o tempo de vida de porta, mas os chamadores devem sempre usar o <xref:System.Runtime.MemoryFailPoint.Dispose%2A>método para garantir que os recursos associados à MemoryFailPoint são liberados.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Para usar um portão de memória, você deve criar um objeto MemoryFailPoint e especifique o número de megabytes (MB) de memória que a próxima operação espera usar. Se há memória suficiente não estiver disponível, um <xref:System.InsufficientMemoryException>exceção será lançada.</xref:System.InsufficientMemoryException>       O parâmetro do construtor deve ser um inteiro positivo. Um valor negativo gera um <xref:System.ArgumentOutOfRangeException>exceção.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint opera em uma granularidade de 16 MB. Valores menores do que 16 MB são tratados como 16 MB e outros valores são tratados como o próximo múltiplo maior de 16 MB."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> classe, especificando a quantidade de memória necessária para a execução bem-sucedida."
  remarks: "A quantidade de memória usada pelo seu aplicativo para processar um item de trabalho pode ser determinada empiricamente.  Para estimar a quantidade de memória que seu aplicativo precisa para processar uma solicitação, considere o uso de <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>método para determinar a quantidade de memória disponível antes e depois de chamar o método que processa o item de trabalho.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Consulte o <xref:System.Runtime.MemoryFailPoint>classe para um exemplo de código que determina dinamicamente o valor para o `sizeInMegabytes` parâmetro.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "O tamanho de memória necessária, em megabytes. Isso deve ser um valor positivo."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O tamanho de memória especificado é negativo."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Há memória suficiente para iniciar a execução do código protegido pela porta."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "Chamar Dispose quando terminar de usar o <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> O método Dispose deixa a <xref:System.Runtime.MemoryFailPoint>em um estado inutilizável.</xref:System.Runtime.MemoryFailPoint> Depois de chamar <xref:System.Runtime.MemoryFailPoint>, você deve liberar todas as referências para o <xref:System.Runtime.MemoryFailPoint>para o coletor de lixo possa recuperar a memória que o <xref:System.Runtime.MemoryFailPoint>estava ocupando.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [implementar um método Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada Dispose antes de liberar sua última referência a <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.Runtime.MemoryFailPoint>do objeto `Finalize` método.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Garante que os recursos são liberados e outras operações de limpeza são realizadas quando o coletor de lixo recupera o <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> objeto."
  remarks: "O coletor de lixo chama o método Finalize quando o objeto atual está pronto para ser finalizado."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
