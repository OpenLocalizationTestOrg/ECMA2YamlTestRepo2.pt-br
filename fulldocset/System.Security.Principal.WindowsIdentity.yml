### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsIdentity
  id: WindowsIdentity
  children:
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  - System.Security.Principal.WindowsIdentity.AccessToken
  - System.Security.Principal.WindowsIdentity.AuthenticationType
  - System.Security.Principal.WindowsIdentity.Claims
  - System.Security.Principal.WindowsIdentity.Clone
  - System.Security.Principal.WindowsIdentity.DefaultIssuer
  - System.Security.Principal.WindowsIdentity.DeviceClaims
  - System.Security.Principal.WindowsIdentity.Dispose
  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetAnonymous
  - System.Security.Principal.WindowsIdentity.GetCurrent
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  - System.Security.Principal.WindowsIdentity.Groups
  - System.Security.Principal.WindowsIdentity.Impersonate
  - System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.ImpersonationLevel
  - System.Security.Principal.WindowsIdentity.IsAnonymous
  - System.Security.Principal.WindowsIdentity.IsAuthenticated
  - System.Security.Principal.WindowsIdentity.IsGuest
  - System.Security.Principal.WindowsIdentity.IsSystem
  - System.Security.Principal.WindowsIdentity.Name
  - System.Security.Principal.WindowsIdentity.Owner
  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Principal.WindowsIdentity.Token
  - System.Security.Principal.WindowsIdentity.User
  - System.Security.Principal.WindowsIdentity.UserClaims
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
  type: Class
  summary: "Representa um usuário do Windows."
  remarks: "Chamar o <xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>método para criar um objeto WindowsIdentity que representa o usuário atual.</xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>      > [!IMPORTANT] > Este tipo implementa o <xref:System.IDisposable>interface.</xref:System.IDisposable> Quando você terminar de usar o tipo, descarte-direta ou indiretamente. Para descartar o tipo diretamente, chame seu <xref:System.IDisposable.Dispose%2A>método em um `try` / `catch` bloco.</xref:System.IDisposable.Dispose%2A> Para descartar indiretamente dele, use uma construção de linguagem, como `using` (em c#) ou `Using` (no Visual Basic). Para obter mais informações, consulte a seção &quot;Usando um objeto que implementa IDisposable&quot; o <xref:System.IDisposable>tópico da interface.</xref:System.IDisposable>"
  example:
  - "The following example shows the use of members of WindowsIdentity class.  For an example showing how to obtain a Windows account token through a call to the unmanaged Win32 `LogonUser` function, and use that token to impersonate another user, see the <xref:System.Security.Principal.WindowsImpersonationContext> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/csharp/t-system.security.princi_5_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/cpp/t-system.security.princi_5_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/visualbasic/t-system.security.princi_5_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsIdentity : System.Security.Claims.ClaimsIdentity, IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsIdentity
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe para o usuário representado pelo token de conta especificado do Windows."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para uma instância de <xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>| `Negotiate`|   | <xref:System.Security.Principal.WindowsAccountType>| `Normal`|   | <xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>| `false`|      > [!NOTE] > Você pode recuperar o token representado por `userToken` ao chamar código não gerenciado, como a API do Win32 `LogonUser` função.</xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> </xref:System.Security.Principal.WindowsAccountType> </xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> Versão sempre `userToken` chamando a API do Win32 `CloseHandle` função. Para obter mais informações sobre como chamar código não gerenciado, consulte [consumindo funções de DLL não gerenciadas](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public WindowsIdentity (IntPtr userToken);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "O token de conta para o usuário em cujo nome o código está sendo executado."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>é 0.       - ou - <code>userToken</code> duplicados e inválido para representação."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - Win32 um erro."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  id: '#ctor(System.Security.Principal.WindowsIdentity)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(WindowsIdentity)
  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe usando especificado <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> objeto."
  syntax:
    content: protected WindowsIdentity (System.Security.Principal.WindowsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.WindowsIdentity
      description: "O objeto do qual criar a nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe para o usuário representado pelo especificado usuário nome Principal (UPN)."
  remarks: "Um UPN tem o formato *username*@*domainname*.com, em outras palavras, um endereço de email. O UPN identificado na `sUserPrincipalName` é usado para recuperar um token para o usuário por meio da API do Win32 `LsaLogonUser` função. Por sua vez, esse token é usado para identificar o usuário. Uma exceção pode ser retornada devido a dificuldades para fazer logon usando o UPN fornecido.      > [!NOTE] > Este construtor é destinado ao uso somente em computadores que ingressaram em domínios posteriores ou Windows Server 2003. Uma exceção é lançada para tipos de domínio anteriores. Essa restrição é devido ao fato de que este construtor usa o [KERB_S4U_LOGON estrutura](http://go.microsoft.com/fwlink/?LinkId=143533), que foi introduzido no Windows Server 2003."
  syntax:
    content: public WindowsIdentity (string sUserPrincipalName);
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "O UPN do usuário em cujo nome o código está sendo executado."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows retornou o código de status do Windows NT STATUS_ACCESS_DENIED."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Há memória suficiente disponível."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - o computador não está conectado a um domínio posterior ou o Windows 2003.       - ou - o computador não está executando o Windows 2003 ou posterior.       - ou - o usuário não é um membro do domínio que o computador está conectado ao."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  id: '#ctor(System.IntPtr,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe para o usuário representado pelo token de conta especificado do Windows e o tipo de autenticação especificado."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para uma instância de <xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Security.Principal.WindowsAccountType>| `Normal`|   | <xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>| `false`|       O valor de `type` parâmetro é usado para definir o <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>parâmetro.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> </xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> </xref:System.Security.Principal.WindowsAccountType> Se `type` é `null`, os conjuntos de sistema de segurança <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>para `Negotiate` no Windows Vista e versões posteriores do sistema operacional Windows e para `Kerberos` em versões anteriores do sistema operacional Windows.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> O sistema de segurança não usa esse valor; ele é somente para fins informativos.      > [!NOTE] > Você pode recuperar o token representado por `userToken` ao chamar código não gerenciado, como a API do Win32 `LogonUser` função. Versão sempre `userToken` chamando a API do Win32 `CloseHandle` função. Para obter mais informações sobre como chamar código não gerenciado, consulte [consumindo funções de DLL não gerenciadas](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the  <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token and the specified authentication type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/csharp/dc54fc11-729f-4337-b932-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/cpp/dc54fc11-729f-4337-b932-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/visualbasic/dc54fc11-729f-4337-b932-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "O token de conta para o usuário em cujo nome o código está sendo executado."
    - id: type
      type: System.String
      description: "(Informativo somente para uso.) O tipo de autenticação usado para identificar o usuário. Para obter mais informações, consulte comentários."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>é 0.       - ou - <code>userToken</code> duplicados e inválido para representação."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - Win32 um erro."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe para o usuário representado por informações em um <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> fluxo."
  remarks: >-
    > [!IMPORTANT]

    >  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).
  syntax:
    content: public WindowsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O objeto que contém as informações da conta do usuário."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Um objeto que indica as características de fluxo."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Um <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> não pode ser serializado em processos."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - Win32 um erro."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(String,String)
  nameWithType: WindowsIdentity.WindowsIdentity(String,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> de classe para o usuário representado pelo nome do usuário Principal (UPN) e o tipo de autenticação especificado."
  remarks: "O valor de `type` parâmetro é usado para definir o <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>parâmetro.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> Se `type` é `null`, os conjuntos de sistema de segurança <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>para `Negotiate` no Windows Vista e versões posteriores do sistema operacional Windows e para `Kerberos` em versões anteriores do sistema operacional Windows.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> O sistema de segurança não usa esse valor; ele é somente para fins informativos.       O UPN identificado na `sUserPrincipalName` é usado para recuperar um token para o usuário por meio da API do Win32 `LsaLogonUser` função. Por sua vez, esse token é usado para identificar o usuário. Uma exceção pode ser retornada devido a dificuldades para fazer logon usando o UPN fornecido.      > [!NOTE] > Este construtor é destinado ao uso somente em computadores que ingressaram em domínios posteriores ou Windows Server 2003. Uma exceção é lançada para tipos de domínio anteriores. Essa restrição é devido ao fato de que este construtor usa o [KERB_S4U_LOGON estrutura](http://go.microsoft.com/fwlink/?LinkId=143533), que foi introduzido no Windows Server 2003."
  syntax:
    content: public WindowsIdentity (string sUserPrincipalName, string type);
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "O UPN do usuário em cujo nome o código está sendo executado."
    - id: type
      type: System.String
      description: "(Informativo somente para uso.) O tipo de autenticação usado para identificar o usuário. Para obter mais informações, consulte comentários."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows retornou o código de status do Windows NT STATUS_ACCESS_DENIED."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Há memória suficiente disponível."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - o computador não está conectado a um domínio posterior ou o Windows 2003.       - ou - o computador não está executando o Windows 2003 ou posterior.       - ou - o usuário não é um membro do domínio que o computador está conectado ao."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String,WindowsAccountType)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe para o usuário representado pelo token de conta especificado do Windows, o tipo de autenticação especificado e o tipo de conta do Windows especificado."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para uma instância de <xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>| `false`|       O valor de `type` parâmetro é usado para definir o <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>parâmetro.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> </xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> Se `type` é `null`, os conjuntos de sistema de segurança <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>para `Negotiate` no Windows Vista e versões posteriores do sistema operacional Windows e para `Kerberos` em versões anteriores do sistema operacional Windows.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> O sistema de segurança não usa esse valor; ele é somente para fins informativos.      > [!NOTE] > Você pode recuperar o token representado por `userToken` ao chamar código não gerenciado, como a API do Win32 `LogonUser` função. Versão sempre `userToken` chamando a API do Win32 `CloseHandle` função. Para obter mais informações sobre como chamar código não gerenciado, consulte [consumindo funções de DLL não gerenciadas](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/csharp/6cec7b3f-80c5-417d-99d8-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/cpp/6cec7b3f-80c5-417d-99d8-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/visualbasic/6cec7b3f-80c5-417d-99d8-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "O token de conta para o usuário em cujo nome o código está sendo executado."
    - id: type
      type: System.String
      description: "(Informativo somente para uso.) O tipo de autenticação usado para identificar o usuário. Para obter mais informações, consulte comentários."
    - id: acctType
      type: System.Security.Principal.WindowsAccountType
      description: "Um dos valores de enumeração."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>é 0.       - ou - <code>userToken</code> duplicados e inválido para representação."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - Win32 um erro."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> classe para o usuário representado pelo token de conta especificado do Windows, o tipo de autenticação especificado, o tipo de conta do Windows especificado e o status de autenticação especificado."
  remarks: "O valor de `type` parâmetro é usado para definir o <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>parâmetro.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> Se `type` é `null`, os conjuntos de sistema de segurança <xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>para `Negotiate` no Windows Vista e versões posteriores do sistema operacional Windows e para `Kerberos` em versões anteriores do sistema operacional Windows.</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> O sistema de segurança não usa esse valor; ele é somente para fins informativos.       Você pode recuperar o token representado por `userToken` ao chamar código não gerenciado, como a API do Win32 `LogonUser` função. Versão sempre `userToken` chamando a API do Win32 `CloseHandle` função. Para obter mais informações sobre como chamar código não gerenciado, consulte [consumindo funções de DLL não gerenciadas](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/csharp/851e6c2b-b248-45b7-9cd4-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/cpp/851e6c2b-b248-45b7-9cd4-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/visualbasic/851e6c2b-b248-45b7-9cd4-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "O token de conta para o usuário em cujo nome o código está sendo executado."
    - id: type
      type: System.String
      description: "(Informativo somente para uso.) O tipo de autenticação usado para identificar o usuário. Para obter mais informações, consulte comentários."
    - id: acctType
      type: System.Security.Principal.WindowsAccountType
      description: "Um dos valores de enumeração."
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para indicar que o usuário está autenticado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>é 0.       - ou - <code>userToken</code> duplicados e inválido para representação."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - Win32 um erro."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  id: AccessToken
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém essa <xref href=&quot;Microsoft.Win32.SafeHandles.SafeAccessTokenHandle&quot;> </xref> para este <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> instância."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "Retorna um <xref href=&quot;Microsoft.Win32.SafeHandles.SafeAccessTokenHandle&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém o tipo de autenticação usado para identificar o usuário."
  remarks: "Essa propriedade é informativa; ele não é usado pelo sistema de segurança. No Windows Vista e versões posteriores do sistema operacional Windows, o valor padrão dessa propriedade é `Negotiate`, que pode escolher o melhor segurança suporte SSP (provedor) com base na política de segurança configurado pelo cliente. O valor de propriedade padrão para versões anteriores do sistema operacional Windows é `Kerberos`."
  syntax:
    content: public override sealed string AuthenticationType { get; }
    return:
      type: System.String
      description: "O tipo de autenticação usado para identificar o usuário."
  overload: System.Security.Principal.WindowsIdentity.AuthenticationType*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows retornou o código de status do Windows NT STATUS_ACCESS_DENIED."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Há memória suficiente disponível."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas.       - ou - o computador não está conectado a um domínio posterior ou o Windows 2003.       - ou - o computador não está executando o Windows 2003 ou posterior.       - ou - o usuário não é um membro do domínio que o computador está conectado ao."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Claims
  id: Claims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém todas as declarações para o usuário representado por essa identidade do Windows."
  syntax:
    content: public override System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Uma coleção de declarações para esse <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> objeto."
  overload: System.Security.Principal.WindowsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Clone
  id: Clone
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Cria um novo objeto que é uma cópia da instância atual."
  syntax:
    content: public override System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "Uma cópia da instância atual."
  overload: System.Security.Principal.WindowsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Identifica o nome do padrão <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> emissor."
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims
  id: DeviceClaims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém declarações que tem o <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsDeviceClaim&quot;> </xref> chave da propriedade."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Uma coleção de declarações que tem o <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsDeviceClaim&quot;> </xref> chave da propriedade."
  overload: System.Security.Principal.WindowsIdentity.DeviceClaims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>."
  remarks: "Chamar Dispose quando terminar de usar o <xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity> O método Dispose deixa a <xref:System.Security.Principal.WindowsIdentity>em um estado inutilizável.</xref:System.Security.Principal.WindowsIdentity> Depois de chamar Dispose, você deve liberar todas as referências para o <xref:System.Security.Principal.WindowsIdentity>para o coletor de lixo possa recuperar a memória que o <xref:System.Security.Principal.WindowsIdentity>estava ocupando.</xref:System.Security.Principal.WindowsIdentity> </xref:System.Security.Principal.WindowsIdentity> Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [implementar um método Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada Dispose antes de liberar sua última referência a <xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.Security.Principal.WindowsIdentity>do objeto `Finalize` método.</xref:System.Security.Principal.WindowsIdentity>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Principal.WindowsIdentity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público `Dispose()`método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Security.Principal.WindowsIdentity>referências.</xref:System.Security.Principal.WindowsIdentity> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Security.Principal.WindowsIdentity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  id: GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Retorna um <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> do objeto que você pode usar como um valor de sentinela em seu código para representar um usuário anônimo. O valor da propriedade não representa a identidade anônima interna usada pelo sistema operacional Windows."
  remarks: "Essa propriedade retorna vazio <xref:System.Security.Principal.WindowsIdentity>objeto que permite que você trate operações como anônimo.</xref:System.Security.Principal.WindowsIdentity> O valor da propriedade não corresponde a um usuário anônimo do Windows e não pode ser usado para representação. Além disso, observe que a identidade retornada por essa propriedade não é estática; cada chamada para GetAnonymous retorna uma identidade anônima diferente.       Você pode usar o <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>propriedade para detectar o valor de retorno de GetAnonymous.</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> No entanto, <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>detecta a identidade anônima do Windows e a identidade anônima retornada por este método.</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> Para usar a identidade do último, o valor de retorno de GetAnonymous em vez de depender do cache de <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>propriedade.</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>"
  example:
  - "The following code shows the use of the GetAnonymous method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents an anonymous Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/csharp/m-system.security.princi_5_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/cpp/m-system.security.princi_5_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/visualbasic/m-system.security.princi_5_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetAnonymous ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "Um objeto que representa um usuário anônimo."
  overload: System.Security.Principal.WindowsIdentity.GetAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  id: GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Retorna um <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> objeto que representa o usuário atual do Windows."
  remarks: ''
  example:
  - "The following code shows the use of the GetCurrent method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents the current Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/csharp/m-system.security.princi_7_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/cpp/m-system.security.princi_7_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/visualbasic/m-system.security.princi_7_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "Um objeto que representa o usuário atual."
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  id: GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Retorna um <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> objeto que representa a identidade do Windows para o thread ou processo, dependendo do valor da <code> ifImpersonating </code> parâmetro."
  remarks: "Se `ifImpersonating` é `true` e o thread não está representando, retornado <xref:System.Security.Principal.WindowsIdentity>objeto não tem valor.</xref:System.Security.Principal.WindowsIdentity>  Se `ifImpersonating` é `false` e o thread está representando, o <xref:System.Security.Principal.WindowsIdentity>para o thread é retornado.</xref:System.Security.Principal.WindowsIdentity>  Se `ifImpersonating` é `false` e o thread não está representando, o <xref:System.Security.Principal.WindowsIdentity>para o processo é retornado.</xref:System.Security.Principal.WindowsIdentity>"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent (bool ifImpersonating);
    parameters:
    - id: ifImpersonating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para retornar o <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> somente se o thread está representando atualmente; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para retornar o <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> do thread se ele está representando ou <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> do processo se o thread não está representando."
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "Um objeto que representa um usuário do Windows."
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  id: GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Retorna um <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> desejado de objeto que representa o usuário atual do Windows, usando o nível de token de acesso."
  remarks: "O `desiredAccess` parâmetro especifica uma máscara de acesso que identifica os tipos solicitados de acesso ao token de acesso. Esses tipos de acesso solicitado são comparados com a lista de controle de acesso discricionário (DACL) para determinar quais tipos de acesso concedidos ou negados do token."
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent (System.Security.Principal.TokenAccessLevels desiredAccess);
    parameters:
    - id: desiredAccess
      type: System.Security.Principal.TokenAccessLevels
      description: "Uma combinação bit a bit dos valores de enumeração."
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "Um objeto que representa o usuário atual."
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Groups
  id: Groups
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém os grupos do Windows atual usuário pertence."
  remarks: ''
  example:
  - "The following code example shows the use of the Groups property to display the identity references for the groups the current user belongs to.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/csharp/p-system.security.princi_8_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/visualbasic/p-system.security.princi_8_1.vb)]"
  syntax:
    content: public System.Security.Principal.IdentityReferenceCollection Groups { get; }
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "Um objeto que representa os grupos de usuário do Windows atual pertence."
  overload: System.Security.Principal.WindowsIdentity.Groups*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Impersonate
  id: Impersonate
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Impersonate()
  nameWithType: WindowsIdentity.Impersonate()
  fullName: System.Security.Principal.WindowsIdentity.Impersonate()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Representa o usuário representado pelo <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> objeto."
  remarks: "Em plataformas Windows NT, o usuário atual deve ter direitos suficientes para permitir a representação."
  example:
  - "The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \n  \n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/m-system.security.princi_2_1.cpp)]\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/m-system.security.princi_2_1.cs)]\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/m-system.security.princi_2_1.vb)]"
  syntax:
    content: public virtual System.Security.Principal.WindowsImpersonationContext Impersonate ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsImpersonationContext
      description: "Um objeto que representa o usuário do Windows antes da representação; Isso pode ser usado para reverter para o contexto do usuário original."
  overload: System.Security.Principal.WindowsIdentity.Impersonate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uma tentativa de executar uma representação de identidade anônima."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Ocorreu um erro do Win32."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  id: Impersonate(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Impersonate(IntPtr)
  nameWithType: WindowsIdentity.Impersonate(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Representa o usuário representado pelo token de usuário especificado."
  remarks: "Em plataformas Windows NT, o usuário atual deve ter direitos suficientes para permitir a representação.      > [!NOTE] > Chamando o método Impersonate com um `userToken` valor <xref:System.IntPtr>é equivalente a chamar o Win32 `RevertToSelf` função.</xref:System.IntPtr> Se outro usuário no momento está sendo representado, controle voltará para o usuário.       Para obter mais informações sobre as chamadas para código não gerenciado, consulte [consumindo funções de DLL não gerenciadas](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \n  \n [!code-vb[WindowsIdentity Impersonation2#1](~/add/codesnippet/visualbasic/m-system.security.princi_3_1.vb)]\n [!code-cs[WindowsIdentity Impersonation2#1](~/add/codesnippet/csharp/m-system.security.princi_3_1.cs)]"
  syntax:
    content: public static System.Security.Principal.WindowsImpersonationContext Impersonate (IntPtr userToken);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "O identificador de um token de conta do Windows. Geralmente, esse token é recuperado por meio de uma chamada para código não gerenciado, como uma chamada à API do Win32 <xref uid=&quot;langword_csharp_LogonUser&quot; name=&quot;LogonUser&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Security.Principal.WindowsImpersonationContext
      description: "Um objeto que representa o usuário do Windows antes da representação; Esse objeto pode ser usado para reverter para o contexto do usuário original."
  overload: System.Security.Principal.WindowsIdentity.Impersonate*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows retornou o código de status do Windows NT STATUS_ACCESS_DENIED."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Há memória suficiente disponível."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem as permissões corretas."
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém o nível de representação do usuário."
  remarks: "Descreve o nível de representação a ser usado para se conectar ao WMI."
  example:
  - "The following code example shows the use of the ImpersonationLevel property to display the impersonation level for the current user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/csharp/p-system.security.princi_3_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/visualbasic/p-system.security.princi_3_1.vb)]"
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Um dos valores de enumeração que especifica o nível de representação."
  overload: System.Security.Principal.WindowsIdentity.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  id: IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém um valor que indica se a conta de usuário é identificada como uma conta anônima pelo sistema."
  remarks: "A propriedade IsAnonymous detecta a identidade anônima do Windows e a identidade anônima é retornada pelo <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>método.</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>       Contas anônimas são geralmente somente encontradas somente de dentro de aplicativos ASP.NET quando o acesso anônimo é permitido por serviços de informações da Internet (IIS)."
  example:
  - "The following code shows the use of the IsAnonymous property to detect whether the user account is identified as an anonymous account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/csharp/p-system.security.princi_4_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/cpp/p-system.security.princi_4_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/visualbasic/p-system.security.princi_4_1.vb)]"
  syntax:
    content: public virtual bool IsAnonymous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conta de usuário for uma conta anônima; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.IsAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém um valor que indica se o usuário foi autenticado pelo Windows."
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o usuário foi autenticado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  id: IsGuest
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém um valor que indica se a conta de usuário é identificada como um <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref> conta pelo sistema."
  remarks: ''
  example:
  - "The following code shows the use of the IsGuest property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/csharp/p-system.security.princi_11_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/cpp/p-system.security.princi_11_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/visualbasic/p-system.security.princi_11_1.vb)]"
  syntax:
    content: public virtual bool IsGuest { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conta de usuário é um <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref> conta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.IsGuest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  id: IsSystem
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém um valor que indica se a conta de usuário é identificada como um <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref> conta pelo sistema."
  remarks: ''
  example:
  - "The following code shows the use of the IsSystem property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/csharp/p-system.security.princi_9_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/cpp/p-system.security.princi_9_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/visualbasic/p-system.security.princi_9_1.vb)]"
  syntax:
    content: public virtual bool IsSystem { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conta de usuário é um <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref> conta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.IsSystem*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Name
  id: Name
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém o nome de logon do Windows do usuário."
  remarks: "O nome de logon está no formato domínio ome de usuário."
  example:
  - "The following code shows the use of the Name property to get the user's Windows logon name. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/csharp/p-system.security.princi_2_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/cpp/p-system.security.princi_2_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/visualbasic/p-system.security.princi_2_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "O nome de logon do Windows do usuário em cujo nome o código está sendo executado."
  overload: System.Security.Principal.WindowsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Owner
  id: Owner
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém o identificador de segurança (SID) do proprietário do token."
  remarks: "O SID identifica exclusivamente um usuário ou grupo em todas as implementações do Windows NT.  O SID retornado identifica o proprietário padrão do SID que será aplicado a objetos criados recentemente."
  example:
  - "The following code example shows the use of the Owner property to display the security identifier for the token owner.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/csharp/p-system.security.princi_5_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/visualbasic/p-system.security.princi_5_1.vb)]"
  syntax:
    content: public System.Security.Principal.SecurityIdentifier Owner { get; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "Um objeto do proprietário do token."
  overload: System.Security.Principal.WindowsIdentity.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: RunImpersonated(SafeAccessTokenHandle,Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Executa a ação especificada como a identidade do Windows representada. Em vez de usar uma chamada de método representado e executar sua função <xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref>, você pode usar RunImpersonated e forneça sua função diretamente como um parâmetro."
  remarks: ''
  example:
  - "The following example demonstrates the use of the <xref:System.Security.Principal.WindowsIdentity> class to impersonate a user.  \n  \n> [!WARNING]\n>  This sample asks the user to enter a password on the console screen. The password will be visible on the screen, because the console window does not support masked input natively.  \n  \n```c#  \n// The following example demonstrates the use of the WindowsIdentity class to impersonate a user.   \n// IMPORTANT NOTE:   \n// This sample asks the user to enter a password on the console screen.   \n// The password will be visible on the screen, because the console window   \n// does not support masked input natively.  \n  \nusing System;  \nusing System.Runtime.InteropServices;  \nusing System.Security;  \nusing System.Security.Principal;  \nusing Microsoft.Win32.SafeHandles;  \n  \npublic class ImpersonationDemo  \n{  \n    [DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]  \n    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,  \n        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);  \n  \n    public static void Main()  \n    {  \n        // Get the user token for the specified user, domain, and password using the   \n        // unmanaged LogonUser method.   \n        // The local machine name can be used for the domain name to impersonate a user on this machine.  \n        Console.Write(\"Enter the name of the domain on which to log on: \");  \n        string domainName = Console.ReadLine();  \n  \n        Console.Write(\"Enter the login of a user on {0} that you wish to impersonate: \", domainName);  \n        string userName = Console.ReadLine();  \n  \n        Console.Write(\"Enter the password for {0}: \", userName);  \n  \n        const int LOGON32_PROVIDER_DEFAULT = 0;  \n        //This parameter causes LogonUser to create a primary token.   \n        const int LOGON32_LOGON_INTERACTIVE = 2;  \n  \n        // Call LogonUser to obtain a handle to an access token.   \n        SafeAccessTokenHandle safeAccessTokenHandle;  \n        bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),  \n            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,  \n            out safeAccessTokenHandle);  \n  \n        if (false == returnValue)  \n        {  \n            int ret = Marshal.GetLastWin32Error();  \n            Console.WriteLine(\"LogonUser failed with error code : {0}\", ret);  \n            throw new System.ComponentModel.Win32Exception(ret);  \n        }  \n  \n        Console.WriteLine(\"Did LogonUser Succeed? \" + (returnValue ? \"Yes\" : \"No\"));  \n        // Check the identity.  \n        Console.WriteLine(\"Before impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n  \n        // Note: if you want to run as unimpersonated, pass  \n        //       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'  \n        WindowsIdentity.RunImpersonated(  \n            safeAccessTokenHandle,  \n            // User action  \n            () =>  \n            {  \n                // Check the identity.  \n                Console.WriteLine(\"During impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n            }  \n            );  \n  \n        // Check the identity again.  \n        Console.WriteLine(\"After impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n    }  \n}  \n  \n```"
  syntax:
    content: public static void RunImpersonated (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Action action);
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "SafeAccessTokenHandle da identidade do Windows representada."
    - id: action
      type: System.Action
      description: "A Action para executar."
  overload: System.Security.Principal.WindowsIdentity.RunImpersonated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  syntax:
    content: public static T RunImpersonated<T> (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func);
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "A ser adicionado."
    - id: func
      type: System.Func{T}
      description: "A ser adicionado."
    return:
      type: T
      description: "A ser adicionado."
  overload: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface e é chamado novamente pelo evento desserialização quando desserialização for concluída."
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "A origem do evento de desserialização."
  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Conjuntos de <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto com as informações de contexto lógico necessários para recriar uma instância deste contexto de execução."
  remarks: "Esse método define um <xref:System.Runtime.Serialization.SerializationInfo>com a lógica de chamadas informações de contexto.</xref:System.Runtime.Serialization.SerializationInfo> Durante a desserialização, o objeto de contexto de execução é reconstituído do <xref:System.Runtime.Serialization.SerializationInfo>transmitido no fluxo.</xref:System.Runtime.Serialization.SerializationInfo>       Para obter mais informações, consulte <xref:System.Runtime.Serialization.SerializationInfo>.</xref:System.Runtime.Serialization.SerializationInfo>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Um objeto que contém as informações necessárias para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Um objeto que contém a origem e destino do fluxo serializado associado a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Token
  id: Token
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Token
  nameWithType: WindowsIdentity.Token
  fullName: System.Security.Principal.WindowsIdentity.Token
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém o token de conta do Windows para o usuário."
  remarks: "O não explicitamente versão o token de conta que é retornado pela propriedade de Token. O token é liberado o <xref:System.Security.Principal.WindowsIdentity.Dispose%2A>método, o que pode ser chamado no código.</xref:System.Security.Principal.WindowsIdentity.Dispose%2A> <xref:System.Security.Principal.WindowsIdentity.Dispose%2A>é chamado automaticamente pelo coletor de lixo.</xref:System.Security.Principal.WindowsIdentity.Dispose%2A>      > [!NOTE] > O token de conta que é retornado pela propriedade de Token é uma duplicata do token do Windows que é usado para criar o <xref:System.Security.Principal.WindowsIdentity>do objeto e é liberada automaticamente pelo .NET Framework.</xref:System.Security.Principal.WindowsIdentity> Isso é diferente do token de conta (o `userToken` parâmetro para o construtor), que é usada para criar o <xref:System.Security.Principal.WindowsIdentity>objeto.</xref:System.Security.Principal.WindowsIdentity> `userToken`é um token de conta do Windows que é criado por uma chamada para `LogonUser` e devem ser fechados para evitar um vazamento de memória."
  example:
  - "The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsSystem%2A> property to get the Windows account token for the user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/csharp/p-system.security.princi_0_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/cpp/p-system.security.princi_0_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/visualbasic/p-system.security.princi_0_1.vb)]"
  syntax:
    content: public virtual IntPtr Token { get; }
    return:
      type: System.IntPtr
      description: "O identificador do token de acesso associado ao thread de execução atual."
  overload: System.Security.Principal.WindowsIdentity.Token*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.User
  id: User
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém o identificador de segurança (SID) do usuário."
  remarks: "O SID identifica exclusivamente um usuário ou grupo em todas as implementações do Windows NT.      > [!NOTE] > O <xref:System.Security.Principal.WindowsIdentity>objeto retornado pelo <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>método não é o mesmo que o usuário do Windows anônimo.</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> </xref:System.Security.Principal.WindowsIdentity> Esta propriedade obtém `null` para um usuário anônimo representado pelo <xref:System.Security.Principal.WindowsIdentity>objeto retornado pelo <xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>método; não obtém o SID que representa um usuário anônimo do Windows.</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> </xref:System.Security.Principal.WindowsIdentity>"
  syntax:
    content: public System.Security.Principal.SecurityIdentifier User { get; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "Um objeto do usuário."
  overload: System.Security.Principal.WindowsIdentity.User*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.UserClaims
  id: UserClaims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
  fullName: System.Security.Principal.WindowsIdentity.UserClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "Obtém declarações que tem o <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsUserClaim&quot;> </xref> chave da propriedade."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Uma coleção de declarações que tem o <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsUserClaim&quot;> </xref> chave da propriedade."
  overload: System.Security.Principal.WindowsIdentity.UserClaims*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: System.Security.Claims.ClaimsIdentity
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(WindowsIdentity)
  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(String,String)
  nameWithType: WindowsIdentity.WindowsIdentity(String,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String,WindowsAccountType)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
- uid: System.Security.Principal.WindowsAccountType
  parent: System.Security.Principal
  isExternal: false
  name: WindowsAccountType
  nameWithType: WindowsAccountType
  fullName: System.Security.Principal.WindowsAccountType
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
- uid: System.Security.Principal.WindowsIdentity.Claims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsIdentity.Clone
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims
- uid: System.Security.Principal.WindowsIdentity.Dispose
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)
- uid: System.Security.Principal.TokenAccessLevels
  parent: System.Security.Principal
  isExternal: false
  name: TokenAccessLevels
  nameWithType: TokenAccessLevels
  fullName: System.Security.Principal.TokenAccessLevels
- uid: System.Security.Principal.WindowsIdentity.Groups
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
- uid: System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  nameWithType: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.Security.Principal.WindowsIdentity.Impersonate
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate()
  nameWithType: WindowsIdentity.Impersonate()
  fullName: System.Security.Principal.WindowsIdentity.Impersonate()
- uid: System.Security.Principal.WindowsImpersonationContext
  parent: System.Security.Principal
  isExternal: false
  name: WindowsImpersonationContext
  nameWithType: WindowsImpersonationContext
  fullName: System.Security.Principal.WindowsImpersonationContext
- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate(IntPtr)
  nameWithType: WindowsIdentity.Impersonate(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
- uid: System.Security.Principal.WindowsIdentity.Name
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
- uid: System.Security.Principal.WindowsIdentity.Owner
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated(SafeAccessTokenHandle,Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{T}
  parent: System
  isExternal: true
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Principal.WindowsIdentity.Token
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Token
  nameWithType: WindowsIdentity.Token
  fullName: System.Security.Principal.WindowsIdentity.Token
- uid: System.Security.Principal.WindowsIdentity.User
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
- uid: System.Security.Principal.WindowsIdentity.UserClaims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
  fullName: System.Security.Principal.WindowsIdentity.UserClaims
- uid: System.Security.Principal.WindowsIdentity.#ctor*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity.AccessToken*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
- uid: System.Security.Principal.WindowsIdentity.Claims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Claims
  nameWithType: WindowsIdentity.Claims
- uid: System.Security.Principal.WindowsIdentity.Clone*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Clone
  nameWithType: WindowsIdentity.Clone
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
- uid: System.Security.Principal.WindowsIdentity.Dispose*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose
  nameWithType: WindowsIdentity.Dispose
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetAnonymous
  nameWithType: WindowsIdentity.GetAnonymous
- uid: System.Security.Principal.WindowsIdentity.GetCurrent*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent
  nameWithType: WindowsIdentity.GetCurrent
- uid: System.Security.Principal.WindowsIdentity.Groups*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Groups
  nameWithType: WindowsIdentity.Groups
- uid: System.Security.Principal.WindowsIdentity.Impersonate*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate
  nameWithType: WindowsIdentity.Impersonate
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
- uid: System.Security.Principal.WindowsIdentity.IsGuest*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
- uid: System.Security.Principal.WindowsIdentity.IsSystem*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
- uid: System.Security.Principal.WindowsIdentity.Name*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Name
  nameWithType: WindowsIdentity.Name
- uid: System.Security.Principal.WindowsIdentity.Owner*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Owner
  nameWithType: WindowsIdentity.Owner
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated
  nameWithType: WindowsIdentity.RunImpersonated
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated<T>
  nameWithType: WindowsIdentity.RunImpersonated<T>
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Security.Principal.WindowsIdentity.Token*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Token
  nameWithType: WindowsIdentity.Token
- uid: System.Security.Principal.WindowsIdentity.User*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: User
  nameWithType: WindowsIdentity.User
- uid: System.Security.Principal.WindowsIdentity.UserClaims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
