### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "Declara os métodos que fornecem um serviço de objeto ou reciclagem um objeto de serviço para um [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] serviço."
  remarks: "Implementa a interface IInstanceProvider para controlar a criação e reciclagem de objetos de serviço quando uma for solicitada ou disposto por uma <xref:System.ServiceModel.InstanceContext>objeto.</xref:System.ServiceModel.InstanceContext>       Depois que a interface IInstanceProvider é implementada, você deve atribuir o objeto de provedor de instância personalizada do <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>propriedade usando um comportamento de ponto de extremidade (um <xref:System.ServiceModel.Description.IEndpointBehavior>objeto) ou um comportamento de contrato (um <xref:System.ServiceModel.Description.IContractBehavior>objeto).</xref:System.ServiceModel.Description.IContractBehavior> </xref:System.ServiceModel.Description.IEndpointBehavior> </xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>       Se o mecanismo de inserção é um comportamento de ponto de extremidade você também pode implementar um <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>objeto que pode inserir o comportamento personalizado usando um arquivo de configuração.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement> Se o mecanismo de inserção é um comportamento de contrato, você pode inserir o comportamento programaticamente antes da abertura do host do serviço ou você pode implementar um atributo personalizado. (Para obter um exemplo da abordagem de comportamento de contrato, consulte a seção de exemplo).       IInstanceProvider tem dois métodos <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>e <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Normalmente, esses métodos são implementados para criar objetos de serviço usando um construtor não-padrão ou para inicializar ou descartar algum estado relacionado ao tempo de vida do objeto. O pool de objetos de serviço é um exemplo de funcionalidade IInstanceProvider personalizada.       Normalmente, o <xref:System.ServiceModel.InstanceContext>invoca o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>quando o <xref:System.ServiceModel.InstanceContext>é criado pela primeira vez e chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>método quando o <xref:System.ServiceModel.InstanceContext>está fechado.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContext>       Há duas maneiras de fazer com que um <xref:System.ServiceModel.InstanceContext>objeto para um objeto de serviço antes de liberar o <xref:System.ServiceModel.InstanceContext>está fechado.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext> O primeiro método é definir o <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>ou <xref:System.ServiceModel.ReleaseInstanceMode> <xref:System.ServiceModel.ReleaseInstanceMode>.</xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> O segundo método é chamar o <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>método.</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> Se isso for feito, o <xref:System.ServiceModel.InstanceContext>chama o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>método no provedor de instância do dispatcher.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> Se uma nova mensagem chega depois que a instância foi liberada, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] cria uma nova instância usando o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>método.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>      > [!NOTE] > Se o <xref:System.ServiceModel.InstanceContextMode>do serviço é <xref:System.ServiceModel.InstanceContextMode>, o sistema não chama os <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>métodos, mesmo quando o usuário não forneceu um objeto de serviço conhecido, a menos que o usuário diretamente chama <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>e, em seguida, chama <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> </xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> ou</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode>"
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Retorna um objeto de serviço fornecido especificado <xref:System.ServiceModel.InstanceContext>objeto.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Use o método GetInstance para controlar o serviço exato do objeto que um [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] serviço recebe quando ele tenta criar um novo."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Atual <xref:System.ServiceModel.InstanceContext>objeto.</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Object
      description: "Um objeto de serviço definido pelo usuário."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Retorna um objeto de serviço fornecido especificado <xref:System.ServiceModel.InstanceContext>objeto.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Use o método GetInstance para controlar o serviço exato do objeto que um [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] serviço recebe quando ele tenta criar um novo."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Atual <xref:System.ServiceModel.InstanceContext>objeto.</xref:System.ServiceModel.InstanceContext>"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "A mensagem que disparou a criação de um objeto de serviço."
    return:
      type: System.Object
      description: "O objeto de serviço."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chamado quando um <xref:System.ServiceModel.InstanceContext>objeto Recicla um objeto de serviço.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Use o método ReleaseInstance para executar algumas descarte de recursos personalizadas ou outra personalização de reciclagem quando um serviço se reciclar um objeto de serviço."
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Contexto da instância do serviço."
    - id: instance
      type: System.Object
      description: "O objeto de serviço a ser reciclado."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
