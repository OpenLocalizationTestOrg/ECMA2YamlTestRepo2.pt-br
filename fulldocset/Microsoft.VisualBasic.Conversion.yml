### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Conversion
  id: Conversion
  children:
  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  - Microsoft.VisualBasic.Conversion.ErrorToString
  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Fix(System.Double)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  - Microsoft.VisualBasic.Conversion.Fix(System.Object)
  - Microsoft.VisualBasic.Conversion.Fix(System.Single)
  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  - Microsoft.VisualBasic.Conversion.Hex(System.Object)
  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Int(System.Double)
  - Microsoft.VisualBasic.Conversion.Int(System.Int16)
  - Microsoft.VisualBasic.Conversion.Int(System.Int32)
  - Microsoft.VisualBasic.Conversion.Int(System.Int64)
  - Microsoft.VisualBasic.Conversion.Int(System.Object)
  - Microsoft.VisualBasic.Conversion.Int(System.Single)
  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  - Microsoft.VisualBasic.Conversion.Oct(System.Object)
  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Str(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.Char)
  - Microsoft.VisualBasic.Conversion.Val(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.String)
  langs:
  - csharp
  name: Conversion
  nameWithType: Conversion
  fullName: Microsoft.VisualBasic.Conversion
  type: Class
  summary: "O <xref uid=&quot;langword_csharp_Conversion&quot; name=&quot;Conversion&quot; href=&quot;&quot;> </xref> módulo contém os procedimentos usados para executar várias operações de conversão."
  remarks: "Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que convertem números decimais em outras bases, números em cadeias de caracteres, cadeias de caracteres em números e dados de um tipo para outro."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Conversion
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  id: CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Converte um objeto para o tipo especificado."
  remarks: "O `CTypeDynamic` método converte o objeto passado como o `Expression` parâmetro para o tipo especificado pelo `TargetType` parâmetro. Se o objeto for um objeto dinâmico, o `CTypeDynamic` método se aplica a conversões dinâmicos disponíveis.       O `CTypeDynamic` método se aplica a conversões dinâmicos de acordo com a semântica de conversão definida pelo objeto em si. Se um objeto dinâmico herda de <xref:System.Dynamic.DynamicObject>, o `CTypeDynamic` método primeiro tenta executar a conversão usando uma conversão definida pelo usuário, estática.</xref:System.Dynamic.DynamicObject> Se a conversão definida pelo usuário, estática falhar, o `CTypeDynamic` método tenta executar a conversão usando conversões dinâmicos. Se um objeto dinâmico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, o `CTypeDynamic` método dá prioridade ao conversões dinâmicos sobre conversões definidas pelo usuário, estáticos.</xref:System.Dynamic.IDynamicMetaObjectProvider>"
  example:
  - "The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \n  \n```vb#  \nImports System.Dynamic  \n  \nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \n        Console.WriteLine(sampleString)  \n    End Sub  \nEnd Module  \n  \nClass SampleDynamicObject  \n    Inherits DynamicObject  \n  \n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n  \n        If binder.Type = GetType(String) Then  \n            result = \"Sample String\"  \n            Return True  \n        End If  \n  \n        Return False  \n    End Function  \nEnd Class  \n```"
  syntax:
    content: public static object CTypeDynamic (object Expression, Type TargetType);
    parameters:
    - id: Expression
      type: System.Object
      description: "O objeto a ser convertido."
    - id: TargetType
      type: System.Type
      description: "O tipo para o qual converter o objeto."
    return:
      type: System.Object
      description: "Um objeto cujo tipo em tempo de execução é o destino solicitado."
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  id: CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: public static TargetType CTypeDynamic<TargetType> (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "A ser adicionado."
    return:
      type: TargetType
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  id: ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a mensagem de erro que corresponde a um determinado número de erro."
  remarks: "O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro em tempo de execução mais recente. O valor de retorno a `ErrorToString` função corresponde ao `Description` propriedade o `Err` objeto. Se nenhum erro de tempo de execução ocorreu, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero (&quot;&quot;).       No Visual Basic versão 6.0 e versões anteriores, essa funcionalidade foi fornecida pelo `Error` função."
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._1_1.vb)]"
  syntax:
    content: public static string ErrorToString ();
    parameters: []
    return:
      type: System.String
      description: "A mensagem de erro que corresponde ao erro de tempo de execução mais recente."
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>está fora do intervalo."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  id: ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a mensagem de erro que corresponde a um determinado número de erro."
  remarks: "O `ErrorToString` função examina as configurações de propriedade do `Err` objeto para identificar o erro em tempo de execução mais recente. O valor de retorno a `ErrorToString` função corresponde ao `Description` propriedade o `Err` objeto. Se `ErrorNumber` é um número de erro válido, mas não está definido, `ErrorToString` retorna a cadeia de caracteres `&quot;Application-defined or object-defined error.&quot;` se `ErrorNumber` não é válido, ocorrerá um erro. Se `ErrorNumber` for omitido, a mensagem correspondente o mais recente será retornado o erro de tempo de execução. Se nenhum erro de tempo de execução ou `ErrorNumber` é 0, `ErrorToString` retorna uma cadeia de caracteres de comprimento zero (&quot;&quot;).       No Visual Basic versão 6.0 e versões anteriores, essa funcionalidade foi fornecida pelo `Error` função."
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._191_1.vb)]"
  syntax:
    content: public static string ErrorToString (int ErrorNumber);
    parameters:
    - id: ErrorNumber
      type: System.Int32
      description: "Opcional. Qualquer número de erro válido."
    return:
      type: System.String
      description: "A mensagem de erro que corresponde a um determinado número de erro."
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>está fora do intervalo."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  id: Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Fix (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Decimal
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  id: Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Fix (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Double
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  id: Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Fix (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Int16
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  id: Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Fix (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Int32
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  id: Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Fix (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Int64
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  id: Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Fix (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Object
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  id: Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Fix (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Single
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  id: Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._208_1.vb)]"
  syntax:
    content: public static string Hex (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  id: Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._128_1.vb)]"
  syntax:
    content: public static string Hex (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  id: Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._102_1.vb)]"
  syntax:
    content: public static string Hex (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  id: Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._75_1.vb)]"
  syntax:
    content: public static string Hex (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  id: Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public static string Hex (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  id: Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._15_1.vb)]"
  syntax:
    content: public static string Hex (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  id: Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._118_1.vb)]"
  syntax:
    content: public static string Hex (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  id: Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._182_1.vb)]"
  syntax:
    content: public static string Hex (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  id: Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | If `Number` is| Hex retornará |   | Vazio | Zero (0) |   | Qualquer valor numérico | Até dezesseis caracteres hexadecimais |       Você pode representar números hexadecimais diretamente precedendo números no intervalo adequado com `&H`. Por exemplo, `&H10` representa decimal 16 em notação hexadecimal."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._119_1.vb)]"
  syntax:
    content: public static string Hex (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor hexadecimal de um número."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  id: Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Int (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Decimal
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  id: Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Int (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Double
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  id: Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Int (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Int16
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  id: Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Int (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Int32
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  id: Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Int (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Int64
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  id: Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Int (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Object
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  id: Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a parte inteira de um número."
  remarks: "Tanto o `Int` e `Fix` funções removem a parte fracionária `Number` e retornar o valor inteiro resultante.       A diferença entre `Int` e `Fix` funciona é que, se `Number` for negativo, `Int` retorna o primeiro inteiro negativo menor ou igual a `Number`, enquanto `Fix` retorna o primeiro inteiro negativo maior ou igual a `Number`. Por exemplo, `Int` converte-8,4 para -9, e `Fix` converte-8,4 para -8.       `Fix(number)`é equivalente a`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Int (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "Obrigatório. Um número de tipo <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> ou qualquer expressão numérica válida. Se `Number` contém <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> é retornado."
    return:
      type: System.Single
      description: "Retorna a parte inteira de um número."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Número não for especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  id: Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._109_1.vb)]"
  syntax:
    content: public static string Oct (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  id: Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._151_1.vb)]"
  syntax:
    content: public static string Oct (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  id: Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._36_1.vb)]"
  syntax:
    content: public static string Oct (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  id: Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._217_1.vb)]"
  syntax:
    content: public static string Oct (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  id: Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._233_1.vb)]"
  syntax:
    content: public static string Oct (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  id: Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._16_1.vb)]"
  syntax:
    content: public static string Oct (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  id: Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public static string Oct (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  id: Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._240_1.vb)]"
  syntax:
    content: public static string Oct (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  id: Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  remarks: "Se `Number` já não é um número inteiro, ele é arredondado para o próximo número inteiro antes de ser avaliado.      |||   |-|-|   | Se o número for | Outubro retorna |   | Vazio | Zero (0) |   | Qualquer outro número | Até 22 caracteres octais |       Você pode representar números octais diretamente precedendo números no intervalo adequado com `&O`. Por exemplo, `&O10` é a notação octal do decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._219_1.vb)]"
  syntax:
    content: public static string Oct (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "Obrigatório. Qualquer expressão numérica válida ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que representa o valor octal de um número."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  id: Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> representação de um número."
  remarks: "Quando os números são convertidos em cadeias de caracteres, um espaço à esquerda é sempre reservado para o sinal de `Number`. Se `Number` for positivo, a cadeia de caracteres retornada contém um espaço à esquerda e o sinal de adição é inferido. Um número negativo incluirá o sinal de subtração (-) e não há espaço à esquerda.       Use o `Format` function para converter valores numéricos que você deseja formatados como datas, horas ou moeda ou em outros formatos definidos pelo usuário. Ao contrário de `Str` função, o `Format` função não inclui um espaço à esquerda para o sinal de `Number`.      > [!NOTE] > O `Str` função reconhece somente o ponto (`.`) como um separador decimal válido. Se separadores decimais diferentes forem usados (por exemplo, em aplicativos internacionais), use o `CStr` ou `Format` funções para converter um número em uma cadeia de caracteres. Para obter a representação de cadeia de caracteres de um número em uma cultura específica, use o número `ToString(IFormatProvider)` método. Por exemplo, use <xref:System.Double.ToString%2A>ao converter um valor do tipo `Double` para uma cadeia de caracteres.</xref:System.Double.ToString%2A>"
  example:
  - "This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \n  \n [!code-vb[VbVbalrStrings#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._24_1.vb)]"
  syntax:
    content: public static string Str (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Obrigatório. Um <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> contendo qualquer expressão numérica válida."
    return:
      type: System.String
      description: "Retorna um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> representação de um número."
  overload: Microsoft.VisualBasic.Conversion.Str*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>não foi especificado."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Number</code>não é um tipo numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  id: Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado."
  remarks: "O `Val` função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número. Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos. No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal). Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.       A chamada a seguir retorna o valor 1615198.      ```      Val(&quot; 1615 198th Street N.E.&quot;)    ```A chamada a seguir retorna o valor decimal -1.      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]> De `Val` função reconhece somente o ponto (`.`) como um separador decimal válido. Quando separadores decimais diferentes forem usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número. Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método. Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=fullName>ao converter uma cadeia de caracteres para um `Double`.</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] > Um <xref:System.InvalidCastException>exceção pode ser gerada em resposta a determinados formatos de número incomuns.</xref:System.InvalidCastException> Por exemplo, o código a seguir gera essa exceção.   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> O conflito entre o número formatado como um `Double` e `Integer` e `Long` caracteres de tipo deve ser capturados pelo compilador se ele não estava contido em uma cadeia de caracteres.   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._65_1.vb)]"
  syntax:
    content: public static int Val (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variável, ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> valor. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, seu valor deve ser conversível em <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado."
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>é muito grande."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>é um <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> tipo de expressão não é conversível para <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  id: Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado."
  remarks: "O `Val` função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número. Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos. No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal). Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.       A chamada a seguir retorna o valor 1234123.      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```A chamada a seguir retorna o valor decimal -1.      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]> De `Val` função reconhece somente o ponto (`.`) como um separador decimal válido. Quando outros separadores decimais forem usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número. Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método. Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=fullName>ao converter uma cadeia de caracteres para um `Double`.</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] > Um <xref:System.InvalidCastException>exceção pode ser gerada em resposta a determinados formatos de número incomuns.</xref:System.InvalidCastException> Por exemplo, o código a seguir gera essa exceção.   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> O conflito entre o número formatado como um `Double` e `Integer` e `Long` caracteres de tipo deve ser capturados pelo compilador se o conflito não estava contido em cadeias de caracteres.   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._98_1.vb)]"
  syntax:
    content: public static double Val (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variável, ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> valor. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, seu valor deve ser conversível em <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Double
      description: "Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado."
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>é muito grande."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>é um <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> tipo de expressão não é conversível para <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  id: Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado."
  remarks: "O `Val` função deixa de ler a cadeia de caracteres no primeiro caractere que não reconhece como parte de um número. Símbolos e caracteres que normalmente são considerados como partes de valores numéricos, como cifrões e vírgulas, não são reconhecidos. No entanto, a função reconhece os prefixos `&O` (para octal) e `&H` (para hexadecimal). Espaços em branco, tabulações e caracteres de alimentação de linha são removidos do argumento.       A chamada a seguir retorna o valor 1234123.      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```A chamada a seguir retorna o valor decimal -1.      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]> De `Val` função reconhece somente o ponto (`.`) como um separador decimal válido. Quando outros separadores decimais forem usados, como em aplicativos internacionais, use `CDbl` ou `CInt` em vez disso, para converter uma cadeia de caracteres em um número. Para converter a representação de cadeia de caracteres de um número em uma cultura específica para um valor numérico, use o tipo numérico `Parse(String, IFormatProvider)` método. Por exemplo, use <xref:System.Double.Parse%2A?displayProperty=fullName>ao converter uma cadeia de caracteres para um `Double`.</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] > Um <xref:System.InvalidCastException>exceção pode ser gerada em resposta a determinados formatos de número incomuns.</xref:System.InvalidCastException> Por exemplo, o código a seguir gera essa exceção.   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> O conflito entre o número formatado como um `Double` e `Integer` e `Long` caracteres de tipo deve ser capturados pelo compilador se o conflito não estava contido em cadeias de caracteres.   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._227_1.vb)]"
  syntax:
    content: public static double Val (string InputStr);
    parameters:
    - id: InputStr
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variável, ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> valor. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, seu valor deve ser conversível em <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Double
      description: "Retorna os números contidos em uma cadeia de caracteres como um valor numérico do tipo apropriado."
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>é muito grande."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>é um <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> tipo de expressão não é conversível para <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.OverflowException
  isExternal: true
  name: System.OverflowException
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
- uid: TargetType
  isExternal: true
  name: TargetType
  nameWithType: TargetType
  fullName: TargetType
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic
  nameWithType: Conversion.CTypeDynamic
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic<TargetType>
  nameWithType: Conversion.CTypeDynamic<TargetType>
- uid: Microsoft.VisualBasic.Conversion.ErrorToString*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString
  nameWithType: Conversion.ErrorToString
- uid: Microsoft.VisualBasic.Conversion.Fix*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix
  nameWithType: Conversion.Fix
- uid: Microsoft.VisualBasic.Conversion.Hex*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex
  nameWithType: Conversion.Hex
- uid: Microsoft.VisualBasic.Conversion.Int*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int
  nameWithType: Conversion.Int
- uid: Microsoft.VisualBasic.Conversion.Oct*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct
  nameWithType: Conversion.Oct
- uid: Microsoft.VisualBasic.Conversion.Str*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str
  nameWithType: Conversion.Str
- uid: Microsoft.VisualBasic.Conversion.Val*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val
  nameWithType: Conversion.Val
