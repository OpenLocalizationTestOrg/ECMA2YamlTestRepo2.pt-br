### YamlMime:ManagedReference
items:
- uid: System.Timers.ElapsedEventArgs
  id: ElapsedEventArgs
  children:
  - System.Timers.ElapsedEventArgs.SignalTime
  langs:
  - csharp
  name: ElapsedEventArgs
  nameWithType: ElapsedEventArgs
  fullName: System.Timers.ElapsedEventArgs
  type: Class
  summary: "Fornece dados para o <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> eventos."
  remarks: ''
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/t-system.timers.elapsede_1_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/t-system.timers.elapsede_1_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/t-system.timers.elapsede_1_1.vb)]"
  syntax:
    content: 'public class ElapsedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Timers.ElapsedEventArgs.SignalTime
  id: SignalTime
  parent: System.Timers.ElapsedEventArgs
  langs:
  - csharp
  name: SignalTime
  nameWithType: ElapsedEventArgs.SignalTime
  fullName: System.Timers.ElapsedEventArgs.SignalTime
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Obtém a data/hora quando a <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> evento foi gerado."
  remarks: "O <xref:System.Timers.Timer.Elapsed?displayProperty=fullName>evento é gerado em um <xref:System.Threading.ThreadPool>thread, portanto o método de manipulação de eventos pode ser executado em um thread, ao mesmo tempo que uma chamada para o <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName>método é executado em outro thread.</xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> </xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed?displayProperty=fullName> Isso pode resultar no <xref:System.Timers.Timer.Elapsed>evento que está sendo gerado após o <xref:System.Timers.Timer.Stop%2A>método é chamado.</xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Elapsed> Essa condição de corrida não pode ser impedida comparando a propriedade SignalTime com a hora de quando o <xref:System.Timers.Timer.Stop%2A>método é chamado, porque o método de manipulação de eventos pode já estar em execução quando o <xref:System.Timers.Timer.Stop%2A>método é chamado, ou pode começar a executar entre o momento quando o <xref:System.Timers.Timer.Stop%2A>método é chamado e o momento em que a hora de parada é salvo.</xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Stop%2A> Se ele for essencial para impedir que o thread que chama o <xref:System.Timers.Timer.Stop%2A>método de continuar enquanto o método de manipulação de eventos ainda está em execução, use um mecanismo de sincronização mais robusto, como o <xref:System.Threading.Monitor>classe ou o <xref:System.Threading.Interlocked.CompareExchange%2A>método.</xref:System.Threading.Interlocked.CompareExchange%2A> </xref:System.Threading.Monitor> </xref:System.Timers.Timer.Stop%2A> O código que usa o <xref:System.Threading.Interlocked.CompareExchange%2A>método pode ser encontrada no exemplo para o <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName>método.</xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> </xref:System.Threading.Interlocked.CompareExchange%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the SignalTime property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/p-system.timers.elapsede_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/p-system.timers.elapsede_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/p-system.timers.elapsede_1.vb)]"
  syntax:
    content: public DateTime SignalTime { get; }
    return:
      type: System.DateTime
      description: "O tempo de <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> evento foi gerado."
  overload: System.Timers.ElapsedEventArgs.SignalTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Timers.ElapsedEventArgs.SignalTime
  parent: System.Timers.ElapsedEventArgs
  isExternal: false
  name: SignalTime
  nameWithType: ElapsedEventArgs.SignalTime
  fullName: System.Timers.ElapsedEventArgs.SignalTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Timers.ElapsedEventArgs.SignalTime*
  parent: System.Timers.ElapsedEventArgs
  isExternal: false
  name: SignalTime
  nameWithType: ElapsedEventArgs.SignalTime
