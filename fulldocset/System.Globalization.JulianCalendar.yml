### YamlMime:ManagedReference
items:
- uid: System.Globalization.JulianCalendar
  id: JulianCalendar
  children:
  - System.Globalization.JulianCalendar.#ctor
  - System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.JulianCalendar.AlgorithmType
  - System.Globalization.JulianCalendar.Eras
  - System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetEra(System.DateTime)
  - System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetMonth(System.DateTime)
  - System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.GetYear(System.DateTime)
  - System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.JulianEra
  - System.Globalization.JulianCalendar.MaxSupportedDateTime
  - System.Globalization.JulianCalendar.MinSupportedDateTime
  - System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.JulianCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: JulianCalendar
  nameWithType: JulianCalendar
  fullName: System.Globalization.JulianCalendar
  type: Class
  summary: "Representa o calendário juliano."
  remarks: "45 A.C., Julius Caesar ordenadas reformular um calendário, o que resultou no calendário denominado o calendário juliano. O calendário juliano é o predecessor do calendário gregoriano.      > [!NOTE] > Para obter informações sobre como usar o <xref:System.Globalization.HebrewCalendar>classe e outras classes do Framework .NET de calendário, consulte [trabalhando com calendários](~/add/includes/ajax-current-ext-md.md).</xref:System.Globalization.HebrewCalendar>       A classe JulianCalendar reconhece somente o era atual.       Ao contrário do calendário gregoriano, o calendário juliano define um ano bissexto como um ano divisível por quatro sem exceções. Portanto, o calendário é impreciso por um dia todos os anos de 128. Um ano comum tem 365 dias e um ano bissexto tem 366 dias.       Como o calendário gregoriano, o calendário juliano tem 12 meses com 28 a 31 dias a cada: (31 dias) de janeiro, fevereiro (28 ou 29 dias), março (31 dias), abril (30 dias), maio (31 dias), junho (30 dias), julho (31 dias), agosto (31 dias), setembro (30 dias), outubro (31 dias), (30 dias) de novembro e dezembro (31 dias). Fevereiro tem 29 dias durante os anos bissextos e 28 durante anos comuns.       A data de 1º de janeiro de 2001. no calendário gregoriano é equivalente ao dia 19 de dezembro do ano 2000 D.C. no calendário juliano.       Atualmente, o JulianCalendar não é usada por qualquer uma das culturas com suporte a <xref:System.Globalization.CultureInfo>classe.</xref:System.Globalization.CultureInfo> Portanto, a classe JulianCalendar pode ser usada apenas para calcular datas do calendário juliano.       Cada <xref:System.Globalization.CultureInfo>objeto oferece suporte a um conjunto de calendários.</xref:System.Globalization.CultureInfo> O <xref:System.Globalization.CultureInfo.Calendar%2A>propriedade retorna o calendário padrão para a cultura e o <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>propriedade retorna uma matriz que contém todos os calendários suportados pela cultura.</xref:System.Globalization.CultureInfo.OptionalCalendars%2A> </xref:System.Globalization.CultureInfo.Calendar%2A> Para alterar o calendário usado por um <xref:System.Globalization.CultureInfo>o aplicativo deve definir a <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>propriedade <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>para um novo <xref:System.Globalization.Calendar>.</xref:System.Globalization.Calendar> </xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> </xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> </xref:System.Globalization.CultureInfo>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class JulianCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: JulianCalendar()
  nameWithType: JulianCalendar.JulianCalendar()
  fullName: System.Globalization.JulianCalendar.JulianCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> classe."
  syntax:
    content: public JulianCalendar ();
    parameters: []
  overload: System.Globalization.JulianCalendar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: JulianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna um <xref:System.DateTime>que é o número especificado de meses longe especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime>"
  remarks: "A parte do dia de resultante <xref:System.DateTime>é afetado se o dia resultante não é um dia válido no mês do ano resultante resultante.</xref:System.DateTime> Ele é alterado para o último dia válido no mês do ano resultante resultante. A parte do ano de resultante <xref:System.DateTime>é afetado se o mês resultante está fora do ano de <xref:System.DateTime>.</xref:System.DateTime> especificado</xref:System.DateTime> Essa implementação oferece suporte somente a era atual. Portanto, <xref:System.ArgumentException>é gerada se o ano resultante é fora era de <xref:System.DateTime>.</xref:System.DateTime> especificado</xref:System.ArgumentException> A parte de hora do dia de resultante <xref:System.DateTime>permanece o mesmo que o especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime>       Por exemplo, se o mês especificado for outubro, que tem 31 dias, o dia especificado é o dia 31 do mês e o valor da `months` parâmetro for 6, o ano resultante é um mais do que o ano especificado, o mês resultante é abril e o dia resultante é de 30 dias, o que é o último dia em abril.       Se o valor da `months` parâmetro for negativo, o resultante <xref:System.DateTime>é anterior à <xref:System.DateTime>.</xref:System.DateTime> especificado</xref:System.DateTime>       A<xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime>valor sempre é igual a <xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> Você pode preservar o <xref:System.DateTime.Kind%2A>propriedade do `time` parâmetro ao chamar o <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>método, como mostra o exemplo a seguir.</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_20_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.j_20_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_20_2.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_20_2.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_20_2.cs)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ao qual adicionar meses.</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "O número de meses a adicionar."
    return:
      type: System.DateTime
      description: "O <xref:System.DateTime>que resulta da adição do número especificado de meses especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime>"
  overload: System.Globalization.JulianCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Resultante <xref:System.DateTime>está fora do intervalo com suporte.</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>é menor que-120000.       - ou - <code>months</code> é maior do que 120000."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: JulianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna um <xref:System.DateTime>que é o número especificado de anos longe especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime>"
  remarks: "A parte do dia de resultante <xref:System.DateTime>é afetado se o dia resultante não é um dia válido no mês do ano resultante resultante.</xref:System.DateTime> Ele é alterado para o último dia válido no mês do ano resultante resultante. A parte do mês de resultante <xref:System.DateTime>permanece o mesmo que o especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime> Essa implementação oferece suporte somente a era atual. Portanto, <xref:System.ArgumentException>é gerada se o ano resultante é fora era de <xref:System.DateTime>.</xref:System.DateTime> especificado</xref:System.ArgumentException> A parte de hora do dia de resultante <xref:System.DateTime>permanece o mesmo que o especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime>       Por exemplo, fevereiro tem 28 dias, exceto durante os anos bissextos quando ele tem 29 dias. Se a data especificada é o dia 29 de fevereiro em um ano bissexto e o valor de `years` é 1, a data resultante é o dia em 28 de fevereiro do ano seguinte.       Se `years` for negativo, o resultante <xref:System.DateTime>é anterior à <xref:System.DateTime>.</xref:System.DateTime> especificado</xref:System.DateTime>       A<xref:System.DateTime.Kind%2A> propriedade de retornado <xref:System.DateTime>valor sempre é igual a <xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> Você pode preservar o <xref:System.DateTime.Kind%2A>propriedade do `time` parâmetro ao chamar o <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>método, como mostra o exemplo a seguir.</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_19_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.j_19_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_19_2.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_19_2.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_19_2.cs)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ao qual adicionar anos.</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "O número de anos a adicionar."
    return:
      type: System.DateTime
      description: "O <xref:System.DateTime>que resulta da adição do número especificado de anos especificado <xref:System.DateTime>.</xref:System.DateTime> </xref:System.DateTime>"
  overload: System.Globalization.JulianCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Resultante <xref:System.DateTime>está fora do intervalo com suporte.</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: JulianCalendar.AlgorithmType
  fullName: System.Globalization.JulianCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém um valor que indica se o calendário atual é solar baseado, lunar ou uma combinação de ambos."
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.j_6_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.j_6_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "Sempre retorna <xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>."
  overload: System.Globalization.JulianCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.Eras
  id: Eras
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: JulianCalendar.Eras
  fullName: System.Globalization.JulianCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a lista de eras no <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref>."
  remarks: "O <xref:System.Globalization.JulianCalendar>classe reconhece somente o era atual.</xref:System.Globalization.JulianCalendar> Essa propriedade sempre retorna uma matriz com apenas um elemento."
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "Uma matriz de inteiros que representa os eras no <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref>."
  overload: System.Globalization.JulianCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: JulianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o dia do mês em <xref:System.DateTime>.</xref:System.DateTime> especificado"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_8_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_8_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_8_1.cs)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ler.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "Um inteiro de 1 a 31 que representa o dia do mês no <code> time </code>."
  overload: System.Globalization.JulianCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: JulianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o dia da semana especificado <xref:System.DateTime>.</xref:System.DateTime>"
  remarks: "O <xref:System.DayOfWeek>valores são domingo, segunda-feira, terça-feira, quarta-feira, quinta-feira, sexta-feira e sábado.</xref:System.DayOfWeek>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_6_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_6_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_6_1.cs)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ler.</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "Um <xref:System.DayOfWeek>que representa o dia da semana no valor <code> time </code>.</xref:System.DayOfWeek>"
  overload: System.Globalization.JulianCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: JulianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o dia do ano em <xref:System.DateTime>.</xref:System.DateTime> especificado"
  remarks: "O dia do ano é definido como o número de dias desde o primeiro dia do ano. Por exemplo, GetDayOfYear para o primeiro dia do primeiro mês retorna 1 e GetDayOfYear para o último dia do mês anterior retorna o número total de dias no ano. O total é o mesmo valor retornado pelo <xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>.</xref:System.Globalization.JulianCalendar.GetDaysInYear%2A>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_0_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_0_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_0_1.cs)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ler.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "Um inteiro de 1 a 366 que representa o dia do ano no <code> time </code>."
  overload: System.Globalization.JulianCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o número de dias no mês do ano especificado na especificado era especificado."
  remarks: "Este método retorna 28 ou 29 de fevereiro (`month` = 2), dependendo se `year` é um ano bissexto."
  example:
  - "The following example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cpp[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/44fd8236-349c-466d-b6f3-_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/44fd8236-349c-466d-b6f3-_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/44fd8236-349c-466d-b6f3-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: month
      type: System.Int32
      description: "Um inteiro de 1 a 12 que representa o mês."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Int32
      description: "O número de dias do mês especificado no ano especificado na era especificado."
  overload: System.Globalization.JulianCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>year</code> está fora do intervalo com suporte pelo calendário.       - ou - <code>month</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o número de dias do ano especificado na era especificado."
  remarks: "Este método retorna 365 ou 366, dependendo se `year` é um ano bissexto."
  example:
  - "The following example calls GetDaysInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_11_1.cs)]\n [!code-cpp[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_11_1.cpp)]\n [!code-vb[System.Globalization.JulianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_11_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Int32
      description: "O número de dias do ano especificado na era especificado."
  overload: System.Globalization.JulianCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>year</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: JulianCalendar.GetEra(DateTime)
  fullName: System.Globalization.JulianCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna a era em <xref:System.DateTime>.</xref:System.DateTime> especificado"
  remarks: "O <xref:System.Globalization.JulianCalendar>classe reconhece somente o era atual.</xref:System.Globalization.JulianCalendar>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_1_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_1_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_1_1.cs)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ler.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "Um inteiro que representa o era em <code> time </code>."
  overload: System.Globalization.JulianCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: JulianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Calcula o mês de salto para um ano especificado e era."
  remarks: "Em um calendário que oferece suporte a noção de um mês de salto, o mês de salto pode ocorrer depois de um determinado mês ou depois de qualquer mês em um ano. Por exemplo, o <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>método retorna um número entre 1 e 13 que indica o mês associado a uma data especificada.</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> Se houver um mês bissexto entre os oitavo e o nono meses do ano, o <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>método retorna 8 oitavo mês, 9 para o passo oitavo mês e 10 para o nono mês.</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Int32
      description: "Um inteiro positivo que indica o mês no ano especificado e era bissexto. Como alternativa, esse método retorna zero se o calendário não oferece suporte a um mês de salto, ou se <code> year </code> e <code> era </code> não especificar um ano bissexto."
  overload: System.Globalization.JulianCalendar.GetLeapMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: JulianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o mês em <xref:System.DateTime>.</xref:System.DateTime> especificado"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_15_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_15_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_15_1.cs)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ler.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "Um inteiro de 1 a 12 que representa o mês em <code> time </code>."
  overload: System.Globalization.JulianCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o número de meses do ano especificado na era especificado."
  remarks: ''
  example:
  - "The following example calls GetMonthsInYear for five years in each era.  \n  \n [!code-vb[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_7_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_7_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_7_1.cs)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Int32
      description: "O número de meses do ano especificado na era especificado."
  overload: System.Globalization.JulianCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>year</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: JulianCalendar.GetYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna o ano em <xref:System.DateTime>.</xref:System.DateTime> especificado"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Julian calendar.  \n  \n [!code-vb[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_12_1.vb)]\n [!code-cpp[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_12_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_12_1.cs)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "O <xref:System.DateTime>ler.</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "Um inteiro que representa o ano em <code> time </code>."
  overload: System.Globalization.JulianCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determina se a data especificada na era especificado é um dia bissexto."
  remarks: "Ao contrário do calendário gregoriano, o calendário juliano define um ano bissexto como um ano divisível por quatro sem exceções. Portanto, o calendário é impreciso por um dia todos os anos de 128. Por exemplo, o ano 1999 não era um ano bissexto, mas foi o ano 2000. Um ano comum tem 365 dias e um ano bissexto tem 366 dias.       Um dia de salto é um dia em que ocorre apenas em um ano bissexto. No calendário juliano, o dia 29 de fevereiro será a única bissexto."
  example:
  - "The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/dc155d8f-dfc5-4b2c-b5d1-_1.cs)]\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/dc155d8f-dfc5-4b2c-b5d1-_1.cpp)]\n [!code-vb[System.Globalization.JulianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/dc155d8f-dfc5-4b2c-b5d1-_1.vb)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: month
      type: System.Int32
      description: "Um inteiro de 1 a 12 que representa o mês."
    - id: day
      type: System.Int32
      description: "Um inteiro de 1 a 31 que representa o dia."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o dia especificado é um dia bissexto; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Globalization.JulianCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>month</code> está fora do intervalo com suporte pelo calendário.       - ou - <code>day</code> está fora do intervalo com suporte pelo calendário.       - ou - <code>era</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determina se o mês do ano especificado na especificado era especificado é um mês de salto."
  remarks: "Ao contrário do calendário gregoriano, o calendário juliano define um ano bissexto como um ano divisível por quatro sem exceções. Portanto, o calendário é impreciso por um dia todos os anos de 128. Por exemplo, o ano 1999 não era um ano bissexto, mas foi o ano 2000. Um ano comum tem 365 dias e um ano bissexto tem 366 dias.       Um mês de salto é um mês inteiro ocorre apenas em um ano bissexto. O calendário juliano não tem qualquer meses bissexto."
  example:
  - "The following example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-vb[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/ba7f2b6b-4831-427c-a7c2-_1.vb)]\n [!code-cs[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/ba7f2b6b-4831-427c-a7c2-_1.cs)]\n [!code-cpp[System.Globalization.JulianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/ba7f2b6b-4831-427c-a7c2-_1.cpp)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: month
      type: System.Int32
      description: "Um inteiro de 1 a 12 que representa o mês."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Boolean
      description: "Esse método sempre retornará <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, a menos que substituído por uma classe derivada."
  overload: System.Globalization.JulianCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>month</code> está fora do intervalo com suporte pelo calendário.       - ou - <code>era</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: JulianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determina se o ano especificado na era especificado é um ano bissexto."
  remarks: "Ao contrário do calendário gregoriano, o calendário juliano define um ano bissexto como um ano divisível por quatro sem exceções. Portanto, o calendário é impreciso por um dia todos os anos de 128. Por exemplo, o ano 1999 não era um ano bissexto, mas foi o ano 2000. Um ano comum tem 365 dias e um ano bissexto tem 366 dias."
  example:
  - "The following example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.j_3_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.j_3_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_3_1.vb)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ano especificado é um ano bissexto; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Globalization.JulianCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>era</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.JulianEra
  id: JulianEra
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: JulianEra
  nameWithType: JulianCalendar.JulianEra
  fullName: System.Globalization.JulianCalendar.JulianEra
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Representa a era atual. Esse campo é constante."
  remarks: "O <xref:System.Globalization.JulianCalendar>classe reconhece somente o era atual.</xref:System.Globalization.JulianCalendar> Esse campo sempre retorna 1."
  syntax:
    content: public static readonly int JulianEra;
    return:
      type: System.Int32
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: JulianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a data e hora com suporte a mais recente do <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_2_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_2_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_2_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "Na última data e hora com suporte a <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> classe, que é equivalente ao último momento de 31 de dezembro de 9999 C.E. no calendário gregoriano."
  overload: System.Globalization.JulianCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: JulianCalendar.MinSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a data e hora com suporte a mais antiga do <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cpp[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_3_1.cpp)]\n [!code-cs[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_3_1.cs)]\n [!code-vb[System.Globalization.JulianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_3_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "Data e hora com suporte mais recente do <xref href=&quot;System.Globalization.JulianCalendar&quot;> </xref> classe, que é equivalente para o primeiro momento de 1º de janeiro, 0001 C.E. no calendário gregoriano."
  overload: System.Globalization.JulianCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna um <xref:System.DateTime>que é definido como a data e hora especificadas na era especificado.</xref:System.DateTime>"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro que representa o ano."
    - id: month
      type: System.Int32
      description: "Um inteiro de 1 a 12 que representa o mês."
    - id: day
      type: System.Int32
      description: "Um inteiro de 1 a 31 que representa o dia."
    - id: hour
      type: System.Int32
      description: "Um inteiro de 0 a 23 que representa a hora."
    - id: minute
      type: System.Int32
      description: "Um inteiro de 0 a 59 que representa o minuto."
    - id: second
      type: System.Int32
      description: "Um inteiro de 0 a 59 que representa o segundo."
    - id: millisecond
      type: System.Int32
      description: "Um inteiro de 0 a 999 que representa o milissegundo."
    - id: era
      type: System.Int32
      description: "Um inteiro que representa a era."
    return:
      type: System.DateTime
      description: "O <xref:System.DateTime>que é definido como a data e hora especificadas na era atual.</xref:System.DateTime>"
  overload: System.Globalization.JulianCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>está fora do intervalo com suporte pelo calendário.       - ou - <code>month</code> está fora do intervalo com suporte pelo calendário.       - ou - <code>day</code> está fora do intervalo com suporte pelo calendário.       - ou - <code>hour</code> é menor que zero ou maior que 23.       - ou - <code>minute</code> é menor que zero ou maior que 59.       - ou - <code>second</code> é menor que zero ou maior que 59.       - ou - <code>millisecond</code> é menor que zero ou maior do que 999.       - ou - <code>era</code> está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: JulianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.JulianCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Converte um ano de quatro dígitos do ano especificado usando o <xref:System.Globalization.JulianCalendar.TwoDigitYearMax*>propriedade para determinar o século apropriado.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax*>"
  remarks: "<xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A>é o último ano no intervalo de 100 anos que pode ser representado por um ano de dois dígitos.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> O século é determinado pelo localizar a ocorrência única especificada `year` dentro desse intervalo de 100 anos. Por exemplo, se <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A>está definido para 2029, é o intervalo de 100 anos de 1930 a 2029.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> Portanto, um valor de 2 dígitos de 30 anos é interpretado como 1930, enquanto um valor de 2 dígitos de 29 é interpretado como 2029.       ToFourDigitYear oferece suporte a um ano de dois dígitos ou um ano de quatro dígitos. Passando um valor de ano de dois dígitos (menos de 100) faz com que o método converter o valor para um valor de quatro dígitos de acordo com o <xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A>valor que representa o século apropriado.</xref:System.Globalization.JulianCalendar.TwoDigitYearMax%2A> Se o aplicativo fornece um valor de ano de quatro dígitos que está dentro do intervalo de calendário com suporte para ToFourDigitYear, o método retornará o valor de entrada real. Se o aplicativo fornece um valor de quatro dígitos que está fora do intervalo de calendário com suporte, ou se ele fornece um valor negativo, o método gera uma exceção."
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "Um inteiro de dois ou quatro dígitos que representa o ano para converter."
    return:
      type: System.Int32
      description: "Um inteiro que contém a representação de quatro dígitos do <code> year </code>."
  overload: System.Globalization.JulianCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>está fora do intervalo com suporte pelo calendário."
  platform:
  - net462
- uid: System.Globalization.JulianCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.JulianCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: JulianCalendar.TwoDigitYearMax
  fullName: System.Globalization.JulianCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém ou define o último ano de um intervalo de 100 anos que pode ser representado por um ano de 2 dígitos."
  remarks: "Esta propriedade permite que um ano de 2 dígitos ser convertido corretamente em um ano de 4 dígitos. Por exemplo, se essa propriedade é definida como 2029, o intervalo de 100 anos é de 1930 a 2029. Portanto, um valor de 2 dígitos de 30 anos é interpretado como 1930, enquanto um valor de 2 dígitos de 29 é interpretado como 2029.       O <xref:System.Globalization.JulianCalendar>classe não detecta alterações nas configurações do sistema.</xref:System.Globalization.JulianCalendar>       O aplicativo pode definir esse valor para 99 para indicar que os anos de 2 dígitos são deve ser considerado literalmente. Por exemplo, se essa propriedade é definida como 99, o intervalo de 100 anos é de 0 (não um valor válido para a maioria dos calendários) a 99. Portanto, um valor de 2 dígitos de 30 anos é interpretado como 30."
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "O último ano de um intervalo de 100 anos que pode ser representado por um ano de 2 dígitos."
  overload: System.Globalization.JulianCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor especificado em uma operação de definição é menor que 99.       - ou - o valor especificado em uma operação de definição é maior do que <xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Em uma operação definida, a instância atual é somente leitura."
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.JulianCalendar.#ctor
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: JulianCalendar()
  nameWithType: JulianCalendar.JulianCalendar()
  fullName: System.Globalization.JulianCalendar.JulianCalendar()
- uid: System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: JulianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: JulianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.JulianCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.JulianCalendar.AlgorithmType
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: JulianCalendar.AlgorithmType
  fullName: System.Globalization.JulianCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.JulianCalendar.Eras
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: Eras
  nameWithType: JulianCalendar.Eras
  fullName: System.Globalization.JulianCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: JulianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: JulianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: JulianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetEra(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: JulianCalendar.GetEra(DateTime)
  fullName: System.Globalization.JulianCalendar.GetEra(DateTime)
- uid: System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: JulianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: JulianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.JulianCalendar.GetMonth(DateTime)
- uid: System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: JulianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.JulianCalendar.GetYear(System.DateTime)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: JulianCalendar.GetYear(DateTime)
  fullName: System.Globalization.JulianCalendar.GetYear(DateTime)
- uid: System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: JulianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.JulianCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.JulianCalendar.JulianEra
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: JulianEra
  nameWithType: JulianCalendar.JulianEra
  fullName: System.Globalization.JulianCalendar.JulianEra
- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: JulianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MaxSupportedDateTime
- uid: System.Globalization.JulianCalendar.MinSupportedDateTime
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: JulianCalendar.MinSupportedDateTime
  fullName: System.Globalization.JulianCalendar.MinSupportedDateTime
- uid: System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JulianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: JulianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.JulianCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.JulianCalendar.TwoDigitYearMax
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: JulianCalendar.TwoDigitYearMax
  fullName: System.Globalization.JulianCalendar.TwoDigitYearMax
- uid: System.Globalization.JulianCalendar.#ctor*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: JulianCalendar
  nameWithType: JulianCalendar.JulianCalendar
- uid: System.Globalization.JulianCalendar.AddMonths*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddMonths
  nameWithType: JulianCalendar.AddMonths
- uid: System.Globalization.JulianCalendar.AddYears*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AddYears
  nameWithType: JulianCalendar.AddYears
- uid: System.Globalization.JulianCalendar.AlgorithmType*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: JulianCalendar.AlgorithmType
- uid: System.Globalization.JulianCalendar.Eras*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: Eras
  nameWithType: JulianCalendar.Eras
- uid: System.Globalization.JulianCalendar.GetDayOfMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: JulianCalendar.GetDayOfMonth
- uid: System.Globalization.JulianCalendar.GetDayOfWeek*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: JulianCalendar.GetDayOfWeek
- uid: System.Globalization.JulianCalendar.GetDayOfYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: JulianCalendar.GetDayOfYear
- uid: System.Globalization.JulianCalendar.GetDaysInMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: JulianCalendar.GetDaysInMonth
- uid: System.Globalization.JulianCalendar.GetDaysInYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: JulianCalendar.GetDaysInYear
- uid: System.Globalization.JulianCalendar.GetEra*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetEra
  nameWithType: JulianCalendar.GetEra
- uid: System.Globalization.JulianCalendar.GetLeapMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: JulianCalendar.GetLeapMonth
- uid: System.Globalization.JulianCalendar.GetMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonth
  nameWithType: JulianCalendar.GetMonth
- uid: System.Globalization.JulianCalendar.GetMonthsInYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: JulianCalendar.GetMonthsInYear
- uid: System.Globalization.JulianCalendar.GetYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: GetYear
  nameWithType: JulianCalendar.GetYear
- uid: System.Globalization.JulianCalendar.IsLeapDay*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: JulianCalendar.IsLeapDay
- uid: System.Globalization.JulianCalendar.IsLeapMonth*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: JulianCalendar.IsLeapMonth
- uid: System.Globalization.JulianCalendar.IsLeapYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: JulianCalendar.IsLeapYear
- uid: System.Globalization.JulianCalendar.MaxSupportedDateTime*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: JulianCalendar.MaxSupportedDateTime
- uid: System.Globalization.JulianCalendar.MinSupportedDateTime*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: JulianCalendar.MinSupportedDateTime
- uid: System.Globalization.JulianCalendar.ToDateTime*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: JulianCalendar.ToDateTime
- uid: System.Globalization.JulianCalendar.ToFourDigitYear*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: JulianCalendar.ToFourDigitYear
- uid: System.Globalization.JulianCalendar.TwoDigitYearMax*
  parent: System.Globalization.JulianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: JulianCalendar.TwoDigitYearMax
