### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  id: ExecutedRoutedEventHandler
  langs:
  - csharp
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
  type: Delegate
  summary: "Representa o método que manipulará o <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> e <xref href=&quot;System.Windows.Input.CommandBinding.PreviewExecuted&quot;> </xref> eventos roteados, bem como eventos anexados relacionados."
  remarks: "Este delegado contém a lógica de implementação para <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>  Separando a lógica de implementação do comando permite que o comando a ser invocado de origens diferentes e tipos e permite a centralização da lógica de comando.       Este delegado também é usado para <xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName>e <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName>, que são anexados a eventos de <xref:System.Windows.Input.CommandManager>classe que implementa muito da infraestrutura de comando.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName> </xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> Mas manipuladores mais práticos tratará o <xref:System.Windows.Input.CommandBinding.Executed>eventos de um determinado <xref:System.Windows.Input.CommandBinding>, em vez de trabalhar no <xref:System.Windows.Input.CommandManager>nível.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.Executed>       Em <xref:System.Windows.Input.ExecutedRoutedEventArgs>, as propriedades a seguir geralmente são de interesse quando você escreve um manipulador de eventos para um evento roteado que os resultados de um comando executado:- <xref:System.Windows.RoutedEventArgs.Source%2A>relata o destino onde o comando foi executado.</xref:System.Windows.RoutedEventArgs.Source%2A> </xref:System.Windows.Input.ExecutedRoutedEventArgs> Quando o comando for executado, você também pode considerar o <xref:System.Windows.RoutedEventArgs.Source%2A>mais geralmente em roteados termos de evento, como o objeto que disparou um evento roteado.</xref:System.Windows.RoutedEventArgs.Source%2A>      - <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A>informa o comando executado.</xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> Essa propriedade é útil se você usar associações de comandos e se você escrever manipuladores que potencialmente lidar com vários comandos.      - <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A>relata quaisquer parâmetros de comando específicas que foram transmitidos por executando o comando.</xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> Nem todos os comandos usam ou esperam parâmetros específicos de comando.      - <xref:System.Windows.RoutedEventArgs.Handled%2A>relata se o evento roteado que resultaram do comando executado já foi definido por um elemento diferente no caminho.</xref:System.Windows.RoutedEventArgs.Handled%2A> Para manipuladores de eventos roteados, é recomendável ter que fazer um trabalho significativo ao manipular o evento ao definir manipuladores <xref:System.Windows.RoutedEventArgs.Handled%2A>para `true`.</xref:System.Windows.RoutedEventArgs.Handled%2A> Isso impede que os manipuladores típicos para o evento tratamento de evento mais novamente na rota. Para obter mais informações sobre como tratar eventos roteados, consulte [marcar eventos roteados como Handled e tratamento de classe](~/add/includes/ajax-current-ext-md.md).       Este delegado também representa manipuladores para <xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName>e <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=fullName>, que são anexados a eventos de <xref:System.Windows.Input.CommandManager>classe que implementa muito da infraestrutura de comando.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=fullName> </xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> Mas manipuladores mais práticos tratará o <xref:System.Windows.Input.CommandBinding.Executed>eventos de um determinado <xref:System.Windows.Input.CommandBinding>, em vez de trabalhar no <xref:System.Windows.Input.CommandManager>nível.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.Executed>       Para obter mais informações sobre comandos, consulte [visão geral do comando](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example creates an ExecutedRoutedEventHandler that sets a visual property on the target when the command is executed. The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.  \n  \n [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/add/codesnippet/visualbasic/custom_routedcommand/window1.xaml.vb#custom_routedcommandhandlers)]\n [!code-cs[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/add/codesnippet/csharp/Custom_RoutedCommand/Window1.xaml.cs#custom_routedcommandhandlers)]"
  syntax:
    content: public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
