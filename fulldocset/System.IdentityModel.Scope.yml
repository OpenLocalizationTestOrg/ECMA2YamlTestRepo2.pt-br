### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Scope
  id: Scope
  children:
  - System.IdentityModel.Scope.#ctor
  - System.IdentityModel.Scope.#ctor(System.String)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.AppliesToAddress
  - System.IdentityModel.Scope.EncryptingCredentials
  - System.IdentityModel.Scope.Properties
  - System.IdentityModel.Scope.ReplyToAddress
  - System.IdentityModel.Scope.SigningCredentials
  - System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  - System.IdentityModel.Scope.TokenEncryptionRequired
  langs:
  - csharp
  name: Scope
  nameWithType: Scope
  fullName: System.IdentityModel.Scope
  type: Class
  summary: "Representa a configuração para a solicitação de emissão de token."
  remarks: "A classe de escopo encapsula informações sobre a terceira parte confiável (RP) associada a uma solicitação de token de segurança (primeira). Essas informações são usadas por implementações de <xref:System.IdentityModel.SecurityTokenService>classe (STS) no pipeline de emissão de token para retornar uma resposta (RSTR) para uma solicitação de token de segurança (primeira).</xref:System.IdentityModel.SecurityTokenService>       Objetos de escopo contêm informações sobre o endereço do RP, criptografia e credenciais de autenticação a ser usado com o token de segurança emitido e se o token em si ou chaves simétricas emitidos com o token deve ser criptografado. Por padrão, as chaves simétricas e token são criptografadas. Você pode estender a classe de escopo para conter informações adicionais sobre a solicitação, como tipos de token aceito pelo RP, vida útil do token padrão, a vida útil do token máximo, conjuntos de algoritmo usados pela RP e assim por diante; No entanto, as informações encapsuladas nessa classe não devem variar para solicitações individuais.       O pipeline de emissão de token é implementado no <xref:System.IdentityModel.SecurityTokenService.Issue%2A>método e este método chama o <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>método para obter a configuração para a primeira.</xref:System.IdentityModel.SecurityTokenService.GetScope%2A> </xref:System.IdentityModel.SecurityTokenService.Issue%2A> Você deve implementar um <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>método no STS personalizado e retornar um objeto de escopo apropriado para o RP e sua implementação do STS.</xref:System.IdentityModel.SecurityTokenService.GetScope%2A>"
  syntax:
    content: public class Scope
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> classe."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para o novo <xref:System.IdentityModel.Scope>instância.</xref:System.IdentityModel.Scope>      | Propriedade | Valor. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| `null` .|   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| Um dicionário vazio. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope ();
    parameters: []
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> classe com o endereço appliesTo especificado."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para o novo <xref:System.IdentityModel.Scope>instância.</xref:System.IdentityModel.Scope>      | Propriedade | Valor. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| O valor de `appliesToAddress` parâmetro. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| Um dicionário vazio. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "O endereço appliesTo da terceira parte confiável. Geralmente é um URI."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> classe com o endereço especificado appliesTo e criptografar credenciais."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para o novo <xref:System.IdentityModel.Scope>instância.</xref:System.IdentityModel.Scope>      | Propriedade | Valor. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| O valor de `appliesToAddress` parâmetro. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| Um dicionário vazio. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| O valor de `signingCredentials` parâmetro. |   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "O endereço appliesTo da terceira parte confiável. Geralmente é um URI."
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "As credenciais de criptografia para a terceira parte confiável."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> classe com o endereço especificado appliesTo e as credenciais de assinatura."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para o novo <xref:System.IdentityModel.Scope>instância.</xref:System.IdentityModel.Scope>      | Propriedade | Valor. |   |--------------|------------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| O valor de `appliesToAddress` parâmetro. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| `null`.|   | <xref:System.IdentityModel.Scope.Properties%2A>| Um dicionário vazio. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| O valor de `signingCredentials` parâmetro. |   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "O endereço appliesTo da terceira parte confiável. Geralmente é um URI."
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "As credenciais de assinatura da terceira parte confiável."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> classe com o endereço appliesTo especificado, as credenciais de assinatura e criptografia de credenciais."
  remarks: "A tabela a seguir mostra os valores de propriedade inicial para o novo <xref:System.IdentityModel.Scope>instância.</xref:System.IdentityModel.Scope>      | Propriedade | Valor |   |--------------|-----------|   | <xref:System.IdentityModel.Scope.AppliesToAddress%2A>| O valor de `appliesToAddress` parâmetro. |   | <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>| O valor de `encryptingCredentials` parâmetro. |   | <xref:System.IdentityModel.Scope.Properties%2A>| Um dicionário vazio. |   | <xref:System.IdentityModel.Scope.ReplyToAddress%2A>| `null`.|   | <xref:System.IdentityModel.Scope.SigningCredentials%2A>| O valor de `signingCredentials` parâmetro. |   | <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>| `true`.|   | <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>| `true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "O endereço appliesTo da terceira parte confiável. Geralmente é um URI."
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "As credenciais de assinatura da terceira parte confiável."
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "As credenciais de criptografia para a terceira parte confiável."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.AppliesToAddress
  id: AppliesToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém ou define o endereço appliesTo da terceira parte confiável."
  syntax:
    content: public virtual string AppliesToAddress { get; set; }
    return:
      type: System.String
      description: "O endereço appliesTo da terceira parte confiável. Geralmente é um URI."
  overload: System.IdentityModel.Scope.AppliesToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.EncryptingCredentials
  id: EncryptingCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém ou define as credenciais de criptografia para a terceira parte confiável."
  remarks: "Se o <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>é de propriedade `true`, as credenciais são usadas para criptografar tokens de segurança emitidos.</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> Se o <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>é de propriedade `true`, as credenciais são usadas para criptografar chaves simétricas emitidas com tokens de segurança.</xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.EncryptingCredentials EncryptingCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "As credenciais de criptografia a ser usado para a terceira parte confiável."
  overload: System.IdentityModel.Scope.EncryptingCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.Properties
  id: Properties
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém o recipiente de propriedades para estender o objeto."
  syntax:
    content: public virtual System.Collections.Generic.Dictionary<string,object> Properties { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: "O recipiente de propriedades."
  overload: System.IdentityModel.Scope.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.ReplyToAddress
  id: ReplyToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém ou define o endereço replyTo da terceira parte confiável."
  syntax:
    content: public virtual string ReplyToAddress { get; set; }
    return:
      type: System.String
      description: "O endereço replyTo da terceira parte confiável. Geralmente é um URI."
  overload: System.IdentityModel.Scope.ReplyToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SigningCredentials
  id: SigningCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém ou define as credenciais de assinatura da terceira parte confiável."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "As credenciais de autenticação a ser usado para a terceira parte confiável."
  overload: System.IdentityModel.Scope.SigningCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  id: SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém ou define um valor que indica se as chaves simétricas emitidas devem ser criptografadas."
  remarks: "Se a propriedade SymmetricKeyEncryptionRequired `true`, chaves simétricas são criptografadas usando as credenciais no <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>propriedade.</xref:System.IdentityModel.Scope.EncryptingCredentials%2A>"
  syntax:
    content: public virtual bool SymmetricKeyEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as chaves simétricas devem ser criptografadas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  id: TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Obtém ou define um valor que indica se os tokens de segurança emitidos devem ser criptografados."
  remarks: "Se a propriedade TokenEncryptionRequired `true`, tokens de segurança são criptografados usando as credenciais no <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>propriedade.</xref:System.IdentityModel.Scope.EncryptingCredentials%2A>"
  syntax:
    content: public virtual bool TokenEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os tokens de segurança devem ser criptografados; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Scope.TokenEncryptionRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Scope.#ctor
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
- uid: System.IdentityModel.Scope.#ctor(System.String)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
- uid: System.IdentityModel.Tokens.SigningCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SigningCredentials
  nameWithType: SigningCredentials
  fullName: System.IdentityModel.Tokens.SigningCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
- uid: System.IdentityModel.Scope.AppliesToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<String,Object>
  nameWithType: Dictionary<String,Object>
  fullName: System.Collections.Generic.Dictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Scope.ReplyToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
- uid: System.IdentityModel.Scope.#ctor*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope
  nameWithType: Scope.Scope
- uid: System.IdentityModel.Scope.AppliesToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
- uid: System.IdentityModel.Scope.ReplyToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
- uid: System.IdentityModel.Scope.TokenEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
