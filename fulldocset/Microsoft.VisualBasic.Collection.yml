### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Collection
  id: Collection
  children:
  - Microsoft.VisualBasic.Collection.#ctor
  - Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  - Microsoft.VisualBasic.Collection.Clear
  - Microsoft.VisualBasic.Collection.Contains(System.String)
  - Microsoft.VisualBasic.Collection.Count
  - Microsoft.VisualBasic.Collection.GetEnumerator
  - Microsoft.VisualBasic.Collection.Item(System.Int32)
  - Microsoft.VisualBasic.Collection.Item(System.Object)
  - Microsoft.VisualBasic.Collection.Item(System.String)
  - Microsoft.VisualBasic.Collection.Remove(System.Int32)
  - Microsoft.VisualBasic.Collection.Remove(System.String)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  - Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: Collection
  nameWithType: Collection
  fullName: Microsoft.VisualBasic.Collection
  type: Class
  summary: "Um Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> é um conjunto ordenado de itens que podem ser referenciados como uma unidade."
  remarks: "> [!NOTE]> Sempre que possível, você deve usar as coleções genéricas no <xref:System.Collections.Generic?displayProperty=fullName>namespace ou o <xref:System.Collections.Concurrent>namespace em vez de um Visual Basic `Collection`.</xref:System.Collections.Concurrent> </xref:System.Collections.Generic?displayProperty=fullName> Para obter mais informações, consulte [coleções](~/add/includes/ajax-current-ext-md.md).       O Visual Basic `Collection` objeto fornece uma maneira conveniente para se referir a um grupo relacionado de itens como um único objeto. Os itens ou *elementos*, em uma coleção somente precisa ser relacionada pelo fato de que existam na coleção. Elementos de uma coleção não é necessário que compartilhar o mesmo tipo de dados.       Você pode criar uma coleção da mesma maneira que você criar outros objetos, como mostra o exemplo a seguir.      ```   Dim coll As New Microsoft.VisualBasic.Collection()   ```Depois de criar uma coleção, você pode fazer o seguinte:-adicionar um elemento com o <xref:Microsoft.VisualBasic.Collection.Add%2A>método.</xref:Microsoft.VisualBasic.Collection.Add%2A>      -Remove um elemento com o <xref:Microsoft.VisualBasic.Collection.Remove%2A>método.</xref:Microsoft.VisualBasic.Collection.Remove%2A>      -Remover todos os elementos com o <xref:Microsoft.VisualBasic.Collection.Clear%2A>método.</xref:Microsoft.VisualBasic.Collection.Clear%2A>      -Descobrir quantos elementos a coleção contém com o <xref:Microsoft.VisualBasic.Collection.Count%2A>propriedade.</xref:Microsoft.VisualBasic.Collection.Count%2A>      -Verifique se um elemento específico está presente com o <xref:Microsoft.VisualBasic.Collection.Contains%2A>método.</xref:Microsoft.VisualBasic.Collection.Contains%2A>      -Retorna um elemento específico da coleção com o <xref:Microsoft.VisualBasic.Collection.Item%2A>propriedade.</xref:Microsoft.VisualBasic.Collection.Item%2A>      -Percorrer toda a coleção com o [para cada um... Próxima instrução](~/add/includes/ajax-current-ext-md.md).          > [!NOTE] > Embora o Visual Basic `Collection` objeto tem funcionalidade idêntica do `Collection` do objeto no Visual Basic 6.0, os dois não podem interoperar em um ambiente COM.          > [!CAUTION] > Iteração por meio de um Visual Basic `Collection` não é um procedimento de thread-safe. Mesmo se a coleção for sincronizada, outros threads ainda podem modificar a coleção, fazendo com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, bloqueie a coleção ou capture as exceções resultante de alterações feitas por outros threads. Para obter mais informações sobre o bloqueio de um elemento de programação, consulte [Instrução SyncLock](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection. It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.  \n  \n To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance. Leave the default name as `nameClass`. Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure. (This example works only with host applications that support classes.)  \n  \n [!code-vb[VbVbalrCollectionObject#1](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))]

      public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Cria e retorna um novo [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
  remarks: "O [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] coleção retornada por esse construtor está vazia e não tem nenhuma capacidade inicial alocada.       [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]coleções não são compatíveis com o [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] coleções disponíveis no <xref:System.Collections?displayProperty=fullName>, <xref:System.Collections.Generic?displayProperty=fullName>, e <xref:System.Collections.Specialized?displayProperty=fullName>namespaces.</xref:System.Collections.Specialized?displayProperty=fullName> </xref:System.Collections.Generic?displayProperty=fullName> </xref:System.Collections?displayProperty=fullName>"
  example:
  - "The following example creates a new [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collection and assigns it to the variable `coll`:  \n  \n```  \nDim coll As New Microsoft.VisualBasic.Collection()  \n```  \n  \n This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property. [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collections hold elements of type <xref:System.Object>."
  syntax:
    content: public Collection ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  id: Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Adiciona um elemento para uma <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto."
  remarks: "O `Before` ou `After` argumento deve se referir a um elemento existente da coleção; caso contrário, ocorrerá um erro.       Se o `Before` e `After` argumentos forem omitidos, o novo objeto é adicionado ao final da coleção.       Também ocorrerá um erro se um especificado `Key` valor corresponde à chave para um elemento existente da coleção."
  example:
  - "The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`. To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`. Add the `child` class definition and the `family` declaration to the form code. Modify the `_Click` event handlers for the **Add** and **List** buttons as shown. The **Add** button allows you to add children. The **List** button displays the names of all the children.  \n  \n [!code-vb[VbVbalrCollectionObject#2](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Form1.vb#2)]"
  syntax:
    content: public void Add (object Item, string Key = null, object Before = null, object After = null);
    parameters:
    - id: Item
      type: System.Object
      description: "Obrigatório. Um objeto de qualquer tipo que especifica o elemento a ser adicionado à coleção."
    - id: Key
      type: System.String
      description: "Opcional. Uma única <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que especifica uma cadeia de caracteres chave que pode ser usada em vez de um índice de posição para acessar esse novo elemento na coleção."
    - id: Before
      type: System.Object
      description: "Opcional. Uma expressão que especifica uma posição relativa da coleção. O elemento a ser adicionado é colocado na coleção antes do elemento identificado pelo `Before` argumento. Se `Before` é uma expressão numérica, ele deve ser um número entre 1 e o valor da coleção de <xref:Microsoft.VisualBasic.Collection.Count*>propriedade.</xref:Microsoft.VisualBasic.Collection.Count*> Se `Before` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, ele deve corresponder à chave cadeia de caracteres especificada quando o elemento que está sendo referenciado foi adicionado à coleção. Não é possível especificar `Before` e `After`."
    - id: After
      type: System.Object
      description: "Opcional. Uma expressão que especifica uma posição relativa da coleção. O elemento a ser adicionado é colocado na coleção após o elemento identificado pelo `After` argumento. Se `After` é uma expressão numérica, ele deve ser um número entre 1 e o valor da coleção de <xref uid=&quot;langword_csharp_Count&quot; name=&quot;Count&quot; href=&quot;&quot;> </xref> propriedade. Se `After` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, ele deve corresponder à chave cadeia de caracteres especificada quando o elemento referenciado foi adicionado à coleção. Não é possível especificar `Before` e `After`."
  overload: Microsoft.VisualBasic.Collection.Add*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Clear
  id: Clear
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Exclui todos os elementos de um Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto."
  remarks: "O `Clear` método limpa a coleção e redefine sua <xref:Microsoft.VisualBasic.Collection.Count%2A>propriedade como 0.</xref:Microsoft.VisualBasic.Collection.Count%2A>"
  example:
  - '[!code-vb[VbVbalrCollectionObject#3](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#3)]'
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  id: Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se um Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto contém um elemento com uma chave específica."
  remarks: "`Contains`Retorna `True` se a coleção contém um elemento com uma chave exatamente correspondente `Key`. Caso contrário, `Contains` retorna `False`. Caso é ignorado quando valores de chave correspondentes.       Um Visual Basic `Collection` pode conter alguns elementos que têm chaves e outros elementos sem chaves. Isso depende se a chamada para o <xref:Microsoft.VisualBasic.Collection.Add%2A>método fornece um argumento opcional `Key` parâmetro.</xref:Microsoft.VisualBasic.Collection.Add%2A>"
  example:
  - "[!code-vb[VbVbalrCollectionObject#4](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#4)]  \n  \n If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method."
  syntax:
    content: public bool Contains (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Obrigatório. Um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que especifica a chave para a qual pesquisar os elementos da coleção."
    return:
      type: System.Boolean
      description: "Retorna um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se um Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto contém um elemento com uma chave específica."
  overload: Microsoft.VisualBasic.Collection.Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Count
  id: Count
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> que contém o número de elementos em uma coleção. Somente leitura."
  remarks: "Use o `Count` propriedade para determinar o número de elementos em uma `Collection` objeto."
  example:
  - "This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#6](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#6)]  \n  \n The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> que contém o número de elementos em uma coleção. Somente leitura."
  overload: Microsoft.VisualBasic.Collection.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma referência a um objeto de enumerador, que é usado para iterar sobre uma <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
  remarks: "O [para cada um... Próxima instrução](~/add/includes/ajax-current-ext-md.md) chamadas `GetEnumerator` para obter um objeto enumerator para oferecer suporte à iteração sobre os elementos da coleção. Normalmente, você usa um `For Each`... `Next` para atravessar uma coleção ou matriz, e você não precisa chamar `GetEnumerator` explicitamente.       Se precisar de mais controle sobre a iteração que o `For Each`... `Next` fornecer instruções, você pode usar o `GetEnumerator` método para executar uma passagem personalizada. A seguir estão alguns casos em que você talvez precise fazer isso.      -Você talvez queira retornar ao início da coleção e iniciar a iteração novamente antes de ser concluído.      -Você talvez queira ignorar um ou mais elementos por uma variedade de razões.      -Você precisará alterar os elementos da coleção no meio de uma passagem. Nesse caso, você deve obter um novo objeto de enumerador porque anterior é invalidado."
  example:
  - "The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.  \n  \n [!code-vb[VbVbalrCollectionObject#7](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#7)]  \n  \n `GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace. The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods. For more information, see [For Each...Next Statement](../Topic/For%20Each...Next%20Statement%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Retorna uma referência a um objeto de enumerador, que é usado para iterar sobre uma <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
  overload: Microsoft.VisualBasic.Collection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um elemento específico de um <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto por posição ou por chave. Somente leitura."
  remarks: "Se `Index` é do tipo `Object`, o `Item` propriedade tentará tratá-lo um `String`, `Char`, `Char` matriz ou valor inteiro. Se `Item` não é possível converter `Index` para `String` ou `Integer`, ele lança uma <xref:System.ArgumentException>exceção.</xref:System.ArgumentException>       O `Item` é a propriedade padrão para uma coleção. Portanto, as linhas de código a seguir são equivalentes.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: "(A) uma expressão numérica que especifica a posição de um elemento da coleção. `Index`deve ser um número entre 1 e o valor da coleção de <xref:Microsoft.VisualBasic.Collection.Count*>propriedade.</xref:Microsoft.VisualBasic.Collection.Count*> Ou (B) uma <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> expressão que especifica a cadeia de caracteres de posição ou a chave de um elemento da coleção."
    return:
      type: System.Object
      description: "Retorna um elemento específico de um <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto por posição ou por chave. Somente leitura."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  id: Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um elemento específico de um <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto por posição ou por chave. Somente leitura."
  remarks: "Se `Index` é do tipo `Object`, o `Item` propriedade tentará tratá-lo um `String`, `Char`, `Char` matriz ou valor inteiro. Se `Item` não é possível converter `Index` para `String` ou `Integer`, ele lança uma <xref:System.ArgumentException>exceção.</xref:System.ArgumentException>       O `Item` é a propriedade padrão para uma coleção. Portanto, as linhas de código a seguir são equivalentes.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[object Index] { get; }
    parameters:
    - id: Index
      type: System.Object
      description: "(A) uma expressão numérica que especifica a posição de um elemento da coleção. `Index`deve ser um número entre 1 e o valor da coleção de <xref:Microsoft.VisualBasic.Collection.Count*>propriedade.</xref:Microsoft.VisualBasic.Collection.Count*> Ou (B) uma <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> expressão que especifica a cadeia de caracteres de posição ou a chave de um elemento da coleção."
    return:
      type: System.Object
      description: "Retorna um elemento específico de um <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto por posição ou por chave. Somente leitura."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um elemento específico de um <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto por posição ou por chave. Somente leitura."
  remarks: "Se `Index` é do tipo `Object`, o `Item` propriedade tentará tratá-lo um `String`, `Char`, `Char` matriz ou valor inteiro. Se `Item` não é possível converter `Index` para `String` ou `Integer`, ele lança uma <xref:System.ArgumentException>exceção.</xref:System.ArgumentException>       O `Item` é a propriedade padrão para uma coleção. Portanto, as linhas de código a seguir são equivalentes.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[string Key] { get; }
    parameters:
    - id: Key
      type: System.String
      description: "Uma única <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que especifica uma cadeia de caracteres chave que pode ser usada, em vez de um índice de posição, para acessar um elemento da coleção. `Key`deve corresponder ao `Key` argumento especificado quando o elemento foi adicionado à coleção."
    return:
      type: System.Object
      description: "Retorna um elemento específico de um <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto por posição ou por chave. Somente leitura."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Remove um elemento de uma <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto."
  remarks: "Quando `Remove` exclui um elemento de uma coleção, ele diminui a coleção <xref:Microsoft.VisualBasic.Collection.Count%2A>propriedade por um.</xref:Microsoft.VisualBasic.Collection.Count%2A> Ele também diminui o `Index` valor de cada elemento que anteriormente seguia o elemento excluído na coleção.       Se um elemento foi adicionado à coleção sem uma `Key`, você deve usar o `Index` para removê-lo."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (int Index);
    parameters:
    - id: Index
      type: System.Int32
      description: "Uma expressão numérica que especifica a posição de um elemento da coleção. `Index`deve ser um número entre 1 e o valor da coleção de <xref:Microsoft.VisualBasic.Collection.Count*>propriedade.</xref:Microsoft.VisualBasic.Collection.Count*>"
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Remove um elemento de uma <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objeto."
  remarks: "Quando `Remove` exclui um elemento de uma coleção, ele diminui a coleção <xref:Microsoft.VisualBasic.Collection.Count%2A>propriedade por um.</xref:Microsoft.VisualBasic.Collection.Count%2A> Ele também diminui o `Index` valor de cada elemento que anteriormente seguia o elemento excluído na coleção.       Se um elemento foi adicionado à coleção sem uma `Key`, você deve usar o `Index` para removê-lo."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Uma única <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão que especifica uma cadeia de caracteres chave que pode ser usada, em vez de um índice de posição, para acessar um elemento da coleção. `Key`deve corresponder ao `Key` argumento especificado quando o elemento foi adicionado à coleção."
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Copia os elementos do <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> para um <xref:System.Array>, a partir de um determinado <xref:System.Array>índice.</xref:System.Array> </xref:System.Array> Implementa o <xref:System.Collections.ICollection>interface.</xref:System.Collections.ICollection>"
  remarks: "Os elementos são copiados para o <xref:System.Array>na mesma ordem em que o enumerador que itera por meio de <xref:Microsoft.VisualBasic.Collection>objeto.</xref:Microsoft.VisualBasic.Collection> </xref:System.Array>       Esse método é um O (`n`) operação, onde `n` é obtido de <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>.</xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino dos elementos copiados de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Array> O <xref:System.Array>devem ter a indexação com base em zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice de base zero no `array` no qual a cópia começa."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       o número de elementos na origem - ou - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto é maior que o espaço disponível do <code>index</code> até o final do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da fonte de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  id: System#Collections#ICollection#ICollectionCount
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: int System.Collections.ICollection.ICollectionCount { get; }
    return:
      type: System.Int32
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  id: System#Collections#ICollection#ICollectionIsSynchronized
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.ICollection.ICollectionIsSynchronized { get; }
    return:
      type: System.Boolean
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  id: System#Collections#ICollection#ICollectionSyncRoot
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.ICollection.ICollectionSyncRoot { get; }
    return:
      type: System.Object
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um enumerador que itera pela coleção. Implementa o <xref:System.Collections.ICollection>interface.</xref:System.Collections.ICollection>"
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores. Portanto, usando `foreach` é recomendada, em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. O <xref:System.Collections.IEnumerator.Reset%2A>método também traz o enumerador de volta para essa posição.</xref:System.Collections.IEnumerator.Reset%2A> Nesta posição, o <xref:System.Collections.IEnumerator.Current%2A>propriedade está definida.</xref:System.Collections.IEnumerator.Current%2A> Portanto, você deve chamar o <xref:System.Collections.IEnumerator.MoveNext%2A>método para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`, <xref:System.Collections.IEnumerator.Current%2A>é indefinido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido pelo <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente e seu comportamento é indefinido.       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de thread-safe. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração. Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>objeto que pode ser usado para iterar pela coleção.</xref:System.Collections.IEnumerator>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Adiciona um item para o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Você também pode usar o <xref:Microsoft.VisualBasic.Collection.Item%2A>propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no <xref:Microsoft.VisualBasic.Collection>objeto.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection.Item%2A>"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para adicionar ao <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Object>"
    return:
      type: System.Int32
      description: "A posição na qual o novo elemento foi inserido."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto é somente leitura.       - ou - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto tem um tamanho fixo."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Remove todos os itens do <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Este método Remove todos os itens do <xref:Microsoft.VisualBasic.Collection>objeto.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref:System.Collections.IList>é somente leitura.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Determina se o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto contém um valor específico. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Este método determina se o <xref:Microsoft.VisualBasic.Collection>objeto contém um valor específico.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para localizar no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "Retorna <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> se o <xref:System.Object>for encontrado no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto; caso contrário, <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  id: System#Collections#IList#IListIsFixedSize
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsFixedSize { get; }
    return:
      type: System.Boolean
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  id: System#Collections#IList#IListIsReadOnly
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsReadOnly { get; }
    return:
      type: System.Boolean
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  id: System#Collections#IList#IListItem(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.IList.IListItem[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "A ser adicionado."
    return:
      type: System.Object
      description: "A ser adicionado."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Determina o índice de um item específico no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Este método determina o índice de um item específico no <xref:Microsoft.VisualBasic.Collection>objeto.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para localizar no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Object>"
    return:
      type: System.Int32
      description: "O índice do <code> value </code> encontrado na coleção; caso contrário, -1."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Insere um item para o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto no índice especificado. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Se `index` é igual ao número de itens no <xref:Microsoft.VisualBasic.Collection>do objeto, em seguida, `value` é acrescentado ao final.</xref:Microsoft.VisualBasic.Collection>       Coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção se mover para baixo para acomodar o novo elemento. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero no qual `value` devem ser inseridos."
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para inserir o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>não é um índice válido no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto é somente leitura.       - ou - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto tem um tamanho fixo."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>value</code>é uma referência nula no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Remove a primeira ocorrência de um objeto específico do <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Coleções de elementos de contíguos, como listas, os elementos que seguem o elemento removido mover para cima para ocupar o ponto vagas. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash. Se `value` não foi encontrado no <xref:Microsoft.VisualBasic.Collection>objeto, o <xref:Microsoft.VisualBasic.Collection>objeto permanece inalterado e nenhuma exceção é lançada.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para remover do <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto é somente leitura.       - ou - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto tem um tamanho fixo."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Remove o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> item do objeto no índice especificado. Implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Coleções de elementos de contíguos, como listas, os elementos que seguem o elemento removido mover para cima para ocupar o ponto vagas. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash."
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice com base em zero do item a ser removido."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>não é um índice válido no <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto é somente leitura.       - ou - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto tem um tamanho fixo."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "É executado após todo o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> gráfico de objeto tiver sido desserializado. Implementa o <xref href=&quot;System.Runtime.Serialization.IDeserializationCallback&quot;> </xref> interface."
  remarks: "Esse método é chamado após todo o <xref:Microsoft.VisualBasic.Collection>gráfico de objeto tiver sido desserializado.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "O objeto que iniciou o retorno de chamada."
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna os dados necessários para serializar o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto. Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface."
  remarks: "Esse método retorna os dados necessários para serializar o <xref:Microsoft.VisualBasic.Collection>objeto.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Um <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto que contém as informações necessárias para serializar o <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Um <xref:System.Runtime.Serialization.StreamingContext>objeto que contém a origem e destino do fluxo serializado associado a <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objeto.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Collection.#ctor
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Collection.Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Collection.Count
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Microsoft.VisualBasic.Collection.#ctor*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection
  nameWithType: Collection.Collection
- uid: Microsoft.VisualBasic.Collection.Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add
  nameWithType: Collection.Add
- uid: Microsoft.VisualBasic.Collection.Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear
  nameWithType: Collection.Clear
- uid: Microsoft.VisualBasic.Collection.Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains
  nameWithType: Collection.Contains
- uid: Microsoft.VisualBasic.Collection.Count*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
- uid: Microsoft.VisualBasic.Collection.GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator
  nameWithType: Collection.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.Item*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item
  nameWithType: Collection.Item
- uid: Microsoft.VisualBasic.Collection.Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove
  nameWithType: Collection.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Collection.System.Collections.ICollection.CopyTo
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Collection.System.Collections.IList.Add
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: Collection.System.Collections.IList.Clear
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Collection.System.Collections.IList.Contains
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem
  nameWithType: Collection.System.Collections.IList.IListItem
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Collection.System.Collections.IList.IndexOf
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Collection.System.Collections.IList.Insert
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Collection.System.Collections.IList.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: Collection.System.Collections.IList.RemoveAt
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData
