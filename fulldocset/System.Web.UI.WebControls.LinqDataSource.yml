### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "Habilita o uso do LINQ (consulta) em uma página da Web do ASP.NET por meio do texto de marcação para recuperar e modificar dados de um objeto de dados."
  remarks: "Neste tópico:- [Introdução](#introduction)      -   [ordem de operações](#order_of_operations)      -   [ordenação dados](#ordering_data)      -   [agrupando dados](#grouping_data)      -   [modificações de dados](#data_modifications)      -   [avaliando os valores em tempo de execução](#evaluating_value_at_run_time)      -   [trabalhar com procedimentos armazenados](#working_with_stored_procedures)      -   [sintaxe declarativa](#declarative_syntax) <a name=&quot;introduction&quot;> </a> # # Introduction Language-Integrated LINQ (consulta) é uma sintaxe de consulta que define um conjunto de operadores de consulta que permitem operações de passagem, filtrar e projeção ser expresso de forma declarativa em qualquer. Linguagem de programação baseado em rede.       O objeto de dados pode ser uma coleção de dados na memória ou um objeto que representa dados de um banco de dados. Você pode recuperar ou modificar os dados sem precisar gravar comandos SQL para cada operação.       Controle LinqDataSource permite que você use LINQ em uma página da Web do ASP.NET, definindo propriedades no texto de marcação. Controle LinqDataSource usa LINQ to SQL para gerar automaticamente os comandos de dados. Para obter mais informações sobre o LINQ to SQL, consulte [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       Quando você estiver recuperando dados de uma coleção de dados na memória, você define o <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade à classe que contém a coleção de dados.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Definir o <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade para a propriedade ou campo que retorna a coleção de dados.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Por exemplo, você pode ter uma classe denominada `Person` que contém uma propriedade chamada `FavoriteCities` que retorna uma matriz de valores de cadeia de caracteres. Nesse caso, você define o <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade `Person` e defina o <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade `FavoriteCities`.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Ao consultar um banco de dados, primeiro crie classes de entidade que representam o banco de dados e suas tabelas. Você pode usar o [!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)] ou o utilitário SqlMetal.exe para gerar essas classes. Você definir o <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade para a classe que representa o banco de dados e defina o <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade para a propriedade que representa a tabela de banco de dados.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a># # Ordem de controle LinqDataSource as operações se aplica a operações de dados na seguinte ordem: 1.  Onde (especificar quais dados registros de retorno).      2.  Order By (classificação).      3.  Group By (registros de dados de agregação que compartilham valores).      4.  Grupos de ordem (dados agrupada de classificação).      5.  Selecione (especificar quais campos ou propriedades a serem retornadas).      6.  Classificação automática (registros de dados de classificação por uma propriedade que o usuário selecionou).      7.  Página automático (recuperar um subconjunto de registros de dados que foram selecionados pelo usuário).       Você pode adicionar condições de <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade para filtrar os registros de dados que são retornados de uma consulta.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Se o <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade não for definida, o controle LinqDataSource recupera todos os registros do objeto de dados.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a># # Ordenando dados que você usar o <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade para especificar os nomes das propriedades dos dados retornados pelo qual classificar.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      > [!NOTE] > Quando você usa o controle LinqDataSource com [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] ou [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] e <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>está definida como `true`, você deve fornecer um valor na <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Por padrão, o <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>é de propriedade `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Se você atribuir um valor para o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade, você também deve incluir todas as colunas de identidade na lista de propriedades que é retornada na consulta.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a># # Agrupando os dados que você usa o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade para especificar quais propriedades são usadas para consolidar os registros de dados que têm os mesmos valores.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Quando você agrupar os dados, você pode incluir `Key` e `It`, que é criado dinamicamente propriedades, no <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> O `Key` propriedade refere-se aos valores de propriedade ou propriedades que foram usadas para agrupar os dados. Por exemplo, se você agrupar por uma propriedade chamada `Category`, o `Key` propriedade conterá todos os valores exclusivos de `Category` propriedade. O `It` propriedade se refere a uma coleção de registros individuais em um agrupamento de dados. Você pode repetir o `It` propriedade para recuperar os registros individuais que foram consolidados na operação de agrupamento. Por exemplo, se você agrupar por uma propriedade chamada `Category`, o `It` propriedade contém todos os registros individuais que compartilham um valor comum no `Category` propriedade.       Você usa o <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>propriedade para especificar as propriedades a serem usadas para classificar os dados agrupados.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Quando você agrupar os dados, o <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade especifica como os registros individuais dentro dos dados agrupados são classificados.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Por padrão, o controle LinqDataSource recupera valores para todas as propriedades de um objeto de dados. Você usa o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade para especificar quais propriedades para retornar se você deseja trabalhar com um subconjunto de propriedades disponíveis.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> A operação Select é aplicada depois Where, Order By e Group By operações. Portanto, se você criar um nome de alias em uma cláusula Select, o alias não está disponível nas outras cláusulas.      <a name=&quot;data_modifications&quot;></a># # Você pode especificar se as modificações de dados estão habilitadas por meio de modificações de dados a <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, e <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>Propriedades.</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> A interface do usuário para modificar dados de um controle LinqDataSource normalmente é fornecida por meio de um controle associado a dados, como um <xref:System.Web.UI.WebControls.DetailsView>controle.</xref:System.Web.UI.WebControls.DetailsView> Além de configuração <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, ou <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>para `true`, as seguintes condições são necessárias para habilitar as modificações de dados automática: - o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade não pode ser atribuída um valor.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      -A <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade não pode ser atribuída um valor.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      -A classe que é atribuído para a <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade deve ser derivado de <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      -A propriedade que é atribuída para a <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade deve ser derivado de <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Você pode restringir quais propriedades são exibidas em um controle associado a dados de duas maneiras. Você pode definir o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade a um subconjunto de propriedades, ou você pode definir os campos para um controle associado a dados adicionando <xref:System.Web.UI.WebControls.DataControlField>controles.</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> No entanto, se você definir o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade, isso significa que a atualização automática, inserção e as operações de exclusão não podem ser habilitadas.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Se você deseja habilitar as modificações de dados automática enquanto você trabalha com um subconjunto das propriedades disponíveis, não defina o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Em vez disso, recuperar todas as propriedades do objeto de dados e gerenciar quais delas são exibidas usando o controle associado a dados. Quando você usa o <xref:System.Web.UI.WebControls.DetailsView>controle ou <xref:System.Web.UI.WebControls.GridView>controle, você também deve definir o <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>ou <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>propriedades `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Isso impede que o controle associado a dados automaticamente, incluindo botões para editar e excluir os dados. Quaisquer valores que não são exibidos no controle associado a dados são armazenados no estado de exibição. Eles são passados inalterados para a fonte de dados quando a atualização de dados é executada.      <a name=&quot;evaluating_value_at_run_time&quot;></a># # Avaliando os valores em tempo de execução se você tiver que avaliar valores em tempo de execução de classificação, filtragem, ou valores de agrupamento, você pode adicionar parâmetros para o <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, ou <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>coleções.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       Se você quiser especificar valores padrão, você pode adicionar parâmetros para o <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>coleção.</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       Se você quiser examinar ou modificar os valores antes da operação de dados é executada, você pode manipular o <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, ou <xref:System.Web.UI.WebControls.LinqDataSource.Updating>eventos.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Você também pode lidar com esses eventos para cancelar a operação de dados ou para examinar os erros de validação ocorreram ao definir as propriedades na classe de dados com base na entrada do usuário.       Para examinar os valores após a operação de dados, tratar o <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, ou <xref:System.Web.UI.WebControls.LinqDataSource.Updated>eventos.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a># # Trabalhar com armazenado o procedimentos você usar o controle LinqDataSource para recuperar dados de um procedimento armazenado com a criação de um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> No evento manipulador, você chamar o método na classe de contexto de dados que representa o procedimento armazenado e definir o resultado para o <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>propriedade o <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>objeto.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Se você quiser habilitar a atualização automática, inserção e operações de exclusão para os dados, o tipo retornado do método deve corresponder ao tipo especificado no <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Para obter mais informações sobre como criar métodos de contexto de dados, consulte [como: métodos DataContext criar mapeados para procedimentos armazenados e funções (Object Relational Designer)](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;declarative_syntax&quot;></a># # Sintaxe de declarativa <CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> classe."
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle cria dinamicamente uma cláusula Order By com base nos valores de <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>coleção.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "Quando você define a propriedade AutoGenerateOrderByClause como `true`, o <xref:System.Web.UI.WebControls.LinqDataSource>controle cria dinamicamente uma cláusula Order By com base nos valores de <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>coleção.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> O <xref:System.Web.UI.WebControls.LinqDataSource>controle classifica os dados pelo primeiro parâmetro e, em seguida, além disso, classifica os dados para cada parâmetro adicional.</xref:System.Web.UI.WebControls.LinqDataSource> Parâmetros que contêm `null` ou um valor vazio não são incluídos na cláusula Order By.       Você não definir o <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade quando o AutoGenerateOrderByClause é definido como `true`, porque o analisador cria dinamicamente a cláusula Order By.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> O <xref:System.Web.UI.WebControls.LinqDataSource>controle lança uma exceção se o AutoGenerateOrderByClause é definido como `true` e <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>é atribuído a valores de propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle cria a cláusula Order By; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle cria dinamicamente um onde cláusula com base nos valores definidos no <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>coleção.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "Quando você define a propriedade AutoGenerateWhereClause como `true`, o <xref:System.Web.UI.WebControls.LinqDataSource>controle cria dinamicamente onde cláusula dos parâmetros no <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>coleção.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Cada parâmetro que você adicionar ao <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>coleção deve ter seu <xref:System.Web.UI.WebControls.Parameter.Name%2A>propriedade definida como um valor que corresponde a uma propriedade no objeto de dados que está sendo consultada.</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Gerado automaticamente onde cláusula verificará se o valor especificado no <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>coleção é igual ao valor da propriedade correspondente no objeto de dados.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Se você fornecer mais de um parâmetro, os parâmetros são vinculados com uma lógica `AND` operação. Parâmetros que contêm `null` ou um valor vazio não são incluídos no Where cláusula.       Gerado automaticamente <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>cláusula pode testar apenas para fins de igualdade e pode vincular parâmetros apenas com o `AND` operação.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Não defina a propriedade AutoGenerateWhereClause como `true` se você precisa adicionar uma condição que não testar a igualdade ou se você tiver que relacionar os parâmetros com o `OR` operação. Você pode realizar essas tarefas, definindo a propriedade AutoGenerateWhereClause para `false` e adicionar espaços reservados no <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade para cada parâmetro a <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>coleção.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> No <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade, preceda o nome de cada espaço reservado com o símbolo @.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Você não definir o <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade quando a propriedade AutoGenerateWhereClause é `true`, porque o analisador cria dinamicamente onde cláusula.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> O <xref:System.Web.UI.WebControls.LinqDataSource>controle lança uma exceção se a propriedade AutoGenerateWhereClause é `true` e <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>é atribuído a valores de propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> criará onde cláusula; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle oferece suporte à navegação pelas seções de dados em tempo de execução."
  remarks: "Defina a propriedade AutoPage como `true` para habilitar a paginação no <xref:System.Web.UI.WebControls.LinqDataSource>controle.</xref:System.Web.UI.WebControls.LinqDataSource> Para habilitar o usuário para ver os dados, conecte-se um controle associado a dados que fornece a interface para a paginação para o <xref:System.Web.UI.WebControls.LinqDataSource>controle.</xref:System.Web.UI.WebControls.LinqDataSource> Quando a propriedade AutoPage está definida como `true`, o <xref:System.Web.UI.WebControls.LinqDataSource>controle recupera somente registros suficientes para uma página no controle associado a dados.</xref:System.Web.UI.WebControls.LinqDataSource> Ele usa o <xref:System.Linq.Enumerable.Skip%2A>e <xref:System.Linq.Enumerable.Take%2A>métodos para recuperar os registros para a página atual.</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o usuário pode ler os dados; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle oferece suporte a classificação dos dados em tempo de execução."
  remarks: "O <xref:System.Web.UI.WebControls.LinqDataSource>controle suporta duas abordagens para classificar os dados.</xref:System.Web.UI.WebControls.LinqDataSource> Você pode usar a propriedade AutoClassificação para habilitar a classificação de tempo de execução, ou você pode definir o <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade para definir a classificação em tempo de design.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Defina a propriedade AutoClassificação como `true` para habilitar a classificação em um <xref:System.Web.UI.WebControls.LinqDataSource>controle baseado na expressão de classificação de um controle associado a dados.</xref:System.Web.UI.WebControls.LinqDataSource> O controle de associação de dados fornece a interface para permitir que o usuário selecionar em tempo de execução cuja propriedade a ser usado para classificação.       Você pode definir a ordem na qual os dados são retornados, definindo o <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade para a propriedade ou propriedades usadas para classificação.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Quando o <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade é definida como uma propriedade e a propriedade AutoClassificação é `true`, a expressão de classificação do controle associado a dados é aplicada depois da expressão no <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Portanto, isso determina a classificação final dos dados."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o usuário pode classificar os dados. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre depois que uma instância do objeto de tipo de contexto é criada."
  remarks: "Manipule o evento ContextCreated para examinar o objeto de tipo de contexto ou examine as exceções que são geradas quando o objeto está sendo criado. Recuperar o objeto de tipo de contexto da <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>propriedade o <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto que está associado com esse evento.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Recuperar a exceção foi gerada durante a operação de dados a partir de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       O objeto de tipo de contexto é criado durante a select, update, insert e operações de exclusão e é reutilizado em toda a solicitação.       Há uma vez quando o evento não será gerado. Isso é quando você define o <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>propriedade para um objeto durante a <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Uma condição adicional é que ambos os valores originais não precisam ser armazenadas em estado de exibição, ou o objeto de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>propriedade implementa o <xref:System.Data.Linq.ITable>interface.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de uma instância do objeto de tipo de contexto é criada."
  remarks: "Por padrão, o <xref:System.Web.UI.WebControls.LinqDataSource>controle cria uma instância do tipo especificado no <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> O <xref:System.Web.UI.WebControls.LinqDataSource>controle chama o construtor padrão do objeto de contexto de dados para criar uma instância do objeto.</xref:System.Web.UI.WebControls.LinqDataSource> É possível que você precisa usar um construtor não padrão, ou você precisa criar um objeto que é diferente do especificado no <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Nesse caso, você deve manipular o evento ContextCreating e criar manualmente o objeto de contexto de dados.       O objeto de tipo de contexto é criado durante a selecionar, atualizar, inserir e excluir operações.       Há uma vez quando o evento não será gerado. Isso é quando você define o <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>propriedade a um objeto em um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Uma condição adicional é que ambos os valores originais não precisam ser armazenadas em estado de exibição, ou o objeto de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>propriedade implementa o <xref:System.Data.Linq.ITable>interface.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de descartar o objeto de tipo de contexto."
  remarks: "Manipular o evento ContextDisposing para descartar o objeto manualmente ou executar a limpeza que é específica para o objeto antes do objeto é destruído."
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome do tipo que contém a propriedade cujo valor tem os dados que você deseja recuperar."
  remarks: "Quando você usa o <xref:System.Web.UI.WebControls.LinqDataSource>controlar para recuperar dados de uma coleção de dados na memória ou um banco de dados, você deve especificar duas propriedades.</xref:System.Web.UI.WebControls.LinqDataSource> A primeira é uma classe de contexto de dados que representa a fonte de dados. O segundo é uma propriedade na classe de contexto de dados que contém os dados. Defina a propriedade ContextTypeName com o nome da classe de contexto de dados e você definir o <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade para a coleta de dados que contém os dados.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Por exemplo, quando você recupera dados de um banco de dados, defina a propriedade ContextTypeName para o nome da classe que representa o banco de dados. Defina também a <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade para a propriedade que representa a tabela no banco de dados.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Para gerar classes de banco de dados, use o [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] ou o utilitário SqlMetal.exe para gerar automaticamente as instâncias dessas classes.       Quando você recupera dados de uma coleção de dados na memória como uma matriz, defina a propriedade ContextTypeName para o nome da classe que contém a propriedade de matriz. Em seguida, defina o <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade para a propriedade que obtém a matriz.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Para habilitar a atualização automática, inserir ou excluir operações por meio do <xref:System.Web.UI.WebControls.LinqDataSource>controle, a classe atribuída à propriedade ContextTypeName deve derivar de <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> Além disso, a propriedade é atribuído para a <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade deve ser derivado de <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Se você não precisa para habilitar a atualização automática, inserir ou excluir operações, você pode atribuir o nome de qualquer tipo de classe para a propriedade ContextTypeName.       Para obter informações sobre como selecionar dados de uma instância de uma classe, consulte o <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "O nome da classe para recuperar dados."
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Retorna uma exibição que podem ser consulta."
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "Uma exibição que podem ser consulta."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Cria uma nova instância do <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;> </xref> classe que está associado este controle."
  remarks: "Para fornecer uma exibição personalizada, você pode substituir esse método em uma classe derivada."
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "Um objeto que atua como a interface para controles associados a dados."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Executa uma operação de exclusão."
  remarks: "Normalmente, você não precisa chamar o método Delete do seu código. Quando você usa um <xref:System.Web.UI.WebControls.LinqDataSource>controle com um controle associado a dados, o controle associado a dados chamará o método Delete automaticamente quando o usuário executa a ação para excluir um registro.</xref:System.Web.UI.WebControls.LinqDataSource> Você chamar explicitamente o método Delete quando você deseja criar seu próprio processo de exclusão de dados. Por exemplo, você pode chamar o método Delete para excluir um registro com base em um evento fora do controle de associação de dados."
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Os valores de chave da linha para os registros a serem excluídos."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Os valores de linha são avaliados para detectar conflitos de dados."
    return:
      type: System.Int32
      description: "O número de registros afetados pela operação de exclusão."
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando uma operação de exclusão for concluída."
  remarks: "Manipule o evento excluído para capturar todas as exceções de operação de exclusão, ou para examinar os parâmetros de saída após a operação. Você pode recuperar os parâmetros de saída a <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto que é passado para manipuladores de eventos.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Esta propriedade não é usada pelo <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> classe."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Uma coleção de parâmetros."
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de uma operação de exclusão."
  remarks: "Manipule o evento de exclusão para validar o objeto a ser excluído, examine os erros de validação de dados da classe de dados, para alterar um valor antes da operação de exclusão ou cancelar a operação de exclusão. O <xref:System.Web.UI.WebControls.LinqDataSource>controle passa um <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>objeto para manipuladores de eventos para o evento de exclusão.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> O <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>objeto contém os dados que serão excluídos e permite que você cancelar a operação de exclusão.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Se os dados de classe lança um <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>exceção, o <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>objeto contém essa exceção no <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       Se uma exceção for lançada em um manipulador de eventos para o evento de exclusão, você deve tratar a exceção no manipulador de eventos. A exceção não será passada para um manipulador de eventos a <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>eventos (por meio de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade do <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> O <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade contém apenas as exceções que são lançadas após o evento de exclusão.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se os registros de dados podem ser excluídos por meio de <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle."
  remarks: "Defina a propriedade EnableDelete como `true` quando quiser permitir que os usuários excluir um registro de dados por meio de <xref:System.Web.UI.WebControls.LinqDataSource>controle.</xref:System.Web.UI.WebControls.LinqDataSource> Quando for EnableDelete `true`, o <xref:System.Web.UI.WebControls.LinqDataSource>controle usa LINQ to SQL para criar automaticamente o comando para excluir os dados.</xref:System.Web.UI.WebControls.LinqDataSource> Você deve incluir uma interface que permite aos usuários selecionar um registro para excluir, como um <xref:System.Web.UI.WebControls.DetailsView>controle.</xref:System.Web.UI.WebControls.DetailsView>       O <xref:System.Web.UI.WebControls.LinqDataSource>controle não dá suporte a operações de exclusão automática quando o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade ou o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>está definida.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Nesse caso, o <xref:System.Web.UI.WebControls.LinqDataSource>controle lança uma exceção se uma operação de exclusão é tentada.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as operações de exclusão automática estiverem habilitadas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se os registros de dados podem ser inseridos por meio de <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle."
  remarks: "Defina a propriedade EnableInsert como `true` quando quiser permitir aos usuários inserir um novo registro de dados por meio de <xref:System.Web.UI.WebControls.LinqDataSource>controle.</xref:System.Web.UI.WebControls.LinqDataSource> Quando for EnableInsert `true`, o <xref:System.Web.UI.WebControls.LinqDataSource>controle usa LINQ to SQL para criar automaticamente o comando para inserir os dados.</xref:System.Web.UI.WebControls.LinqDataSource> Você deve incluir uma interface que permite aos usuários inserir um novo registro, como um <xref:System.Web.UI.WebControls.DetailsView>controle.</xref:System.Web.UI.WebControls.DetailsView>       O <xref:System.Web.UI.WebControls.LinqDataSource>controle não dá suporte a operações de inserção automática quando o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade ou o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>está definida.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Nesse caso, o <xref:System.Web.UI.WebControls.LinqDataSource>controle lança uma exceção se uma operação de inserção é tentada.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as operações de inserção automática estiverem habilitadas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o valor que indica se as alterações para o objeto de contexto de dados são rastreadas."
  remarks: "A propriedade EnableObjectTracking é usada somente ao selecionar dados de um objeto de contexto de dados LINQ To SQL.       Quando você está interagindo com dados somente leitura, definindo a propriedade EnableObjectTracking `false` melhora o desempenho porque os dados não é armazenado em cache para determinar se ele foi alterado. No entanto, ele também desabilita a consulta deferida. Essa propriedade deve ser definida como `true` se você quiser usar a execução de consulta deferida."
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto de contexto de dados é controlado para as alterações; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se os registros de dados podem ser atualizados por meio de <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controle."
  remarks: "Defina a propriedade EnableUpdate como `true` quando quiser permitir que os usuários atualizar um registro de dados usando o <xref:System.Web.UI.WebControls.LinqDataSource>controle.</xref:System.Web.UI.WebControls.LinqDataSource> Quando for EnableUpdate `true`, o <xref:System.Web.UI.WebControls.LinqDataSource>controle usa LINQ to SQL para criar automaticamente o comando para atualizar os dados.</xref:System.Web.UI.WebControls.LinqDataSource> Você deve incluir uma interface que permite aos usuários atualizar um registro, como um <xref:System.Web.UI.WebControls.DetailsView>controle.</xref:System.Web.UI.WebControls.DetailsView>       O <xref:System.Web.UI.WebControls.LinqDataSource>controle não dá suporte a operações de atualização automática quando a <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade ou o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>está definida.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Nesse caso, o <xref:System.Web.UI.WebControls.LinqDataSource>controle lança uma exceção se uma operação de atualização é tentada.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as operações de atualização automática estiverem habilitadas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que especifica quais propriedades são usadas para agrupar os dados recuperados."
  remarks: "Você pode usar a propriedade GroupBy para especificar quais propriedades são usadas para a consolidação de registros de dados que têm os mesmos valores. Por exemplo, se você definir a propriedade GroupBy como `Name`, todos os registros na consulta que têm o mesmo `Name` o valor da propriedade são retornados como um único registro consolidado.       Você pode atribuir mais de uma propriedade para a propriedade GroupBy colocando todas as propriedades de `new` função e separando cada propriedade usando uma vírgula. Por exemplo, para agrupar por propriedades `Name` e `Category`, defina a propriedade GroupBy como `new(Name, Category)`.       Os valores que são usados para agrupamento na propriedade são retornados por meio de uma propriedade gerada chamada `Key`. Incluir o `Key` propriedade o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade para recuperar os valores agrupados.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Você pode definir o `Key` propriedade como um alias usando o `As` palavra-chave, mas você não precisa usar um alias. Por exemplo, você pode definir a propriedade GroupBy para uma propriedade chamada `Category`. Você pode recuperar os valores consolidados do `Category` propriedade definindo o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade `new(Key As ProductCategory)`.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Você pode acessar os registros individuais em um agrupamento, incluindo o `It` propriedade o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> O `It` propriedade contém uma coleção de registros que compartilham um valor na propriedade agrupado. Você pode repetir o `It` propriedade para recuperar os registros individuais.       A propriedade GroupBy geralmente é usada com métodos de agregação. Você pode usar os seguintes métodos de agregação:- `Count()`       -    `Average(` *coluna* `)`       -    `Sum(` *coluna* `)`       -    `Max(` *coluna* `)`       -    `Min(` *coluna* `)`       -    `Where(` *condição* `)`       -    `Any()`       -    `All(` *condição* `)` para obter mais informações, consulte [NIB: Visão geral do controle de servidor Web LinqDataSource](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) e [como: grupo e agregação de dados usando o LinqDataSource Controle](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada para criar a cláusula Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que são usados para criar a cláusula Group By."
  remarks: "O <xref:System.Web.UI.WebControls.LinqDataSource>controle usa parâmetros na coleção GroupByParameters para criar a cláusula Group By em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource> Normalmente você não usar a coleção de GroupByParameters para agrupar dados. Em vez disso, você pode usar o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Você usar a coleção de GroupByParameters somente quando um valor na cláusula Group By deve ser definido em tempo de execução e se o valor não é um nome de propriedade. Por exemplo, usar a coleção de GroupByParameters para agrupar dados com base em se o `LastName` propriedade nos registros de dados é igual a um valor fornecido pelo usuário.       Se você deseja agrupar dados por uma propriedade e essa propriedade não precisa ser definida em tempo de execução, você pode definir a propriedade de agrupamento de <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Por exemplo retornar valores de uma tabela de banco de dados agrupados por `LastName`, defina <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>como &quot;Sobrenome&quot; sem parâmetros.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Se você deseja agrupar os dados dinamicamente por uma propriedade, crie um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento e personalizar o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade conforme necessário.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       Você não pode atribuir o nome de uma propriedade como o valor para um parâmetro na coleção GroupByParameters. Adicionar parâmetros à coleção GroupByParameters quando você deseja adicionar uma condição para a <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade deve ser definida em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Para definir os valores na coleção GroupByParameters, você pode atribuir um nome para cada parâmetro e, em seguida, adicione um espaço reservado no <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade para que o parâmetro nomeado.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Na cláusula Group By, preceda cada nome de parâmetro com o símbolo @."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Os parâmetros que são usados para criar a cláusula Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Executa uma operação de inserção."
  remarks: "Normalmente, você não precisa chamar o método de inserção do seu código. O controle de associação de dados automaticamente chamará o método de inserção quando o usuário executa a ação para inserir um novo registro. Você chamar explicitamente o método de inserção quando você deseja criar seu próprio processo de inserção de dados."
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "Os valores de linha a ser inserido na fonte de dados."
    return:
      type: System.Int32
      description: "O número de linhas afetadas pela operação de inserção."
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando uma operação de inserção tiver terminado."
  remarks: "Manipule o evento Inserted para capturar todas as exceções de operação de inserção ou para examinar os valores após a operação de inserção. Você pode recuperar os novos valores por meio de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto que é passado para manipuladores de eventos.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Por exemplo, você pode usar o <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto ao recuperar a propriedade de identidade gerada por um banco de dados para um novo registro de dados.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de uma operação de inserção."
  remarks: "Manipule o evento inserindo para validar o objeto a ser inserido, examine os erros de validação de dados da classe de dados, para alterar um valor antes da operação de inserção, ou para cancelar a operação de inserção. O <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>objeto passado para manipuladores de eventos para este evento contém o novo objeto a ser inserido na fonte de dados.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       Se ocorrer um erro de validação durante a operação de inserção, o <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>objeto contém as exceções de validação que são geradas por classe de dados.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Um erro de validação ocorre se um valor a ser inserido não corresponde ao tipo da propriedade na classe de dados, ou se ele não passar em uma verificação de validação personalizada. Um manipulador de eventos para o evento de inserir, você pode recuperar as exceções de validação e tomar as devidas providências.       Se uma exceção for lançada em um manipulador de eventos para o evento de inserir, você deve tratar a exceção no manipulador de eventos. A exceção não será passada para um manipulador de eventos a <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>eventos (por meio de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade do <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> O <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade contém apenas as exceções que são lançadas após o evento inserindo.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que são usados durante uma operação de inserção."
  remarks: "Normalmente, os valores que são necessários para uma operação de inserção são passados para o <xref:System.Web.UI.WebControls.LinqDataSource>controle pelo controle associado a dados.</xref:System.Web.UI.WebControls.LinqDataSource> Especificar parâmetros de inserção quando você deseja fornecer um padrão de valor ou definem se deve converter valores vazios `null`. Você não precisa fornecer um parâmetro para cada valor que será inserido, apenas para os valores que devem ser tratados quando o usuário não fornecer um valor.       Os valores que você fornece na coleção InsertParameters são usados somente para os campos que são definidos na fonte de dados, mas que não estão associados no controle de dados. Por exemplo, suponha que uma tabela de banco de dados tem colunas que são chamadas de nome, endereço e CEP, mas um <xref:System.Web.UI.WebControls.ListView>controle que está associado à tabela é vinculado somente para os campos nome e endereço.</xref:System.Web.UI.WebControls.ListView> Os valores na coleção InsertParameters serão usados apenas para o campo PostalCode. Eles não serão usados para o campo de nome e endereço. Isso é verdadeiro mesmo se nenhum valor for inserido para esses campos. Se o controle de associação de dados gera automaticamente os campos para todos os campos na fonte de dados, nenhum valor da coleção InsertParameters será usado."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Os parâmetros que são usados durante uma operação de inserção."
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inicializa o <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> objeto."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Os dados do evento."
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Gera o <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> eventos."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>objeto que contém os dados do evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que especifica quais campos são usados para ordenar os dados recuperados."
  remarks: "Você pode usar a propriedade OrderBy para especificar quais propriedades dos dados retornados a ser usado para classificação. A propriedade de classificação dos dados deve existir na fonte de dados original, mas ele não precisa ser incluído no <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Você pode adicionar um espaço e `Ascending`, `ASC`, `Descending`, ou `DESC` a uma propriedade na cadeia de caracteres OrderBy para especificar como os dados ordenados são retornados.       Você pode fornecer mais de uma propriedade na propriedade OrderBy separando cada propriedade usando uma vírgula. Por exemplo, a ordem por propriedades chamadas `LastName` e `FirstName`, defina a propriedade OrderBy como &quot;Sobrenome, nome&quot;.      > [!NOTE] > Quando você usa o <xref:System.Web.UI.WebControls.LinqDataSource>controlar com [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] ou [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] e <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>está definida como `true`, você deve fornecer um valor na propriedade OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Por padrão, o <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>é de propriedade `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Se você atribuir um valor para o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade, você também deve incluir todas as colunas de identidade na lista de propriedades que é retornada na consulta.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Se o <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>está definida como `true`, um controle associado a dados pode passar uma expressão de classificação para o <xref:System.Web.UI.WebControls.LinqDataSource>controle em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> O <xref:System.Web.UI.WebControls.LinqDataSource>controle será aplicada a expressão de classificação do controle associado a dados depois de aplicar a propriedade OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource> Portanto, os dados são retornados de acordo com a expressão de classificação do controle associado a dados."
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada para criar a cláusula Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que são usados para criar a cláusula Order By."
  remarks: "O <xref:System.Web.UI.WebControls.LinqDataSource>controle usa parâmetros na coleção de OrderByParameters para criar a cláusula Order By em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource> Em geral é definir o <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>propriedade `true` quando você adiciona parâmetros para a coleção de OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Quando o <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>estiver definida como `true`, cada parâmetro na coleção de OrderByParameters é adicionado à cláusula Order By na sequência que foram especificados na coleção de OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Quando o <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>é de propriedade `true`, os parâmetros não precisam ser chamado porque eles são aplicados em sequência e não corresponde a um espaço reservado.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       Se você não precisa definir um valor de tempo de execução na cláusula Order By, você não precisa usar a coleção de OrderByParameters. Você pode definir os campos a serem usada para ordenar os dados de <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Por exemplo retornar valores de uma tabela de banco de dados ordenados por `LastName`, defina <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>como &quot;Sobrenome&quot; sem parâmetros.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Você pode definir parâmetros na coleção de OrderByParameters e correspondem aos parâmetros aos espaços reservados no <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>propriedade, mas essa abordagem limitou o aplicativo.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Quando você usar essa abordagem, os parâmetros na coleção de OrderByParameters não podem representar um nome de coluna. Você pode definir um parâmetro para um valor e, em seguida, compare esse valor com valores em uma propriedade. Por exemplo, você pode classificar os dados com base em se os valores em uma propriedade serão menor que o valor de tempo de execução representado pelo parâmetro."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Os parâmetros que são usados para criar a cláusula Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define os campos que são usados para ordenação dados agrupados."
  remarks: "Você pode usar a propriedade OrderGroupsBy para especificar como os grupos de dados são classificados. Por exemplo, você pode agrupar pela `CategoryID` propriedade e, em seguida, classificação de grupo pela média de cada ID de categoria de `Price` propriedade.       Você pode definir a propriedade OrderGroupsBy somente quando você agrupar os dados. Se você definir a propriedade OrderGroupsBy sem definir o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>propriedade, o <xref:System.Web.UI.WebControls.LinqDataSource>controle gera uma exceção.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       A propriedade que é usada para classificar os dados deve ser uma propriedade que é usada para agrupar os dados ou o resultado de uma função de agregação para os dados agrupados. Para especificar como os dados são classificados, você pode adicionar um espaço e a cadeia de caracteres &quot;Crescente&quot;, &quot;Crescente&quot;, &quot;Decrescente&quot; ou &quot;DESC&quot; para um nome de propriedade na cadeia de caracteres OrderGroupsBy.       Você pode especificar mais de uma propriedade na propriedade OrderGroupsBy. Separe cada propriedade usando uma vírgula."
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada para criar a cláusula de grupos de Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que são usados para criar a cláusula de grupos de Order By."
  remarks: "O <xref:System.Web.UI.WebControls.LinqDataSource>controle usa parâmetros na coleção OrderGroupsByParameters para criar a cláusula de grupos de Order By em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource>       Você pode adicionar valores à coleção OrderGroupsByParameters somente quando você deve definir valores em tempo de execução na cláusula grupos de Order By. Você pode definir os campos que são usados para ordenar os dados usando o <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       Você pode definir parâmetros na coleção OrderGroupsByParameters e correspondem aos parâmetros aos espaços reservados no <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> No entanto, quando você usar essa abordagem, os parâmetros na coleção OrderGroupsByParameters não podem representar um nome de coluna. eles devem representar valores. Você pode definir um parâmetro para um valor e, em seguida, compare esse valor para uma propriedade. Por exemplo, você pode classificar os dados com base em se os valores em uma propriedade serão menor que o valor de tempo de execução representado pelo parâmetro."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Os parâmetros que são usados para criar a cláusula de grupos de Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define as propriedades e os valores calculados são incluídos nos dados recuperados."
  remarks: "Se você não definir a propriedade Select, o <xref:System.Web.UI.WebControls.LinqDataSource>controle recupera todas as propriedades (colunas de dados) do objeto de dados.</xref:System.Web.UI.WebControls.LinqDataSource> Você usa a propriedade Select para recuperar um subconjunto das propriedades do objeto ou para calcular novos valores, quando os dados estão sendo recuperados.       Especifique quais propriedades para recuperar, definindo a propriedade Select para os nomes das propriedades que você deseja incluir nos dados retornados.       Se você recuperar um subconjunto das propriedades do objeto de dados, o <xref:System.Web.UI.WebControls.LinqDataSource>controle cria dinamicamente uma classe que contém somente as propriedades que você especificar na propriedade Select.</xref:System.Web.UI.WebControls.LinqDataSource> Uma classe também é criada dinamicamente se você calcular propriedades que não são propriedades no objeto de dados. Nesses casos, o objeto retornado da consulta não é uma instância da classe que é especificada no <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Em vez disso, você deve usar o `new` método na propriedade Selecione para indicar que uma nova classe é retornada da consulta. Por exemplo, para retornar apenas o `FirstName` e `LastName` propriedades de um objeto que contém mais do que essas propriedades, defina a propriedade Select para `new(FirstName, LastName)`. O <xref:System.Web.UI.WebControls.LinqDataSource>dinamicamente criará a nova classe que você especificou no `new` método.</xref:System.Web.UI.WebControls.LinqDataSource>       Você pode usar o `As` palavra-chave para atribuir um alias para um valor selecionado. Se você atribuir um alias, você deve incluir as propriedades de um alias no `new` método. Qualquer controle associado a dados que vincula os resultados do <xref:System.Web.UI.WebControls.LinqDataSource>controle deve se referir à propriedade pelo alias.</xref:System.Web.UI.WebControls.LinqDataSource> Por exemplo, se você definir a propriedade Select `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, o controle associado a dados pode acessar duas propriedades, `SalesRegion` e `RevenueThousands`.       Você usa o `new` função na propriedade de Select de acordo com as condições listadas na tabela a seguir.      | Selecione | Uso de novos | Exemplo |   |------------|----------------|-------------|   | Única propriedade. | `new` não necessário. | `Select=&quot;Category&quot;`|   | Várias propriedades. | `new` necessário. | `Select=&quot;new(Cateogry, Name)&quot;`|   | Única ou várias propriedades que têm um alias. | `new` necessário. | `Select=&quot;new(Category As CategoryGroup)&quot;`|       Se você deseja habilitar as modificações de dados automática, mas você não deseja exibir todas as propriedades do objeto de dados, não defina a propriedade Select. Em vez disso, gerencie a exibição por meio do controle de associação de dados. Quando você usa o <xref:System.Web.UI.WebControls.DetailsView>controle ou <xref:System.Web.UI.WebControls.GridView>controle, você também deve definir o <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>ou o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>propriedade `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Quaisquer valores que não são exibidos no controle associado a dados são armazenados no estado de exibição. Eles são passados inalterados para a fonte de dados quando a atualização de dados é executada.       Quando você agrupar dados na consulta, você pode incluir os métodos de agregação na propriedade Select. Você pode usar os seguintes métodos de agregação:- `Count()`       -    `Average(` *coluna* `)`       -    `Sum(` *coluna* `)`       -    `Max(` *coluna* `)`       -    `Min(` *coluna* `)`       -    `Where(` *condição* `)`       -    `Any()`       -    `All(` *condição* `)` para obter mais informações, consulte [NIB: Visão geral do controle de servidor Web LinqDataSource](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) e [como: grupo e agregação de dados usando o LinqDataSource Controle](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af).       Quando você agrupar os dados, você pode incluir `Key` e `It`, que é criado dinamicamente propriedades, na propriedade Select. O `Key` propriedade refere-se aos valores de propriedade ou propriedades que foram usadas para agrupar os dados. Por exemplo, se você agrupar por uma propriedade chamada `Category`, o `Key` contém cada valor exclusivo na propriedade de `Category` propriedade. O `It` propriedade se refere a uma coleção de registros individuais em um agrupamento de dados. Você pode repetir o `It` propriedade para recuperar os registros individuais que foram consolidados na operação de agrupamento. Por exemplo, se você agrupar por uma propriedade chamada `Category`, o `It` propriedade contém todos os registros individuais que compartilham um valor comum no `Category` propriedade.       Se você incluir o `It` palavra-chave na propriedade Select quando se agrupam dados, você deve atribuir um alias para o `It` palavra-chave. O <xref:System.Web.UI.WebControls.LinqDataSource>controle lançará uma exceção se `It` não tem um alias.</xref:System.Web.UI.WebControls.LinqDataSource> Você pode atribuir um alias para o `Key` palavra-chave, mas isso não é necessário."
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada para criar a cláusula Select."
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando uma operação de recuperação de dados for concluída."
  remarks: "Manipule o evento selecionado para capturar todas as exceções da operação de recuperação de dados ou para examinar o objeto de dados após a operação de recuperação. O objeto está disponível na <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto que é passado para manipuladores de eventos.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de uma operação de recuperação de dados."
  remarks: "Manipular o evento Selecting para executar as seguintes tarefas:-modificar parâmetros para a recuperação de dados.      -Gere a consulta programaticamente.      -Modificar os valores de classificação ou paginação.      -Execute classificação personalizada ou paginação.      -Cancele a operação de recuperação de dados.       O <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>objeto que é passado para manipuladores de eventos para esse evento contém os parâmetros para a operação de recuperação de dados.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Você pode modificar os parâmetros no manipulador de eventos selecionando antes da consulta é executada, ou você pode criar um novo conjunto de resultados e atribuí-la para o <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       A capacidade de implementar a classificação personalizada ou paginação em manipuladores para esse evento pode ser limitada pelo controle que está associado a <xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> Por exemplo, quando o cabeçalho da coluna de uma <xref:System.Web.UI.WebControls.GridView>controle é clicado, o controle executa a classificação automática que pode substituir a ordem de sua estabelecer no evento manipulador.</xref:System.Web.UI.WebControls.GridView>       Se uma exceção for lançada em um manipulador de eventos para o evento Selecting, você deve tratar a exceção no manipulador de eventos. A exceção não será passada para um manipulador de eventos a <xref:System.Web.UI.WebControls.LinqDataSource.Selected>eventos (por meio de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade do <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> O <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade contém apenas as exceções que são lançadas após o evento Selecting.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que são usados durante uma operação de recuperação de dados."
  remarks: "O <xref:System.Web.UI.WebControls.LinqDataSource>controle usa parâmetros na coleção SelectParameters para criar a cláusula Select em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource> Você pode adicionar parâmetros à coleção SelectParameters quando você quiser usar valores de tempo de execução na cláusula Select. Por exemplo, você pode adicionar um parâmetro à coleção SelectParameters para representar uma propriedade no perfil do usuário. Você pode usar essa propriedade e um valor da fonte de dados para calcular um novo valor.       Se você não precisa definir um valor de tempo de execução na cláusula Select, você não precisa usar a coleção SelectParameters. Você pode definir as propriedades para recuperar o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Por exemplo, para retornar o `FirstName` e `LastName` valores de uma tabela de banco de dados, definir <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>para &quot;FirstName, LastName&quot; sem parâmetros.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Para definir os valores na coleção SelectParameters, você adiciona um espaço reservado de <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade para o parâmetro nomeado.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Na cláusula Select, preceda cada nome de parâmetro com o símbolo @.       Você não pode usar um parâmetro na coleção SelectParameters para representar um nome de propriedade. Para definir dinamicamente o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade para o nome de uma propriedade, criar um manipulador de eventos para o <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento e personalizar o <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>propriedade conforme necessário.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Os parâmetros que são usados para criar a cláusula Select."
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que indica se os dados da fonte de dados devem ser armazenados em estado de exibição para certificar-se de que os dados não foi alterados por outro processo antes de ser atualizado ou excluído."
  remarks: "Por padrão, quando atualizar e excluir operações foram habilitadas, o <xref:System.Web.UI.WebControls.LinqDataSource>controle armazena os valores originais para todos os registros no modo de exibição de estado.</xref:System.Web.UI.WebControls.LinqDataSource> O <xref:System.Web.UI.WebControls.LinqDataSource>controle armazena valores para todas as chaves primárias e todas as propriedades não marcado com `UpdateCheck.Never` no `Column` atributo.</xref:System.Web.UI.WebControls.LinqDataSource> Você definir o `UpdateCheck` propriedade o `Column` atributo no [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)].       Antes do LINQ to SQL atualiza ou exclui dados, ele verifica os valores em estado de exibição em relação aos valores atuais da fonte de dados. Se os valores não coincidirem, o registro da fonte de dados foi alterado. Nesse caso, o LINQ to SQL gera uma exceção e não continuar com a atualização ou operação de exclusão. Para obter mais informações sobre o LINQ to SQL, consulte [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       Armazenar os valores originais na exibição estado pode fazer com que o tamanho da página para se tornar desnecessariamente grandes e pode expor dados confidenciais para um usuário mal-intencionado. Você pode desabilitar o armazenamento de valores em estado de exibição, definindo a propriedade StoreOriginalValuesInViewState para `false`. Se você fizer isso, você deve fornecer sua própria maneira para certificar-se de que os dados não foi alterado. Se você definir a propriedade StoreOriginalValuesInViewState como `false`, os valores originais não são persistentes no estado de exibição para o controle associado a dados. Nesse caso, o LINQ to SQL não é possível verificar a integridade dos dados. O LINQ to SQL lançará uma exceção que indica um conflito de dados, mesmo se os dados na fonte de dados, na verdade, não mudou.       Se a fonte de dados contiver um campo de carimbo de hora que é atualizado automaticamente durante uma atualização, você pode armazenar apenas esse valor em estado de exibição. Nesse caso, a propriedade de carimbo de hora na classe de entidade é definida como `IsVersion=true` e todas as propriedades são definidas como `UpdateCheck.Never`. Como um campo de carimbo de hora é atualizado automaticamente pelo banco de dados sempre que as alterações de dados no registro, o LINQ to SQL determina desse valor se dados foram alterados. Isso ajuda a reduzir o tamanho do estado de exibição e não há dados confidenciais são expostos. O LINQ to SQL verifica a consistência dos dados comparando o valor de carimbo de hora no modo de exibição estado com o valor de carimbo de hora no banco de dados. Para obter mais informações, consulte [passo a passo: usando um carimbo de hora com o controle LinqDataSource para verificar a integridade de dados](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)."
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os valores serão armazenados na exibição de estado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Para obter uma descrição desse membro, consulte <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.LinqDataSource>instância é convertida em um <xref:System.Web.DynamicData.IDynamicDataSource>interface.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "O tipo que está associado com a classe."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Para obter uma descrição desse membro, consulte <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.LinqDataSource>instância é convertida em um <xref:System.Web.DynamicData.IDynamicDataSource>interface.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "O nome da entidade."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define o nome da propriedade ou campo na classe de contexto de dados que representa uma coleção de dados."
  remarks: "Defina a propriedade TableName para o nome da propriedade ou campo que representa os dados que você deseja recuperar. Quando você estiver se conectando a uma tabela de banco de dados, o nome da propriedade é normalmente o mesmo que o nome da tabela. Quando você estiver se conectando a uma coleção de dados na memória, defina a propriedade TableName para o nome da propriedade ou campo que retorna a coleção de dados.       Você pode atribuir uma propriedade que retorna qualquer tipo para a propriedade TableName para operações de recuperação. Se o objeto que é representado pela propriedade não implementa <xref:System.Collections.IEnumerable>, o <xref:System.Web.UI.WebControls.LinqDataSource>controle ajustará automaticamente o objeto em uma instância de um <xref:System.Collections.IEnumerable>objeto.</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       Para habilitar a atualização automática, inserir ou excluir operações, a classe que é atribuído para a <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>propriedade deve ser derivado do <xref:System.Data.Linq.DataContext>e a propriedade que é atribuída a propriedade deve ser derivado de <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> TableName</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Para obter informações sobre como selecionar dados de uma instância de uma classe, consulte o <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o nome da propriedade que contém a coleção de dados."
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Executa uma operação de atualização."
  remarks: "Normalmente, você não precisa chamar o método Update do seu código. O controle associado a dados chamará o método de atualização automaticamente quando o usuário executa a ação para atualizar um registro. Você chamar explicitamente o método de atualização, quando você deseja criar seu próprio processo de atualização de dados."
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Os valores de chave da linha para os registros a serem atualizados."
    - id: values
      type: System.Collections.IDictionary
      description: "Os valores de linha a ser atualizada na fonte de dados."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Os valores de linha são avaliados para detectar conflitos de dados."
    return:
      type: System.Int32
      description: "O número de registros afetados pela operação de atualização."
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre quando uma operação de atualização for concluída."
  remarks: "Manipule o evento Updated para capturar todas as exceções da operação de atualização ou para examinar os valores de parâmetros de saída após a operação de atualização. Os parâmetros de saída estão disponíveis no <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto que é passado para manipuladores de eventos.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Esta coleção não é usada pelo <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> classe."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Uma coleção de parâmetros."
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ocorre antes de uma operação de atualização."
  remarks: "Manipule o evento de atualização para validar o objeto a ser atualizada, para examinar os erros de validação de dados da classe de dados, para alterar um valor antes da operação de atualização, ou para cancelar a operação de atualização. O <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>objeto que é passado para manipuladores de eventos contém o objeto original e o objeto atualizado.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       Se ocorrer um erro de validação durante a operação de atualização, o <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>objeto contém as exceções de validação que são geradas por classe de dados.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Um erro de validação ocorre se um valor a ser atualizada não corresponde ao tipo da propriedade na classe de dados, ou se ele não passar em uma verificação de validação personalizada. Um manipulador de eventos para o evento de atualização, você pode recuperar as exceções de validação e tomar as devidas providências.       Se uma exceção for lançada em um manipulador de eventos para o evento de atualização, você deve tratar a exceção no manipulador de eventos. A exceção não será passada para um manipulador de eventos a <xref:System.Web.UI.WebControls.LinqDataSource.Updated>eventos (por meio de <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade do <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>objeto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> O <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>propriedade contém apenas as exceções que são lançadas após o evento de atualização.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém ou define um valor que especifica as condições que deve ser verdadeiro para um registro a ser incluído nos dados recuperados."
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada para criar o onde cláusula."
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Obtém a coleção de parâmetros que é usada para criar o onde cláusula."
  remarks: "O <xref:System.Web.UI.WebControls.LinqDataSource>controle usa parâmetros na coleção de WhereParameters criar onde cláusula em tempo de execução.</xref:System.Web.UI.WebControls.LinqDataSource> Adicionar parâmetros à coleção WhereParameters quando você deseja definir programaticamente uma ou mais das condições em Where cláusula. Por exemplo, você pode pesquisar uma tabela de banco de dados para registros com um sobrenome igual ao valor de um <xref:System.Web.UI.WebControls.TextBox>controle.</xref:System.Web.UI.WebControls.TextBox> Nesse caso, você deve adicionar um parâmetro à coleção de WhereParameters para o valor da caixa de texto.       Se você não precisa definir um valor de tempo de execução no Where cláusula, você não precisa usar a coleção de WhereParameters. Você pode definir os campos a serem recuperados no <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Por exemplo, para retornar valores de uma tabela de banco de dados onde `LastName` igual a &quot;Adams&quot; marcação, defina o <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade `&quot;LastName = &quot;Adams&quot;&quot;` sem parâmetros.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Para definir os valores na coleção de WhereParameters, você pode atribuir um nome para cada parâmetro e, em seguida, adicione um espaço reservado no <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>propriedade para esse parâmetro.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Na janela onde cláusula, preceda cada nome de parâmetro com o símbolo @."
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Uma coleção de parâmetros que são usados para criar o onde cláusula o <xref:System.Web.UI.WebControls.LinqDataSource.Where*>propriedade.</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
