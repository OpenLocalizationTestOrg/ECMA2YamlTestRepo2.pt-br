### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.MimeFormatter
  id: MimeFormatter
  children:
  - System.Web.Services.Protocols.MimeFormatter.#ctor
  - System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  - System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  - System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)
  langs:
  - csharp
  name: MimeFormatter
  nameWithType: MimeFormatter
  fullName: System.Web.Services.Protocols.MimeFormatter
  type: Class
  summary: "Fornece uma classe base abstrata para todos os leitores e gravadores implementados usando HTTP de clientes e serviços da Web, mas sem SOAP."
  remarks: "Os leitores e gravadores de serviço web serializar e desserializar, respectivamente, entre os objetos de parâmetro ou retornado dos métodos Web e os fluxos de solicitação ou resposta HTTP. A classe MimeFormatter estabelece uma interface comum e a funcionalidade para classes de leitor e gravador, no cliente e no lado do serviço.       A classe MimeFormatter dá suporte a implementações do .NET Framework do Web services por meio de operações de HTTP GET e POST HTTP. Em operações GET do HTTP parâmetros de solicitação são codificados do solicitação HTTP localizador de URL (Uniform Resource). Em operações de HTTP POST, parâmetros de solicitação são codificados no corpo da solicitação HTTP, como em um formulário HTML. Ambas as implementações, o valor de retorno é exibido no corpo da resposta HTTP como um documento XML não SOAP.       Um desenvolvedor normalmente não precisa usar diretamente MimeFormatter ou suas classes descendentes. Em vez disso, quando a ferramenta Wsdl.exe gera o código de proxy do cliente de acordo com as implementações de HTTP GET ou POST HTTP, ela se aplica a <xref:System.Web.Services.Protocols.HttpMethodAttribute>para cada método Web e define o nome do atributo <xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A>e <xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A>Propriedades para o tipo apropriado derivado da classe MimeFormatter de</xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A> </xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A> </xref:System.Web.Services.Protocols.HttpMethodAttribute> No servidor, os tipos derivados apropriados são usados de acordo com as configurações em um arquivo de configuração do ASP.NET (Web. config). No cliente, os tipos derivados apropriados são determinados de WSDL."
  syntax:
    content: public abstract class MimeFormatter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: MimeFormatter()
  nameWithType: MimeFormatter.MimeFormatter()
  fullName: System.Web.Services.Protocols.MimeFormatter.MimeFormatter()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref> classe."
  syntax:
    content: protected MimeFormatter ();
    parameters: []
  overload: System.Web.Services.Protocols.MimeFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  id: CreateInstance(System.Type,System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: CreateInstance(Type,Object)
  nameWithType: MimeFormatter.CreateInstance(Type,Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.CreateInstance(Type,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Cria e inicializa uma instância de uma classe concreta derivada <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>."
  remarks: "O método CreateInstance cria uma instância da classe derivada e invoca a implementação da classe derivada do resumo <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> O método CreateInstance é invocado quando que uma solicitação ou resposta é processada.       Um inicializador é um objeto passado como um parâmetro para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> O inicializador passado como um parâmetro para o método CreateInstance é obtido de outra instância da classe derivada, invocando o <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>método durante a inicialização do cliente ou serviço.</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>"
  syntax:
    content: public static System.Web.Services.Protocols.MimeFormatter CreateInstance (Type type, object initializer);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo derivado de <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>, do qual criar uma instância."
    - id: initializer
      type: System.Object
      description: "Um objeto usado para inicializar a instância obtido anteriormente por meio da implementação da classe derivada do <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer*>método.</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer*>"
    return:
      type: System.Web.Services.Protocols.MimeFormatter
      description: "A <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;></xref> object."
  overload: System.Web.Services.Protocols.MimeFormatter.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  id: GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializer(LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(LogicalMethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Quando substituído em uma classe derivada, retorna um inicializador para o método especificado."
  remarks: "Um inicializador é um objeto passado como um parâmetro para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       A implementação de classe derivada do método de instância GetInitializer é chamada durante a inicialização do cliente ou serviço. Posteriormente, quando que uma solicitação ou resposta é processada, o objeto de inicializador é passado para o estático <xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A>método, que cria uma instância de outro objeto da classe derivada e, em seguida, o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método para inicializar o proprietário.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> </xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> O outro objeto realiza a leitura ou gravação real."
  syntax:
    content: public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "Um <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> que especifica o método da Web para o qual o inicializador é obtido."
    return:
      type: System.Object
      description: "Um <xref:System.Object>que contém o inicializador para o método especificado.</xref:System.Object>"
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  id: GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializer(Type,LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Retorna um inicializador para o método especificado."
  remarks: "Um inicializador é um objeto passado como um parâmetro para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       O método GetInitializer estático invoca <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>método, implicitamente, criando uma instância da classe derivada. a classe derivada do</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> No momento que uma solicitação ou resposta é processada, o objeto de inicializador é passado para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método de outra instância da classe derivada.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> O último objeto realiza a leitura ou gravação real."
  syntax:
    content: public static object GetInitializer (Type type, System.Web.Services.Protocols.LogicalMethodInfo methodInfo);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo derivado de <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>, - para que um inicializador é obtido."
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "Um <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> que especifica o método da Web para o qual o inicializador é obtido."
    return:
      type: System.Object
      description: "Um <xref:System.Object>objeto que contém o inicializador para o método especificado.</xref:System.Object>"
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  id: GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializers(LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(LogicalMethodInfo[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Quando substituído em uma classe derivada, retorna uma matriz de inicializador de objetos correspondentes em uma matriz de entrada das definições de método."
  remarks: "Um inicializador é um objeto passado como um parâmetro para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       Invoca o método de instância GetInitializers o <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>entrada do método de instância para cada método Web.</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> Isso significa que uma instância de uma classe derivada de <xref:System.Web.Services.Protocols.MimeFormatter>já foi criado.</xref:System.Web.Services.Protocols.MimeFormatter> No momento que uma solicitação ou resposta é processada, o inicializador é passado para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método de outra instância da classe derivada.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> O último objeto realiza a leitura ou gravação real."
  syntax:
    content: public virtual object[] GetInitializers (System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);
    parameters:
    - id: methodInfos
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "Uma matriz dos métodos da Web em que, para cada método, o objeto de índice correspondente na matriz retornada inicializador é obtido."
    return:
      type: System.Object[]
      description: "Uma matriz de objetos de inicializador correspondente para a matriz de entrada das definições de método."
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  id: GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializers(Type,LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Retorna uma matriz de inicializador de objetos correspondentes a uma matriz de definições de método de entrada para uma determinada classe derivada de <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>."
  remarks: "Um inicializador é um objeto passado como um parâmetro para o <xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>método.</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       O GetInitializersmethod estático faz com que a invocação do <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>método pertencente à classe derivada especificada pelo `type` parâmetro.</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>"
  syntax:
    content: public static object[] GetInitializers (Type type, System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo derivado de <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>, para qual inicializadores são obtidas."
    - id: methodInfos
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "Uma matriz do tipo <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> que especifica os métodos da Web para o qual os inicializadores são obtidos."
    return:
      type: System.Object[]
      description: "Uma matriz de objetos de inicializador correspondente para a matriz de definições de método de entrada para uma determinada classe derivada de <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>."
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)
  id: Initialize(System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: Initialize(Object)
  nameWithType: MimeFormatter.Initialize(Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.Initialize(Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Quando substituído em uma classe derivada, inicializa uma instância."
  remarks: "O método Initialize é invocado quando que uma solicitação ou resposta é processada; No entanto, o inicializador é obtido chamando o <xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>método em outra instância durante a inicialização do cliente ou serviço.</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>"
  syntax:
    content: public abstract void Initialize (object initializer);
    parameters:
    - id: initializer
      type: System.Object
      description: "Um objeto de um tipo de classe específica que está implementando o método apropriado."
  overload: System.Web.Services.Protocols.MimeFormatter.Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.MimeFormatter.#ctor
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: MimeFormatter()
  nameWithType: MimeFormatter.MimeFormatter()
  fullName: System.Web.Services.Protocols.MimeFormatter.MimeFormatter()
- uid: System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: CreateInstance(Type,Object)
  nameWithType: MimeFormatter.CreateInstance(Type,Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.CreateInstance(Type,Object)
- uid: System.Web.Services.Protocols.MimeFormatter
  parent: System.Web.Services.Protocols
  isExternal: false
  name: MimeFormatter
  nameWithType: MimeFormatter
  fullName: System.Web.Services.Protocols.MimeFormatter
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializer(LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(LogicalMethodInfo)
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializer(Type,LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializers(LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(LogicalMethodInfo[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.LogicalMethodInfo[]
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo[]
  spec.csharp:
  - uid: System.Web.Services.Protocols.LogicalMethodInfo
    name: LogicalMethodInfo
    nameWithType: LogicalMethodInfo
    fullName: LogicalMethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializers(Type,LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
- uid: System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: Initialize(Object)
  nameWithType: MimeFormatter.Initialize(Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.Initialize(Object)
- uid: System.Web.Services.Protocols.MimeFormatter.#ctor*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: MimeFormatter
  nameWithType: MimeFormatter.MimeFormatter
- uid: System.Web.Services.Protocols.MimeFormatter.CreateInstance*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: CreateInstance
  nameWithType: MimeFormatter.CreateInstance
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializer
  nameWithType: MimeFormatter.GetInitializer
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializers
  nameWithType: MimeFormatter.GetInitializers
- uid: System.Web.Services.Protocols.MimeFormatter.Initialize*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: Initialize
  nameWithType: MimeFormatter.Initialize
