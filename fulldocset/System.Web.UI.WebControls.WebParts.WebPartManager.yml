### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartManager
  id: WebPartManager
  children:
  - System.Web.UI.WebControls.WebParts.WebPartManager.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections
  - System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  - System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  - System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  - System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript
  - System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  - System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  - System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  - System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization
  - System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  - System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  - System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  - System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  - System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  - System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  - System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  - System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting
  - System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing
  - System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  - System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Focus
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  - System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  - System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)
  - System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  - System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  - System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  - System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  - System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript
  - System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState
  - System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  - System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  - System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  - System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty
  - System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  - System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  - System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  - System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  - System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  - System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  - System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState
  - System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  - System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  - System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  langs:
  - csharp
  name: WebPartManager
  nameWithType: WebPartManager
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager
  type: Class
  summary: "Serve como a classe central do conjunto de controle de Web Parts, gerenciar todas as Web Parts controles, funcionalidade e eventos que ocorrem em uma página da Web."
  remarks: "O controle WebPartManager atua como o Centro de controle ou hub de um aplicativo Web Parts. Deve haver um – e somente um – WebPartManager instância de controle em cada página que usa os controles de Web Parts. Assim como acontece com a maioria dos aspectos de aplicativos Web Parts, o controle WebPartManager funciona somente com os usuários autenticados. Além disso, sua funcionalidade funciona quase que totalmente com controles de servidor que residem em zonas de Web Parts que herdam a <xref:System.Web.UI.WebControls.WebParts.WebZone>classe.</xref:System.Web.UI.WebControls.WebParts.WebZone> Controles de servidor que residem em uma página fora dessas zonas podem ter muito pouco funcionalidade de Web Parts ou interação com o controle em WebPartManager.       Como o hub para a funcionalidade de Web Parts em uma página, o controle WebPartManager executa os tipos de tarefas descritas na tabela a seguir.      | Categoria da tarefa | O que faz o controle |   |-------------------|---------------------------|   | Controles de Web Parts de controle | Mantém o controle sobre os vários tipos diferentes de controles em uma página que fornecem recursos de Web Parts, incluindo controles <xref:System.Web.UI.WebControls.WebParts.WebPart>, conexões, regiões e outros. |   | Adicionando e removendo controles de Web Parts | Fornece os métodos para adicionar, excluir e fechar <xref:System.Web.UI.WebControls.WebParts.WebPart>controles em uma página. |   | Administrando conexões | Cria conexões entre os controles e monitora as conexões, bem como os processos de adicionar e removê-los. |   | Personalizando as páginas e controles | Permite que os usuários movam controles para locais diferentes em uma página e inicia os modos de exibição em que os usuários podem editar a aparência, propriedades e comportamento de controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Mantém as configurações de personalização específicas de usuário em cada página. |   | Alternando entre modos de exibição de página diferentes | Alterna uma página entre os diferentes modos de exibição especializados da página, para que os usuários podem realizar certas tarefas como alterar o layout de página ou controles de edição. |   | Gerando eventos de ciclo de vida de Web Parts | Define, gera e permite que os desenvolvedores para tratar eventos de ciclo de vida de controles de Web Parts, como quando os controles são adicionados, movidos, conectados ou excluídos. |   | Habilitar a importação e exportação de controles | Exporta fluxos XML que contêm o estado das propriedades de controles <xref:System.Web.UI.WebControls.WebParts.WebPart>e permite que os usuários importar os arquivos para conveniência nos Personalizando controles complexos em outras páginas ou sites. |       A classe de WebPartManager tem um grande conjunto de propriedades.</xref:System.Web.UI.WebControls.WebParts.WebPart> Consistente com a função de WebPartManager dos outros controles de controle, ele tem um número de propriedades que fazem referência a coleções de controles de Web Parts ou outros objetos especiais de Web Parts. O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A>propriedades são usadas pelo controle WebPartManager para outras tarefas de gerenciamento e controle de todas as coleções.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>       Outro grupo de propriedades contém avisos personalizáveis que se aplicam em determinados cenários que ocorrem em um aplicativo de Web Parts. Eles incluem o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A>e o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A>Propriedades.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>       A classe de WebPartManager substitui algumas de suas propriedades herdadas de base, que são usadas por vários controles de servidor Web. Eles incluem o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A>Propriedades.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>       Por fim, há um grupo de propriedades úteis para acessar o estado atual do aplicativo. A <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A>propriedade indica o modo de exibição atual que uma página é in.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> A <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A>propriedade indica se um controle tem permissão para processar o script do lado do cliente, que é pertinente nas situações em que os usuários podem ter navegadores com diferentes capacidades ou tem o script desligado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A>propriedade é útil para fazer referência a uma classe de utilitário que contém as chamadas para um número de métodos de Web Parts importantes que são usados para casos de extensibilidade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> Ocultando as chamadas para esses métodos em uma classe separada (o <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals>classe), a classe de WebPartManager possui API é simplificada.</xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A>propriedade fornece acesso a objetos de personalização que armazena as configurações de personalização do usuário e manter esses dados em um armazenamento permanente.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>propriedade indica qual <xref:System.Web.UI.WebControls.WebParts.WebPart>controle em uma página está atualmente selecionado pelo usuário ou o aplicativo.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>propriedade indica se os dados de personalização personalizado em um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle foi alterado.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>       O controle WebPartManager contém cinco modos de exibição internos ou modos de exibição de uma página da Web. Os desenvolvedores podem estender esse recurso, criar modos de exibição personalizado estendendo tipos, como a <xref:System.Web.UI.WebControls.WebParts.WebZone>classe ou a <xref:System.Web.UI.WebControls.WebParts.ToolZone>classe.</xref:System.Web.UI.WebControls.WebParts.ToolZone> </xref:System.Web.UI.WebControls.WebParts.WebZone> Os usuários podem alternar uma página em vários modos de exibição, desde que o tipo apropriado de controles que correspondem a um modo de exibição determinado estejam presentes em uma página.      > [!NOTE] > É possível estender esse recurso para que os usuários podem alternar para um modo de exibição personalizado sem a necessidade de uma zona correspondente na página. No entanto, o comportamento padrão é que os modos de exibição correspondem às zonas.       Os modos de exibição padrão são representados por campos públicos na classe WebPartManager. A tabela a seguir resume os campos e os modos de exibição que eles se referem. O modo de exibição atual de uma página, conforme observado acima, sempre é referenciado no <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A>propriedade e o conjunto de modos de exibição que seja possível em uma determinada página, considerando o tipo de zonas que estão presentes na página, está contida no <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A>      | Campo | Exibir detalhes do modo |   |-----------|--------------------------|   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>| O modo de exibição de usuário normal de uma página da Web. o padrão e o modo de exibição mais comuns. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>| O modo de exibição em que os usuários podem reorganizar ou excluir controles para alterar o layout de página. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>| O modo de exibição em que uma interface de usuário (UI) edição ficará visível; os usuários podem editar a aparência, propriedades e o comportamento dos controles que são visíveis no modo de busca normal. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>| O modo de exibição na qual um catálogo de interface do usuário se torna visível; os usuários podem adicionar controles a uma página de catálogos de controles disponíveis. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>| O modo de exibição em que uma conexão de interface do usuário se torna visível; os usuários podem se conectar, gerenciar ou desconectar conexões entre os controles. |       O controle WebPartManager também contém um número de eventos que são críticas no ciclo de vida de páginas de Web Parts e controles.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> Esses eventos fornecem controle programático preciso sobre o comportamento de controles de Web Parts. A maioria dos métodos referem-se diretamente ao <xref:System.Web.UI.WebControls.WebParts.WebPart>controles (ou outros controles de servidor ou o usuário que são colocados em <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonas para que eles podem se comportar como <xref:System.Web.UI.WebControls.WebParts.WebPart>controles).</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, alguns eventos relacionados ao estado da página ou conexões na página. A tabela a seguir lista os eventos disponíveis e resume suas finalidades.      > [!NOTE] > Em todos os casos na tabela a seguir, a palavra &quot;control&quot; refere-se a um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle ou qualquer controle de servidor que reside em uma zona e é empacotado com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objeto em tempo de execução.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart>      | Evento | Descrição |   |-----------|-----------------|   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>| Ocorre imediatamente antes de um controle é adicionado a uma página para verificar se ele está autorizado. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>| Ocorre depois que todas as conexões em uma página tem sido ativadas. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>| Ocorre somente antes do processo de ativação de todas as conexões em uma página. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>| Ocorre depois que o modo de exibição atual de uma página foi alterada. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>| Ocorre somente antes do processo de alteração de modo de exibição da página. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>| Ocorre após a seleção de um controle foi cancelada. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>| Ocorre somente antes do processo de cancelar a seleção de um controle. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>| Ocorre depois que um controle foi adicionado a uma região. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>| Ocorre somente antes do processo de adicionar um controle a uma zona. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>| Ocorre depois que um controle foi fechado (removido de uma página). |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>| Ocorre somente antes do processo de fechamento de um controle. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>| Ocorre depois que uma instância de um controle dinâmico (uma que foi criado por meio de programação ou adicionado a partir de um catálogo) foi excluída permanentemente. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>| Ocorre somente antes do processo de exclusão de um controle dinâmico. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>| Ocorre depois que um controle foi movido dentro da zona ou para outra zona. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>| Ocorre somente antes do processo de mover um controle. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>| Ocorre após dois controles selecionados para participação em uma conexão estabelecida a conexão. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>| Ocorre somente antes do processo de conectar dois controles. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>| Ocorre após dois controles conectados foi desconectados. |   | <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>| Ocorre somente antes do processo de desconexão dois controles. |       O controle WebPartManager tem vários métodos para gerenciar páginas de Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> Um grande conjunto de métodos, não listados aqui, são métodos cujos nomes assumem a forma on*EventName*. Esses métodos normalmente geram o evento associado e fornecem o evento com um manipulador de tipo <xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler>.</xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler> A maioria desses métodos pode ser substituída por desenvolvedores que herdem da classe WebPartManager. Além disso, os desenvolvedores de páginas podem fornecer manipuladores personalizados para os eventos associados a esses métodos. Por exemplo, no caso do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>evento, um desenvolvedor de página pode adicionar uma `OnWebPartAdded` de atributo para o `<asp:webpartmanager>` elemento na marcação de uma página da Web e atribua-o nome de um método personalizado para o atributo para fornecer manipulação personalizada para o evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> O atributo corresponde ao <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>método e esse padrão básico funciona para a maioria dos eventos de Web Parts e seus métodos associados de manipulação de eventos.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>       Além disso, o controle WebPartManager tem métodos específico para a tarefa de gerenciar <xref:System.Web.UI.WebControls.WebParts.WebPart>controles (e controles de servidor ou usuário usado como <xref:System.Web.UI.WebControls.WebParts.WebPart>controles).</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> These methods include <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>, and <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart></xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>       Outro conjunto de métodos é especializado para conexões. This includes methods such as <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>, and <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>       Por fim, alguns métodos de WebPartManager se concentre na funcionalidade de personalização. These include <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>, and <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>       Para obter mais informações sobre outros métodos de WebPartManager que são acessíveis por meio da <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A>propriedade, consulte a documentação para a <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals>classe.</xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A>"
  example:
  - "The following code example demonstrates both declarative and programmatic use of the WebPartManager control.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The user control has a drop-down list control that shows the possible display modes on a page, given the Web Parts controls that are present on the page. In the Web page for this code example, this user control is declared just below the WebPartManager element in the page's markup, and there is a `Register` directive near the top of the Web page to register the control. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_345_1.ascx)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_345_1.ascx)]  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. The page also contains some inline code that handles connection-related events for the WebPartManager control; you can see the effect of this code as you connect and disconnect controls.  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_345_2.aspx)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_345_2.aspx)]  \n  \n The third part of the example is the source code for the controls. Note that there is an interface named `IZipCode`, and this interface is implemented in the `ZipCodeWebPart` class. This class has a special callback method named `ProvideIZipCode` that serves as a provider. The other type, named `WeatherWebPart`, is also implemented with a special method named `GetIZipCode`, which enables the control to act as a consumer of the other control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example assumes that you have compiled the source into an assembly, and the `Register` directive in the Web page references the assembly name. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_345_3.cs)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_345_3.vb)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection UI appears, click the **Create a connection to a Consumer** link. A cell appears that has a drop-down list control. Select **Weather Control** in the drop-down list, and then click **Connect** to complete the connection of the two controls. Click **Close**, and then use the **Display Mode** drop-down list to return the page to normal browse mode. You can enter a ZIP Code, and the consumer control will be updated with the value you enter. Because the `ZipCode` property was marked with the `Personalizable` attribute in the source code, this property value will persist across browser sessions, thus saving the value entered by a user. A more sophisticated consumer control could take the ZIP code information, look up weather information based on the code, and display it to a user."
  syntax:
    content: >-
      [System.ComponentModel.Bindable(false)]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Web.UI.NonVisualControl]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      [System.Web.UI.ViewStateModeById]

      public class WebPartManager : System.Web.UI.Control, System.Web.UI.INamingContainer, System.Web.UI.WebControls.WebParts.IPersonalizable
  inheritance:
  - System.Object
  - System.Web.UI.Control
  implements:
  - System.Web.UI.INamingContainer
  - System.Web.UI.WebControls.WebParts.IPersonalizable
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartManager()
  nameWithType: WebPartManager.WebPartManager()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartManager()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> classe."
  remarks: "O construtor de WebPartManager inicializa diversas variáveis importantes usados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Uma atribuição que afeta diretamente a todas as páginas de Web Parts é o fato de que o modo de exibição de página padrão é definido como modo de procura (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>).</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>"
  syntax:
    content: public WebPartManager ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections
  id: ActivateConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ActivateConnections()
  nameWithType: WebPartManager.ActivateConnections()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ativa todas as conexões em uma página da Web que estão inativas no momento."
  remarks: "O método ActivateConnections é chamado em cada solicitação de uma página para ativar as conexões existentes entre <xref:System.Web.UI.WebControls.WebParts.WebPart>e outros controles de servidor que residem em <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonas.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Em alguns casos, para a instância, se houver um conflito nas conexões que está sendo ativadas, este método por sua vez chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>método para encerrar a conexão problemática.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> Durante o processo de desconexão de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>é gerado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> Normalmente os desenvolvedores podem cancelar este evento, mas no caso em que isso é um conflito entre as conexões não pode ser cancelada, pois o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle precisa resolver o conflito para concluir o processo de ativação de conexões.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Para obter detalhes, consulte <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>"
  syntax:
    content: protected virtual void ActivateConnections ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  id: AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: AddWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Fornece o método de programação padrão para adicionar <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles a uma página da Web."
  remarks: "O método AddWebPart é usado para adicionar novos dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>controla a uma página e reabra controles estáticos ou dinâmicos que foram fechados anteriormente em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> Quando o método é chamado para adicionar um novo controle, ele realmente cria uma cópia do controle referenciado no `webPart` parâmetro. Uma nova ID é gerada para a cópia do controle, para que os desenvolvedores devem fazer referência a <xref:System.Web.UI.WebControls.WebParts.WebPart>controle retornado do método para obter o novo valor de ID.</xref:System.Web.UI.WebControls.WebParts.WebPart> Quando o método é chamado para reabrir um controle fechado anteriormente, ele retorna uma referência direta para o controle referenciado pelo `webPart` parâmetro.      > [!IMPORTANT] > Você sempre deve usar o método AddWebPart, em vez de <xref:System.Web.UI.ControlCollection.Add%2A>método do conjunto de controles referenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=fullName>propriedade a adicionar <xref:System.Web.UI.WebControls.WebParts.WebPart>controla programaticamente para a página, como usando o <xref:System.Web.UI.ControlCollection.Add%2A>método lançará uma exceção.</xref:System.Web.UI.ControlCollection.Add%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=fullName> </xref:System.Web.UI.ControlCollection.Add%2A> Para adicionar um controle que não é um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle (em outras palavras, um controle de servidor que será ajustado com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle em tempo de execução), primeiro você deve chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>método para criar o controle e, em seguida, chamar o método AddWebPart para adicionar o controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Para ver uma demonstração dessa abordagem, consulte a seção de exemplo."
  example:
  - "The following code example demonstrates use of the AddWebPart method to add a server control programmatically to a page. The page markup contains an empty `<asp:webpartzone>` element, and an `<asp:webpartmanager>` element. The first time the **Add Calendar** button is clicked, the code in the event handler creates a <xref:System.Web.UI.WebControls.Calendar> control, and adds it to a zone as a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object, calling the AddWebPart method.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/csharp/6da004d9-95d1-4401-9d7e-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/visualbasic/6da004d9-95d1-4401-9d7e-_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart AddWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> (ou controle de servidor ou usuário) a ser adicionado a uma página da Web ou aberto em uma página."
    - id: zone
      type: System.Web.UI.WebControls.WebParts.WebPartZoneBase
      description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> que `webPart` está sendo adicionado ao."
    - id: zoneIndex
      type: System.Int32
      description: "Um inteiro que representa o ordinal de posição que `webPart` ocupa no `zone`, relativo a outros controles em `zone`."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle foi adicionado à página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>zone</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>zone</code> is not registered in the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> control's collection of zones.  \n  \n \\- or -  \n  \n <code>webPart</code> is already in <code>zone</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de <code> zoneIndex </code> é menor que zero."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  id: AuthorizeWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: AuthorizeWebPart
  nameWithType: WebPartManager.AuthorizeWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*>método é chamado para determinar se um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor pode ser adicionado a uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*>"
  remarks: "O evento AuthorizeWebPart ocorre sempre que um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle está sendo adicionado a uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> Há vários cenários comuns em que um controle pode ser adicionado a uma página. Para obter uma descrição completa dessas, consulte a seção comentários para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> Quando um controle é adicionado, ele deve ser verificado para ver se seu <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>propriedade foi definida e, nesse caso, se o controle está autorizado a ser adicionado à página.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>       Os desenvolvedores podem criar manipuladores de eventos para o evento AuthorizeWebPart, para fornecer a filtragem para controles. Se um controle <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>o valor da propriedade não atender aos critérios no código de manipulador de eventos, o controle não é adicionado à página.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>"
  example:
  - "The following code example demonstrates how to set a custom event handler for the AuthorizeWebPart event, which automatically overrides the default <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> method.  \n  \n The code in the `mgr1_AuthorizeWebPart` method checks whether the controls on the page have their respective <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property values set to `user` and, if so, returns `true`, which means that they will be authorized and added to the page. This assumes the default approach is to allow users to view controls with a page in user personalization scope. Notice, however, that in the example one of the controls has its <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property value set to `admin`. Developers might place this filter on a specialized control that was designed for only administrative users to see. This control will fail the authorization check during the AuthorizeWebPart event, and will not be displayed. Note that controls that do not have the property set are displayed as well; they are assumed not to be part of a filtering scenario because their <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> properties are not set.  \n  \n [!code-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_9_1.aspx)]\n [!code-cs[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_9_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  id: AvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: AvailableTransformers
  nameWithType: WebPartManager.AvailableTransformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma coleção de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objetos que estão disponíveis para usam na criação de conexões de Web Parts entre controles de servidor."
  remarks: "Esta propriedade usa o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>método para criar a coleção.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A> Por padrão, ele lê os transformadores disponíveis do arquivo de configuração de aplicativo."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.TransformerTypeCollection&quot;> </xref> que contém um conjunto de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objetos."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  id: BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: BeginWebPartConnecting(WebPart)
  nameWithType: WebPartManager.BeginWebPartConnecting(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicia o processo de conectar dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles."
  remarks: "O método BeginWebPartConnecting existe para que o processo de formar conexões entre os controles pode ser feito em diferentes estágios, oferecendo aos desenvolvedores mais controle sobre o processo de conexão. O método realiza uma série de verificações inicias para garantir que `webPart` está em um estado em que uma conexão pode ser formada legitimamente. Se `webPart` passa todas as verificações, ele é definido como o controle selecionado no momento (consulte a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>propriedade), e o processo de conexão pode continuar.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void BeginWebPartConnecting (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle para o qual a conexão está sendo formado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O modo de exibição atual na página não é <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is closed.  \n  \n \\- or -  \n  \n <code>webPart</code> is not part of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection.  \n  \n -or -  \n  \n <code>webPart</code> is equal to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*> control."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  id: BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: BeginWebPartEditing(WebPart)
  nameWithType: WebPartManager.BeginWebPartEditing(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicia o processo de edição de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
  remarks: "O método BeginWebPartEditing existe para que o processo de controles de edição pode ser feito em diferentes estágios, oferecendo aos desenvolvedores mais controle sobre o processo. O método realiza uma série de verificações inicias para garantir que `webPart` está em um estado em que ele possa ser editado. Se `webPart` passa todas as verificações, ele é definido como o controle selecionado no momento (consulte a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>propriedade), e o processo de edição pode continuar.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void BeginWebPartEditing (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle a ser editado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O modo de exibição atual na página não é <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is closed.  \n  \n \\- or -  \n  \n <code>webPart</code> is not part of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection.  \n  \n -or -  \n  \n <code>webPart</code> is equal to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*> control."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  id: BrowseDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: BrowseDisplayMode
  nameWithType: WebPartManager.BrowseDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa o modo de exibição padrão para páginas que contêm controles de Web Parts. Este campo é somente leitura."
  remarks: "O campo BrowseDisplayMode faz referência a um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>objeto que é criado e contido pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Como esse é um objeto estático, você pode fazer referência a ele diretamente por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe sem a necessidade de uma instância do controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Quando uma página que contém as Web Parts controla pela primeira vez, ela fica em BrowseDisplayMode (modo de procura) por padrão. Quando os usuários simplesmente procurar como em uma página da Web normal, a página permanece no modo de procura. Se os usuários desejam personalizar o layout, controles, aparência ou comportamento de uma página, eles devem alternar a página em um dos modos de exibição especializados disponíveis por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>"
  example:
  - "The following code example demonstrates how to work with the BrowseDisplayMode field programmatically. The code populates a drop-down list with the supported display modes, which in this case are browse and design. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to BrowseDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-cs[WebParts_WebPartManager_BrowseDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_5_1.aspx)]\n [!code-vb[WebParts_WebPartManager_BrowseDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_5_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice the label on the page that indicates you are in browse mode. Use the drop-down list control to switch the page to design mode. Notice that, because of the code in the `Page_PreRender` method, the label is now hidden."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  id: CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Verifica o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles que participarão uma conexão para determinar se eles são capazes de conectado, quando os controles de consumidor e provedor têm interfaces compatíveis e um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objeto não é necessária."
  remarks: "Esse método é usado para conectar-se `provider` e `consumer` quando ambos os controles têm conexão compatível do ponto de tipos, para que um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto não é necessária.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Talvez você queira usar esse método para verificar se os dois controles podem ser conectados antes de chamar <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>para criar uma conexão programática.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       Essa sobrecarga usa a mesma implementação como o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>sobrecarga do método, com a única exceção sendo que essa sobrecarga não requer um transformador.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  example:
  - "The following code example demonstrates how to use this method.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, an `<asp:webpartmanager>` element, and some event-handling code that creates a connection using the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks whether the connection can be made and, if so, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> property.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/6c629474-a5b1-438b-b1c7-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/6c629474-a5b1-438b-b1c7-_1.aspx)]  \n  \n The third part of the example is the source code for the controls. It contains an interface and two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, one acting as a provider, and the other as a consumer. Because they have compatible connection points (both of them recognize the `IZipCode` interface), a transformer is not needed to make the connection. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#2](~/add/codesnippet/csharp/6c629474-a5b1-438b-b1c7-_2.cs)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#2](~/add/codesnippet/visualbasic/6c629474-a5b1-438b-b1c7-_2.vb)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method."
  syntax:
    content: public bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle que fornece dados para `consumer` quando os controles estão conectados."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> que permite `provider` para participar de uma conexão."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle que recebe dados de `provider` quando os controles estão conectados."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> que atua como um método de retorno de chamada assim que `consumer` pode participar de uma conexão."
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se <code> provider </code> e <code> consumer </code> pode ser conectado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  id: CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Verifica o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles que participarão uma conexão para determinar se eles são capazes de conexão e usa um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objeto para criar a conexão entre um provedor e o consumidor incompatível."
  remarks: "Esse método é usado para conectar-se `provider` e `consumer` quando ambos os controles têm conexão incompatível do ponto de tipos, para que um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto é necessário.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Talvez você queira usar esse método para verificar se os dois controles podem ser conectados antes de chamar <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>para criar uma conexão programática.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       Essa sobrecarga usa a mesma implementação como o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29>sobrecarga do método, com a única exceção sendo essa sobrecarga requer um transformador.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29>"
  syntax:
    content: public virtual bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle que fornece dados para `consumer` quando os controles estão conectados."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> que atua como um método de retorno de chamada assim que `provider` pode participar de uma conexão."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle que recebe dados de `provider` quando os controles estão conectados."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> que atua como um método de retorno de chamada assim que `consumer` pode participar de uma conexão."
    - id: transformer
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> que permite que um incompatível `provider` e `consumer` para se conectar."
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se <code> provider </code> e <code> consumer </code> podem formar uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  id: CatalogDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CatalogDisplayMode
  nameWithType: WebPartManager.CatalogDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa o modo de exibição usado para adicionar controles de servidor de um catálogo de controles a uma página da Web. Este campo é somente leitura."
  remarks: "O campo CatalogDisplayMode faz referência a um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>objeto que é criado e contido pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Como esse é um objeto estático, você pode fazer referência a ele diretamente por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe sem a necessidade de uma instância do controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Quando os usuários desejam adicionar controles a uma página, se um catálogo de controles de servidor estiver disponível, alternar a página para CatalogDisplayMode (modo de catálogo) e a interface do usuário do catálogo (UI) é exibida. A interface do usuário para um catálogo de Web Parts é fornecido por um <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>controle de zona.</xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> Os desenvolvedores adicionar esta zona para a página em tempo de design e, em seguida, adicionar controles de servidor para a zona, para que os usuários poderão adicionar esses controles para suas páginas em tempo de execução. Depois que o desenvolvedor adicionou esses controles, o modo de catálogo se torna um modo de exibição com suporte na página porque há os controles necessários habilitar o modo de catálogo.       Quando um usuário alterna uma página para o modo, a zona e todos os controles de servidor que foram adicionados a ela se tornarão visíveis do catálogo e o usuário pode selecionar controles do catálogo para adicionar a página ou remova os controles da página. Depois que os controles foram adicionados à página, eles aparecem no modo de procura normal e a página é atualizada."
  example:
  - "The following code example demonstrates how to work with the CatalogDisplayMode field programmatically. The code populates a drop-down list with the supported display modes for the page, which in this case are browse, design, and catalog. The catalog mode is available because of the `<asp:CatalogZone>` element and its child elements in the Web page. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to CatalogDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-vb[WebParts_WebPartManager_CatalogDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_3_1.aspx)]\n [!code-cs[WebParts_WebPartManager_CatalogDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_3_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice that the label on the page is hidden. Use the drop-down list control to switch the page to catalog mode. Notice that, because of the code in the `Page_PreRender` method, the label is now visible. You can select the control in the catalog and add it to either of the two zones on the page."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript
  id: CheckRenderClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CheckRenderClientScript()
  nameWithType: WebPartManager.CheckRenderClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Verifica se os recursos do navegador que está fazendo a solicitação e o valor da <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*>propriedade para determinar se deve processar cliente script</xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*>"
  syntax:
    content: protected virtual bool CheckRenderClientScript ();
    parameters: []
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se deve processar o script de cliente."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  id: CloseProviderWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CloseProviderWarning
  nameWithType: WebPartManager.CloseProviderWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define um aviso é exibido quando um usuário de um controle que atua como um provedor para outros controles em uma conexão é fechada."
  remarks: "Quando um usuário fecha um <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar, normalmente, nenhuma mensagem será exibida.</xref:System.Web.UI.WebControls.WebParts.WebPart> Para obter mais informações sobre o que significa para fechar um controle, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>       No entanto, quando um controle está conectado a outro controle e está agindo como um provedor de dados para o outro controle, uma mensagem de aviso padrão é exibida quando um usuário tentar fechar o controle. A mensagem informa os usuários que um provedor controle está prestes a fechar, que significa que controla conectado a esse provedor, como os clientes não terão mais nenhum dado para consumir. A propriedade CloseProviderWarning permite aos desenvolvedores personalizar a mensagem de aviso é exibida ao usuário.       Se um desenvolvedor de página atribui um valor de cadeia de caracteres vazia ou nula para essa propriedade, nenhuma caixa de mensagem de aviso será exibida quando um usuário fecha um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle que é um provedor.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the CloseProviderWarning property to display a custom warning to users.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected and an `<asp:webpartmanager>` element.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The following code contains only the Web page portion of the example. You will also need the custom user control and the source code for the custom controls mentioned above. Obtain these two items from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n The following Web page code demonstrates how to assign a custom warning message to the CloseProviderWarning property in declarative markup in the `<asp:webpartmanager>` element.  \n  \n [!code-cs[WebParts_WebPartManager_CloseProviderWarning#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_979_1.aspx)]\n [!code-vb[WebParts_WebPartManager_CloseProviderWarning#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_979_1.aspx)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, click the **Create a connection to a Consumer** link. A cell appears that has a drop-down list control. Select **Weather Control** in the drop-down list, and click **Connect** to complete the connection of the two controls. Click **Close**, and then use the **Display Mode** drop-down list to return the page to normal browse mode. Finally, click the verbs menu for the **ZIP Code** control (which is the provider control in this case) and select **Close**. The custom message you assigned to the CloseProviderWarning property is displayed."
  syntax:
    content: public virtual string CloseProviderWarning { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a mensagem de aviso. O padrão é uma mensagem específica da cultura fornecida pelo .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CloseWebPart(WebPart)
  nameWithType: WebPartManager.CloseWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Fecha uma <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle de forma que ele não será renderizado em uma página da Web, mas pode ser reaberto."
  remarks: "O método CloseWebPart remove um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro servidor de controle para que ele não será renderizado na página da Web que originalmente continha proprietário.</xref:System.Web.UI.WebControls.WebParts.WebPart> O controle fechado é adicionado a um <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>objeto, que mantém uma referência para o controle fechado e possibilita o controle a ser restaurado para a página.</xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> Um fechado <xref:System.Web.UI.WebControls.WebParts.WebPart>controle ainda aparece na coleção referenciada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart>       Fechar um controle é diferente de excluí-lo. Controles fechados ainda estão disponíveis a ser restaurado para uma página, mas uma instância do controle excluído é removida permanentemente e nunca poderão ser restaurada. Independentemente se um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controle de servidor é estático (declarado na marcação de uma página) ou dinâmico (adicionado à página programaticamente ou por um usuário de um catálogo de Web Parts), ele pode ser fechado e reaberto em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Normalmente, os usuários podem fechar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle clicando no menu de verbos e selecionando o verbo fechar.</xref:System.Web.UI.WebControls.WebParts.WebPart> Um controle também pode ser fechado diretamente chamando o método CloseWebPart e passando uma referência a `webPart`.       Em uma página onde <xref:System.Web.UI.WebControls.WebParts.WebPart>controles fechados, se um desenvolvedor declara um `<asp:catalogzone>` elemento e dentro dele adiciona um `<asp:pagecatalogpart>` elemento, ele fornece uma interface de usuário simples (UI) para os usuários restaurem fechados controles para a página em tempo de execução.</xref:System.Web.UI.WebControls.WebParts.WebPart> Os usuários podem alternar a página em modo de exibição de catálogo e os controles fechados serão exibida no catálogo de página. Os usuários podem selecionar controles fechados e adicioná-los para a página em qualquer posição que desejem e, em seguida, os controles selecionados são restaurados para a página e renderizados como normais.       Quando o método CloseWebPart é chamado, ele gera vários eventos: <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>(se houver vários controles), e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>(se houver controles conectados).</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> Normalmente os desenvolvedores podem cancelar esses eventos, mas em alguns casos, não é possível cancelá-los. Para obter detalhes, consulte a documentação para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>eventos.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>"
  example:
  - "The following code example demonstrates how to use the CloseWebPart method.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change page display modes.  \n  \n-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \n  \n-   A Web page.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the code example is the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses the dynamic compilation approach; thus there is no `Assembly` attribute in the `Register` directive for this control at the top of the Web page. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartManager_CloseWebPart#3](~/add/codesnippet/visualbasic/b26a8753-d277-40c2-ba47-_1.vb)]\n [!code-cs[WebParts_WebPartManager_CloseWebPart#3](~/add/codesnippet/csharp/b26a8753-d277-40c2-ba47-_1.cs)]  \n  \n The third part of the code example is the Web page. The page contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone, with an <`asp:pagecatalogpart>` element declared within it. This is what will contain the closed <xref:System.Web.UI.WebControls.WebParts.WebPart> control and enable users to add it back to the page. The `Button1_Click` method directly calls the CloseWebPart method to close the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control, although a user can also close the control through the verbs menu.  \n  \n [!code-cs[WebParts_WebPartManager_CloseWebPart#1](~/add/codesnippet/csharp/b26a8753-d277-40c2-ba47-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_CloseWebPart#1](~/add/codesnippet/visualbasic/b26a8753-d277-40c2-ba47-_2.aspx)]  \n  \n After you load the page in a browser, close the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control by clicking the verbs menu (the arrow symbol) in the header of the control, and clicking **Close**. Now change the page to catalog mode by selecting **Catalog** in the **Display Mode** drop-down list control. The page catalog appears with the closed control. Select the check box next to the closed control, click **Add** to add it to the page, and then click **Close** to return the page to browse mode. The control is restored to the page. Now close it again, this time by clicking the **Close WebPart** button."
  syntax:
    content: public void CloseWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor que está sendo fechado em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is not in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection.  \n  \n \\- or -  \n  \n <code>webPart</code> is a shared control and has already been closed by another user."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  id: ConnectDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectDisplayMode
  nameWithType: WebPartManager.ConnectDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa o modo de exibição usado para exibir uma interface de usuário especial (UI) para os usuários a gerenciar as conexões entre <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles. Este campo é somente leitura."
  remarks: "O campo ConnectDisplayMode faz referência a um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>objeto que é criado e contido pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Como esse é um objeto estático, você pode fazer referência a ele diretamente por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe sem a necessidade de uma instância do controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Quando os usuários desejam gerenciar conexões entre <xref:System.Web.UI.WebControls.WebParts.WebPart>controles em uma página da Web, se um <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>zona foi declarada na página, eles podem alternar a página no modo de ConnectDisplayMode.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> </xref:System.Web.UI.WebControls.WebParts.WebPart> O modo de exibição de conectar exibe uma interface de usuário especial para o gerenciamento de conexões, que inclui a capacidade de conectar ou desconectar controles e editar os detalhes das conexões existentes.       Se você desejar fornecer aos usuários a capacidade de gerenciar conexões com a interface do usuário fornecida pelo conjunto de controle de Web Parts, você deve declarar um `<asp:connectionszone>` elemento na marcação de uma página. Diferentemente dos elementos para os outros tipos de <xref:System.Web.UI.WebControls.WebParts.WebZone>zonas, você não precisa adicionar quaisquer outras marcas dentro do elemento; você simplesmente declaram o elemento em si.</xref:System.Web.UI.WebControls.WebParts.WebZone>"
  example:
  - "The following code example demonstrates the usage of the ConnectDisplayMode mode.  \n  \n The code example has three parts:  \n  \n-   A source file that contains an interface and custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection.  \n  \n-   A Web page that provides a connection UI and demonstrates working with the ConnectDisplayMode mode.  \n  \n-   An explanation of how to run the example.  \n  \n The first part of the code example is a source file that contains an interface and two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that are designed so they can be connected. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses the dynamic compilation approach. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_ConnectDisplayMode#2](~/add/codesnippet/csharp/f-system.web.ui.webcontr_1_1.cs)]\n [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#2](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_1_1.vb)]  \n  \n The second part of the example is a Web page that hosts the custom controls. Within the server `<script>` tags on the page are several methods that populate a drop-down list with the display modes available on the page. A user can select these from the drop-down list to change the page's display mode. One of the available display modes is connect display mode, because an `<asp:connectionszone>` element is declared in the page's markup. Notice that this element does not contain any other child elements; it exists only to enable the connection management UI for users.  \n  \n The ConnectDisplayMode mode appears in this example in two places. First, in the `Page_Init` method, the connect display mode is added to the drop-down list of display modes, as the code loops through the collection referenced in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> property. Second, the `Page_PreRender` method checks the current display mode on the page, and if the current mode is ConnectDisplayMode, a message is displayed in a <xref:System.Web.UI.WebControls.Label> control.  \n  \n [!code-cs[WebParts_WebPartManager_ConnectDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_1_2.aspx)]\n [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_1_2.aspx)]  \n  \n After you load the page in a browser, click the drop-down list and select **Connect** to switch the page into connect display mode. Notice that a message appears, telling you that the page is in connect display mode. Now click the verbs menu (an arrow symbol) in the title bar of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and then click **Connect** in the verbs menu. After the connection UI is displayed, click the link to create a connection. Use the drop-down list within the connection UI that appears, select the other control that will participate in the connection, and click the **Connect** button. The connection is established. Click the **Close** button, and then use the drop-down list at the top of the page to return the page to browse display mode."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  id: Connections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Connections
  nameWithType: WebPartManager.Connections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência à coleção de todas as conexões atuais em uma página da Web."
  remarks: "A propriedade de conexões fornece uma maneira de acessar o conjunto atual de conexões em uma página. A própria coleção é somente leitura, e os desenvolvedores que desejam manipular uma conexão específica da coleção devem usar <xref:System.Web.UI.WebControls.WebParts.WebPartManager>métodos como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates declarative and programmatic use of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The following code contains only the Web page portion of the example. You will also need the custom user control and the source code for the custom controls mentioned above. Obtain these two items from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n The following Web page code demonstrates how to use the Connections property programmatically to get the count of current connections on a page. Note that in the `<script>` tag section, the code to handle two events for the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control accesses the Connections property to obtain the count.  \n  \n [!code-cs[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_34_1.aspx)]\n [!code-vb[WebParts_WebPartManager_SimpleConnection#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_34_1.aspx)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) displays, click the **Create a connection to a Consumer** link. A cell appears that has a drop-down list control. Select **Weather Control** in the drop-down list, and click **Connect** to complete the connection of the two controls. Click **Close**, and then use the **Display Mode** drop-down list to return the page to normal browse mode. Note that a label now displays the number of connections and the number of <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. If you now return to connect mode and disconnect the two controls, when you return to browse mode, the label's content should be updated and there should be no connections."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionCollection&quot;> </xref> que contém um conjunto de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objetos."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Connections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  id: ConnectionsActivated
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectionsActivated
  nameWithType: WebPartManager.ConnectionsActivated
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre depois que todas as conexões de Web Parts atuais em uma página só não estiver conectadas, mas começaram ativamente compartilhar dados entre os controles de consumidor e provedor envolvidos em cada conexão."
  remarks: "O ciclo de vida de conexões, esse evento ocorre após a conclusão de uma página de seu processo de carregamento. Isso também ocorre após o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>evento, que indica apenas que o <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controles de servidor envolvidos em uma conexão específica tiveram conectado com êxito.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> Em casos onde há várias conexões em uma página, o método ConnectionsActivated indica que todas as conexões de Web Parts válidas em uma página agora estão ativos e podem compartilhar dados. Saber que todas as conexões estão ativas, os desenvolvedores podem realizar várias tarefas, incluindo notificar os usuários do status de todas as conexões, notificando os controles do consumidor para processar e exibir dados de seus fornecedores e assim por diante.       Esse evento é associado com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A>método, que gera o evento e permite aos desenvolvedores criar manipuladores personalizados para o evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A>       Os desenvolvedores de página podem criar um manipulador personalizado para o evento adicionando o `OnConnectionsActivated` de atributo para o `<asp:webpartmanager>` elemento na página e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event EventHandler ConnectionsActivated;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  id: ConnectionsActivating
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectionsActivating
  nameWithType: WebPartManager.ConnectionsActivating
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de ativação de todas as conexões de Web Parts estabelecidas em uma página da Web."
  remarks: "O ciclo de vida de conexões, esse evento ocorre como uma página está Concluindo o processo de carregamento imediatamente antes do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>método é chamado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> Ele é diferente do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>evento, que envolve uma conexão específica entre <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outros controles de servidor.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> O evento ConnectionsActivating ocorre quando todas as conexões possíveis em uma página se conectou e estão prestes a ser ativado.       O evento ConnectionsActivating está associado a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A>método, que gera o evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> Os desenvolvedores de controle que desejam estender o tipo de conexões que podem ser adicionados a uma página podem substituir protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A>método e ativar os tipos de conexões adicionais.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A>       Os desenvolvedores de página podem criar um manipulador personalizado para o evento adicionando o `OnConnectionsActivating` de atributo para o `<asp:webpartmanager>` elemento na página e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event EventHandler ConnectionsActivating;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  id: ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cria uma conexão entre dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> controla usando apenas as referências para os controles e seus especificado <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> objetos."
  remarks: "Essa sobrecarga é usada para conectar-se controles quando seus pontos de conexão são suficientemente compatíveis que eles possam se conectar sem usar um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Quando essa sobrecarga do método é chamada, ele simplesmente passará a chamada para a outra versão do método sobrecarregada e passa `null` para o parâmetro que exija um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Quando você tentar se conectar dois controles programaticamente, você pode usar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>método em uma verificação condicional para determinar se os controles podem ser conectados diretamente.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>"
  example:
  - "The following code example demonstrates how to use this method to create a connection programmatically. For the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. From that example, you will need the source code for the user control that allows you to change display modes on the page, and the source code for the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n The code for the Web page that hosts the two controls follows. The page uses `Register` directives at the top to declare the user control and the custom controls. The custom controls are then referenced declaratively within an `<asp:webpartzone>` element. The code that handles the `Button1_Click` method creates a connection between the controls by using the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method.  \n  \n [!code-cs[WebParts_WebPartManager_ConnectWebParts1#1](~/add/codesnippet/csharp/4892fea4-8419-4966-aca7-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_ConnectWebParts1#1](~/add/codesnippet/visualbasic/4892fea4-8419-4966-aca7-_1.aspx)]  \n  \n After you load the page in a browser, click the **Connect WebPart Controls** button to form the connection. You can then enter some data in the text box, and click the **Enter 5-digit ZIP Code** button to demonstrate that the controls are connected, and that data entered in the first control is updated in the second."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> conectado de controle que tem a função de dados de posse para outro controle."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "Um método que serve como um método de retorno de chamada para a conexão. Conforme implementado no conjunto de controle de Web Parts, isso é um método público em `provider` que é marcado com um <xref uid=&quot;langword_csharp_ConnectionProvider&quot; name=&quot;ConnectionProvider&quot; href=&quot;&quot;> </xref> atributo de metadados."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle que tem a função de recebimento de dados de `provider`e, em seguida, processar ou exibi-lo."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "Um método que se conecta com `providerConnectionPoint` para receber os dados para a conexão. Conforme implementado no conjunto de controle de Web Parts, isso é um método público em `consumer` que é marcado com um <xref uid=&quot;langword_csharp_ConnectionConsumer&quot; name=&quot;ConnectionConsumer&quot; href=&quot;&quot;> </xref> atributo de metadados."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> que contém várias informações sobre o provedor e consumidor necessários para uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> coleção de coleções dinâmicas do controle é somente leitura."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  id: ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cria uma conexão entre dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> controla usando as referências a controles, seus especificados <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> objetos e um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objeto."
  remarks: "Essa sobrecarga é usada para se conectar a controles quando seus pontos de conexão são incompatíveis. A incompatibilidade ocorre quando `consumer` implementa uma interface diferente de `provider` como seu ponto de conexão. O transformador converte os dados em um tipo que possa ser compreendido pela `consumer`."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);
    parameters:
    - id: provider
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> que tem a função de dados de posse para outro controle conectados."
    - id: providerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "Um método público em `provider` que é marcado com um <xref uid=&quot;langword_csharp_ConnectionProvider&quot; name=&quot;ConnectionProvider&quot; href=&quot;&quot;> </xref> atributo de metadados e serve como um método de retorno de chamada para a conexão."
    - id: consumer
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> que tenha a função de recebimento de dados de `provider` ou `transformer`e, em seguida, processar ou exibi-lo."
    - id: consumerConnectionPoint
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "Um método público em `consumer` que é marcado com um <xref uid=&quot;langword_csharp_ConnectionConsumer&quot; name=&quot;ConnectionConsumer&quot; href=&quot;&quot;> </xref> atributo de metadados e conecta-se com `providerConnectionPoint` para receber os dados para a conexão."
    - id: transformer
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> que permite uma conexão entre dois controles convertendo os dados de `provider` para um formato que `consumer` pode processar."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> que contém as informações sobre o provedor, o consumidor e o transformador necessário para uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ativação de conexões no <xref href=&quot;System.Web.UI.Control.PreRender&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  id: Controls
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Controls
  nameWithType: WebPartManager.Controls
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém a coleção de todos os <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>, servidor ou controles de usuário que estão contidos em <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zonas em uma página da Web e são gerenciados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "A propriedade de controles não faz referência os outros controles que são referenciados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar, como os vários controles de zona <xref:System.Web.UI.WebControls.WebParts.EditorPart>ou <xref:System.Web.UI.WebControls.WebParts.CatalogPart>controles e outros.</xref:System.Web.UI.WebControls.WebParts.CatalogPart> </xref:System.Web.UI.WebControls.WebParts.EditorPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Esta propriedade é usada pelo conjunto de controle de Web Parts e na maioria das situações de desenvolvimento que não é destinado a ser chamado a partir do código. Por esse motivo, embora a propriedade é pública, ele será ocultado do IntelliSense. Os desenvolvedores que desejam acessar a coleção de <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outros controles de servidor gerenciados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>deve usar o controle de seu <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  syntax:
    content: public override System.Web.UI.ControlCollection Controls { get; }
    return:
      type: System.Web.UI.ControlCollection
      description: "Um <xref href=&quot;System.Web.UI.ControlCollection&quot;> </xref> que contém todos os controles gerenciados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Controls*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CopyWebPart(WebPart)
  nameWithType: WebPartManager.CopyWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Usado pelo controle Web Parts definido para criar uma cópia de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor com a finalidade de adicionar o controle a uma página da Web."
  remarks: "Você não pode chamar o método CopyWebPart diretamente no seu código. Este método é chamado internamente pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle como parte do processo de adição de um novo dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controle de servidor a uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Um controle dinâmico é adicionado a uma página programaticamente ou por meio da interface de usuário de Web Parts (IU), por exemplo por um usuário adicionar um controle de um catálogo de controles, em vez de um controle estático, que é declarado diretamente na marcação de uma página.      > [!NOTE] > O método pode ser substituído em uma classe derivada, se quiser que os desenvolvedores habilitar o método lidar com a cópia cenários adicionais de controle. Para obter detalhes, consulte as notas de seção herdeiros.       Quando um novo controle dinâmico é adicionado, se ele for um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, o método CopyWebPart retorna uma nova instância do controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> Se o controle que está sendo adicionado for algum outro tipo de controle de servidor (como um controle de usuário, um controle personalizado ou um controle do ASP.NET), o controle será já foram encapsulado com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objeto pelo conjunto de controle de Web Parts.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> Quando o método CopyWebPart encontra um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>que controle, ele retorna uma nova instância do <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle com uma nova instância do controle filho encapsulado dentro dele.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>       Quando o método CopyWebPart cria uma nova cópia de um controle para retornar, ele também redefine os valores de todas as propriedades para seus valores padrão. Observe que, se você quiser preservar os valores das propriedades personalizáveis e tê-los copiado para a nova instância de controle, você deve chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A>método bem.</xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A> A etapa final realizadas pelo CopyWebPart método é chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A>método para obter uma nova ID para o controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A>      > [!NOTE] > Porque o método obtém uma nova ID para um controle copiado, você não deve confiar em referência a um controle dinâmico que é adicionado a uma página por sua ID de original. Em vez disso, você deve fazer referência a nova instância do controle retornado pelo método."
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.WebPart CopyWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor a serem copiados."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> a ser adicionado a uma página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers
  id: CreateAvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateAvailableTransformers()
  nameWithType: WebPartManager.CreateAvailableTransformers()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cria um conjunto de transformadores especificado no arquivo de configuração do site e os adiciona à coleção de transformadores referenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
      description: "A coleção de transformadores especificado no arquivo de configuração do site."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection
  id: CreateControlCollection
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateControlCollection()
  nameWithType: WebPartManager.CreateControlCollection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retorna a coleção de todos os controles que são gerenciados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle em uma página da Web. Essa classe não pode ser herdada."
  syntax:
    content: protected override sealed System.Web.UI.ControlCollection CreateControlCollection ();
    parameters: []
    return:
      type: System.Web.UI.ControlCollection
      description: "Um <xref href=&quot;System.Web.UI.ControlCollection&quot;> </xref> consiste em todos os controles de Web Parts vários gerenciados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes
  id: CreateDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateDisplayModes()
  nameWithType: WebPartManager.CreateDisplayModes()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cria o conjunto de todos os possíveis modos de exibição para um aplicativo de Web Parts."
  remarks: "Esse método cria a lista de todos os possíveis modos de exibição, não apenas os modos de exibição tem suportados em uma página específica. Para obter mais informações sobre os modos de exibição com suporte, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>       Por padrão, as Web Parts do conjunto de controles cria o seguinte conjunto de modos para ser usado em páginas de Web Parts de exibição:- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>os desenvolvedores podem criar modos de exibição personalizados, com ou sem associada zonas personalizadas que derivam de <xref:System.Web.UI.WebControls.WebParts.WebZone>ou <xref:System.Web.UI.WebControls.WebParts.ToolZone>classes.</xref:System.Web.UI.WebControls.WebParts.ToolZone> </xref:System.Web.UI.WebControls.WebParts.WebZone> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> Para criar um modo de exibição personalizado, você deve herdar do <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>classe, e para adicionar o modo de exibição como um modo com suporte em uma página, você deve herdar do <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe e substituir o método CreateDisplayModes.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>       Quando você adicionar modos de exibição usando o <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A>método, você deve adicioná-los na ordem em que você deseja que apareçam em quaisquer controles de interface de usuário (como um <xref:System.Web.UI.WebControls.ListBox>controle) que fornecem aos usuários possíveis modos de exibição em uma página.</xref:System.Web.UI.WebControls.ListBox> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A>"
  example:
  - "The following code example demonstrates how to use the CreateDisplayModes method.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that hosts the other controls.  \n  \n-   A user control that resides in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone on the Web page, and enables you to enter and display text in a label.  \n  \n-   A source code file that contains two controls. One is a custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and the other is a custom <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> object to add to the page's default display modes.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the example is the Web page. It contains two <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controls, both user controls, and the custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Notice the `Register` directives at the top of the page to reference the user controls and namespace for the compiled controls.  \n  \n [!code-cs[Webparts_WebPartManager_CreateDisplayModes#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_187_1.aspx)]\n [!code-vb[Webparts_WebPartManager_CreateDisplayModes#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_187_1.aspx)]  \n  \n The third part of the example is the user control for entering and displaying text. It uses a <xref:System.Web.UI.WebControls.MultiView> control to create multiple views of the UI. One view appears with the `Button1` button, the other without. Notice that in the overridden `OnPreRender` method, the code checks to see whether the page is currently in the custom display mode and, if so, displays the first view of the user control, which includes the button. If the page is not in the custom display mode, for example if the page is in browse or design mode, the button is hidden.  \n  \n [!code-cs[Webparts_WebPartManager_CreateDisplayModes#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_187_2.ascx)]\n [!code-vb[Webparts_WebPartManager_CreateDisplayModes#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_187_2.ascx)]  \n  \n The fourth part of the example is the source file for the two custom classes. Notice that the custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overrides the CreateDisplayModes method, and that it first calls the base method to add all the default display modes, and then adds the custom display mode. The custom display mode class, `InLineEditDisplayMode`, simply inherits from <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>, sets the name of the display mode in the constructor, and overrides a number of the base properties to establish the characteristics of the custom display.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Webparts_WebPartManager_CreateDisplayModes#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_187_3.cs)]\n [!code-vb[Webparts_WebPartManager_CreateDisplayModes#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_187_3.vb)]  \n  \n To run the code example, load the page in a browser. Notice that the page is currently in browse mode, and no button is visible. Using the **Display Mode** drop-down list control, change the page to **Inline Edit Display** mode, and notice that now the `Button1` button is visible in the lower user control. Add some text, and click the button to update the control. Notice that the page display is returned to browse mode, the text you entered is now displayed, and the button is once again hidden because the page is no longer in the custom display mode."
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&quot;> </xref> que contém todos os modos de exibição que têm suporte."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID
  id: CreateDynamicConnectionID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateDynamicConnectionID()
  nameWithType: WebPartManager.CreateDynamicConnectionID()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor exclusivo para servir como uma ID para uma conexão dinâmica."
  remarks: "O método CreateDynamicConnectionID gera um valor GUID e o converte em uma cadeia de caracteres para servir como a ID exclusiva para uma conexão. O método é chamado sempre que uma conexão dinâmica é criada."
  syntax:
    content: protected virtual string CreateDynamicConnectionID ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém uma ID exclusiva para uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)
  id: CreateDynamicWebPartID(System.Type)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateDynamicWebPartID(Type)
  nameWithType: WebPartManager.CreateDynamicWebPartID(Type)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera uma ID exclusiva para um dinâmico <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
  remarks: "Quando <xref:System.Web.UI.WebControls.WebParts.WebPart>controles são adicionados a uma página da Web, podem ser estático (o que significa que o controle é declarado na marcação da página) ou dinâmico (o que significa que eles são adicionados por meio de programação).</xref:System.Web.UI.WebControls.WebParts.WebPart> Em qualquer cenário em que o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle está criando novos controles dinâmicos para adicionar a página, ele chama esse método para gerar uma ID exclusiva.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       O método é virtual para que os desenvolvedores podem substituir se desejar fornecer uma implementação personalizada para gerar a ID."
  syntax:
    content: protected virtual string CreateDynamicWebPartID (Type webPartType);
    parameters:
    - id: webPartType
      type: System.Type
      description: "O <xref:System.Type>do controle para o qual uma ID está sendo gerada.</xref:System.Type>"
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a ID exclusiva para um controle."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPartType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  id: CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateErrorWebPart(String,String,String,String,String)
  nameWithType: WebPartManager.CreateErrorWebPart(String,String,String,String,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(String,String,String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cria um controle especial que é inserido em uma página e exibido para usuários finais, quando uma tentativa de carregar ou criar um dinâmico <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle falha por alguma razão."
  remarks: "O método CreateErrorWebPart é chamado quando o controle de Web Parts conjunto tenta carregar ou criar uma instância de um dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controle de servidor e ele falhar por algum motivo.</xref:System.Web.UI.WebControls.WebParts.WebPart> O método cria um <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>objeto, atribui uma mensagem de erro e retorna o proprietário.</xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> O <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>controle é inserido no lugar do controle que falharam e sua mensagem de erro é exibida na página.</xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>       Você não pode chamar o método CreateErrorWebPart diretamente no seu código. No entanto, é possível herdar a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe e estender o método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Para obter detalhes, consulte as notas de seção herdeiros.       Os usuários finais podem trabalhar com um <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>de controle em uma página muito como fariam um normal <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> Para remover a mensagem de erro, eles podem fechar o controle clicando o verbo fechar, no ponto em que o controle será adicionado a um <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>objeto, como qualquer outro controle fechado.</xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> Se um usuário final exclui um <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>controle, o controle de servidor que não carregaram também será excluído da página.</xref:System.Web.UI.WebControls.WebParts.ErrorWebPart>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart (string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage);
    parameters:
    - id: originalID
      type: System.String
      description: "Uma cadeia de caracteres que é a ID do controle com falha. Se um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> está envolvido no caso de falha, a ID é a ID do controle de servidor seu filho."
    - id: originalTypeName
      type: System.String
      description: "Uma cadeia de caracteres que é o nome do <xref:System.Type>do controle com falha.</xref:System.Type> Se um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> está envolvido no caso de falha, o nome do tipo é o tipo de controle de servidor seu filho."
    - id: originalPath
      type: System.String
      description: "Uma cadeia de caracteres que contém o caminho para um controle de usuário, se um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> que contém um filho controle de usuário está envolvido em falha."
    - id: genericWebPartID
      type: System.String
      description: "Uma cadeia de caracteres que retorna a ID de um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref>, se esse tipo de controle foi envolvido em uma falha ao carregar ou criar um controle."
    - id: errorMessage
      type: System.String
      description: "Uma cadeia de caracteres que contém a mensagem de erro são exibidas na página."
    return:
      type: System.Web.UI.WebControls.WebParts.ErrorWebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ErrorWebPart&quot;> </xref> que é inserido em uma página no lugar de um controle que não pôde ser carregado ou criado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization
  id: CreatePersonalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreatePersonalization()
  nameWithType: WebPartManager.CreatePersonalization()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retorna um objeto de personalização para conter os dados de personalização do usuário para a página da Web atual."
  remarks: "O método CreatePersonalization retorna um objeto para conter e gerenciar as configurações de personalização do usuário para a página atual. O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle gerencia este objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartPersonalization
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartPersonalization&quot;> </xref> para conter os dados de personalização do usuário."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)
  id: CreateWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: CreateWebPart(Control)
  nameWithType: WebPartManager.CreateWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Encapsula um controle de servidor que não seja um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlar com um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> do objeto, para que o controle pode ter a funcionalidade de Web Parts."
  remarks: "O método CreateWebPart é o mecanismo principal para habilitar os controles de servidor que não são <xref:System.Web.UI.WebControls.WebParts.WebPart>controles para executar a mesma funcionalidade que um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle e, portanto, para participar totalmente em aplicativos Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Usando esse método, os desenvolvedores muito expandir o número de controles de servidor que podem ser usadas em um aplicativo de Web Parts, porque a praticamente qualquer tipo de controle de servidor – controles padrão do ASP.NET, controles de usuário e controles personalizados – podem ser usados.       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle também usa este método em dois outros cenários para dispor controles de servidor com uma <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objeto.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Quando os usuários adicionar controles de servidor a uma página usando o <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>controlar, se o controle importado não é um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, o método CreateWebPart é chamado.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> Além disso, quando controles de servidor são declarados no formato de persistência dentro de um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona em uma página da Web, o método é chamado para todos os controles que não são de CreateWebPart <xref:System.Web.UI.WebControls.WebParts.WebPart>controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Quando você adicionar um controle de servidor a uma zona programaticamente, uma abordagem comum é usar o método CreateWebPart para encapsular o controle com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>do objeto e, em seguida, chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>método para adicionar o controle à coleção de todos os <xref:System.Web.UI.WebControls.WebParts.WebPart>controles na página, que é referenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates use of the CreateWebPart method. In the `Button2_Click method`, the CreateWebPart method is called to wrap a <xref:System.Web.UI.WebControls.Calendar> control with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object before adding it to the zone.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/csharp/6552ec5d-43c0-4c29-a8a1-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/visualbasic/6552ec5d-43c0-4c29-a8a1-_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Um controle de servidor que não seja um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
    return:
      type: System.Web.UI.WebControls.WebParts.GenericWebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> que encapsula <code> control </code> e permite que ele funcione como um verdadeiro <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  id: DeleteWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DeleteWarning
  nameWithType: WebPartManager.DeleteWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define uma mensagem de aviso personalizado exibida aos usuários finais quando eles exclui um controle."
  remarks: "Quando um usuário exclui um <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar, normalmente é exibida uma mensagem de aviso de padrão.</xref:System.Web.UI.WebControls.WebParts.WebPart> Ele avisa o usuário que, quando esta instância de um controle é excluída, a exclusão é permanente. O desenvolvedor de página pode fornecer aos usuários uma maneira de adicionar uma nova instância do controle para a página (como por meio de um catálogo de <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, ou por meio de alguma maneira programática), mas a instância atual de um controle que é excluído permanentemente é removida.</xref:System.Web.UI.WebControls.WebParts.WebPart> A caixa de diálogo que exibe o aviso inclui um botão para o usuário cancelar a exclusão, se desejado.       A propriedade DeleteWarning permite aos desenvolvedores definir a mensagem de aviso é exibida ao usuário.       Se um desenvolvedor de página atribui uma cadeia de caracteres vazia (&quot;&quot;) o valor para essa propriedade, nenhuma caixa de diálogo de mensagem de aviso será exibido quando um usuário exclui um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > DeleteWarning a propriedade não é exibida no caso de estático <xref:System.Web.UI.WebControls.WebParts.WebPart>controles e controles de servidor.</xref:System.Web.UI.WebControls.WebParts.WebPart> Controles estáticos são controles de servidor que são declarados dentro de um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona na marcação de uma página da Web.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Como esses controles são estáticos, eles não podem ser excluídos, portanto, a mensagem de aviso de exclusão nunca é exibida nesse caso. Controles estáticos podem ser fechados por um usuário, mas um controle fechado é adicionado ao catálogo de página, do qual ele pode ser adicionado para a página por um usuário, enquanto um controle excluído nunca pode ser recuperado."
  example:
  - "The following code example demonstrates the use of the DeleteWarning property declaratively and programmatically.  \n  \n There are four parts to the code example:  \n  \n-   A user control that enables you to change page display modes.  \n  \n-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \n  \n-   A Web page.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the code example is the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses the dynamic compilation approach; thus there is no `Assembly` attribute in the `Register` directive for this control at the top of the Web page. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWarning#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_226_1.cs)]\n [!code-vb[WebParts_WebPartManager_DeleteWarning#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_226_1.vb)]  \n  \n The third part of the code example is the Web page. The page contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone, with the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> control declared in the zone, so that a user can add it to the page at run time. Note that only dynamic controls (controls that are added to a page programmatically or from a catalog like this one) can be deleted from a page. Static controls (controls that are declared within a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone in the markup of a page) can be closed, but never deleted. The `<asp:webpartmanager>` element declares a custom value for the DeleteWarning property by using the `DeleteWarning` attribute. The `Button1_Click` method assigns another custom value to the DeleteWarning property.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWarning#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_226_2.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWarning#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_226_2.aspx)]  \n  \n After you load the page in a browser, you need to add the <xref:System.Web.UI.WebControls.WebParts.WebPart> control to the page. Using the **Display Mode** drop-down list control, select catalog mode. When the catalog appears, select the check box next to the custom control, click **Add** to add it to the page, and then click **Close** to return the page to browse mode. Now that the control is visible, you can delete it. Using the **Display Mode** control again, switch the page into design mode (you cannot delete controls while the page is in browse mode). Click the verbs menu (the arrow symbol) in the header of the <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and select **Delete**. The warning that you set on the `DeleteWarning` attribute appears. Click **Cancel**. Now click the button labeled **Change Delete Warning**, which changes the property value programmatically. From the verbs menu on the control, select **Delete** again, and notice that this time the other warning message appears."
  syntax:
    content: public virtual string DeleteWarning { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o texto da mensagem de aviso. O valor padrão é uma mensagem de aviso localizado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DeleteWebPart(WebPart)
  nameWithType: WebPartManager.DeleteWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Remove permanentemente uma instância dinâmica de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle de uma página da Web."
  remarks: "O método DeleteWebPart remove permanentemente o controle representado pelo `webPart` parâmetro de uma página. Ao contrário de um controle fechado, que é adicionado para o <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>controlar e pode ser adicionado novamente para a página, uma instância do controle excluído nunca pode ser adicionada novamente a página.</xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>      > [!NOTE] > Conforme implementado pelo controle Web Parts definido, a capacidade dos usuários excluir um dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>controle depende do usuário e o escopo de personalização no qual o controle foi adicionado a uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> Se o controle é adicionado quando a página estiver no escopo compartilhado (por um usuário que tenha permissões), em seguida, o controle não pode ser excluído por usuários individuais quando a página estiver no escopo do usuário.       Somente controles dinâmicos podem ser excluídos. Controles dinâmicos são adicionados a uma página programaticamente ou por usuários adicionando controles a partir de um catálogo. Controles estáticos são adicionados a uma página declarativamente no formato de marcação ou persistência. Como as marcas declarativas são permanentemente presentes na marcação, controles estáticos nunca podem ser excluídos, mas pode ser fechados e reabertas."
  example:
  - "The following code example demonstrates how to use the DeleteWebPart method. The first time the **Add Calendar** button is clicked, the code in the event handler creates a <xref:System.Web.UI.WebControls.Calendar> control, and adds it to a zone as a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object. Because the control is added programmatically, it is a dynamic control, and therefore it can be deleted. When a user clicks the **Delete Calendar** button, the code ensures that the control exists, and then deletes it by calling the DeleteWebPart method.  \n  \n [!code-cs[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/csharp/116fed0f-0c12-4700-9cde-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DeleteWebPart#1](~/add/codesnippet/visualbasic/116fed0f-0c12-4700-9cde-_1.aspx)]"
  syntax:
    content: public void DeleteWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle de servidor a ser excluído."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  id: DesignDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DesignDisplayMode
  nameWithType: WebPartManager.DesignDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa o modo de exibição usado para alterar o layout das páginas da Web que contém os controles de Web Parts. Este campo é somente leitura."
  remarks: "O campo DesignDisplayMode faz referência a um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>objeto que é criado e contido pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Como esse é um objeto estático, você pode fazer referência a ele diretamente por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe sem a necessidade de uma instância do controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Quando uma página que contém as Web Parts controla pela primeira vez, ela fica em <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>(modo de procura) por padrão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> Quando os usuários desejarem alterar o layout da página, mover os controles para diferentes regiões ou em zonas atuais, eles devem primeiro alterne a página para DesignDisplayMode (modo de design). No modo de design, aparece a interface do usuário (UI) para as várias zonas e os usuários podem, em seguida, arraste os controles para alterar o layout."
  example:
  - "The following code example demonstrates how to work with the DesignDisplayMode field programmatically. The code populates a drop-down list with the supported display modes for the page, which in this case are browse and design. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to DesignDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-vb[WebParts_WebPartManager_DesignDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_6_1.aspx)]\n [!code-cs[WebParts_WebPartManager_DesignDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_6_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice that the label on the page is hidden. Use the drop-down list control to switch the page to design mode. Notice that, because of the code in the `Page_PreRender` method, the label is now visible."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisconnectWebPart(WebPart)
  nameWithType: WebPartManager.DisconnectWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Remove um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou servidor que é controlar está sendo fechado ou excluídos de qualquer conexão está participando."
  remarks: "O método DisconnectWebPart é chamado internamente pelo controle Web Parts definido quando um controle é fechado em uma página ou excluído de uma página. Nesse cenário, o método é chamado para remover o controle de todas as conexões em que ele está envolvido como um provedor ou consumidor. Se o controle for removido de qualquer conexão, este método também chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>método para encerrar todas as conexões em que `webPart` estava envolvido.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>       Quando o método DisconnectWebPart é chamado, ele gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> Normalmente, esse evento pode ser cancelado, mas em dois casos não pode ser cancelada. Um caso ocorre durante as solicitações para a página, quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>método é chamado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> Se houver um conflito entre as conexões existentes, o método DisconnectWebPart será invocado para fechar as conexões conflitantes e nesta instância do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>evento não pode ser cancelado, pois o conflito deve ser resolvido.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>       O outro caso ocorre quando um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controle de servidor que está conectado é fechado ou excluído.</xref:System.Web.UI.WebControls.WebParts.WebPart> Nesse caso, devido ao controle está sendo removido da página, suas necessidades de conexão a ser encerrada, portanto, por design, não é possível cancelar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>evento para interromper o processo de encerrar uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> Para obter mais informações, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>"
  example:
  - "The following code example demonstrates how to use the DisconnectWebPart method. Using two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, the Web page enables you to create a connection between the controls by clicking a button, while another button enables you to disconnect the controls. If you close one of the controls while the page is in browse mode and the controls are connected, an override of the DisconnectWebPart method disconnects the closed control, ends the connection, and displays a message.  \n  \n The code example has four parts:  \n  \n-   A user control for changing display modes.  \n  \n-   A source file containing custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   A Web page to host the controls.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part is the file containing the source code for the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that will be connected, and a custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses dynamic compilation, so the `Register` directive that references these components in the Web page is declared accordingly at the top of the Web page. For a walkthrough that demonstrates compiling options, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n In the source code, notice the inherited control `MyWebPartManager` that overrides the DisconnectWebPart method. This method checks each connection in a page to see whether the control being closed participates in the connection and, if so, calls the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> method to end the connection. This is identical to the base implementation of the method in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The overridden method then customizes the base implementation by writing a message to the page.  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/csharp/71ce8e23-5620-4b82-8ba7-_1.cs)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/visualbasic/71ce8e23-5620-4b82-8ba7-_1.vb)]  \n  \n The third part of the code example is the Web page. Notice that near the top, it contains `Register` directives to register the user control, and the dynamically compiled assembly with the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The page has two primary methods. The `Button1_Click` method creates a connection between the controls, while the `Button2_Click` method disconnects the controls.  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/csharp/71ce8e23-5620-4b82-8ba7-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/visualbasic/71ce8e23-5620-4b82-8ba7-_2.aspx)]  \n  \n After you load the page, click the **Connect** button to connect the controls. Then click the verbs menu in one of the controls (the downward arrow in the header of the control), and select **Close** from the verbs menu. When you try to close the control, the overridden method is called, the connection is ended, and the message is written to the page. If you want to reset the page to restore the closed control and experiment with other options, click the **Reset User State** link to remove personalization data and restore the page's original state."
  syntax:
    content: protected virtual void DisconnectWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle deverá ser desconectado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  id: DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisconnectWebParts(WebPartConnection)
  nameWithType: WebPartManager.DisconnectWebParts(WebPartConnection)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(WebPartConnection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Executa o processo de desconexão de controles de servidor que estão conectados em uma página da Web."
  remarks: "O método DisconnectWebParts executa o processo completo de encerrar uma conexão entre <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controles de servidor, quando você passar o `connection` parâmetro.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Esse método é usado para se desconectar de controles quando você coloca um `<asp:connectionszone>` elemento em uma página da Web, para fornecer uma interface de usuário (UI) para gerenciar as conexões. Quando uma página está no modo de exibição de conectar-se (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>) e existe uma conexão atual, os usuários podem clicar em um botão que chama o método DisconnectWebParts para encerrar a conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>       Você também pode chamar o método DisconnectWebParts diretamente no seu código, se deseja desconectar controles programaticamente e sem a necessidade de adicionar um `<asp:connectionszone>` elemento para uma página."
  example:
  - "The following code example demonstrates how to use the DisconnectWebParts method. Using two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, the Web page enables you to create a connection between the controls by clicking a button, while another button enables you to disconnect the controls.  \n  \n The code example has four parts:  \n  \n-   A user control for changing display modes.  \n  \n-   A source file containing custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   A Web page to host the controls.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part is a file containing the source code for the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that will be connected. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This example uses dynamic compilation, so the `Register` directive that references these components in the Web page is declared accordingly at the top of the Web page. For a walkthrough that demonstrates compiling options, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/csharp/01708fce-976e-4f0e-bfeb-_1.cs)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/add/codesnippet/visualbasic/01708fce-976e-4f0e-bfeb-_1.vb)]  \n  \n The third part of the code example is the Web page. Notice that near the top, it contains `Register` directives to register the user control and the dynamically compiled assembly with the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The page has two primary methods. The `Button1_Click` method creates a connection between the controls, and the `Button2_Click` method disconnects the controls.  \n  \n [!code-cs[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/csharp/01708fce-976e-4f0e-bfeb-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/add/codesnippet/visualbasic/01708fce-976e-4f0e-bfeb-_2.aspx)]  \n  \n After you load the page, you can click the **Connect** button to connect the controls. If you enter some text in the text box control, and then click the **Enter** button, the text will be displayed in the connected control (it would not be displayed if the controls were disconnected). If you click the **Disconnect** button, the controls will be disconnected. You can verify the connection status of the controls by using the **Display Mode** drop-down list control to switch the page into **Connect** mode. After doing that, click the verbs menu (represented by an arrow) in the title bar of one of the controls, and select the **Connect** item. The connection UI is displayed; it is available because there is an `<asp:connectionszone>` element declared in the page. You can also connect and disconnect the controls from this UI."
  syntax:
    content: public virtual void DisconnectWebParts (System.Web.UI.WebControls.WebParts.WebPartConnection connection);
    parameters:
    - id: connection
      type: System.Web.UI.WebControls.WebParts.WebPartConnection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> que representa a conexão entre os controles de servidor."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>connection</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>connection</code>não está contido no <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*> ou <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*> is read-only.  \n  \n \\- or -  \n  \n <code>connection</code> has already been disconnected from <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*>.  \n  \n \\- or -  \n  \n <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*> is read-only.  \n  \n \\- or -  \n  \n <code>connection</code> has already been disconnected from <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  id: DisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayMode
  nameWithType: WebPartManager.DisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o modo de exibição ativo para uma página da Web que contém os controles de Web Parts."
  remarks: "Uma página que contém os controles de Web Parts está sempre em uma das várias possíveis modos de exibição. Para obter detalhes sobre modos de exibição, consulte [modos de exibição de página da Web partes](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe cria os modos de exibição para uma página da Web.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Usando a base de <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>classe, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle cria vários objetos de modo de exibição padrão que podem ser usados nas páginas que contêm controles de Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Esses modos de exibição padrão serão descritos a <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>Visão geral da classe.</xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle também gerencia os modos de exibição para páginas que usam controles de Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Usando a propriedade DisplayMode, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle mantém uma referência para o modo de exibição atual em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Você também pode usar a propriedade DisplayMode para alternar uma página em diferentes modos de exibição. Para obter um exemplo de alterar modos de exibição em uma página que usa os controles de Web Parts, consulte [passo a passo: alterando modos de exibição em uma página de Web Parts](~/add/includes/ajax-current-ext-md.md).       Como parte do gerenciamento do modo de exibição, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle também fornece eventos e manipuladores de eventos relacionados para modos de exibição, como o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A>método e o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Esses métodos fornecem um mecanismo para personalizar o comportamento da página e até mesmo para adicionar um modo de exibição personalizado."
  example:
  - "The following code example demonstrates programmatic use of the DisplayMode property. After loading the page in a browser, you can use the buttons near the bottom of the page to switch display modes. The page is in browse mode by default when it loads. If you switch to design mode, you can drag the server controls from one zone to another, or arrange two controls within one zone. If you switch to edit mode, you can click the verbs menu in the header of either of the server controls, select **Edit**, and edit the control using the provided editing user interface (UI).  \n  \n> [!NOTE]\n>  Switching among display modes in a Web Parts application is very common, and you might want to provide a consistent, reusable way to do this on all your pages that contain Web Parts controls. For an example of a user control that changes display modes and that can be reused on many pages, see [Walkthrough: Changing Display Modes on a Web Parts Page](../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md).  \n  \n [!code-cs[WebParts_WebPartManager_DisplayMode#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_632_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DisplayMode#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_632_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode { get; set; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> que determina o modo de exibição da página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> está sendo atribuído à propriedade do objeto <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDisplayMode\"></xref> object being assigned to the property is not one of the supported display modes.  \n  \n \\- or -  \n  \n The <xref href=\"System.Web.UI.WebControls.WebParts.WebPartDisplayMode\"></xref> object being assigned to the property is disabled."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  id: DisplayModeChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayModeChanged
  nameWithType: WebPartManager.DisplayModeChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre depois que o modo de exibição atual em uma página foi alterada de Web Parts."
  remarks: "Modos de exibição são parte integrante de aplicativos Web Parts. Quando os usuários alternar para um modo de exibição diferente em uma página da Web, a página geralmente terá uma aparência muito diferente, dependendo da finalidade do novo modo de exibição. Depois de um modo de exibição foi alterado, você pode deseja fazer determinadas alterações na interface do usuário (IU), como ocultar ou Mostrar certos controles, alterando a aparência dos elementos de interface do usuário selecionados e assim por diante.      > [!NOTE] > Para obter mais informações sobre modos de exibição, consulte [modos de exibição de página da Web partes](~/add/includes/ajax-current-ext-md.md). Para obter mais informações sobre o consumo de eventos, consulte [como: consumir eventos em um aplicativo Web Forms](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  id: DisplayModeChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayModeChanging
  nameWithType: WebPartManager.DisplayModeChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre depois que um usuário clica em um verbo em uma página da Web que começa o processo de alteração para um modo de exibição diferente."
  remarks: "Modos de exibição são parte integrante de aplicativos Web Parts. Quando os usuários alternar para um modo de exibição diferente em uma página da Web, a página geralmente terá uma aparência muito diferente, dependendo da finalidade do novo modo de exibição. Depois que um usuário inicia o processo de alteração para um novo modo de exibição clicando em um verbo, talvez você queira fazer determinadas alterações na interface do usuário (IU) usando o <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A>propriedade para determinar qual será o novo modo de exibição e, em seguida, alterando vários elementos de interface do usuário adequadamente.</xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A> Uma maneira útil de fazer isso é substituir o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A>método para personalizar a interface do usuário.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A>      > [!NOTE] > Para obter mais informações sobre modos de exibição, consulte [modos de exibição de página da Web partes](~/add/includes/ajax-current-ext-md.md). Para obter mais informações sobre o consumo de eventos, consulte [como: consumir eventos em um aplicativo Web Forms](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  id: DisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DisplayModes
  nameWithType: WebPartManager.DisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma coleção somente leitura de todos os modos de exibição que estão associados com um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "As referências de propriedade de DisplayModes todos associados modos de exibição, em contraste com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>propriedade, o que faz referência a somente os modos de exibição que estão disponíveis (suporte) na página atual.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>       Dois dos modos de exibição fornecido, procurar e design, sempre são suportadas em uma página. Os outros modos de exibição de três, editar, catálogo e conexões, há suporte para apenas quando uma página tem o tipo de zona necessária para um modo de exibição específico para trabalhar correspondente. Por exemplo, se você página não contém um <xref:System.Web.UI.WebControls.WebParts.EditorZone>zona, o modo de exibição de edição deve aparecer na coleção referenciada pela propriedade DisplayModes, mas não aparece na coleção referenciada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> </xref:System.Web.UI.WebControls.WebParts.EditorZone>"
  example:
  - "The following code example shows the programmatic use of the DisplayModes property. The code uses this property to populate the list with all the display modes available in the Web Parts control set, even those that are not supported on the current page. In this case, the catalog and connect display modes are not supported, because their corresponding required zones are not on the page.  \n  \n The other three display modes--browse, design, and edit--are supported on the page. Edit mode is supported because the page contains an <xref:System.Web.UI.WebControls.WebParts.EditorZone> zone, while browse and design modes are always supported.  \n  \n After you load the page in a browser, you can use the drop-down list control to switch the page from browse mode to design mode, and then to edit mode. In edit mode, you can click the drop-down verbs menu in the header of one of the server controls, and select **Edit** to edit the control. Note that if you select **Catalog** or **Connect** in the drop-down list, an error page is generated.  \n  \n [!code-cs[WebParts_WebPartManager_DisplayModes#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_572_1.aspx)]\n [!code-vb[WebParts_WebPartManager_DisplayModes#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_572_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&quot;> </xref> que contém o conjunto de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> objetos associados a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  id: DynamicConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: DynamicConnections
  nameWithType: WebPartManager.DynamicConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém a coleção de todas as conexões dinâmicas que existem em uma página da Web."
  remarks: "Conexões dinâmicas são conexões que são criadas por meio de programação, em vez de estaticamente. Conexões estáticas são criados por declará-los na marcação de uma página Web Forms. Conexões dinâmicas são formados programaticamente ou por um usuário criar uma conexão usando a interface de usuário da conexão (IU).       A coleção DynamicConnections, embora ele é somente leitura e não é possível alterar seu conteúdo, fornecem acesso programático a cada objeto de conexão dinâmica.      > [!NOTE] > Para executar operações comuns, como conectar ou desconectar <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, os desenvolvedores devem usar os métodos públicos no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe, como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, em vez de tentar modificar diretamente objetos de conexão na coleção DynamicConnections.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  syntax:
    content: protected System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionCollection&quot;> </xref> que contém referências a todas as conexões dinâmicas em uma página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  id: EditDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EditDisplayMode
  nameWithType: WebPartManager.EditDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa o modo de exibição em que os usuários finais podem editar e modificar controles de servidor. Este campo é somente leitura."
  remarks: "O campo EditDisplayMode faz referência a um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>objeto que é criado e contido pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Como esse é um objeto estático, você pode fazer referência a ele diretamente por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe sem a necessidade de uma instância do controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Quando uma página que contém as Web Parts controla pela primeira vez, ela fica em <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>(modo de procura) por padrão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> Quando os usuários quiserem editar ou modificar um controle de servidor, eles devem primeiro alterne a página para EditDisplayMode (modo de edição). Em segundo lugar, eles devem selecionar um controle de servidor específico para editar clicando o verbo de edição no menu de verbos no cabeçalho do controle. Depois que o controle está no modo de edição, é exibida a interface do usuário (UI) edição para editar o controle selecionado.       Para habilitar o modo de edição em uma página, a página deve conter pelo menos um <xref:System.Web.UI.WebControls.WebParts.EditorZone>zona que inclui um ou mais da edição fornecidos por controles, como o <xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart>, ou controles de edição personalizados.</xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart> </xref:System.Web.UI.WebControls.WebParts.EditorZone>"
  example:
  - "The following code example demonstrates how to work with the EditDisplayMode field programmatically. The code populates a drop-down list with the supported display modes for the page, which in this case are browse, design, and edit. To support editing, an `<asp:EditorZone>` element is in the page. Notice that, in the `Page_PreRender` method, the code checks whether the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> property is set to EditDisplayMode. If so, `Label1` will be visible, and if not, `Label1` will be hidden.  \n  \n [!code-cs[WebParts_WebPartManager_EditDisplayMode#1](~/add/codesnippet/csharp/f-system.web.ui.webcontr_7_1.aspx)]\n [!code-vb[WebParts_WebPartManager_EditDisplayMode#1](~/add/codesnippet/visualbasic/f-system.web.ui.webcontr_7_1.aspx)]  \n  \n After you load the page in a browser, you are in browse mode by default. Notice the label on the page is hidden. Use the drop-down list control to switch the page to edit mode. Notice that, because of the code in the `Page_PreRender` method, the label is now visible. Click the **Edit** verb in the verbs menu on one of the controls, to enable editing of that specific control."
  syntax:
    content: public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  id: EnableClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EnableClientScript
  nameWithType: WebPartManager.EnableClientScript
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define um valor que determina se os scripts do lado do cliente está habilitado na página da Web que contém um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "A propriedade EnableClientScript fornece uma maneira para desenvolvedores desabilitar scripts de cliente. Convém desabilitar o script para fins de segurança do cliente ou para garantir que todos os usuários de uma página terão uma experiência de usuário semelhante, mesmo se usarem navegadores diferentes.       Você pode desabilitar o cliente de script com a adição de um `EnableClientScript` de atributo para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>elemento em uma página da Web, como a seguinte linha de código declarativo: `<asp:webpartmanager id=&quot;manager&quot; runat=&quot;server&quot;` `EnableClientScript=&quot;false&quot; />` Além disso, os desenvolvedores podem eliminar essa propriedade herdando do <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe e definindo o padrão de valor para `false`.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>        </xref:System.Web.UI.WebControls.WebParts.WebPartManager>       O conjunto de controles de Web Parts usa script para alguns do cliente fornecem a interface do usuário (UI) e recursos de personalização do cliente. Se você desabilitar o cliente de script, Web Parts controles ainda funcionam, mas alguns recursos são desabilitados. Arraste os controles em diferentes regiões a capacidade é desabilitada, juntamente com a capacidade de processar verbos em um menu suspenso na barra de título do controle (em vez disso, os verbos são exibidos como links na barra de título do controle)."
  syntax:
    content: public virtual bool EnableClientScript { get; set; }
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se o script de cliente pode ser executado na página. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  id: EnableTheming
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EnableTheming
  nameWithType: WebPartManager.EnableTheming
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica que o uso de temas está habilitado em uma página da Web."
  remarks: "O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle substitui a base de <xref:System.Web.UI.Control.EnableTheming%2A>propriedade para assegurar que sempre retorna um valor de `true`.</xref:System.Web.UI.Control.EnableTheming%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Isso é feito porque as Web Parts do conjunto de controles requer o uso de temas para processar as Web Parts controles que são controles filho do <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle e que formam a interface do usuário (UI) de uma página da Web.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Por exemplo, os temas são usados para renderizar as várias zonas e os controles que residem nas zonas, incluindo os vários tipos de controles de parte (controles que herdam a <xref:System.Web.UI.WebControls.WebParts.Part>classe), controles de usuário, controles de servidor ASP.NET e controles de servidor personalizado.</xref:System.Web.UI.WebControls.WebParts.Part>       Embora a propriedade EnableTheming substituída é implementada como uma propriedade de leitura/gravação de acordo com sua propriedade base, você não pode definir a propriedade, como por design, ele sempre deve retornar um valor de `true`. Se você tentar definir a propriedade, um <xref:System.NotSupportedException>exceção será lançada.</xref:System.NotSupportedException>"
  syntax:
    content: public override bool EnableTheming { get; set; }
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se os temas estão habilitados. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>em todos os casos."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Foi feita uma tentativa para definir o valor da propriedade."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting
  id: EndWebPartConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EndWebPartConnecting()
  nameWithType: WebPartManager.EndWebPartConnecting()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Conclui o processo de conectar um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle para outro controle."
  remarks: "O método de EndWebPartConnecting terminar o processo de conectar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle para outro controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> É a contraparte de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>       O método EndWebPartConnecting garante que o objeto de personalização referenciada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A>propriedade é modificável, que é necessário porque cria uma conexão é um tipo de personalização.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> Em seguida, o método garante que o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>o objeto não é `null`e, finalmente, chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void EndWebPartConnecting ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O controle referenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>é de propriedade <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing
  id: EndWebPartEditing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: EndWebPartEditing()
  nameWithType: WebPartManager.EndWebPartEditing()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Conclui o processo de edição de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
  remarks: "O método EndWebPartEditing conclui o processo de edição de um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> É a contraparte de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>       O método EndWebPartEditing garante que o objeto de personalização referenciada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A>propriedade é modificável, que é necessário porque um controle de edição é um processo que requer alterações de personalização.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> Em seguida, o método garante que o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>o objeto não é `null`, de modo que selecionado no momento <xref:System.Web.UI.WebControls.WebParts.WebPart>controle pode alterar e, finalmente, ele chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A>"
  syntax:
    content: public virtual void EndWebPartEditing ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O controle referenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>é de propriedade <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  id: ExportSensitiveDataWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ExportSensitiveDataWarning
  nameWithType: WebPartManager.ExportSensitiveDataWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o texto de uma mensagem de aviso é exibido quando um usuário tenta exportar dados confidenciais do estado de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
  remarks: "Quando um usuário tenta exportar dados confidenciais do estado de um <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar, se os dados que está sendo exportados é proveniente de um membro que foi marcado como confidencial no código-fonte, uma mensagem de aviso será exibida para o usuário em uma caixa de mensagem, informando que está sendo exportados dados confidenciais e fornecendo uma oportunidade de cancelar a exportação.</xref:System.Web.UI.WebControls.WebParts.WebPart> Os desenvolvedores podem marcar os dados de um membro específico como confidenciais definindo o `isSensitive` parâmetro o `[Personalizable]` atributo `true` no membro. Para obter mais informações sobre esse atributo e o parâmetro, consulte a <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute>classe.</xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute>      > [!IMPORTANT] > Quando você usa o recurso de exportação de Web Parts, dados confidenciais potencialmente podem ser exportados para usuários não autorizados. Para obter detalhes sobre como se proteger contra essa ameaça, consulte [Protegendo páginas de Web Parts](~/add/includes/ajax-current-ext-md.md).       A mensagem padrão é exibida sempre que os usuários tentam exportar. No entanto, atribuindo um valor para a propriedade ExportSensitiveDataWarning, você pode fornecer uma mensagem de aviso personalizado."
  example:
  - "The following code example demonstrates the declarative use of the ExportSensitiveDataWarning property.  \n  \n The code for the following Web page uses a standard <xref:System.Web.UI.WebControls.BulletedList> control and places it in a zone. The control will be wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control at run time, which enables it to act as a true <xref:System.Web.UI.WebControls.WebParts.WebPart> control. To make the control exportable, an `ExportMode` attribute is added to the `<asp:bulletedlist>` element, and the attribute value is set to <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, which means that both sensitive and non-sensitive data can be exported. Note also that in the `<asp:webpartmanager>` element, the `ExportSensitiveDataWarning` attribute is assigned a custom value.  \n  \n Note that for the code example to work, there is a setting you must add in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n [!code-vb[WebParts_WebPartManager_ExportSensitiveData#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1033_1.aspx)]\n [!code-cs[WebParts_WebPartManager_ExportSensitiveData#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1033_1.aspx)]  \n  \n After you load the page in a browser, click the verbs menu (represented by a downward arrow) in the title bar of the control that contains the links. In the verbs menu, select **Export**, and notice that a message box appears with the custom warning. If you want to continue with the export, click **OK**, which will allow you to save a local copy of an XML description file with all the data about the control."
  syntax:
    content: public virtual string ExportSensitiveDataWarning { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a mensagem de aviso. A mensagem padrão é um valor de cultura específico fornecido pelo .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  id: ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ExportWebPart(WebPart,XmlWriter)
  nameWithType: WebPartManager.ExportWebPart(WebPart,XmlWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(WebPart,XmlWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cria um arquivo de descrição de XML que contém dados de estado e de propriedade para um controle de servidor."
  remarks: "O método ExportWebPart reúne vários dados de estado e de propriedade de `webPart` em um arquivo XML. Os dados incluem informações sobre o controle em si, incluindo seu assembly, dados de estado e dados de propriedade. O usuário que inicia a exportação pode salvar o arquivo XML para o disco no computador local ou na rede. Outros usuários, em seguida, podem importar o arquivo de descrição para uma página diferente ou site da Web e aplicar os estado e os dados a uma instância diferente do `webPart`. Isso fornece um mecanismo rápido e conveniente para os usuários compartilhar e reutilizar suas configurações em controles de servidor, e ele também fornece aos desenvolvedores um meio para controlar a aparência e o comportamento dos controles exportados e importados.       Propriedades em `webPart` não são exportados por padrão. Para habilitar a exportação de uma propriedade, marque-o com o `[Personalizable]` atributo no código-fonte. Você também pode marcar uma propriedade exportável como contendo dados confidenciais, definindo o `isSensitive` parâmetro o `[Personalizable]` atributo `true`. Por padrão, `isSensitive` é `false`. Os desenvolvedores podem definir o parâmetro `true` para indicar que os dados confidenciais.       Para habilitar `webPart` para ser exportado, um desenvolvedor define seu <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>para o valor da propriedade <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>(que inclui todas as propriedades confidenciais e personalizáveis), ou <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, que exporta tudo, exceto as propriedades confidenciais.</xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>      > [!IMPORTANT] > Permitindo que os usuários para exportar dados de controles e importar dados para outros controles, envolve alguns riscos de segurança. Os desenvolvedores devem usar a abordagem discutida acima para proteger dados confidenciais e, se desejar evitar o risco de exposição de dados completamente, não deve ativar exportação em `webPart` em todos os. Para obter detalhes sobre problemas de segurança de Web Parts, consulte [Protegendo páginas de Web Parts](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void ExportWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Xml.XmlWriter writer);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle de quais dados serão exportados."
    - id: writer
      type: System.Xml.XmlWriter
      description: "Um <xref:System.Xml.XmlWriter>que grava os dados exportados de `webPart` para um arquivo de descrição de XML.</xref:System.Xml.XmlWriter>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>writer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is not contained in the collection of controls referenced in <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*>.  \n  \n \\- or -  \n  \n The <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode*> property of <code>webPart</code> is set to a value of <xref href=\"System.Web.UI.WebControls.WebParts.WebPartExportMode\"></xref>, which means that export is disabled for <code>webPart</code>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Focus
  id: Focus
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Focus()
  nameWithType: WebPartManager.Focus()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Focus()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Substituído para impedir que o foco seja definido no <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle, porque ele tem nenhuma interface do usuário (IU)."
  remarks: "O método de foco substitui a base de <xref:System.Web.UI.Control.Focus%2A?displayProperty=fullName>método e gera uma exceção se um chamador chama o método.</xref:System.Web.UI.Control.Focus%2A?displayProperty=fullName> Porque o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle não tiver nenhuma interface do usuário e nunca é visível para os usuários, ele nunca pode permitir que o foco para ser definidas no próprio.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: public override void Focus ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Focus*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Um chamador tenta chamar o método de foco, que não tem suporte em um controle com nenhuma interface do usuário."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetConsumerConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetConsumerConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Recupera a coleção de <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> objetos que podem atuar como pontos de conexão de um servidor de controle que é atuar como um consumidor dentro de uma conexão de Web Parts."
  remarks: "Uma conexão de Web Parts sempre envolve exatamente dois controles, um atuando como o provedor de dados, o outros atuando como o consumidor de dados. Cada controle deve ter um ou mais métodos que são definidos como pontos de conexão. No caso de um controle de consumidor, seus pontos de conexão são <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objetos.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Recuperar os pontos de conexão do consumidor é uma etapa necessária no cria uma conexão de Web Parts.       Um consumidor deve sempre ter ponto de pelo menos uma conexão para ser capaz de estabelecer uma conexão. O método GetConsumerConnectionPoints verifica um controle de consumidor e recupera uma coleção de todos os seus pontos de conexão. Se um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle não tem nenhum ponto de conexão, o método retorna uma coleção vazia.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the GetConsumerConnectionPoints method.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see the topic [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks to see whether a connection already exists and, if not, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> property. Note that the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection> object that is retrieved by using the GetConsumerConnectionPoints method is then passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> method to determine whether a connection between the two controls can be created.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/02749d07-cefa-48e1-9ad7-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/02749d07-cefa-48e1-9ad7-_1.aspx)]  \n  \n The third part of the example is the source code for the controls. You can obtain this code, and instructions for compiling it, from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method. If you return to this page in a later browser session, this static connection will already be established and will not need to be recreated each time the page loads."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um controle de servidor que atua como um consumidor em uma conexão."
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection&quot;> </xref> que contém todos os pontos de conexão do consumidor."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)
  id: GetCurrentWebPartManager(System.Web.UI.Page)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetCurrentWebPartManager(Page)
  nameWithType: WebPartManager.GetCurrentWebPartManager(Page)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(Page)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Recupera uma referência à instância atual do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle em uma página."
  remarks: "O método GetCurrentWebPartManager é útil em contextos em que você deseja recuperar uma referência ao atual <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> É de um cenário comum em que isso poderá ocorrer se você estiver escrevendo um controle personalizado que não é possível saber durante o desenvolvimento do que a ID do <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle em sua página será.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      > [!NOTE] > GetCurrentWebPartManager o método é estático, você pode chamá-lo diretamente sem a necessidade de uma instância de um <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Alguns controles em Web Parts controlam conjunto, como <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, têm um <xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A>propriedade que pode recuperar uma referência ao atual <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> Portanto, ao trabalhar com esses controles, você deve usar essa propriedade para recuperar uma referência.       Se você estiver programando em um contexto em que você sabe que a ID do <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle, como gravar código embutido dentro de uma página da Web, é mais simples e mais eficiente para referir-se diretamente ao <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle usando sua ID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates how to use the GetCurrentWebPartManager method. The example has two parts: a custom server control, and a Web page that hosts the control.  \n  \n The custom <xref:System.Web.UI.WebControls.Label> control uses the GetCurrentWebPartManager method to retrieve the ID of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control on the current page, and then displays the ID.  \n  \n [!code-cs[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/add/codesnippet/csharp/42edcc7a-0f38-4926-86e7-_1.cs)]\n [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/add/codesnippet/visualbasic/42edcc7a-0f38-4926-86e7-_1.vb)]  \n  \n The following code example provides the Web page that hosts the control in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone.  \n  \n [!code-cs[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/add/codesnippet/csharp/42edcc7a-0f38-4926-86e7-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/add/codesnippet/visualbasic/42edcc7a-0f38-4926-86e7-_2.aspx)]  \n  \n After you load the page in a browser, notice that the ID of the current <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control is displayed within the custom <xref:System.Web.UI.WebControls.Label> control."
  syntax:
    content: public static System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager (System.Web.UI.Page page);
    parameters:
    - id: page
      type: System.Web.UI.Page
      description: "A página da Web que contém uma instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref>."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartManager
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> que faz referência a instância atual do controle em uma página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>page</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetDisplayTitle(WebPart)
  nameWithType: WebPartManager.GetDisplayTitle(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma cadeia de caracteres que contém o valor para o <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>propriedade de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>"
  remarks: "Obtém o valor calculado do <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>propriedade `webPart`.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> Quando os desenvolvedores não atribui um valor para o <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>propriedade de um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, esse método gera o valor a ser exibido como o título.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> O valor calculado para controles sem título consiste em um número acrescentado a uma cadeia de caracteres, com o número que indica a sequência de um controle dentro da região atual."
  syntax:
    content: protected virtual string GetDisplayTitle (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O controle para o qual o método retorna o valor de <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>"
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o valor calculado da <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>para <code> webPart </code>.</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle*>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code>não está no <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> coleção."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetExportUrl(WebPart)
  nameWithType: WebPartManager.GetExportUrl(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o caminho virtual relativo e a cadeia de caracteres de consulta que fazem parte da solicitação, quando um usuário tenta exportar um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle."
  remarks: "O valor retornado pelo método GetExportUrl é um caminho virtual relativo ao local do servidor, a página que contém o controle, mais o valor de cadeia de caracteres de consulta acrescentada que faz a solicitação de exportação enviada ao servidor. O método GetExportUrl codifica a cadeia de caracteres antes de permitir que a solicitação de envio, para proteger contra ataques de script mal-intencionado.      > [!NOTE] > Para obter mais informações sobre como proteger aplicativos Web Parts, consulte [Protegendo páginas de Web Parts](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public string GetExportUrl (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> que está sendo exportado."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o caminho virtual relativo e a consulta de cadeia de caracteres que a solicitação para exportar um controle de formulário junto."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)
  id: GetGenericWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetGenericWebPart(Control)
  nameWithType: WebPartManager.GetGenericWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência à instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> controle que contém um controle de servidor."
  remarks: "Em geral, há duas categorias de controles que os desenvolvedores colocam em <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonas participem em aplicativos Web Parts: <xref:System.Web.UI.WebControls.WebParts.WebPart>controles que herdam a <xref:System.Web.UI.WebControls.WebParts.WebPart>classe base e outros controles de servidor, que podem ser controles padrão do ASP.NET, controles personalizados ou controles de usuário.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Quando qualquer um desses controles é colocado em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, ele usa a funcionalidade de um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle essa funcionalidade inerentemente, mas não os outros tipos de controles de servidor.</xref:System.Web.UI.WebControls.WebParts.WebPart> Para habilitar outros controles de servidor atuar como <xref:System.Web.UI.WebControls.WebParts.WebPart>controla quando eles são colocados em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, o ASP.NET envolve-los com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Porque o <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle herda diretamente a <xref:System.Web.UI.WebControls.WebParts.WebPart>classe, ele fornece seus controles filhos com recursos de Web Parts true.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>       Muitas vezes em tempo de execução, os desenvolvedores de páginas talvez queira obter uma referência para o <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle que contém um dos controles de servidor em uma zona.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> O método GetGenericWebPart permite recuperar uma referência para o <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the GetGenericWebPart method. The code example contains a <xref:System.Web.UI.WebControls.Calendar> control declared within a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone. The `Button1_Click` method first prints the ID of the <xref:System.Web.UI.WebControls.Calendar> control to a label, and then uses the GetGenericWebPart method to retrieve a reference to the <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control that wraps the calendar. The ID of the <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control, and the ID of its child control (which is the <xref:System.Web.UI.WebControls.Calendar> control), are both printed to a second label.  \n  \n [!code-cs[WebParts_WebPartManager_GetGenericWebPart#1](~/add/codesnippet/csharp/d656242f-a1d2-490c-85d4-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_GetGenericWebPart#1](~/add/codesnippet/visualbasic/d656242f-a1d2-490c-85d4-_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Um controle de servidor que existe em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> e é empacotado como um controle filho de um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> em tempo de execução."
    return:
      type: System.Web.UI.WebControls.WebParts.GenericWebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> que encapsula <code> control </code> como um controle filho. O método retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se <code> control </code> não está contida em uma <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  id: GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: GetProviderConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetProviderConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Recupera a coleção de <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> objetos que podem atuar como pontos de conexão de um servidor de controle que é atuar como um provedor em uma conexão de Web Parts."
  remarks: "Uma conexão de Web Parts sempre envolve exatamente dois controles, um atuando como o provedor de dados, o outros atuando como o consumidor de dados. Cada controle deve ter um ou mais métodos que são definidos como pontos de conexão. No caso de um controle de provedor, seus pontos de conexão são <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objetos.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Um provedor deve sempre ter ponto de pelo menos uma conexão para ser capaz de estabelecer uma conexão. O método GetProviderConnectionPoints verifica um controle de provedor e recupera uma coleção de todos os seus pontos de conexão. Recuperar os pontos de conexão do provedor é uma etapa necessária no cria uma conexão de Web Parts."
  example:
  - "The following code example demonstrates how to use the GetProviderConnectionPoints method.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The declarative markup for the Web page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks to see whether a connection already exists and, if not, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> property. Note that the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection> object that is retrieved by using the GetProviderConnectionPoints method is then passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> method to determine whether a connection between the two controls can be created.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/7aa405f8-9f90-4b6f-8d66-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/7aa405f8-9f90-4b6f-8d66-_1.aspx)]  \n  \n The third part of the example is the source code for the controls. You can obtain this code, and instructions for compiling it, from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview.  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method. If you return to this page in a later browser session, this static connection will already be established and will not need to be recreated each time the page loads."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um controle de servidor que está atuando como um provedor em uma conexão."
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection&quot;> </xref> que contém todos os pontos de conexão no provedor."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)
  id: ImportWebPart(System.Xml.XmlReader,System.String@)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: ImportWebPart(XmlReader,String)
  nameWithType: WebPartManager.ImportWebPart(XmlReader,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(XmlReader,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Importa um arquivo de descrição de XML que contém dados de estado e de propriedade para um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlar e aplica os dados para o controle."
  remarks: "O método ImportWebPart importa um arquivo de descrição de XML que foi criado com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>método de um controle de servidor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> Não é o controle de servidor real que é importado, mas apenas o arquivo de descrição que contém o estado e os dados sobre o controle. O controle e o assembly referenciado no arquivo de descrição já devem estar disponíveis no servidor em que um usuário tentar importar o arquivo de descrição.       Para habilitar a importação de um controle, um desenvolvedor precisa adicionar um <xref:System.Web.UI.WebControls.WebParts.CatalogZone>controle na página em que a importação será habilitada.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> Dentro da região, um <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>controle deve ser adicionado.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> Esse controle fornece uma caixa de diálogo que permite aos usuários navegar e localizar o arquivo de descrição para importar.       Depois que um usuário localiza um arquivo de descrição e começa a importação, o arquivo de descrição é lido pelo método ImportWebPart. Se não há erros e se o assembly e o controle for encontrados, o controle de servidor é adicionado ao catálogo dentro do <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>controle e os dados de estado e propriedade vários especificados no arquivo de descrição são aplicados ao controle.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> O usuário pode, em seguida, selecione o controle e adicioná-lo para a página.      > [!IMPORTANT] > Como o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>método, o método ImportWebPart tem alguns possíveis riscos de segurança.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> Porque ela envolve a importação de dados em um site da Web, um usuário mal-intencionado pode tentar inserir dados incorretos ou código de script até o arquivo de descrição que será importado. Em seguida, os dados incorretos podem aparecer em uma página ou em um banco de dados, ou pode executar o script inserido. Para obter uma visão geral dos riscos potenciais associados com a importação de arquivos de descrição e maneiras de evitar esses riscos, consulte [Protegendo páginas de Web Parts](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.WebPart ImportWebPart (System.Xml.XmlReader reader, out string errorMessage);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um <xref:System.Xml.XmlReader>que lê os estado e os dados do arquivo de descrição de XML que está sendo importado.</xref:System.Xml.XmlReader>"
    - id: errorMessage
      type: System.String
      description: "Um <xref:System.String>que é exibido para o usuário se um erro for encontrado durante a importação.</xref:System.String>"
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> (ou um controle de servidor que é encapsulado por um <xref href=&quot;System.Web.UI.WebControls.WebParts.GenericWebPart&quot;> </xref> e, portanto, é tratada como uma <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>) que é referenciado no arquivo de descrição XML importado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "<code>reader</code> could not read the file.  \n  \n \\- or -  \n  \n <code>reader</code> needed to display an import error message but did not find one in the file.  \n  \n \\- or -  \n  \n <code>reader</code> reached the end of the file without finding the XML element that contains the exported data."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  id: Internals
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Internals
  nameWithType: WebPartManager.Internals
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência para o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManagerInternals&quot;> </xref> classe, que é usada para combinar e separar um conjunto de métodos que são implementados, na verdade, o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> classe, mas geralmente são úteis para desenvolvedores de controle."
  remarks: "A propriedade Internals expõe as APIs para chamar em um conjunto de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>métodos que são usados principalmente em casos de extensibilidade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       É a maneira projetada para usar esses métodos internos para acessá-los por meio da propriedade de recursos internos. Porque a propriedade estiver protegida, você só pode acessá-lo e chamar os métodos em uma instância da <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals>classe por herança da <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe</xref:System.Web.UI.WebControls.WebParts.WebPartManager> de</xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals>      > [!NOTE] > Essa propriedade é oculta do IntelliSense no [!INCLUDE[vsprvsext](~/add/includes/ajax-current-ext-md.md)]. No entanto, em um derivado <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe, você ainda pode acessar a propriedade e seus vários membros.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: protected System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartManagerInternals
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManagerInternals&quot;> </xref>, por meio do qual um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> podem fazer referência a vários métodos que foram separados no <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManagerInternals&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Internals*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  id: IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: IsAuthorized(WebPart)
  nameWithType: WebPartManager.IsAuthorized(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Executa as etapas iniciais para determinar se um controle está autorizado a ser adicionada a uma página."
  remarks: "O método IsAuthorized é o inicial chamado pelo controle Web Parts definido para verificar a autorização para um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> Ele aceita `webPart` como um parâmetro e inicia um processo que determina se o controle será adicionado a uma página. Chame este método do seu código diretamente quando você precisa determinar se um determinado controle está autorizado.       Esse método executa as tarefas iniciais de determinar se o controle herda a <xref:System.Web.UI.WebControls.WebParts.WebPart>classe ou é um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>de controle e, nesse caso, o tipo de filho controlá-lo contém.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Para concluir a tarefa de autorização, ele chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>sobrecarga de método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>"
  example:
  - "The following code example demonstrates how to call the IsAuthorized method from your code to determine whether a control is authorized to be added to a page.  \n  \n The code example has three parts:  \n  \n-   A custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control that overrides the IsAuthorized method.  \n  \n-   A Web page that creates a filter for a <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  \n  \n-   An explanation of how to run the code example.  \n  \n This code example uses a custom <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control that overrides the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload method to provide custom handling of the <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property. This control checks for a property value of `admin` and, if the value is present, authorizes the control. If a control has a different value, it is not authorized; controls without the property value are authorized as well, as they are presumed not to be part of the filtering scenario.  \n  \n For this code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses the dynamic compile method. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/csharp/9c13e351-e761-4514-8860-_1.cs)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/visualbasic/9c13e351-e761-4514-8860-_1.vb)]  \n  \n The second part of the code example creates a filter that can potentially exclude a control. The following Web page contains three ASP.NET server controls in an `<asp:webpartzone>` element. Notice that the first and second controls have their <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> properties set to different values, and the third does not assign the property. This authorization value can be checked at run time, and the control can be added to the page if the filter matches criteria set by the developer. Notice also that in the `Page_Load` method, the code calls the IsAuthorized method to determine whether each of the controls is authorized, and if so, it sets each control's <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property.  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/csharp/9c13e351-e761-4514-8860-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/visualbasic/9c13e351-e761-4514-8860-_2.aspx)]  \n  \n Note that for the code example to work, you must add a setting in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n After you load the page in a browser, note that the first control is displayed, because it matches the criteria in the overridden method. The second control is not added to the page, because it is excluded by the filter. The third control is also added, because it does not have its <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property set. Notice that if you click the verbs menu icon in the title bar of either control, they can both be exported because their respective <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> property values were assigned."
  syntax:
    content: public bool IsAuthorized (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor que está sendo verificado para autorização."
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se <code> webPart </code> podem ser adicionados a uma página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  id: IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: IsAuthorized(Type,String,String,Boolean)
  nameWithType: WebPartManager.IsAuthorized(Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Executa as etapas finais para determinar se um controle está autorizado a ser adicionada a uma página."
  remarks: "O método de sobrecarga IsAuthorized executa as etapas finais para determinar se um controle está autorizado a ser adicionada a uma página. O método garante que `type` é um tipo válido e que `path` tem um valor somente se o controle está sendo verificado é um controle de usuário. Em seguida, ele chama críticos <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A>método, que gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A>"
  example:
  - "The following code example demonstrates how to override the IsAuthorized method to determine whether a control is authorized to be added to a page.  \n  \n The first step is to create a filter that can potentially exclude a control. The following Web page contains three ASP.NET server controls in an `<asp:webpartzone>` element. Notice that the first and second controls have their <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> properties set to different values, and the third does not assign the property. This authorization value can be checked at run time, and the control can be added to the page if the filter matches criteria set by the developer.  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/csharp/c3cfcde3-abf1-45f3-ace8-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#1](~/add/codesnippet/visualbasic/c3cfcde3-abf1-45f3-ace8-_1.aspx)]  \n  \n The second step is to override the IsAuthorized method, and create custom handling for authorization filters. Note that the code first checks whether the property has a value, so that any control that does not assign the <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property will be added automatically. If a control has a filter, the code returns `true` only if the filter value is equal to `admin`. This demonstrates a simple mechanism you can use for displaying certain controls to certain users, depending on their role. While a full example using roles is beyond the scope of this topic, you could use the same logic as the overridden method in this code example, except that you could check whether the current user is in a role that matches the authorization filter value, and then add the control only for that user. This would enable you to create pages where some users would see all the controls, and other users would see only selected controls. This is how the logic that checks the filter might look if you used roles:  \n  \n [Visual Basic]  \n  \n```  \nIf Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter) Then  \n  return True  \nElse  \n  return False  \nEnd If  \n```  \n  \n [C#]  \n  \n```  \nif(Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter))  \n    return true;  \nelse  \n    return false;  \n```  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses the dynamic compile method. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/csharp/c3cfcde3-abf1-45f3-ace8-_2.cs)]\n [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/add/codesnippet/visualbasic/c3cfcde3-abf1-45f3-ace8-_2.vb)]  \n  \n After you load the page in a browser, note that the first control is displayed, because it matches the criteria in the overridden method. The second control is not added to the page, because its filter value is excluded. The third control is added, because it does not have its <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property set. If you change the property value on the second control to match that of the first control, and then run the page again, the second control is added as well."
  syntax:
    content: public virtual bool IsAuthorized (Type type, string path, string authorizationFilter, bool isShared);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do controle que está sendo verificado para autorização.</xref:System.Type>"
    - id: path
      type: System.String
      description: "O caminho relativo de aplicativo para o arquivo de origem para o controle de autorização, se o controle for um controle de usuário."
    - id: authorizationFilter
      type: System.String
      description: "Um valor de cadeia de caracteres arbitrária atribuído para o <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter*>propriedade de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle, usado para autorizar se um controle pode ser adicionado a uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter*>"
    - id: isShared
      type: System.Boolean
      description: "Indica se o controle está sendo verificado para autorização é um controle compartilhado, o que significa que é visível para muitos ou todos os usuários do aplicativo e seu <xref:System.Web.UI.WebControls.WebParts.WebPart.IsShared*>o valor da propriedade é definido como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Web.UI.WebControls.WebParts.WebPart.IsShared*>"
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se um controle está autorizado a ser adicionado a uma página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is a user control, and <code>path</code> is either <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\").  \n  \n \\- or -  \n  \n <code>type</code> is not a user control, and <code>path</code> has a value assigned to it."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  id: IsCustomPersonalizationStateDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: IsCustomPersonalizationStateDirty
  nameWithType: WebPartManager.IsCustomPersonalizationStateDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se foram feitas alterações de personalização que afetam os detalhes de personalização de nível de página controlados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle usa a propriedade IsCustomPersonalizationStateDirty internamente para controlar se qualquer uma da personalização de nível de página de dados que ele gerencia mudou.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Os dados de personalização é alterado quando os usuários realizarem várias ações de personalização no nível da página, como adicionar ou remover <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, conectando ou desconectando controles, alterando o layout da página ao mover os controles e outras ações.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Os usuários também podem executar a personalização no nível de controle, o que significa que eles fazer alterações de personalização para um controle específico, e as alterações afetam somente esse controle. Um exemplo seria o controle de edição e alterar o texto de título, ou a sua cor de plano de fundo. Personalização de nível de controle não afeta os dados de personalização de nível de página rastreados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle, e, portanto, o valor da propriedade IsCustomPersonalizationStateDirty não é alterado para `true` quando ocorre a personalização de nível de controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Embora o método é protegido e não pode ser acessado diretamente por um chamador de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>propriedade pode ser acessado diretamente por chamadores e retorna o valor dessa propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>"
  syntax:
    content: protected virtual bool IsCustomPersonalizationStateDirty { get; }
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se foram feitas alterações de personalização. O valor padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: WebPartManager.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Cargas de controlam os dados de estado que foi salvo de uma solicitação de página anterior e precisam ser restaurado em uma solicitação subsequente."
  remarks: "O LoadControlState método é útil para restaurar dados de propriedade que devem ser persistidos em postagens de uma página, mesmo quando o <xref:System.Web.UI.Control.EnableViewState%2A>estiver definida como `false`.</xref:System.Web.UI.Control.EnableViewState%2A>"
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "Contém os dados de estado persistente para ser carregado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>savedState</code>não é válido <xref:System.Web.UI.PageStatePersister.ControlState*>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: LoadCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Armazena os dados de personalização personalizado que foi passados para o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle pelos objetos de personalização para ser usado durante o processo de inicialização."
  remarks: "O método LoadCustomPersonalizationState fornece dados de estado salvo na forma de um <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary>objeto.</xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> Esses dados, eventualmente, são usados para carregar dados de personalização para os controles de Web Parts e executar outras tarefas de inicialização.      > [!NOTE] > Este método é chamado por uma sequência de métodos que começa quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A>método inicialmente solicita associado <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization>objeto para fornecer dados de personalização para a <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A>       Você não pode chamar este método diretamente no seu código. Você pode, no entanto, diretamente chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>método, que por si só chama o método LoadCustomPersonalizationState e retorna os dados de personalização.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>"
  syntax:
    content: protected virtual void LoadCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> que contém os dados de estado a ser carregado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  id: MediumPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: MediumPermissionSet
  nameWithType: WebPartManager.MediumPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um <xref href=&quot;System.Security.PermissionSet&quot;> </xref> objeto que permite apenas <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> permissão e <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> permissão."
  remarks: "O <xref:System.Security.PermissionSet>objeto retornado por essa propriedade é usado durante a importação para desserialização de tipo.</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.PermissionSet MediumPermissionSet { get; }
    return:
      type: System.Security.PermissionSet
      description: "Um <xref href=&quot;System.Security.PermissionSet&quot;> </xref> objeto que permite apenas <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> permissão e <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> permissão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  id: MinimalPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: MinimalPermissionSet
  nameWithType: WebPartManager.MinimalPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um <xref href=&quot;System.Security.PermissionSet&quot;> </xref> objeto que permite apenas <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> permissão e <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> permissão."
  remarks: "O <xref:System.Security.PermissionSet>objeto retornado por essa propriedade é usado durante a importação para tudo, exceto o tipo de desserialização.</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.PermissionSet MinimalPermissionSet { get; }
    return:
      type: System.Security.PermissionSet
      description: "Obtém um <xref href=&quot;System.Security.PermissionSet&quot;> </xref> objeto que permite apenas <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> permissão e <xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> permissão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  id: MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: MoveWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Move um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de um servidor <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona para outro ou para uma nova posição dentro da mesma zona."
  remarks: "O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle usa o método MoveWebPart para mover `webPart` para um novo local na mesma região ou em uma região diferente.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Você pode chamar este método diretamente no código e também é acionado quando um usuário move um controle para uma nova posição usando várias opções na interface do usuário de Web Parts (IU).       Um número de condições que deve ser atendido antes de `webPart` pode ser movido, e a maioria deles é indicada por itens listados na seção de exceções deste tópico. Se `webPart` não estava contida em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona em primeiro lugar, ele não pode ser movido para uma zona.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Depois que as condições forem atendidas, ocorre a seguinte sequência de ações para mover `webPart`: 1.  O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A>método gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A>      2.  `webPart`é removido da sua região atual (se necessário) e adicionado à sua nova zona ou nova posição dentro da zona atual.      3.  O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A>método gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A>      4.  O `zoneIndex` de cada <xref:System.Web.UI.WebControls.WebParts.WebPart>controle em regiões de origem e de destino será redefinido para refletir o controle movido.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to call the MoveWebPart method directly from code to move a <xref:System.Web.UI.WebControls.WebParts.WebPart> control from one zone to another.  \n  \n The code example has three parts:  \n  \n-   A user control for changing display modes.  \n  \n-   A Web page to host the controls.  \n  \n-   An explanation of how to run the code example.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For more information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the example is a Web page that contains two zones, each of which contains two server controls. When a user clicks the **Move WebPart** button on the page, the code in the `Button1_Click` method moves a control from the first zone to a new position in the second zone. Notice that the code first must call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> method to retrieve the <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object that wraps the `list1` control. This is required because the first parameter of the MoveWebPart method requires a <xref:System.Web.UI.WebControls.WebParts.WebPart> control, whereas `list1` is an ASP.NET server control.  \n  \n [!code-cs[WebParts_WebPartManager_MoveWebPart#1](~/add/codesnippet/csharp/49caf3f6-e63d-4133-bdf2-_1.aspx)]\n [!code-vb[WebParts_WebPartManager_MoveWebPart#1](~/add/codesnippet/visualbasic/49caf3f6-e63d-4133-bdf2-_1.aspx)]  \n  \n After the page loads, click the **Move WebPart** button, and note that the control that contains the links moves into the middle position in the second zone. This movement of the control is accomplished programmatically by calling the MoveWebPart method. You can also use the **Display Mode** drop-down list control to switch the page to design mode, and in design mode, you can drag the controls to different zones or different positions within their zones. The MoveWebPart method is also called by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control to handle such user-initiated moves."
  syntax:
    content: public virtual void MoveWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "O <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor que está sendo movido."
    - id: zone
      type: System.Web.UI.WebControls.WebParts.WebPartZoneBase
      description: "O destino <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> para o qual `webPart` está sendo movido."
    - id: zoneIndex
      type: System.Int32
      description: "Um inteiro que indica o índice da `webPart` em relação a outros controles em `zone`."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>webPart</code> is not contained in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls*> collection of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> control.  \n  \n \\- or -  \n  \n <code>zone</code> is not contained in the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones*> collection of the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> control.  \n  \n \\- or -  \n  \n The zone referenced by the <code>webPart</code> control's <xref:System.Web.UI.WebControls.WebParts.WebPart.Zone*> property is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, which means that <code>webPart</code> is not currently contained in a zone."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>webPart</code>or <code>zone</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>zoneIndex</code>é menor que zero."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  id: OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  nameWithType: WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart&quot;> </xref> eventos e invoca um manipulador para o evento, se houver."
  remarks: "O método OnAuthorizeWebPart é chamado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>método, quando um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle está sendo verificado para autorização a ser adicionado a uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> Quando o método OnAuthorizeWebPart é chamado, ele gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>evento, e se há um método de manipulador para o evento, ele invoca o manipulador.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>       O processo de autorização <xref:System.Web.UI.WebControls.WebParts.WebPart>controles é um recurso importante de Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPart> Cada <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controle de servidor que é adicionado a uma região, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle passa por um processo de autorização para determinar se o controle pode ser adicionado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPart> Por padrão, o conjunto de controles de Web Parts não fornece os critérios de filtragem para impedir que os controles sejam adicionados a uma zona. Mas o conjunto de controles fornecem os mecanismos necessários para os desenvolvedores criem seus próprios critérios de filtragem. Usando esses mecanismos, você pode criar cenários de filtragem personalizados. Por exemplo, você pode criar um filtro para que, se um usuário estiver em uma função de administrador, alguns controles seriam adicionados a uma zona quando a página é renderizada, e se o usuário estiver em uma função de usuário, esses controles não deve ser adicionados.       Os mecanismos para controles de filtragem durante o processo de autorização são o <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>propriedade em <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>e OnAuthorizeWebPart métodos e o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>evento no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>       Para criar um cenário de filtragem, há basicamente duas tarefas. Primeiro, você pode atribuir cadeias de caracteres para o <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>propriedade de cada <xref:System.Web.UI.WebControls.WebParts.WebPart>controle que você deseja filtrar.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> Esses valores de cadeia de caracteres poderão ser arbitrários, mas eles devem conter os critérios que você deseja filtrar. Por exemplo, se desejar um determinado controle a ser adicionado a uma região somente se um administrador o usuário está exibindo a página, você pode atribuir um valor de cadeia de caracteres de `admin` à propriedade. Em seguida, você poderia usar o recurso de funções do ASP.NET e adicionar todos os usuários do seu site para várias funções, como administrador, o Gerenciador e o usuário. Quando uma página está carregando, seu código filtragem seria Verifique qual função de um usuário está em, compará-lo com o valor do filtro de autorização em um controle que está sendo verificado e se (por exemplo) o usuário está em uma função de administrador e você tiver definido o controle <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>valor `admin`, o controle pode ser adicionado.</xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>       A segunda etapa na criação de um cenário de filtragem é escrever um código para verificar a <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A>valores das propriedades <xref:System.Web.UI.WebControls.WebParts.WebPart>controla e determinar se cada controle é autorizado antes de ser adicionado a sua região.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> Há duas opções para onde colocar esse código de filtragem. A primeira opção é a opção preferencial para desenvolvedores de página. Você pode criar um método para tratar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>eventos diretamente no código de script de servidor de página da Web ou em um arquivo de separação de código.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> Associar o método com o evento adicionando o `OnAuthorizeWebPart` de atributo na marca de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle na página, conforme mostrado no código de marcação de exemplo a seguir.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      ```   <asp:webpartmanager id=&quot;manager1&quot; runat=&quot;server&quot;       OnAuthorizeWebPart=&quot;manager1_AuthorizeWebPart&quot; />   ```Basta que o método personalizado é a verificação de cada <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar para os critérios de filtragem e, em seguida, com base nos resultados, atribuir um valor booleano para o <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A>propriedade o <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs>objeto para indicar se o <xref:System.Web.UI.WebControls.WebParts.WebPart>controle pode ser adicionado.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs> </xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A> </xref:System.Web.UI.WebControls.WebParts.WebPart> O código na seção de exemplo demonstra como fazer isso.       A segunda opção para onde colocar o seu código de filtragem é herde o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe e substituir um método para verificar os critérios de filtro.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Os dois métodos que você pode substituir para fazer isso são as <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName>método ou o método OnAuthorizeWebPart.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> Embora o método funcionaria, na maioria dos casos é preferível para substituir o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>método, porque ele oferece maior controle programático sobre o processo de autorização inteiro, enquanto o método de OnAuthorizeWebPart faz somente uma tarefa específica, que é gerar o evento e verificar se há um manipulador.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> Para obter um exemplo de código de um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager>classe que substitui o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>método, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName>sobrecarga do método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates how to set a custom event handler for the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event, so that the handler can provide custom filtering code for the OnAuthorizeWebPart method. This example would be a typical way for a page developer to provide a filtering scenario and authorization of <xref:System.Web.UI.WebControls.WebParts.WebPart> controls to be added to a page.  \n  \n In the Web page, notice that the `<asp:webpartmanager>` element has the `OnAuthorizeWebPart` attribute with the name of the event handler assigned to it. The method checks whether the controls on the page have their respective <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property values set to `admin` and, if so, returns `true`, which means that they will be authorized and added to the page.  \n  \n> [!NOTE]\n>  Note that controls that do not have any value assigned to the <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> property are added as well, because they are assumed not to be part of a filtering scenario. This would be a common approach in a filtering scenario: some controls would be filtered, and others would not be, because they are presumed to be available for all users.  \n  \n [!code-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/visualbasic/fb74240d-1119-4128-abbc-_1.aspx)]\n [!code-cs[WebParts_WebPartManager_AuthorizeWebPart#1](~/add/codesnippet/csharp/fb74240d-1119-4128-abbc-_1.aspx)]  \n  \n Because setting up users in roles is beyond the scope of this topic, this code example does not check user roles in the filtering. However, the scenario of filtering controls according to user roles is likely to be one of the most common uses of this filtering feature. If you have roles on your site, and you want to check user roles in this method to filter controls, the method would resemble the following code block (versus the simpler approach in the preceding code example, which does not use roles).  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub WebPartManager1_AuthorizeWebPart(ByVal sender _  \n  As Object, ByVal e As WebPartAuthorizationEventArgs)  \n  \n  If String.IsNullOrEmpty(e.AuthorizationFilter) Then  \n    If Roles.IsUserInRole(Page.User.Identity.Name, _  \n      e.AuthorizationFilter) Then  \n  \n      e.IsAuthorized = True  \n    Else  \n      e.IsAuthorized = False  \n    End If  \n  End If  \n  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void mgr1_AuthorizeWebPart(object sender,   \n  WebPartAuthorizationEventArgs e)  \n{  \n  if (!String.IsNullOrEmpty(e.AuthorizationFilter))  \n  {  \n    if(Roles.IsUserInRole(Page.User.Identity.Name, e.authorizationFilter))  \n      e.IsAuthorized = true;  \n    else  \n      e.IsAuthorized = false;  \n  }  \n}  \n```"
  syntax:
    content: protected virtual void OnAuthorizeWebPart (System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs&quot;> </xref> que contém dados do evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)
  id: OnConnectionsActivated(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnConnectionsActivated(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivated(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated&quot;> </xref> evento para indicar que uma página e seus controles são carregados e ativação de conexões na página para iniciar o compartilhamento de dados."
  remarks: "O método OnConnectionsActivated gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>evento depois que uma página concluir o processo de carregamento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> O método fornece uma maneira de adicionar um manipulador para o evento.       Os desenvolvedores de páginas podem adicionar um manipulador personalizado para o evento adicionando um `OnConnectionsActivated` de atributo para o `<asp:webpartmanager>` elemento em uma página e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnConnectionsActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)
  id: OnConnectionsActivating(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnConnectionsActivating(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivating(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating&quot;> </xref> evento para indicar que uma página e seus controles tenham sido carregados e possível iniciar o processo de ativação de conexões."
  remarks: "O método OnConnectionsActivating gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>evento, que fornece aos desenvolvedores um mecanismo para personalizar programaticamente o processo de ativação de conexões.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>       Os desenvolvedores de páginas podem adicionar um manipulador personalizado para o evento adicionando um `OnConnectionsActivating` de atributo para o `<asp:webpartmanager>` elemento em uma página e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnConnectionsActivating (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  id: OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged&quot;> </xref> evento para indicar que o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle concluiu o processo de alternar de um modo de exibição para outro em uma página da Web."
  remarks: "O método OnDisplayModeChanged em sua base de formulário simplesmente gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>"
  syntax:
    content: protected virtual void OnDisplayModeChanged (System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs&quot;> </xref> que contém dados do evento associados a um modo de exibição alterada."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  id: OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging&quot;> </xref> evento para indicar que o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle está no processo de alternar de um modo de exibição para outro em uma página da Web."
  remarks: "O método OnDisplayModeChanging em sua base de formulário simplesmente gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>"
  syntax:
    content: protected virtual void OnDisplayModeChanging (System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs
      description: "Um <xref:System.EventArgs>que contém dados do evento associados a um modo de exibição de alteração.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: WebPartManager.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.Control.Init&quot;> </xref> evento, que é o primeiro evento no <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> ciclo de vida do controle."
  remarks: "O método OnInit chama o método base, o que gera o <xref:System.Web.UI.Control.Init>evento para o controle e, em seguida, realiza várias etapas preparatórias, como garantir que existe apenas uma instância das <xref:System.Web.UI.WebControls.WebParts.WebPartManager>em uma página e carregar os dados de personalização.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.Control.Init>"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Há outra <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle na página."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)
  id: OnPreRender(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnPreRender(EventArgs)
  nameWithType: WebPartManager.OnPreRender(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.Control.PreRender&quot;> </xref> evento que ocorre imediatamente antes um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle é renderizado em uma página da Web."
  remarks: "O método OnPreRender chama o método base, o que gera o <xref:System.Web.UI.Control.PreRender>controla o evento para o controle e, em seguida, registra vários scripts de cliente que são necessários nas páginas que contêm Web Parts.</xref:System.Web.UI.Control.PreRender>"
  syntax:
    content: protected override void OnPreRender (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um <xref:System.EventArgs>que contém os dados de evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnSelectedWebPartChanged(WebPartEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged&quot;> </xref> evento que ocorre após um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle ou tiver sido selecionado recentemente ou limpou sua seleção."
  remarks: "O método OnSelectedWebPartChanged gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>evento, que normalmente é um ponto no tempo em que um desenvolvedor talvez queira alterar a aparência da interface do usuário (IU).</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> Por exemplo, quando um novo <xref:System.Web.UI.WebControls.WebParts.WebPart>controle está selecionado, o controle de Web Parts defina alterações a renderização do controle selecionado recentemente.</xref:System.Web.UI.WebControls.WebParts.WebPart> Após a seleção do controle é desmarcada, a renderização é retornada ao normal.       Depois que um usuário seleciona um determinado <xref:System.Web.UI.WebControls.WebParts.WebPart>controle de edição, o método OnSelectedWebPartChanged é chamado.</xref:System.Web.UI.WebControls.WebParts.WebPart> Quando o usuário termina o controle de edição e fechá-lo, com o resultado que a seleção do controle está desmarcada, o método OnSelectedWebPartChanged é chamado novamente."
  syntax:
    content: protected virtual void OnSelectedWebPartChanged (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  id: OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnSelectedWebPartChanging(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging&quot;> </xref> evento que ocorre durante o processo de alteração que <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle está selecionado no momento."
  remarks: "O método OnSelectedWebPartChanging gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>evento que ocorre durante o processo de alteração que <xref:System.Web.UI.WebControls.WebParts.WebPart>controle está selecionado no momento.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle usa esse método e o evento associado, para fornecer uma oportunidade de cancelar um processo no qual o controle selecionado está sendo alterado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Por exemplo, o método é chamado dentro de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>método e também dentro a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>método para fornecer uma maneira de cancelar o processo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> Se um usuário clica o verbo de cancelamento em um controle que está sendo editado, o controle não está selecionado e as alterações de edição não serão salvas, porque o método OnSelectedWebPartChanging torna possível cancelar as alterações de edição.      > [!NOTE] > Da mesma forma, o método é chamado durante os métodos que começam e terminam o processo de conectar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle a outro controle, para habilitar o cancelamento desse processo.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Os desenvolvedores de página podem criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>evento adicionando o `OnSelectedWebPartChanging` de atributo para o `<asp:webpartmanager>` elemento na marcação da página declarativa e atribuindo ao atributo de nome de um método personalizado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>"
  syntax:
    content: protected virtual void OnSelectedWebPartChanging (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: WebPartManager.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Eleva a base <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> evento e remove o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> instância de uma página da Web."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Dados de evento associados com a remoção do controle."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartAdded(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartAdded(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded&quot;> </xref> evento que ocorre após um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle foi adicionado a uma página."
  remarks: "O método OnWebPartAdded é chamado durante o processo de adicionar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle (ou outro controle de servidor que é adicionado a um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona) para uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       Os desenvolvedores de página podem criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>evento adicionando o `OnWebPartAdded` de atributo para o `asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>"
  syntax:
    content: protected virtual void OnWebPartAdded (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  id: OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartAdding(WebPartAddingEventArgs)
  nameWithType: WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding&quot;> </xref> evento que ocorre durante o processo de adicionar um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle (ou um controle de servidor ou usuário) para um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona."
  remarks: "O método OnWebPartAdding gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>evento para indicar que um controle está sendo adicionado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> O método também fornece a opção de cancelar o processo de adição. Se o controle é adicionado com êxito, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>evento segue.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento associado, adicionando o `OnWebPartAdding` de atributo para o `<asp:webpartmanager>` elemento em uma página da Web e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnWebPartAdding (System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartClosed(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartClosed(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed&quot;> </xref> evento para sinalizar que um controle foi removido de uma página."
  remarks: "O método OnWebPartClosed gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>evento para indicar que um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle (ou outro controle de servidor ou usuário) foi fechado com êxito em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>       Para fechar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle significa para removê-lo de uma página para que ele não é processado, e também para colocá-lo em um especial manter o objeto chamado de catálogo de página.</xref:System.Web.UI.WebControls.WebParts.WebPart> Um catálogo de página, que corresponde ao <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>controlar, mantém referências para fechado <xref:System.Web.UI.WebControls.WebParts.WebPart>controles para cada página.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> Se um <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>controle é declarado em uma página dentro de um <xref:System.Web.UI.WebControls.WebParts.CatalogZone>zona, os usuários podem alternar a página em modo de exibição de catálogo e adicionar novamente para a página de todos os controles que foram fechados anteriormente.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>       O método OnWebPartClosed fornece uma oportunidade para os desenvolvedores a criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> Os desenvolvedores de páginas podem adicionar um manipulador personalizado para o evento adicionando um `OnWebPartClosed` de atributo para o `<asp:webpartmanager>` elemento em uma página e, em seguida, atribuir um nome de método personalizado para o atributo. É uma tarefa útil, que um desenvolvedor pode executar esse método exibir um espaço reservado no lugar do controle fechado, completa com uma dica de ferramenta que informa os usuários como adicionar o controle de volta para a página."
  syntax:
    content: protected virtual void OnWebPartClosed (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  id: OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartClosing(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing&quot;> </xref> evento que ocorre durante o processo de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor que está sendo removido de uma página."
  remarks: "O método OnWebPartClosing gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>evento para indicar que um controle está sendo fechado ou removido de uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> O método também fornece a opção de cancelar o processo de fechamento. Se o controle for removido com êxito da página, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>evento segue.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento associado, adicionando o `OnWebPartClosinging` de atributo para o `<asp:webpartmanager>` elemento em uma página da Web e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnWebPartClosing (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartDeleted(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleted(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted&quot;> </xref> evento que ocorre após um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle foi permanentemente excluído de uma página."
  remarks: "O método OnWebPartDeleted é chamado durante o processo de exclusão de um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle (ou outro controle de servidor que é adicionado a um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona) de uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       Os desenvolvedores de página podem criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>evento adicionando o `OnWebPartDeleted` de atributo para o `asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>"
  syntax:
    content: protected virtual void OnWebPartDeleted (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  id: OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartDeleting(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting&quot;> </xref> evento, que indica que um dinâmico <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle (ou servidor ou controle de usuário que está contido em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona) está sendo excluído."
  remarks: "Somente dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>controles podem ser excluídos, e quando um controle é excluído, a instância do controle é permanentemente removida de uma página e não pode ser restaurada.</xref:System.Web.UI.WebControls.WebParts.WebPart> Dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>controles são aqueles que são adicionados por meio de programação ou de um catálogo de Web Parts, em vez de controles estáticos que são declarados na marcação de uma página da Web.</xref:System.Web.UI.WebControls.WebParts.WebPart>       O método OnWebPartDeleting gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>evento para indicar que um controle está sendo excluído permanentemente da sua região.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> O método também fornece a oportunidade de cancelar o processo de exclusão. Se o controle é excluído com êxito da página, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>evento segue.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento associado, adicionando o `OnWebPartDeleting` de atributo para o `<asp:webpartmanager>` elemento em uma página da Web e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnWebPartDeleting (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  id: OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartMoved(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartMoved(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(WebPartEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved&quot;> </xref> evento que ocorre após um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle foi movido para um local diferente em uma página."
  remarks: "O método OnWebPartMoved gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>evento no final do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>método, o que garante que o processo de mover um controle seja concluído antes de qualquer código no evento execuções de manipulador.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>é gerado quando um controle é movido dentro de sua zona atual, ou em outra zona, e não importa se a movimentação é feita programaticamente ou por um usuário arrastando o controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       Os desenvolvedores de página podem criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>evento adicionando o `OnWebPartMoved` de atributo para o `asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>"
  syntax:
    content: protected virtual void OnWebPartMoved (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  id: OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartMoving(WebPartMovingEventArgs)
  nameWithType: WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving&quot;> </xref> evento, que indica que um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor ou usuário em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona está sendo movido."
  remarks: "O método OnWebPartMoving gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>evento que ocorre quando um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor está sendo movido dentro da zona ou para outra zona.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> O método também fornece a oportunidade de cancelar o processo de movimentação. Se a migração é concluída com êxito, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>evento segue.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento associado, adicionando o `OnWebPartMoving` de atributo para o `<asp:webpartmanager>` elemento em uma página da Web e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnWebPartMoving (System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  id: OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsConnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected&quot;> </xref> evento que ocorre depois que uma conexão é estabelecida entre <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles."
  remarks: "O método OnWebPartsConnected dispara o evento correspondente no final do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método, que garante que as etapas necessárias para conectar dois controles sejam concluídas antes de executar qualquer código no manipulador de eventos.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       O método fornece controle programático sobre o processo de criação de conexões e o evento associado é um ponto conveniente atualizar a interface do usuário (UI) ou notificar o usuário que uma conexão foi estabelecida.       Os desenvolvedores de página podem criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>evento adicionando o `OnWebPartsConnected` de atributo para o `asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>"
  syntax:
    content: protected virtual void OnWebPartsConnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  id: OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting&quot;> </xref> evento que ocorre durante o processo de estabelecer uma conexão entre dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controles de servidor ou usuário contidos em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona."
  remarks: "O método OnWebPartsConnecting gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>evento que ocorre quando dois controles tentam estabelecer uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> O método fornece a oportunidade de cancelar a tentativa de conexão. Se a conexão for bem-sucedida, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>evento segue.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento associado, adicionando o `OnWebPartsConnecting` de atributo para o `<asp:webpartmanager>` elemento em uma página da Web e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnWebPartsConnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  id: OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected&quot;> </xref> evento que ocorre após uma conexão entre <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles terminou."
  remarks: "O método OnWebPartsDisconnected dispara o evento correspondente no final do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>método, que executa o processo de encerramento de uma conexão entre dois controles.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>       O método fornece controle programático sobre o processo de encerrar uma conexão, para que os desenvolvedores podem informar o usuário, fazer alterações para a interface do usuário (UI) ou fazer outras alterações no aplicativo.       Os desenvolvedores de página podem criar um manipulador personalizado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>evento adicionando o `OnWebPartsDisconnected` de atributo para o `asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>"
  syntax:
    content: protected virtual void OnWebPartsDisconnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  id: OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Gera o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting&quot;> </xref> evento, que indica que dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controles de servidor ou usuário em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona estão no processo de encerramento de uma conexão."
  remarks: "O método OnWebPartsDisconnecting gera o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>evento que ocorre quando dois controles estão terminando uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> O método fornece a oportunidade de cancelar o processo de desconexão. Se a conexão for removido com êxito, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>evento segue.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento associado, adicionando o `OnWebPartsDisconnecting` de atributo para o `<asp:webpartmanager>` elemento em uma página da Web e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: protected virtual void OnWebPartsDisconnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  id: Personalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Personalization
  nameWithType: WebPartManager.Personalization
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência a um objeto que contém dados de personalização de uma página da Web."
  remarks: "A propriedade de personalização fornece uma maneira de acessar o <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization>objeto que está associado uma página por meio de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> Usando essa propriedade, você pode acessar os vários membros do objeto de personalização. Por exemplo, você pode usar o <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A>método para alternar o escopo de personalização da página de compartilhado para o escopo do usuário, ou vice-versa.</xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> Você também pode descobrir o escopo atual de personalização da página, se a personalização ainda está habilitada na página de provedor que está sendo usado para os dados de personalização e muito mais.       Observe que os dados referenciados pela propriedade de personalização são apenas os dados de personalização de nível de página que são controlados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Os dados de personalização de controle específicos, como os valores das propriedades personalizáveis em <xref:System.Web.UI.WebControls.WebParts.WebPart>controla, não é parte da propriedade de personalização.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Para obter mais informações sobre a personalização de Web Parts, consulte [Web Parts Personalization Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the Personalization property programmatically.  \n  \n The following Web page allows a user to enter edit mode to edit certain aspects of the <xref:System.Web.UI.WebControls.Calendar> control. The **Toggle Scope** button switches the page to user or shared personalization scope. The **Edit Mode** and **Browse Mode** buttons each switch the page into the appropriate display mode. Notice that in the `<script>` tag section of the file, two of the methods that handle events use the Personalization property to access useful members of the underlying object. Specifically, these methods use the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> method and the <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> property on the object accessed through the Personalization property.  \n  \n [!code-cs[WebParts_WebPartManager_Personalization#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_970_1.aspx)]\n [!code-vb[WebParts_WebPartManager_Personalization#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_970_1.aspx)]  \n  \n For the code example to run, you also must enable a user or users to personalize pages in shared scope. Add an entry to the Web.config file, within the `<system.web>` section, that looks like the following markup.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow  \n        users=\"[Replace the text and brackets with a user name or   \n           group.]\"  \n        roles=\"admin\"   \n        verbs=\"enterSharedScope\"  />  \n    </authorization>  \n  </personalization>  \n</webParts>   \n```  \n  \n After you load the page in a browser, click the **Toggle Scope** button, and notice that the page now says the scope is shared. Click **Edit Mode** to change the display mode, click the verbs menu on the visible control, and select **Edit** from the menu. Notice that the user interface (UI) for both editing controls appears. Now click **Browse Mode** to return to normal browsing. If the page says it is in shared scope, click **Toggle Scope** again to ensure the page is in user scope. Next, follow the same steps to edit the control again, but notice that now in the editing UI, the <xref:System.Web.UI.WebControls.WebParts.BehaviorEditorPart> control does not appear. That is because this control only works when the page is in shared personalization scope."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartPersonalization
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartPersonalization&quot;> </xref> que contém os dados de personalização."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript
  id: RegisterClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: RegisterClientScript()
  nameWithType: WebPartManager.RegisterClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Permite que o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle de emissão de script do lado do cliente que é usado para vários recursos de personalização, como arrastar <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles em uma página da Web."
  syntax:
    content: protected virtual void RegisterClientScript ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: WebPartManager.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Substituído para impedir que o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle de conteúdo de renderização."
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "Um <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;> </xref> que recebe o conteúdo do controle para gravar na página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: WebPartManager.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Salva dados de estado de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> para os dados possam ser restaurados em futuras solicitação para a página da Web que contém o controle de controle."
  remarks: "O SaveControlState método salva dados de estado para as propriedades que devem ser persistentes entre postbacks de página, mesmo quando o <xref:System.Web.UI.Control.EnableViewState%2A>estiver definida como `false`.</xref:System.Web.UI.Control.EnableViewState%2A>"
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "Um <xref:System.Object>conter o controle do salvo dados de estado.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SaveCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Salva dados de estado de personalização personalizado mantidos pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controlar, para que esses dados podem ser recarregados sempre que a página é recarregada."
  remarks: "O método SaveCustomPersonalizationState é essencial no processo de personalização, porque ela permite que as configurações personalizadas do usuário a ser armazenado para sessões futuras do navegador e visita a uma página. O método salva os dados de estado de personalização personalizado, que incluem itens como o seguinte: dinâmico <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controles de servidor que foram adicionados a uma página ou excluídos de uma página; controles que foram movidos em uma página; e conexões dinâmicas que foram criadas ou excluídas.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Você não pode chamar este método diretamente no seu código. No entanto, você pode chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>método, que chama esse método para salvar os dados de personalização.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>"
  syntax:
    content: protected virtual void SaveCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> que contém os dados de estado a ser carregado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  id: SelectedWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SelectedWebPart
  nameWithType: WebPartManager.SelectedWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência a um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor que está selecionada atualmente para edição ou para criar uma conexão com outro controle."
  remarks: "A propriedade de SelectedWebPart retorna uma referência a um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor que está selecionada atualmente para edição ou para criar uma conexão com outro controle.</xref:System.Web.UI.WebControls.WebParts.WebPart>       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle fornece vários métodos úteis e eventos para lidar com o processo de selecionar um controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>evento ocorre depois que um controle está selecionado, mas antes que as alterações sejam feitas.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> Para executar algumas ações no controle depois que ele é selecionado, substituir o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> Por exemplo, você talvez queira alterar a aparência de um controle que está selecionada, mas não foi alterado, para enfatizar visualmente o controle está selecionado.       O <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>evento ocorre depois que o controle selecionado foi alterado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> Para executar algumas ações no controle após ele ter sido alterado, substituir o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle está selecionado para edição ou cria uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  id: SelectedWebPartChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SelectedWebPartChanged
  nameWithType: WebPartManager.SelectedWebPartChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre após a seleção de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle foi alterado e movido para outro controle em uma página da Web."
  remarks: "Esse evento pode ser usado em conjunto com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A>método para alterar a interface do usuário (UI) de um controle selecionado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> Por exemplo, se o usuário alterna a página para o modo de design (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>) e, em seguida, seleciona um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle com a intenção de arrastando-a para uma nova posição, é comum para alterar a renderização do controle selecionado, por exemplo, alterar a cor de sua borda ou plano de fundo enquanto ele está selecionado.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>      > [!NOTE] > Para obter mais informações sobre o consumo de eventos, consulte [como: consumir eventos em um aplicativo Web Forms](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  id: SelectedWebPartChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SelectedWebPartChanging
  nameWithType: WebPartManager.SelectedWebPartChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de alteração que <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor no momento está selecionado em uma página da Web."
  remarks: "Esse evento pode ser usado em conjunto com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> Os desenvolvedores de páginas podem criar um manipulador de eventos no seu código, adicionando o `OnSelectedWebPartChanging` de atributo para o `<asp:webpartmanager>` elemento em uma página e definir o valor do atributo como o nome de um método personalizado que manipulará o evento.       Esse evento é gerado durante o processo de início ou término de uma conexão entre os controles e quando a abertura e fechamento de uma edição de um controle. Para obter detalhes, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A>       Normalmente, quando o evento SelectedWebPartChanging é gerado como resultado direto de uma ação do usuário que o controle selecionado é alterado, o evento pode ser cancelado. No entanto, há um cenário no qual o evento não pode ser cancelado. Se um <xref:System.Web.UI.WebControls.WebParts.WebPartZone>controle é excluído, o <xref:System.Web.UI.WebControls.WebParts.WebPart>contém os controles devem todas ser fechados, caso contrário, seriam órfão.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> Nesse caso o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar fecha o <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, não o usuário e ele devem determinar qual controle está selecionado no momento e quando alterar a seleção sem qualquer possibilidade de interrupção, para que ele possa concluir o processo de limpeza de todos os controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Portanto, por design o SelectedWebPartChanging o método não pode ser cancelado neste cenário. Para um evento relacionado que pode ser cancelado, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty
  id: SetPersonalizationDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SetPersonalizationDirty()
  nameWithType: WebPartManager.SetPersonalizationDirty()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Define um sinalizador que indica que dados de personalização personalizado para o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle foi alterado."
  remarks: "O método SetPersonalizationDirty define um sinalizador que, por fim, faz com que os componentes de personalização no controle de Web Parts definido para salvar os dados de personalização atualizado. Para obter mais informações sobre os cenários que podem causar alterações nos dados de personalização controlados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>       O método SetPersonalizationDirty não pode ser chamado diretamente no seu código e não pode ser substituído, pois ela é usada internamente pelo controle Web Parts definido como parte do recurso de personalização de Web Parts."
  syntax:
    content: protected void SetPersonalizationDirty ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  id: SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SetSelectedWebPart(WebPart)
  nameWithType: WebPartManager.SetSelectedWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(WebPart)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Conjuntos de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>valor de propriedade é igual ao selecionado no momento <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*>"
  remarks: "O método SetSelectedWebPart é chamado durante os processos que podem começam ou terminar a edição do controle especificado pelo `webPart` parâmetro e aqueles que podem começar ou terminar uma conexão que inclui `webPart`.       No início dos processos de conexão e de edição, `webPart` é o controle que foi selecionado para ser editado ou para inserir uma conexão.       No final dos processos de conexão e de edição, `null` é passado para o método SetSelectedWebPart, que resulta em um controle selecionado no momento não seja selecionado."
  syntax:
    content: protected void SetSelectedWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);
    parameters:
    - id: webPart
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor que foi selecionado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  id: SkinID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SkinID
  nameWithType: WebPartManager.SkinID
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define uma cadeia de caracteres vazia (&quot;&quot;) para que nenhuma capa pode ser aplicada para o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "A propriedade SkinID substitui o herdadas <xref:System.Web.UI.Control.SkinID%2A?displayProperty=fullName>propriedade para evitar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle, que é um controle invisível, do uso de capas.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.Control.SkinID%2A?displayProperty=fullName> A implementação da propriedade impede que uma capa que está sendo atribuído ao sempre retornar uma cadeia de caracteres vazia do `get` acessador e sempre gerar uma exceção se não houver uma tentativa de definir um valor na `set` acessador."
  syntax:
    content: public override string SkinID { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres vazia que impede o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle tenha uma capa atribuída a ele."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Foi feita uma tentativa para definir o valor da propriedade."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  id: StaticConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: StaticConnections
  nameWithType: WebPartManager.StaticConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência à coleção de todos os <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objetos em uma página da Web que são definidos como conexões estáticas."
  remarks: "A propriedade StaticConnections é usada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle para controlar e gerenciar todas as conexões estáticas em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Uma conexão estático, em contraste com uma conexão dinâmica, não precisa ser adicionada a uma página toda vez que a página é renderizada.       A coleção referenciada por esta propriedade contém todas as conexões estáticas que existem na página, se eles são criados por meio de programação ou especificados com um `<asp:webpartconnection>` elemento na marcação da página."
  example:
  - "The following code example demonstrates programmatic use of the StaticConnections property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls and a custom interface.  \n  \n-   A Web page that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an `<asp:webpartmanager>` element.  \n  \n-   An explanation of how the example works in a browser.  \n  \n The following code contains only the Web page portion of the example. You will also need to obtain the first two parts of the example--the custom user control and the source code for the custom controls and interface--from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. That topic also explains your options for compiling the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n The third part of the code example is the Web page. The declarative markup for the page contains `Register` directives for both the user control and the custom controls. There is an `<asp:webpartmanager>` element, an `<asp:webpartzone>` element to contain the custom controls, and an `<asp:connectionszone>` element. Notice that in the `Page_Load` method, the code checks to see whether a connection already exists and, if not, defines a provider, a consumer, and their respective connection points, and then adds a new connection to the set of static connections referenced by the StaticConnections property.  \n  \n [!code-cs[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_98_1.aspx)]\n [!code-vb[WebParts_WebPartManager_StaticConnections#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_98_1.aspx)]  \n  \n After you have loaded the Web page in a browser, click the **Display Mode** drop-down list control and select **Connect** to switch the page to connect mode. Connect mode uses the `<asp:connectionszone>` element to enable you to create connections between controls. In connect mode, click the downward arrow in the title bar of the **ZIP Code** control to activate its verbs menu, and then click **Connect**. After the connection user interface (UI) appears, notice that a connection has already been created by the code contained in the `Page_Load` method. If you return to this page in a later browser session, this static connection will already be established and will not need to be recreated each time the page loads."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnectionCollection&quot;> </xref> que contém todas as conexões estáticas na página."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  id: SupportedDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: SupportedDisplayModes
  nameWithType: WebPartManager.SupportedDisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma coleção somente leitura de todos os modos de exibição que estão disponíveis em uma página da Web específica."
  remarks: "A propriedade SupportedDisplayModes contém somente os modos de exibição que estão realmente disponíveis em uma página, considerando os tipos de controles de zona presentes na página.      > [!NOTE] > Modos de exibição podem ser desabilitados, e quando um modo de exibição estiver desabilitado, ele não é adicionado à coleção SupportedDisplayModes, mesmo quando o tipo de zona que suporte esse modo de exibição correspondente está presente na página.       Sempre há suporte para o modo de procura e modo de design. Os modos de exibição que podem variar são a edição do catálogo e modos de conexão. Cada um desses modos de exibição está associado um tipo específico de <xref:System.Web.UI.WebControls.WebParts.ToolZone>controle.</xref:System.Web.UI.WebControls.WebParts.ToolZone> É a presença de zona especialmente digitada em uma página da Web que faz com que um modo de exibição específico a ser adicionado à coleção referenciada pela propriedade SupportedDisplayModes. Por exemplo, se uma página da Web contém uma <xref:System.Web.UI.WebControls.WebParts.EditorZone>zona mas não um <xref:System.Web.UI.WebControls.WebParts.CatalogZone>zona, em seguida, o modo de exibição de edição é um dos modos com suporte nessa página, mas não há suporte para o modo de exibição de catálogo.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> </xref:System.Web.UI.WebControls.WebParts.EditorZone>      > [!NOTE] > SupportedDisplayModes a propriedade difere do <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>propriedade, o que faz referência a uma coleção que contém todos os modos de exibição que estão disponíveis para o atual <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar, mesmo aqueles que não têm suporte em uma determinada página.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>"
  example:
  - "The following code example shows the programmatic use of the SupportedDisplayModes property. The code uses this property to populate the list with only the display modes available in the current Web page.  \n  \n There are three supported display modes on this page: browse, design, and edit. The first two are always available, and the edit mode is available in this code example because the page contains an <xref:System.Web.UI.WebControls.WebParts.EditorZone> control. The catalog and connect display modes are not shown, because their corresponding zones are not on this page.  \n  \n [!code-vb[WebParts_WebPartManager_SupportedDisplayModes#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_388_1.aspx)]\n [!code-cs[WebParts_WebPartManager_SupportedDisplayModes#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_388_1.aspx)]  \n  \n After you load the page in a browser, you can use the drop-down list control to switch the page from browse mode to design mode, and then to edit mode. In edit mode, you can click the drop-down verbs menu in the header of one of the server controls, and select **Edit** to edit the control."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&quot;> </xref> que contém o conjunto de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDisplayMode&quot;> </xref> objetos disponíveis em uma página da Web específica."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  id: System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  isEii: true
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se os dados de estado de personalização personalizado gerenciado pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle foi alterado em uma página da Web."
  remarks: "A propriedade IPersonalizable.IsDirty fornece uma maneira para que os chamadores determinar se a personalização estado dados que são gerenciados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle foi alterado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Quando os usuários personalizem detalhes no nível de página, por exemplo, alterando o layout da página, criando ou excluindo conexões e adicionando ou excluindo controles, os dados de personalização gerenciados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar alterações.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> Este é um método de passagem que retorna o valor protegido chamadores <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A>propriedade, que não pode ser acessada diretamente por chamadores.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A>      > [!NOTE] > IPersonalizable.IsDirty a propriedade não indica se os valores de propriedade personalizáveis ou propriedades individuais que afetam a aparência do indivíduo <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, foram alterados.</xref:System.Web.UI.WebControls.WebParts.WebPart> Personalização de nível de controle é controlada para cada controle individualmente. A propriedade IPersonalizable.IsDirty indica somente se os dados de personalização que é no nível de página e é gerenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle foi alterado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       A lista a seguir descreve alguns casos comuns de personalização que faria com que a propriedade IPersonalizable.IsDirty retornar um valor de `true`, indicando que o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle possui alguns dados de personalização alterada:-fechamento estático <xref:System.Web.UI.WebControls.WebParts.WebPart>controle (ou controle de servidor ou usuário) em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>      -Restauração estático fechado <xref:System.Web.UI.WebControls.WebParts.WebPart>controle de um catálogo de página para uma página.</xref:System.Web.UI.WebControls.WebParts.WebPart>      -Mover qualquer controle dentro de sua região ou em outra zona.      -Adicionar um controle de um catálogo de <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controles de servidor, ou adicionando um controle programaticamente.</xref:System.Web.UI.WebControls.WebParts.WebPart>      -Criar uma conexão entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controla, programaticamente ou usando a interface de usuário da conexão (IU).</xref:System.Web.UI.WebControls.WebParts.WebPart>      -Exclusão de uma conexão entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controla, seja programaticamente ou usando a interface do usuário da conexão.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Para acessar esse valor de propriedade, você deve converter o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>instância de controle para o <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>interface; você pode, em seguida, ler o <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A>o valor da propriedade.</xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> </xref:System.Web.UI.WebControls.WebParts.IPersonalizable> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates a simple usage of the IPersonalizable.IsDirty property, to indicate some common page personalization instances that cause a <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control's personalization data to change.  \n  \n The code example has four parts:  \n  \n-   A user control that allows you to change display modes on a page that contains Web Parts controls.  \n  \n-   A source file that contains the code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can be connected, and an interface.  \n  \n-   A Web page that hosts all the controls.  \n  \n-   An explanation of how the code example works.  \n  \n The first part of the code example is the user control for changing display modes. You can obtain the source code for the user control from the Example section of the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class overview. For information about display modes and how the user control works, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n The second part of the example is the source file with the custom controls and the interface. Notice that the `IZipCode` interface exposes one method, and that this method as implemented in the custom `ZipCodeWebPart` control serves as a callback method to enable `ZipCodeWebPart` to act as a provider in a connection scenario. The other control, `WeatherWebPart`, acts as the consumer control in a connection; it can consume the particular interface provided by `ZipCodeWebPart`. In a real application, `WeatherWebPart` could consume a personalized ZIP Code value from the provider, and then provide graphical weather information to users.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation; therefore, notice that the `Register` directive for this component at the top of the Web page contains only `TagPrefix` and `Namespace` attributes, without an `Assembly` attribute. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartManager_IsDirty#2](~/add/codesnippet/csharp/c24ecc1a-95a5-4007-8876-_1.cs)]\n [!code-vb[WebParts_WebPartManager_IsDirty#2](~/add/codesnippet/visualbasic/c24ecc1a-95a5-4007-8876-_1.vb)]  \n  \n The third part of the code example is the Web page. Notice that it contains two <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zones, with the first one containing the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. There is also a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone, which contains a standard <xref:System.Web.UI.WebControls.Calendar> control that users can add to the page. The `<asp:connectionszone>` element provides a connection UI for users to create connections between controls. In the `Page_PreRender` method, notice that it checks to see whether the personalization data has changed and, if so, updates the text of `Label1`.  \n  \n [!code-cs[WebParts_WebPartManager_IsDirty#1](~/add/codesnippet/csharp/c24ecc1a-95a5-4007-8876-_2.aspx)]\n [!code-vb[WebParts_WebPartManager_IsDirty#1](~/add/codesnippet/visualbasic/c24ecc1a-95a5-4007-8876-_2.aspx)]  \n  \n After you load the page in a browser, try to create some of the scenarios listed in the Remarks section of this topic that will change the personalization data. As you make various changes, when a change involves one of the personalization scenarios tracked by the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, the text of the `Label1` control is displayed to indicate that personalization data has changed. For example, you can:  \n  \n-   Create a connection between controls by clicking the **Connect WebPart Controls** button.  \n  \n-   Use the **Display Mode** drop-down list control to switch the page to catalog mode, and add the **My Calendar** control to the second <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone.  \n  \n-   Change the page back to browse mode, click on the verbs menu (shown with an arrow symbol in the title bar) for the **My Calendar** control, and select **Close** to close it and add it to the page catalog.  \n  \n-   Return the page to catalog mode, and add the **My Calendar** control back to the page.  \n  \n-   Use the **Display Mode** control to switch the page to design mode, and rearrange the layout of the controls by dragging one or more of them to another zone, or to a different position in the same zone."
  syntax:
    content: bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { get; }
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se os dados de estado de personalização foi alterado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  isEii: true
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retorna salvo anteriormente dados de estado de personalização personalizado que precisam ser carregada para o <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "Esse método é uma implementação do <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=fullName>método, que fornece uma maneira para o controle de Web Parts definido diretamente protegida <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=fullName>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=fullName> Quando este método é chamado, ele armazena os dados personalizados personalizados que são gerenciados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle e que foi salvo previamente no repositório de dados permanente para uso posteriormente no processo de inicialização.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      > [!NOTE] > Na maioria dos casos, código de página e o controle do desenvolvedor não precisa chamar esse método, porque ela é usada principalmente pelo controle Web Parts definido como seu mecanismo para recuperar dados de personalização."
  syntax:
    content: void IPersonalizable.Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> que contém os dados de estado a ser carregado."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  id: System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  isEii: true
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Salva os dados de estado de personalização personalizado que são gerenciados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle."
  remarks: "O método IPersonalizable.Save é uma implementação do <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=fullName>método, que fornece uma maneira para o controle de Web Parts definido diretamente protegida <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=fullName>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=fullName> Quando este método é chamado, ele salva personalizados todos os dados que são gerenciados pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle para o repositório de dados permanente configurado para um aplicativo Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>      > [!NOTE] > Na maioria dos casos, código de página e o controle do desenvolvedor não precisa chamar esse método, porque ela é usada principalmente pelo controle Web Parts definido como seu mecanismo para salvar os dados de personalização."
  syntax:
    content: void IPersonalizable.Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);
    parameters:
    - id: state
      type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.PersonalizationDictionary&quot;> </xref> que contém os dados de estado a ser salvo."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: WebPartManager.TrackViewState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Aplica-se os dados de estado de personalização para a <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle e chama o método base para habilitar o controle de alterações nos dados de estado de exibição para o controle."
  remarks: "As alterações nos dados de estado de exibição são armazenadas em um <xref:System.Web.UI.StateBag>de objeto e podem ser acessados por meio do controle <xref:System.Web.UI.Control.ViewState%2A>propriedade.</xref:System.Web.UI.Control.ViewState%2A> </xref:System.Web.UI.StateBag>"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  id: Visible
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Visible
  nameWithType: WebPartManager.Visible
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que permite que os controles filho fique visível."
  remarks: "O <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle substitui a base de <xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName>propriedade sempre retorna um valor de `true` para a propriedade Visible.</xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Embora o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle em si não estiver visível, a propriedade Visible deve ser definido como `true` para que todos os seus controles filhos são visíveis por padrão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Se você tentar definir o valor da propriedade Visible, ele sempre gera um erro porque o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle substituiu o comportamento da propriedade base e impede a atribuição de qualquer valor para a propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Essa propriedade não é vinculável em designers visuais, mas é vinculável em tempo de execução. Para obter mais informações, consulte <xref:System.ComponentModel.BindableAttribute>.</xref:System.ComponentModel.BindableAttribute>"
  syntax:
    content: public override bool Visible { get; set; }
    return:
      type: System.Boolean
      description: "Um valor booliano que indica se um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle e seus controles filhos são visíveis. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>em todos os casos."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Visible*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Foi feita uma tentativa para atribuir um valor à propriedade."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  id: WebPartAdded
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartAdded
  nameWithType: WebPartManager.WebPartAdded
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre após um dinâmico <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor foi adicionado a um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona, para indicar que o controle foi adicionado com êxito."
  remarks: "O evento WebPartAdded é útil para indicar que um controle dinâmico (um controle adicionado por meio de programação, em vez de ter sido declarado na marcação da página) foi adicionado com êxito a uma zona. Em conjunto com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>método, o evento fornece aos desenvolvedores uma maneira de atualizar a interface do usuário (UI) ou caso contrário, notifique os usuários que um controle foi adicionado com êxito.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  id: WebPartAdding
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartAdding
  nameWithType: WebPartManager.WebPartAdding
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de adição de um dinâmico <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor para um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona."
  remarks: "O evento WebPartAdding é gerado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A>método depois que o processo de adicionar um controle a uma zona foi iniciado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> Esse evento fornece uma oportunidade de cancelar o processo antes de ser concluída. Se o processo de adição for bem-sucedida, esse evento é seguido de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>       Os desenvolvedores de páginas podem fornecer manipuladores personalizados para o evento adicionando o `OnWebPartAdding` de atributo para o `<asp:webpartmanager>` elemento em uma página e atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  id: WebPartClosed
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartClosed
  nameWithType: WebPartManager.WebPartClosed
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre quando um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle (ou controle de servidor ou usuário) é removido de uma página."
  remarks: "O evento WebPartClosed indica que um controle tem foi fechado com êxito, por um usuário ou programaticamente. Para fechar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle significa para removê-lo de uma página para que ele não é processado, e também para colocá-lo em um especial manter o objeto chamado de catálogo de página.</xref:System.Web.UI.WebControls.WebParts.WebPart> Um catálogo de página, que corresponde ao <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>controlar, mantém referências para fechado <xref:System.Web.UI.WebControls.WebParts.WebPart>controles para cada página.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> Se um <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>controle é declarado em uma página dentro de um <xref:System.Web.UI.WebControls.WebParts.CatalogZone>zona, os usuários podem alternar uma página em modo de exibição de catálogo e adicionar novamente a uma página de todos os controles que foram fechados anteriormente.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> </xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>       O evento WebPartClosed está associado com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A>método, que gera o evento tanto fornece um manipulador para o proprietário.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A>       Os desenvolvedores de páginas podem adicionar um manipulador personalizado para o evento adicionando um `OnWebPartClosed` de atributo para o `<asp:webpartmanager>` elemento em uma página e, em seguida, atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  id: WebPartClosing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartClosing
  nameWithType: WebPartManager.WebPartClosing
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de remover um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle (ou controle de servidor ou usuário) de uma página."
  remarks: "O evento WebPartClosing é gerado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A>método quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle está fechando um controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> Se a remoção do controle for bem-sucedida, esse evento é seguido de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>       Os desenvolvedores de páginas podem fornecer um manipulador personalizado para o evento adicionando o `OnWebPartClosed` de atributo para o `asp:webpartmanager>` elemento em uma página e atribuir um nome de método personalizado para o atributo.       Normalmente, quando o evento WebPartClosing é gerado como resultado direto de fechamento de um usuário um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, o evento pode ser cancelado.</xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, há um cenário no qual o evento não pode ser cancelado. Se um <xref:System.Web.UI.WebControls.WebParts.WebPartZone>controle é excluído, o <xref:System.Web.UI.WebControls.WebParts.WebPart>contém os controles devem todas ser fechados, caso contrário, seriam órfão.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> Nesse caso o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar fecha o <xref:System.Web.UI.WebControls.WebParts.WebPart>controla, não ao usuário.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> E quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle está no processo de chamada de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>método para fechar cada controle e o evento WebPartClosing é gerado, o evento não pode ser cancelado (por padrão) porque o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>precisa concluir a tarefa de limpeza de controles de todos os da região.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  id: WebPartDeleted
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartDeleted
  nameWithType: WebPartManager.WebPartDeleted
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre após um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor foi excluído de uma <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona."
  remarks: "O evento WebPartDeleted é útil para indicar que um controle dinâmico (um controle adicionado por meio de programação, em vez de ter sido declarado na marcação da página) foi excluído com êxito de uma zona. Em conjunto com o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A>método, o evento fornece aos desenvolvedores uma maneira de atualizar a interface do usuário (UI) ou caso contrário, notifique os usuários de um controle foi excluído com êxito.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  id: WebPartDeleting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartDeleting
  nameWithType: WebPartManager.WebPartDeleting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de exclusão permanente uma instância de um dinâmico <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona."
  remarks: "O evento WebPartDeleting é gerado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A>método durante o processo de exclusão de um controle dinâmico (uma que tenha sido adicionado programaticamente ou por um usuário por meio da interface de usuário de Web Parts).</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> O evento fornece uma oportunidade de cancelar o processo antes de ser concluído. Se o processo de exclusão for concluído com êxito, esse evento é seguido de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>       Os desenvolvedores de páginas podem fornecer manipuladores personalizados para o evento adicionando o `OnWebPartDeleting` de atributo para o `<asp:webpartmanager>` elemento em uma página e atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  id: WebPartMoved
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartMoved
  nameWithType: WebPartManager.WebPartMoved
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre após um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controle de servidor foi movido para um local diferente em uma página da Web."
  remarks: "Esse evento se aplica a estático (declarado na marcação de uma página da Web) e controles dinâmicos. Ele está associado a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> Como o evento é gerado depois que uma mudança for concluída, os desenvolvedores podem incluir um manipulador de eventos para fornecer notificação de alguns usuários, uma validação ou algumas outras ações. Para adicionar um manipulador de eventos, você pode adicionar uma `OnWebPartMoved` de atributo para o `<asp:webpartmanager>` elemento em uma página e atribua o nome de um método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  id: WebPartMoving
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartMoving
  nameWithType: WebPartManager.WebPartMoving
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de mover um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor que está contido em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona."
  remarks: "O evento WebPartMoving é gerado quando um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor está sendo movido dentro de sua própria zona, ou em outra zona.</xref:System.Web.UI.WebControls.WebParts.WebPart> Isso pode ocorrer quando um usuário arrasta um controle, e quando há uma movimentação através de programação.       O evento WebPartMoving é gerado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A>método e fornece uma oportunidade de cancelar o processo de movimentação antes de ser concluída.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> Se a mudança é concluída e o controle colocado em uma nova posição, esse evento é seguido de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>       Os desenvolvedores de página podem criar um manipulador personalizado para o evento adicionando o `OnWebPartMoving` de atributo para o `<asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  id: WebParts
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebParts
  nameWithType: WebPartManager.WebParts
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência para todos os <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles controlados pelo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartManager&quot;> </xref> controle em uma página da Web."
  remarks: "A propriedade de Web Parts é usada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle para controlar todas as <xref:System.Web.UI.WebControls.WebParts.WebPart>controles que estão contidos <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonas na página.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Embora a coleção é somente leitura, você pode acessar individuais <xref:System.Web.UI.WebControls.WebParts.WebPart>controla programaticamente por meio de coleção e faça alterações neles.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > É possível ter um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle colocado em uma página fora de um <xref:System.Web.UI.WebControls.WebParts.WebPartZone>zona, o que resulta em um controle não está sendo rastreado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar ou referenciados em sua coleção de Web Parts.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> </xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, há poucos motivos para usar um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle fora de uma zona, porque ele perde sua funcionalidade de Web Parts e atua como um controle de servidor normal.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Qualquer tipo de controle que pode ser colocado em uma zona, se um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, um controle padrão do ASP.NET, um controle de usuário ou um controle de servidor personalizado, pode ser tratado como um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle em tempo de execução.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Quando um controle que não é um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle é colocado em um <xref:System.Web.UI.WebControls.WebParts.WebPartZone>zona, em tempo de execução ASP.NET envolve o controle com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>do objeto, para que o controle pode se comportar como um verdadeiro <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> </xref:System.Web.UI.WebControls.WebParts.WebPart> Portanto, usando a propriedade de Web Parts, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle pode controlar qualquer tipo de controle de servidor, independentemente se deriva da <xref:System.Web.UI.WebControls.WebParts.WebPart>classe</xref:System.Web.UI.WebControls.WebParts.WebPart> de</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates how to use the WebParts property programmatically to access individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that in the declarative markup for the Web page, within the `<asp:webpartzone>` element there are two standard ASP.NET server controls. Although these do not inherit from the <xref:System.Web.UI.WebControls.WebParts.WebPart> class, because they are in a zone they will be wrapped with a <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> object at run time, and thus will be included in the collection referenced by the WebParts property. You could also add custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, user controls, or custom server controls in this zone, and they would be handled the same way.  \n  \n [!code-vb[WebParts_WebPartManager_WebParts#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_992_1.aspx)]\n [!code-cs[WebParts_WebPartManager_WebParts#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_992_1.aspx)]  \n  \n Note that for the code example to work, you must add a setting in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n After you load the page into a browser, if you click the **WebPart Count** button, the code uses the WebParts property to return the count of controls in the collection. If you click the **Hide Calendar Title** button, the code changes the calendar so that it renders with only a border and not a title."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartCollection WebParts { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartCollection&quot;> </xref> que contém referências a um conjunto de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  id: WebPartsConnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsConnected
  nameWithType: WebPartManager.WebPartsConnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre depois que uma conexão específica tiver sido estabelecida entre <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles (ou controles de servidor ou usuário)."
  remarks: "O evento WebPartsConnected está associado a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> O evento é útil, porque depois que você sabe que uma conexão é concluída, você talvez queira informar o usuário de fato, ou até mesmo alterar a interface do usuário (IU) da página. Por exemplo, talvez você queira exibir algumas imagens gráficas que sugere uma conexão bem-sucedida entre dois controles ou exibir uma mensagem breve e altere o modo de exibição de página de volta para o modo de procura.       Os desenvolvedores de páginas podem associar um manipulador de eventos personalizados com esse evento, adicionando o `OnWebPartsConnected` de atributo para o `<asp:webpartmanager>` elemento na página e atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  id: WebPartsConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsConnecting
  nameWithType: WebPartManager.WebPartsConnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de criação de uma conexão entre <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles (ou servidor ou usuário controles colocados em um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zona)."
  remarks: "O evento WebPartsConnecting é gerado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A>método, e ele sinaliza que iniciou o processo de conexão (por exemplo, um usuário tem um controle selecionado e clicou em um verbo de conexão), mas ainda não foi concluída.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> O evento fornece uma oportunidade de cancelar uma conexão antes de ser concluída. Se a conexão for concluída com êxito, esse evento é seguido de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>       Os desenvolvedores de páginas podem adicionar um manipulador personalizado para o evento adicionando o `OnWebPartsConnecting` de atributo para o `<asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  id: WebPartsDisconnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsDisconnected
  nameWithType: WebPartManager.WebPartsDisconnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre após uma conexão entre dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controles de servidor foi encerrada."
  remarks: "O evento WebPartsDisconnected está associado a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A>método.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> O evento é útil, porque depois que você sabe que uma conexão é encerrada, você talvez queira informar ao usuário, executar algumas ações de limpeza no código ou fazer outras alterações na interface do usuário (IU).       Os desenvolvedores de páginas podem associar um manipulador de eventos personalizados com esse evento, adicionando o `OnWebPartsDisConnected` de atributo para o `<asp:webpartmanager>` elemento na página e atribuir um nome de método personalizado para o atributo."
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  id: WebPartsDisconnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: WebPartsDisconnecting
  nameWithType: WebPartManager.WebPartsDisconnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ocorre durante o processo de encerrar a conexão entre conectado anteriormente <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou controles de servidor."
  remarks: "O evento WebPartsDisconnecting é gerado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A>método e sinaliza o fato de que um usuário clicou um verbo de desconexão, ou o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>método contrário tiver sido chamado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> O evento fornece uma oportunidade de cancelar o processo de encerrar uma conexão antes de ser concluída. Se a conexão for concluída com êxito, esse evento é seguido de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>       Os desenvolvedores de páginas podem adicionar um manipulador personalizado para o evento adicionando o `OnWebPartsDisconnecting` de atributo para o `<asp:webpartmanager>` elemento e atribuir um nome de método personalizado para o atributo.       Normalmente, quando o evento WebPartsDisconnecting é gerado como resultado direto de uma ação do usuário que encerra uma conexão, o evento pode ser cancelado. No entanto, há várias situações em que o evento não pode ser cancelado. O primeiro cenário é, se um <xref:System.Web.UI.WebControls.WebParts.WebPartZone>controle é excluído, o <xref:System.Web.UI.WebControls.WebParts.WebPart>contém os controles devem todas ser fechados, caso contrário, seriam órfão.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZone> Nesse caso o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar fecha o <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, não o usuário e ele também devem ser capazes encerrar as conexões de qualquer controle conectado sem qualquer possibilidade de interrupção, para que ele possa concluir o processo de limpeza e fechar todos os controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Portanto, por design o WebPartsDisconnecting o método não pode ser cancelado neste cenário. Para um evento relacionado que pode ser cancelado, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>evento.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>       O segundo cenário no qual não é possível cancelar o evento WebPartsDisconnecting é quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>método é chamado (isso chamado durante cada solicitação para uma página, por exemplo), e há algum tipo de conflito em conexões existentes em uma página.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> Por exemplo, talvez um usuário se conecta a controle de x a y de controle, mas um usuário compartilhado se conecta a controle de x para controlar z e ainda controle x não é permitido para formar várias conexões. Nesse caso, configurações de usuário individual para a conexão têm precedência e o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle resolverá o conflito chamando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>método e terminando a conexão entre x e z para determinado usuário.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Como a desconexão é essencial para resolver o conflito, por design o WebPartsDisconnecting evento não pode ser cancelado neste cenário.       O terceiro cenário no qual o método WebPartsDisconnecting não pode ser cancelado é quando um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou controle de servidor que está conectado no momento é excluído ou fechado.</xref:System.Web.UI.WebControls.WebParts.WebPart> Como o controle é definitivamente a ser removido da página, é necessário remover sua conexão lógico. Portanto, quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle invoca o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>método, que por sua vez, gera o evento WebPartsDisconnecting, não há nenhuma possibilidade de cancelar o evento por design.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  syntax:
    content: public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting;
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  id: Zones
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  langs:
  - csharp
  name: Zones
  nameWithType: WebPartManager.Zones
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma referência a uma coleção de todos os <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zonas em uma página da Web."
  remarks: "A propriedade de zonas é usada pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle para rastrear o <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonas em uma página da Web.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPartManager> Observe que a propriedade não faz referência a todos os tipos de zonas; ela faz referência somente as zonas que derivam de <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>classe, incluindo <xref:System.Web.UI.WebControls.WebParts.WebPartZone>zonas.</xref:System.Web.UI.WebControls.WebParts.WebPartZone> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Embora a coleção referenciada pela propriedade é somente leitura, você pode usá-lo para acessar os objetos individuais na coleção e trabalhar com eles por meio de programação."
  example:
  - "The following code example demonstrates how to use the Zones property programmatically to access individual <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone controls. Notice that in the declarative markup for the Web page, there are two `<asp:webpartzone>` elements, each containing a server control. In the `<script>` section of the page, the code uses the Zones property to access the individual zones, listing all the zone IDs and then changing the background color on the second zone.  \n  \n [!code-cs[WebParts_WebPartManager_Zones#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_860_1.aspx)]\n [!code-vb[WebParts_WebPartManager_Zones#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_860_1.aspx)]  \n  \n Note that for the code example to work, you must add a setting in the Web.config file to enable exporting Web Parts description files. Ensure that you have a Web.config file in the same directory as the Web page for this code example. Within the `<system.web>` section, make sure there is a `<webParts>` element with an `enableExport` attribute set to `true`, as in the following markup.  \n  \n `<webParts enableExport=\"true\">`  \n  \n `...`  \n  \n `</webParts>`  \n  \n After you load the page into a browser, if you click the **List Zone IDs** button, the code uses the Zones property to list the IDs of all zones in the collection. If you click the **Change Zone BackColor** button, the code changes the background color of the second zone."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartZoneCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneCollection&quot;> </xref> que faz referência a um conjunto de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartZoneBase&quot;> </xref> zonas."
  overload: System.Web.UI.WebControls.WebParts.WebPartManager.Zones*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.Control
  isExternal: false
  name: System.Web.UI.Control
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.EndOfStreamException
  isExternal: true
  name: System.IO.EndOfStreamException
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartManager()
  nameWithType: WebPartManager.WebPartManager()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartManager()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ActivateConnections()
  nameWithType: WebPartManager.ActivateConnections()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AddWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(WebPart,WebPartZoneBase,Int32)
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartZoneBase
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartZoneBase
  nameWithType: WebPartZoneBase
  fullName: System.Web.UI.WebControls.WebParts.WebPartZoneBase
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AuthorizeWebPart
  nameWithType: WebPartManager.AuthorizeWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAuthorizationEventHandler
  nameWithType: WebPartAuthorizationEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AvailableTransformers
  nameWithType: WebPartManager.AvailableTransformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers
- uid: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: TransformerTypeCollection
  nameWithType: TransformerTypeCollection
  fullName: System.Web.UI.WebControls.WebParts.TransformerTypeCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartConnecting(WebPart)
  nameWithType: WebPartManager.BeginWebPartConnecting(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartEditing(WebPart)
  nameWithType: WebPartManager.BeginWebPartEditing(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BrowseDisplayMode
  nameWithType: WebPartManager.BrowseDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayMode
  nameWithType: WebPartDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CatalogDisplayMode
  nameWithType: WebPartManager.CatalogDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CheckRenderClientScript()
  nameWithType: WebPartManager.CheckRenderClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseProviderWarning
  nameWithType: WebPartManager.CloseProviderWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseWebPart(WebPart)
  nameWithType: WebPartManager.CloseWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectDisplayMode
  nameWithType: WebPartManager.ConnectDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Connections
  nameWithType: WebPartManager.Connections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Connections
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionCollection
  nameWithType: WebPartConnectionCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectionsActivated
  nameWithType: WebPartManager.ConnectionsActivated
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectionsActivating
  nameWithType: WebPartManager.ConnectionsActivating
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint)
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  nameWithType: WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Controls
  nameWithType: WebPartManager.Controls
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Controls
- uid: System.Web.UI.ControlCollection
  parent: System.Web.UI
  isExternal: false
  name: ControlCollection
  nameWithType: ControlCollection
  fullName: System.Web.UI.ControlCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CopyWebPart(WebPart)
  nameWithType: WebPartManager.CopyWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateAvailableTransformers()
  nameWithType: WebPartManager.CreateAvailableTransformers()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateControlCollection()
  nameWithType: WebPartManager.CreateControlCollection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDisplayModes()
  nameWithType: WebPartManager.CreateDisplayModes()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes()
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeCollection
  nameWithType: WebPartDisplayModeCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicConnectionID()
  nameWithType: WebPartManager.CreateDynamicConnectionID()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicWebPartID(Type)
  nameWithType: WebPartManager.CreateDynamicWebPartID(Type)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateErrorWebPart(String,String,String,String,String)
  nameWithType: WebPartManager.CreateErrorWebPart(String,String,String,String,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(String,String,String,String,String)
- uid: System.Web.UI.WebControls.WebParts.ErrorWebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ErrorWebPart
  nameWithType: ErrorWebPart
  fullName: System.Web.UI.WebControls.WebParts.ErrorWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreatePersonalization()
  nameWithType: WebPartManager.CreatePersonalization()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization()
- uid: System.Web.UI.WebControls.WebParts.WebPartPersonalization
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartPersonalization
  nameWithType: WebPartPersonalization
  fullName: System.Web.UI.WebControls.WebParts.WebPartPersonalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateWebPart(Control)
  nameWithType: WebPartManager.CreateWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(Control)
- uid: System.Web.UI.WebControls.WebParts.GenericWebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: GenericWebPart
  nameWithType: GenericWebPart
  fullName: System.Web.UI.WebControls.WebParts.GenericWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWarning
  nameWithType: WebPartManager.DeleteWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWebPart(WebPart)
  nameWithType: WebPartManager.DeleteWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DesignDisplayMode
  nameWithType: WebPartManager.DesignDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebPart(WebPart)
  nameWithType: WebPartManager.DisconnectWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebParts(WebPartConnection)
  nameWithType: WebPartManager.DisconnectWebParts(WebPartConnection)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(WebPartConnection)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayMode
  nameWithType: WebPartManager.DisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModeChanged
  nameWithType: WebPartManager.DisplayModeChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeEventHandler
  nameWithType: WebPartDisplayModeEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModeChanging
  nameWithType: WebPartManager.DisplayModeChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeCancelEventHandler
  nameWithType: WebPartDisplayModeCancelEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModes
  nameWithType: WebPartManager.DisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DynamicConnections
  nameWithType: WebPartManager.DynamicConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EditDisplayMode
  nameWithType: WebPartManager.EditDisplayMode
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableClientScript
  nameWithType: WebPartManager.EnableClientScript
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableTheming
  nameWithType: WebPartManager.EnableTheming
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartConnecting()
  nameWithType: WebPartManager.EndWebPartConnecting()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartEditing()
  nameWithType: WebPartManager.EndWebPartEditing()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportSensitiveDataWarning
  nameWithType: WebPartManager.ExportSensitiveDataWarning
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportWebPart(WebPart,XmlWriter)
  nameWithType: WebPartManager.ExportWebPart(WebPart,XmlWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(WebPart,XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Focus
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Focus()
  nameWithType: WebPartManager.Focus()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Focus()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetConsumerConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetConsumerConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(WebPart)
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPointCollection
  nameWithType: ConsumerConnectionPointCollection
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetCurrentWebPartManager(Page)
  nameWithType: WebPartManager.GetCurrentWebPartManager(Page)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(Page)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartManager
  nameWithType: WebPartManager
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager
- uid: System.Web.UI.Page
  parent: System.Web.UI
  isExternal: false
  name: Page
  nameWithType: Page
  fullName: System.Web.UI.Page
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetDisplayTitle(WebPart)
  nameWithType: WebPartManager.GetDisplayTitle(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetExportUrl(WebPart)
  nameWithType: WebPartManager.GetExportUrl(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetGenericWebPart(Control)
  nameWithType: WebPartManager.GetGenericWebPart(Control)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(Control)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetProviderConnectionPoints(WebPart)
  nameWithType: WebPartManager.GetProviderConnectionPoints(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(WebPart)
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPointCollection
  nameWithType: ProviderConnectionPointCollection
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ImportWebPart(XmlReader,String)
  nameWithType: WebPartManager.ImportWebPart(XmlReader,String)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(XmlReader,String)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Internals
  nameWithType: WebPartManager.Internals
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Internals
- uid: System.Web.UI.WebControls.WebParts.WebPartManagerInternals
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartManagerInternals
  nameWithType: WebPartManagerInternals
  fullName: System.Web.UI.WebControls.WebParts.WebPartManagerInternals
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsAuthorized(WebPart)
  nameWithType: WebPartManager.IsAuthorized(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsAuthorized(Type,String,String,Boolean)
  nameWithType: WebPartManager.IsAuthorized(Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(Type,String,String,Boolean)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsCustomPersonalizationStateDirty
  nameWithType: WebPartManager.IsCustomPersonalizationStateDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: WebPartManager.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: PersonalizationDictionary
  nameWithType: PersonalizationDictionary
  fullName: System.Web.UI.WebControls.WebParts.PersonalizationDictionary
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MediumPermissionSet
  nameWithType: WebPartManager.MediumPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MinimalPermissionSet
  nameWithType: WebPartManager.MinimalPermissionSet
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MoveWebPart(WebPart,WebPartZoneBase,Int32)
  nameWithType: WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(WebPart,WebPartZoneBase,Int32)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  nameWithType: WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(WebPartAuthorizationEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAuthorizationEventArgs
  nameWithType: WebPartAuthorizationEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivated(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivated(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivating(EventArgs)
  nameWithType: WebPartManager.OnConnectionsActivating(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(WebPartDisplayModeEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeEventArgs
  nameWithType: WebPartDisplayModeEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  nameWithType: WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(WebPartDisplayModeCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDisplayModeCancelEventArgs
  nameWithType: WebPartDisplayModeCancelEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: WebPartManager.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnPreRender(EventArgs)
  nameWithType: WebPartManager.OnPreRender(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanged(WebPartEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartEventArgs
  nameWithType: WebPartEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanging(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(WebPartCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartCancelEventArgs
  nameWithType: WebPartCancelEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: WebPartManager.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdded(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartAdded(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdding(WebPartAddingEventArgs)
  nameWithType: WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(WebPartAddingEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAddingEventArgs
  nameWithType: WebPartAddingEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosed(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartClosed(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosing(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(WebPartCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleted(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleted(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleting(WebPartCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(WebPartCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoved(WebPartEventArgs)
  nameWithType: WebPartManager.OnWebPartMoved(WebPartEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(WebPartEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoving(WebPartMovingEventArgs)
  nameWithType: WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(WebPartMovingEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartMovingEventArgs
  nameWithType: WebPartMovingEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(WebPartConnectionsEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsEventArgs
  nameWithType: WebPartConnectionsEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(WebPartConnectionsCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsCancelEventArgs
  nameWithType: WebPartConnectionsCancelEventArgs
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(WebPartConnectionsEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  nameWithType: WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(WebPartConnectionsCancelEventArgs)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Personalization
  nameWithType: WebPartManager.Personalization
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: RegisterClientScript()
  nameWithType: WebPartManager.RegisterClientScript()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: WebPartManager.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveControlState()
  nameWithType: WebPartManager.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveCustomPersonalizationState(PersonalizationDictionary)
  nameWithType: WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPart
  nameWithType: WebPartManager.SelectedWebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPartChanged
  nameWithType: WebPartManager.SelectedWebPartChanged
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartEventHandler
  nameWithType: WebPartEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPartChanging
  nameWithType: WebPartManager.SelectedWebPartChanging
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartCancelEventHandler
  nameWithType: WebPartCancelEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetPersonalizationDirty()
  nameWithType: WebPartManager.SetPersonalizationDirty()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetSelectedWebPart(WebPart)
  nameWithType: WebPartManager.SetSelectedWebPart(WebPart)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(WebPart)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SkinID
  nameWithType: WebPartManager.SkinID
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: StaticConnections
  nameWithType: WebPartManager.StaticConnections
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SupportedDisplayModes
  nameWithType: WebPartManager.SupportedDisplayModes
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save(PersonalizationDictionary)
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: TrackViewState()
  nameWithType: WebPartManager.TrackViewState()
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState()
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Visible
  nameWithType: WebPartManager.Visible
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Visible
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartAdded
  nameWithType: WebPartManager.WebPartAdded
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartAdding
  nameWithType: WebPartManager.WebPartAdding
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding
- uid: System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartAddingEventHandler
  nameWithType: WebPartAddingEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartClosed
  nameWithType: WebPartManager.WebPartClosed
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartClosing
  nameWithType: WebPartManager.WebPartClosing
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartDeleted
  nameWithType: WebPartManager.WebPartDeleted
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartDeleting
  nameWithType: WebPartManager.WebPartDeleting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartMoved
  nameWithType: WebPartManager.WebPartMoved
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartMoving
  nameWithType: WebPartManager.WebPartMoving
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving
- uid: System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartMovingEventHandler
  nameWithType: WebPartMovingEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebParts
  nameWithType: WebPartManager.WebParts
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartCollection
  nameWithType: WebPartCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsConnected
  nameWithType: WebPartManager.WebPartsConnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsEventHandler
  nameWithType: WebPartConnectionsEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsConnecting
  nameWithType: WebPartManager.WebPartsConnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartConnectionsCancelEventHandler
  nameWithType: WebPartConnectionsCancelEventHandler
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsDisconnected
  nameWithType: WebPartManager.WebPartsDisconnected
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartsDisconnecting
  nameWithType: WebPartManager.WebPartsDisconnecting
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Zones
  nameWithType: WebPartManager.Zones
  fullName: System.Web.UI.WebControls.WebParts.WebPartManager.Zones
- uid: System.Web.UI.WebControls.WebParts.WebPartZoneCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartZoneCollection
  nameWithType: WebPartZoneCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartZoneCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebPartManager
  nameWithType: WebPartManager.WebPartManager
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ActivateConnections
  nameWithType: WebPartManager.ActivateConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AddWebPart
  nameWithType: WebPartManager.AddWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: AvailableTransformers
  nameWithType: WebPartManager.AvailableTransformers
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartConnecting
  nameWithType: WebPartManager.BeginWebPartConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: BeginWebPartEditing
  nameWithType: WebPartManager.BeginWebPartEditing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CanConnectWebParts
  nameWithType: WebPartManager.CanConnectWebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CheckRenderClientScript
  nameWithType: WebPartManager.CheckRenderClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseProviderWarning
  nameWithType: WebPartManager.CloseProviderWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CloseWebPart
  nameWithType: WebPartManager.CloseWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Connections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Connections
  nameWithType: WebPartManager.Connections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ConnectWebParts
  nameWithType: WebPartManager.ConnectWebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Controls*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Controls
  nameWithType: WebPartManager.Controls
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CopyWebPart
  nameWithType: WebPartManager.CopyWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateAvailableTransformers
  nameWithType: WebPartManager.CreateAvailableTransformers
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateControlCollection
  nameWithType: WebPartManager.CreateControlCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDisplayModes
  nameWithType: WebPartManager.CreateDisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicConnectionID
  nameWithType: WebPartManager.CreateDynamicConnectionID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateDynamicWebPartID
  nameWithType: WebPartManager.CreateDynamicWebPartID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateErrorWebPart
  nameWithType: WebPartManager.CreateErrorWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreatePersonalization
  nameWithType: WebPartManager.CreatePersonalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: CreateWebPart
  nameWithType: WebPartManager.CreateWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWarning
  nameWithType: WebPartManager.DeleteWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DeleteWebPart
  nameWithType: WebPartManager.DeleteWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebPart
  nameWithType: WebPartManager.DisconnectWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisconnectWebParts
  nameWithType: WebPartManager.DisconnectWebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayMode
  nameWithType: WebPartManager.DisplayMode
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DisplayModes
  nameWithType: WebPartManager.DisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: DynamicConnections
  nameWithType: WebPartManager.DynamicConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableClientScript
  nameWithType: WebPartManager.EnableClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EnableTheming
  nameWithType: WebPartManager.EnableTheming
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartConnecting
  nameWithType: WebPartManager.EndWebPartConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: EndWebPartEditing
  nameWithType: WebPartManager.EndWebPartEditing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportSensitiveDataWarning
  nameWithType: WebPartManager.ExportSensitiveDataWarning
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ExportWebPart
  nameWithType: WebPartManager.ExportWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Focus*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Focus
  nameWithType: WebPartManager.Focus
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetConsumerConnectionPoints
  nameWithType: WebPartManager.GetConsumerConnectionPoints
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetCurrentWebPartManager
  nameWithType: WebPartManager.GetCurrentWebPartManager
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetDisplayTitle
  nameWithType: WebPartManager.GetDisplayTitle
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetExportUrl
  nameWithType: WebPartManager.GetExportUrl
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetGenericWebPart
  nameWithType: WebPartManager.GetGenericWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: GetProviderConnectionPoints
  nameWithType: WebPartManager.GetProviderConnectionPoints
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: ImportWebPart
  nameWithType: WebPartManager.ImportWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Internals*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Internals
  nameWithType: WebPartManager.Internals
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsAuthorized
  nameWithType: WebPartManager.IsAuthorized
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: IsCustomPersonalizationStateDirty
  nameWithType: WebPartManager.IsCustomPersonalizationStateDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadControlState
  nameWithType: WebPartManager.LoadControlState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: LoadCustomPersonalizationState
  nameWithType: WebPartManager.LoadCustomPersonalizationState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MediumPermissionSet
  nameWithType: WebPartManager.MediumPermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MinimalPermissionSet
  nameWithType: WebPartManager.MinimalPermissionSet
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: MoveWebPart
  nameWithType: WebPartManager.MoveWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnAuthorizeWebPart
  nameWithType: WebPartManager.OnAuthorizeWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivated
  nameWithType: WebPartManager.OnConnectionsActivated
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnConnectionsActivating
  nameWithType: WebPartManager.OnConnectionsActivating
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanged
  nameWithType: WebPartManager.OnDisplayModeChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnDisplayModeChanging
  nameWithType: WebPartManager.OnDisplayModeChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnInit*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnInit
  nameWithType: WebPartManager.OnInit
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnPreRender
  nameWithType: WebPartManager.OnPreRender
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanged
  nameWithType: WebPartManager.OnSelectedWebPartChanged
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnSelectedWebPartChanging
  nameWithType: WebPartManager.OnSelectedWebPartChanging
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnUnload
  nameWithType: WebPartManager.OnUnload
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdded
  nameWithType: WebPartManager.OnWebPartAdded
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartAdding
  nameWithType: WebPartManager.OnWebPartAdding
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosed
  nameWithType: WebPartManager.OnWebPartClosed
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartClosing
  nameWithType: WebPartManager.OnWebPartClosing
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleted
  nameWithType: WebPartManager.OnWebPartDeleted
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartDeleting
  nameWithType: WebPartManager.OnWebPartDeleting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoved
  nameWithType: WebPartManager.OnWebPartMoved
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartMoving
  nameWithType: WebPartManager.OnWebPartMoving
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnected
  nameWithType: WebPartManager.OnWebPartsConnected
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsConnecting
  nameWithType: WebPartManager.OnWebPartsConnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnected
  nameWithType: WebPartManager.OnWebPartsDisconnected
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: OnWebPartsDisconnecting
  nameWithType: WebPartManager.OnWebPartsDisconnecting
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Personalization*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Personalization
  nameWithType: WebPartManager.Personalization
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: RegisterClientScript
  nameWithType: WebPartManager.RegisterClientScript
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Render*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Render
  nameWithType: WebPartManager.Render
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveControlState
  nameWithType: WebPartManager.SaveControlState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SaveCustomPersonalizationState
  nameWithType: WebPartManager.SaveCustomPersonalizationState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SelectedWebPart
  nameWithType: WebPartManager.SelectedWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetPersonalizationDirty
  nameWithType: WebPartManager.SetPersonalizationDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SetSelectedWebPart
  nameWithType: WebPartManager.SetSelectedWebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SkinID*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SkinID
  nameWithType: WebPartManager.SkinID
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: StaticConnections
  nameWithType: WebPartManager.StaticConnections
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: SupportedDisplayModes
  nameWithType: WebPartManager.SupportedDisplayModes
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Load
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Load
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.IPersonalizable.Save
  nameWithType: WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.Save
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: TrackViewState
  nameWithType: WebPartManager.TrackViewState
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Visible*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Visible
  nameWithType: WebPartManager.Visible
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.WebParts*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: WebParts
  nameWithType: WebPartManager.WebParts
- uid: System.Web.UI.WebControls.WebParts.WebPartManager.Zones*
  parent: System.Web.UI.WebControls.WebParts.WebPartManager
  isExternal: false
  name: Zones
  nameWithType: WebPartManager.Zones
