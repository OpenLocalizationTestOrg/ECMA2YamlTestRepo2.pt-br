### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Fornece propriedades e métodos para adicionar uma licença a um componente e gerenciar uma <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>. Essa classe não pode ser herdada."
  remarks: "A classe de LicenseManager fornece os seguintes `static` propriedades: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>e <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> A classe também fornece o seguinte `static` métodos: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>e <xref:System.ComponentModel.LicenseManager.Validate%2A>.</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       Quando você cria um componente que você deseja de licença, você deve fazer o seguinte: 1.  Especifique a <xref:System.ComponentModel.LicenseProvider>marcando o componente com <xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute> </xref:System.ComponentModel.LicenseProvider>      2.  Chamar <xref:System.ComponentModel.LicenseManager.Validate%2A>ou <xref:System.ComponentModel.LicenseManager.IsValid%2A>no construtor do componente.</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>gera um <xref:System.ComponentModel.LicenseException>quando ele tenta criar uma instância sem uma licença válida.</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>não lançará uma exceção.</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  Chamar <xref:System.ComponentModel.License.Dispose%2A>em qualquer licença que é concedida quando o componente é descartado ou finalizado.</xref:System.ComponentModel.License.Dispose%2A>       Para obter mais informações sobre licenciamento, consulte [como: controles e componentes de licença](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria uma instância do tipo especificado, dado um contexto no qual você pode usar a instância licenciada."
  remarks: "O <xref:System.ComponentModel.LicenseContext>você especificar como o `creationContext` parâmetro é usado como o <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>durante a vida útil desse <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> O método CreateWithContext bloqueia todos os outros threads <xref:System.AppDomain>modifiquem o <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, permitindo que CreateWithContext se comporta como uma operação atômica.</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo a ser criado.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "Um <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> que especifica quando você pode usar a instância licenciada."
    return:
      type: System.Object
      description: "Uma instância do tipo especificado."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria uma instância do tipo especificado com os argumentos especificados, recebe um contexto no qual você pode usar a instância licenciada."
  remarks: "O <xref:System.ComponentModel.LicenseContext>você especificar como o `creationContext` parâmetro é usado como o <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>durante a vida útil desse <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Esse método bloqueia todos os outros threads <xref:System.AppDomain>modifiquem o <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, permitindo <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>se comporta como uma operação atômica.</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo a ser criado.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "Um <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> que especifica quando você pode usar a instância licenciada."
    - id: args
      type: System.Object[]
      description: "Uma matriz do tipo <xref:System.Object>que representa os argumentos para o tipo.</xref:System.Object>"
    return:
      type: System.Object
      description: "Uma instância do tipo especificado com a matriz de argumentos fornecida."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém ou define o atual <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>, que especifica quando você pode usar o objeto licenciado."
  remarks: "Quando o usuário solicita um válido <xref:System.ComponentModel.License>, o usuário deve fornecer o contexto no qual o <xref:System.ComponentModel.License>é válido para o <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>método.</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> O <xref:System.ComponentModel.LicenseContext>retornados por essa propriedade deve ser passada para todos os <xref:System.ComponentModel.LicenseProvider>classes.</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "Um <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> que especifica quando você pode usar o objeto licenciado."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A propriedade CurrentContext está bloqueada e não pode ser alterada."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna se o tipo fornecido tem uma licença válida."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Para localizar um loop for de licença válida</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tipo em questão é licenciado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se é possível conceder uma licença válida para o tipo especificado."
  remarks: "O método IsValid retorna `true` quando o tipo não está licenciado ou é licenciado e a licença é válida.       Este método não lança um <xref:System.ComponentModel.LicenseException>quando ele não é possível conceder <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> válido</xref:System.ComponentModel.LicenseException> O <xref:System.ComponentModel.LicenseManager.Validate%2A>método lança exceções.</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo de objeto que solicita o <xref href=&quot;System.ComponentModel.License&quot;> </xref>.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se uma licença válida pode ser concedida; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se é possível conceder uma licença válida para a instância especificada do tipo. Esse método cria um válido <xref href=&quot;System.ComponentModel.License&quot;> </xref>."
  remarks: "O <xref:System.ComponentModel.LicenseManager.IsValid%2A>método retorna `true` quando o `type` parâmetro não está licenciado ou quando ele é licenciado e `license` parâmetro é válido.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Este método não lança um <xref:System.ComponentModel.LicenseException>quando ele não é possível conceder <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> válido</xref:System.ComponentModel.LicenseException> O <xref:System.ComponentModel.LicenseManager.Validate%2A>método lança exceções.</xref:System.ComponentModel.LicenseManager.Validate%2A>       Se o `license` parâmetro não é `null` após essa chamada, o objeto pedindo um <xref:System.ComponentModel.License>deve descartar a licença chamando o <xref:System.ComponentModel.License.Dispose%2A>método quando o objeto é descartado ou finalizado.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo de objeto que solicita a licença.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Um objeto do tipo especificado ou um tipo derivado do tipo especificado."
    - id: license
      type: System.ComponentModel.License
      description: "Um <xref href=&quot;System.ComponentModel.License&quot;> </xref> que é uma licença válida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não é possível conceder uma licença válida."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se uma opção válida <xref href=&quot;System.ComponentModel.License&quot;> </xref> pode ser concedido; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Impede que alterações sejam feitas no atual <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> do objeto especificado."
  remarks: "Use o <xref:System.ComponentModel.LicenseContext>para obter o <xref:System.ComponentModel.License>de um objeto.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Esse método bloqueia o <xref:System.ComponentModel.LicenseContext>, impedindo assim a <xref:System.ComponentModel.License>sejam recuperadas.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "O objeto cujo contexto atual que você deseja bloquear."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O contexto já está bloqueado."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Permite que as alterações a serem feitas nos atual <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> do objeto especificado."
  remarks: "Use o <xref:System.ComponentModel.LicenseContext>para obter o <xref:System.ComponentModel.License>de um objeto.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Esse método desbloqueia o <xref:System.ComponentModel.LicenseContext>, permitindo que o <xref:System.ComponentModel.License>a ser recuperado.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "O objeto cujo contexto atual que deseja desbloquear."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>representa um usuário diferente daquele especificado em uma chamada anterior para <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> que especifica quando você pode usar o objeto licenciado para <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  remarks: "Se essa propriedade não é possível localizar um <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>valor, ele retorna <xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "Uma da <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> valores, conforme especificado no <xref:System.ComponentModel.LicenseManager.CurrentContext*>propriedade.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se é possível conceder uma licença para o tipo especificado."
  remarks: "Este método lança um <xref:System.ComponentModel.LicenseException>quando válido <xref:System.ComponentModel.License>não pode ser concedida.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> O <xref:System.ComponentModel.LicenseManager.IsValid%2A>método gerará uma exceção.</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo de objeto que solicita a licença.</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Um <xref href=&quot;System.ComponentModel.License&quot;> </xref> não pode ser concedida."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se é possível conceder uma licença para a instância do tipo especificado."
  remarks: "Este método lança um <xref:System.ComponentModel.LicenseException>quando válido <xref:System.ComponentModel.License>não pode ser concedida.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> O <xref:System.ComponentModel.LicenseManager.IsValid%2A>método gerará uma exceção.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Todos os objetos pedindo um <xref:System.ComponentModel.License>deve descartar a licença chamando o <xref:System.ComponentModel.License.Dispose%2A>método quando o objeto é descartado ou finalizado.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo de objeto que solicita a licença.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Um <xref:System.Object>do tipo especificado ou um tipo derivado do tipo especificado.</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "O tipo é licenciado, mas um <xref href=&quot;System.ComponentModel.License&quot;> </xref> não pode ser concedida."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
