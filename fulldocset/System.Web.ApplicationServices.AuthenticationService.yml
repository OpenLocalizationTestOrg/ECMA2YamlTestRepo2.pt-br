### YamlMime:ManagedReference
items:
- uid: System.Web.ApplicationServices.AuthenticationService
  id: AuthenticationService
  children:
  - System.Web.ApplicationServices.AuthenticationService.#ctor
  - System.Web.ApplicationServices.AuthenticationService.Authenticating
  - System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  - System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  - System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  - System.Web.ApplicationServices.AuthenticationService.Logout
  - System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  langs:
  - csharp
  name: AuthenticationService
  nameWithType: AuthenticationService
  fullName: System.Web.ApplicationServices.AuthenticationService
  type: Class
  summary: "Permite acesso a autenticação de formulários do ASP.NET como um serviço Web."
  remarks: "O objeto AuthenticationService permite autenticar os usuários por meio de um [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] serviço. Você usa o serviço de autenticação WCF quando você deve autenticar os usuários por meio da associação ASP.NET de um aplicativo que está fora do aplicativo Web que armazena as credenciais do usuário. O aplicativo deve ser capaz de enviar e receber a mensagem no formato SOAP. Por meio da classe AuthenticationService, você pode entrar usuários, logoff de usuários, validar credenciais, verificar o status de autenticação, personalizar a autenticação e definir o cookie de autenticação.       A classe AuthenticationService contém quatro métodos que você deve acessar por meio de um serviço WCF: o <xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>, <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>, <xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>, e <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>métodos.</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A> </xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A> </xref:System.Web.ApplicationServices.AuthenticationService.Login%2A> </xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A> Para chamar esses métodos, você habilitar o serviço de autenticação em um servidor Web e, em seguida, conecte-se um aplicativo de cliente compatível com o WCF para o serviço Web. Para obter informações sobre como configurar o serviço de autenticação, consulte [como: ativar o serviço de autenticação WCF](~/add/includes/ajax-current-ext-md.md).       Para conectar usuários, você passa as credenciais de usuário para o <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>método.</xref:System.Web.ApplicationServices.AuthenticationService.Login%2A> Se as credenciais forem válidas, a classe AuthenticationService cria um cookie de autenticação. Se o cookie de autenticação não tiver expirado, você sabe que as credenciais do usuário foram autenticadas e você não precisa validar as credenciais novamente. (Sem cookies de autenticação não está disponível por meio da classe AuthenticationService.)       O AuthenticationService pode gerar eventos de dois: <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>e <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> O <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>evento ocorre quando as credenciais do usuário estão sendo validadas.</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> Criar um manipulador de eventos para o <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>evento para personalizar como as credenciais do usuário são validadas.</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> O <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>evento ocorre quando o cookie de autenticação está sendo definido depois que as credenciais do usuário foram validadas.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> Criar um manipulador de eventos para o <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>evento para personalizar o cookie de autenticação.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>       O <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>método verifica as credenciais do usuário para autenticação, mas não retorna um tíquete de autenticação.</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A> Use <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>quando um usuário tiver conectado anteriormente e você deve verificar se as credenciais ainda são válidas no início de uma nova sessão do aplicativo.</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>       Para obter um exemplo de como usar o serviço de autenticação do WCF de um aplicativo de console, consulte [passo a passo: usando serviços de aplicativos ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required)]

      [System.ServiceModel.ServiceBehavior(ConcurrencyMode=System.ServiceModel.ConcurrencyMode.Multiple, InstanceContextMode=System.ServiceModel.InstanceContextMode.Single, Namespace="http://asp.net/ApplicationServices/v200")]

      [System.ServiceModel.ServiceContract(Namespace="http://asp.net/ApplicationServices/v200")]

      public class AuthenticationService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor
  id: '#ctor'
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: AuthenticationService()
  nameWithType: AuthenticationService.AuthenticationService()
  fullName: System.Web.ApplicationServices.AuthenticationService.AuthenticationService()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.ApplicationServices.AuthenticationService&quot;> </xref> classe."
  syntax:
    content: public AuthenticationService ();
    parameters: []
  overload: System.Web.ApplicationServices.AuthenticationService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Authenticating
  id: Authenticating
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Authenticating
  nameWithType: AuthenticationService.Authenticating
  fullName: System.Web.ApplicationServices.AuthenticationService.Authenticating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Ocorre quando as credenciais do usuário estão sendo validadas."
  remarks: "O evento autenticando é gerado quando as credenciais do usuário estão sendo validadas. Crie um manipulador de eventos para o evento autenticando personalizar como as credenciais do usuário são validadas."
  example:
  - "The following example shows how to bind an event handler for the Authenticating event in the `Application_Start` method of the Global.asax file.  \n  \n [!code-cs[System.Web.Security.LoginService_MultipleCredentials#1](~/add/codesnippet/csharp/e-system.web.application_0_1.asax)]\n [!code-vb[System.Web.Security.LoginService_MultipleCredentials#1](~/add/codesnippet/visualbasic/e-system.web.application_0_1.asax)]  \n  \n The following example shows an event handler for the Authenticating event in the Global.asax file. The event handler reads two authentication values from the <xref:System.Web.ApplicationServices.AuthenticatingEventArgs.CustomCredential%2A> property and passes them together with the user name and password to a custom authentication class named `StudentAuthentication`.  \n  \n [!code-cs[System.Web.Security.LoginService_MultipleCredentials#2](~/add/codesnippet/csharp/e-system.web.application_0_2.asax)]\n [!code-vb[System.Web.Security.LoginService_MultipleCredentials#2](~/add/codesnippet/visualbasic/e-system.web.application_0_2.asax)]"
  syntax:
    content: public static event EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs> Authenticating;
    return:
      type: System.EventHandler{System.Web.ApplicationServices.AuthenticatingEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  id: CreatingCookie
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: CreatingCookie
  nameWithType: AuthenticationService.CreatingCookie
  fullName: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Ocorre quando o cookie de autenticação está sendo definido."
  remarks: "O evento CreatingCookie é gerado quando o cookie de autenticação está sendo definido depois que as credenciais do usuário foram validadas. Crie um manipulador de eventos para o evento CreatingCookie personalizar o cookie de autenticação."
  example:
  - "The following example shows how to bind an event handler to the CreatingCookie event in the `Application_Start` method of the Global.asax file.  \n  \n [!code-cs[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/add/codesnippet/csharp/e-system.web.application_1_1.asax)]\n [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.application_1_1.asax)]  \n  \n The following example shows an event handler for the CreatingCookie event in the Global.asax file. The event handler customizes the authentication cookie by adding the value in the <xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A> property to the <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> property. Store the <xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A> property in a cookie only if you know that the data in the property is not sensitive. Malicious users can access the values in the cookie.  \n  \n [!code-cs[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/add/codesnippet/csharp/e-system.web.application_1_2.asax)]\n [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/add/codesnippet/visualbasic/e-system.web.application_1_2.asax)]"
  syntax:
    content: public static event EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs> CreatingCookie;
    return:
      type: System.EventHandler{System.Web.ApplicationServices.CreatingCookieEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  id: IsLoggedIn
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: IsLoggedIn()
  nameWithType: AuthenticationService.IsLoggedIn()
  fullName: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Determina se o usuário atual está autenticado."
  remarks: "O método IsLoggedIn verifica se o usuário atual está autenticado, verificando o <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A>.property.</xref:System.Security.Principal.IIdentity.IsAuthenticated%2A>      > [!NOTE] > Não chame o método IsLoggedIn do código que está em execução no servidor Web. Chame o método IsLoggedIn apenas como parte de um serviço WCF."
  syntax:
    content: public bool IsLoggedIn ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o usuário foi autenticado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  id: Login(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Login(String,String,String,Boolean)
  nameWithType: AuthenticationService.Login(String,String,String,Boolean)
  fullName: System.Web.ApplicationServices.AuthenticationService.Login(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Verifica as credenciais de usuário e cria um tíquete de autenticação (cookie) se as credenciais são válidas."
  remarks: "O método de logon valida as credenciais de usuário por meio de um provedor de associação. Você pode usar o provedor de associação padrão ou especificar um provedor de associação personalizado em tempo de execução. O <xref:System.Web.ApplicationServices.AuthenticationService>classe passa `userName` e `password` para o provedor de associação <xref:System.Web.Security.MembershipProvider.ValidateUser%2A>método, mas não foi aprovado `customCredential`.</xref:System.Web.Security.MembershipProvider.ValidateUser%2A> </xref:System.Web.ApplicationServices.AuthenticationService> Se <xref:System.Web.Security.MembershipProvider.ValidateUser%2A>retorna `true`, <xref:System.Web.ApplicationServices.AuthenticationService>cria um tíquete de autenticação como um cookie.</xref:System.Web.ApplicationServices.AuthenticationService> </xref:System.Web.Security.MembershipProvider.ValidateUser%2A> Definir o `isPersistent` parâmetro `true` para criar um tíquete de autenticação que dura além da sessão atual.      > [!NOTE] > Sempre usar o serviço de autenticação junto com a secure sockets layer (SSL, usando HTTPS) para proteger dados confidenciais.       O método de logon gera o <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>evento e o <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>evento.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> Criar um manipulador de eventos <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>para personalizar a autenticação, como verificar os valores `customCredential` ou validação de credenciais por meio de um provedor de associação não-padrão.</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> Os valores em `customCredential` não são validadas pelo provedor de associação padrão. Para personalizar o cookie de autenticação, crie um manipulador de eventos <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>      > [!NOTE] > Não chamar o método de logon do código que está em execução no servidor Web. Você chamar o método de logon apenas como parte de um serviço WCF. Para obter mais informações, consulte [autenticação ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool Login (string username, string password, string customCredential, bool isPersistent);
    parameters:
    - id: username
      type: System.String
      description: "O nome de usuário a ser validado."
    - id: password
      type: System.String
      description: "A senha para o usuário especificado."
    - id: customCredential
      type: System.String
      description: "O valor ou valores para validar além `userName` e `password`, se houver."
    - id: isPersistent
      type: System.Boolean
      description: "Um valor que indica se o tíquete de autenticação permanece válido entre as sessões."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as credenciais do usuário são válidas. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.ApplicationServices.AuthenticationService.Login*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userName</code>or <code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Logout
  id: Logout
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Logout()
  nameWithType: AuthenticationService.Logout()
  fullName: System.Web.ApplicationServices.AuthenticationService.Logout()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Limpa o tíquete de autenticação (cookie) no navegador."
  remarks: "O método de Logout limpa o cookie de autenticação de coleção de cookie do navegador. O usuário deve fazer logon novamente para ser autenticada.       O <xref:System.Web.ApplicationServices.AuthenticationService>classe não armazena informações do servidor sobre autenticação tíquetes foram apagados.</xref:System.Web.ApplicationServices.AuthenticationService>      > [!NOTE] > Não chamar o método de Logout do código que está em execução no servidor Web. Você chama o método de Logout apenas como parte de um serviço WCF. Para obter mais informações, consulte [autenticação ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Logout ();
    parameters: []
  overload: System.Web.ApplicationServices.AuthenticationService.Logout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  id: ValidateUser(System.String,System.String,System.String)
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: ValidateUser(String,String,String)
  nameWithType: AuthenticationService.ValidateUser(String,String,String)
  fullName: System.Web.ApplicationServices.AuthenticationService.ValidateUser(String,String,String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "Autentica as credenciais do usuário sem emitir um tíquete de autenticação."
  remarks: "O método ValidateUser autentica as credenciais do usuário, mas não define um cookie de autenticação. Sem um cookie de autenticação, o usuário serão não registrado mesmo se as credenciais são válidas.       Use o método ValidateUser quando você deve verificar se as credenciais do usuário são válidas sem receber um cookie de autenticação. Por exemplo, você pode fazer isso se o cookie de autenticação já está armazenado em um aplicativo cliente, mas você deseja verificar se as credenciais do usuário ainda são válidas quando uma nova sessão é iniciada.       Método TheValidateUser dispara o <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>evento, mas não gera o <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>evento.</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>      > [!NOTE] > Não chame o método ValidateUser do código que está em execução no servidor Web. Chame o método ValidateUser apenas como parte de um serviço WCF. Para obter mais informações, consulte [autenticação ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ValidateUser (string username, string password, string customCredential);
    parameters:
    - id: username
      type: System.String
      description: "O nome de usuário a ser validado."
    - id: password
      type: System.String
      description: "A senha para o usuário especificado."
    - id: customCredential
      type: System.String
      description: "O valor ou valores para validar além `userName` e `password`, se houver."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as credenciais do usuário são válidas. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.ApplicationServices.AuthenticationService.ValidateUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userName</code>or <code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: AuthenticationService()
  nameWithType: AuthenticationService.AuthenticationService()
  fullName: System.Web.ApplicationServices.AuthenticationService.AuthenticationService()
- uid: System.Web.ApplicationServices.AuthenticationService.Authenticating
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Authenticating
  nameWithType: AuthenticationService.Authenticating
  fullName: System.Web.ApplicationServices.AuthenticationService.Authenticating
- uid: System.EventHandler{System.Web.ApplicationServices.AuthenticatingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AuthenticatingEventArgs>
  nameWithType: EventHandler<AuthenticatingEventArgs>
  fullName: System.EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.ApplicationServices.AuthenticatingEventArgs
    name: AuthenticatingEventArgs
    nameWithType: AuthenticatingEventArgs
    fullName: AuthenticatingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: CreatingCookie
  nameWithType: AuthenticationService.CreatingCookie
  fullName: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
- uid: System.EventHandler{System.Web.ApplicationServices.CreatingCookieEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<CreatingCookieEventArgs>
  nameWithType: EventHandler<CreatingCookieEventArgs>
  fullName: System.EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.ApplicationServices.CreatingCookieEventArgs
    name: CreatingCookieEventArgs
    nameWithType: CreatingCookieEventArgs
    fullName: CreatingCookieEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: IsLoggedIn()
  nameWithType: AuthenticationService.IsLoggedIn()
  fullName: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Login(String,String,String,Boolean)
  nameWithType: AuthenticationService.Login(String,String,String,Boolean)
  fullName: System.Web.ApplicationServices.AuthenticationService.Login(String,String,String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.ApplicationServices.AuthenticationService.Logout
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Logout()
  nameWithType: AuthenticationService.Logout()
  fullName: System.Web.ApplicationServices.AuthenticationService.Logout()
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: ValidateUser(String,String,String)
  nameWithType: AuthenticationService.ValidateUser(String,String,String)
  fullName: System.Web.ApplicationServices.AuthenticationService.ValidateUser(String,String,String)
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: AuthenticationService
  nameWithType: AuthenticationService.AuthenticationService
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: IsLoggedIn
  nameWithType: AuthenticationService.IsLoggedIn
- uid: System.Web.ApplicationServices.AuthenticationService.Login*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Login
  nameWithType: AuthenticationService.Login
- uid: System.Web.ApplicationServices.AuthenticationService.Logout*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Logout
  nameWithType: AuthenticationService.Logout
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: ValidateUser
  nameWithType: AuthenticationService.ValidateUser
