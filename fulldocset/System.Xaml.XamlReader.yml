### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlReader
  id: XamlReader
  children:
  - System.Xaml.XamlReader.#ctor
  - System.Xaml.XamlReader.Close
  - System.Xaml.XamlReader.Dispose(System.Boolean)
  - System.Xaml.XamlReader.IsDisposed
  - System.Xaml.XamlReader.IsEof
  - System.Xaml.XamlReader.Member
  - System.Xaml.XamlReader.Namespace
  - System.Xaml.XamlReader.NodeType
  - System.Xaml.XamlReader.Read
  - System.Xaml.XamlReader.ReadSubtree
  - System.Xaml.XamlReader.SchemaContext
  - System.Xaml.XamlReader.Skip
  - System.Xaml.XamlReader.System#IDisposable#Dispose
  - System.Xaml.XamlReader.Type
  - System.Xaml.XamlReader.Value
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
  type: Class
  summary: "Fornece definições de base para classes que consomem a entrada XAML e produzem fluxos de nós XAML."
  remarks: "XamlReader é uma classe abstrata e não fornece implementações ou definições que tem um resultado do trabalho para todos os membros. Membros que têm uma implementação em XamlReader são indicados na seção comentários para esse membro. Especificamente, XamlReader tem vários membros abstratos que devem ser implementados e vários membros virtuais.       Os membros virtuais, <xref:System.Xaml.XamlReader.ReadSubtree%2A>e <xref:System.Xaml.XamlReader.Skip%2A>cada fornecem uma implementação padrão que é apropriada para a maioria dos casos.</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> No entanto, o <xref:System.Xaml.XamlReader.ReadSubtree%2A>e <xref:System.Xaml.XamlReader.Skip%2A>implementações padrão dependem de outro comportamento esperado do leitor XAML implementando; em particular, eles dependem de <xref:System.Xaml.XamlReader.Read%2A>Substituir.</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Dispose%2A>também é um membro virtual que tem uma implementação padrão de trabalho.</xref:System.Xaml.XamlReader.Dispose%2A>       As seguintes classes são mais relevantes e práticos derivado classes em serviços XAML do .NET Framework e o assembly System. XAML:- <xref:System.Xaml.XamlObjectReader>, que lê um gráfico de objeto, como o gráfico de objeto ativo de um aplicativo em tempo de execução.</xref:System.Xaml.XamlObjectReader>      - <xref:System.Xaml.XamlXmlReader>, que lê o XAML no formato de um arquivo de texto XML usando um geral <xref:System.Xml.XmlReader>que carrega o arquivo como uma classe do auxiliar intermediário.</xref:System.Xml.XmlReader> </xref:System.Xaml.XamlXmlReader>       Outros leitores XAML das outras estruturas incluem <xref:System.Windows.Baml2006.Baml2006Reader>e <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</xref:System.Activities.Debugger.XamlDebuggerXmlReader> </xref:System.Windows.Baml2006.Baml2006Reader>       XamlReader difere [!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)] e <xref:System.Xml.XmlReader>princípios de design porque XamlReader não tem um `Create` método para retornar padrão subjacente implementações do leitor XAML.</xref:System.Xml.XmlReader> Em vez disso, você deve instanciar específicas classes derivadas de leitor XAML chamando seus construtores ou outros APIs do auxiliar de classe específica.      ## Subárvore leitores para a maior parte, você chamar a API de XamlReader no contexto de classes específicas de leitor XAML que derivam em XamlReader. No entanto, em um caso específico, você acessa a API de XamlReader em uma instância do leitor XAML prática que não é público e não derivado <xref:System.Xaml.XamlObjectReader>ou <xref:System.Xaml.XamlXmlReader>.</xref:System.Xaml.XamlXmlReader> </xref:System.Xaml.XamlObjectReader> Nesse caso é quando você chama <xref:System.Xaml.XamlReader.ReadSubtree%2A>, que retorna uma instância em XamlReader.</xref:System.Xaml.XamlReader.ReadSubtree%2A> Na implementação do padrão, o que é retornado por essa API XamlReader é uma classe interna.       O XamlReader obtido para leitura de subárvore tem ações válidas para APIs, como <xref:System.Xaml.XamlReader.Read%2A>e <xref:System.Xaml.XamlReader.NodeType%2A>, e essas ações são baseadas em classe pai leitor.</xref:System.Xaml.XamlReader.NodeType%2A> </xref:System.Xaml.XamlReader.Read%2A> Esse design permite que a classe interna controlar o nível de quadro onde a subárvore foi inserida. A subárvore atuar XamlReader certifica-se de que, se a posição do nó atual for movida além dos limites da subárvore, o leitor de subárvore específico relatórios final do arquivo ou `null` no nó atual.       Observações sobre o uso de leitor de subárvore são incluídas em determinadas APIs em XamlReader."
  syntax:
    content: 'public abstract class XamlReader : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa o <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> classe."
  syntax:
    content: protected XamlReader ();
    parameters: []
  overload: System.Xaml.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Close
  id: Close
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Fecha o fluxo do nó XAML."
  remarks: "Na implementação de base, chamar fechar chamadas <xref:System.Xaml.XamlReader.Dispose%2A>com o `isDisposing` parâmetro como `true`.</xref:System.Xaml.XamlReader.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Xaml.XamlReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>e, opcionalmente, libera os recursos gerenciados."
  remarks: "Você deve chamar a classe base para obter <xref:System.Xaml.XamlReader.IsDisposed%2A>= `true`.</xref:System.Xaml.XamlReader.IsDisposed%2A>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar os recursos gerenciados; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsDisposed
  id: IsDisposed
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém se <xref:System.Xaml.XamlReader.Dispose*>foi chamado.</xref:System.Xaml.XamlReader.Dispose*>"
  syntax:
    content: protected bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <xref:System.Xaml.XamlReader.Dispose*>foi chamado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Xaml.XamlReader.Dispose*>"
  overload: System.Xaml.XamlReader.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsEof
  id: IsEof
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, obtém um valor que informa se a posição do leitor está no final do arquivo."
  remarks: "Leitores de subárvore podem chamar IsEof, com o comportamento que reflete corretamente os limites da subárvore inserido. Para obter mais informações, consulte a seção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool IsEof { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a posição está no conceitual final do arquivo de fluxo do nó XAML; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.IsEof*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Member
  id: Member
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, obtém o membro atual na posição de leitor, se a posição do leitor estiver em um <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>."
  remarks: "Leitores de subárvore podem chamar o membro, com restrições de comportamento. Para obter mais informações, consulte a seção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlMember Member { get; }
    return:
      type: System.Xaml.XamlMember
      description: "O membro atual; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a posição do leitor não está em um membro."
  overload: System.Xaml.XamlReader.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Namespace
  id: Namespace
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, obtém as informações do namespace XAML do nó atual."
  remarks: "O design desejado desta API é retornar somente-se um resultado não nulo de <xref:System.Xaml.XamlReader.NodeType%2A>do nó atual é <xref:System.Xaml.XamlNodeType>.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlReader.NodeType%2A> A propriedade não relata o namespace XAML que se aplica a objetos ou membros de forma geral escopo, como em um contexto de esquema XAML. Seu aplicativo deve fornecer um meio para armazenar em cache as informações para a ação do namespace XAML que atravessa nós XAML, se você precisar que informações de maneira diferente como o contexto do esquema XAML reporta a um gravador. Consulte<xref:System.Xaml.XamlXmlReader.Namespace%2A> para observações sobre a implementação da referência.</xref:System.Xaml.XamlXmlReader.Namespace%2A>"
  syntax:
    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }
    return:
      type: System.Xaml.NamespaceDeclaration
      description: "As informações de namespace XAML, se ele está disponível. Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.NodeType
  id: NodeType
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, obtém o tipo do nó atual."
  remarks: "Leitores de subárvore podem chamar NodeType, com restrições de comportamento. Para obter mais informações, consulte a seção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlNodeType NodeType { get; }
    return:
      type: System.Xaml.XamlNodeType
      description: "Um valor de <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref> enumeração."
  overload: System.Xaml.XamlReader.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Read
  id: Read
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, fornece o próximo nó XAML de origem, se um nó estiver disponível."
  remarks: "Leitores de subárvore podem chamar Read, com restrições de comportamento. Para obter mais informações, consulte a seção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se um nó está disponível. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> que se baseia no atual <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>, onde retornado <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> é usado para iterar por meio de uma subárvore da estrutura de nó XAML."
  remarks: "Esse método tem uma implementação padrão e retorna um <xref:System.Xaml.XamlReader>.</xref:System.Xaml.XamlReader> válido Retornado <xref:System.Xaml.XamlReader>é uma classe interna que restringe certos <xref:System.Xaml.XamlReader>ações.</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> As restrições são consistentes com o objetivo de ler apenas uma subárvore dimensionada de uma fonte maior para um conjunto de nós XAML e retornando a fim de arquivo ou `null` no nó atual quando a subárvore for fechada.       Em geral, você deve verificar o nó atual do inicial <xref:System.Xaml.XamlReader.Read%2A>para determinar se é necessário um leitor de subárvore.</xref:System.Xaml.XamlReader.Read%2A> Como você marcar essa opção pode ser específico da implementação; No entanto, evite criar vários leitores de subárvore para cada subárvore. Além disso, evite chamar um leitor de subárvore em certos casos de nó (por exemplo, para <xref:System.Xaml.XamlNodeType>) que não pode conter uma subárvore de nós.</xref:System.Xaml.XamlNodeType>       Depois de obter um leitor de subárvore, você deve chamar <xref:System.Xaml.XamlReader.Read%2A>nele para obter um nó atual (ou chamar <xref:System.Xaml.XamlReader.Skip%2A>para obter um próximo nó).</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.Read%2A> Você não automaticamente obter uma posição inicial do nó do leitor de subárvore ao criá-lo.       O leitor de que obter chamando ReadSubtree esta implementação padrão é uma classe interna. A classe interna baseia seu comportamento no <xref:System.Xaml.XamlReader>implementação que está sendo usada quando é chamado ReadSubtree.</xref:System.Xaml.XamlReader> A finalidade da classe interna é usada incluir o <xref:System.Xaml.XamlReader.Read%2A>e o comportamento geral de passagem.</xref:System.Xaml.XamlReader.Read%2A> Passagem permanece dentro da subárvore pretendida, controlando de <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pares ou <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pares.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> Ele também corretamente retorna `false` para <xref:System.Xaml.XamlReader.Read%2A>e `true` para <xref:System.Xaml.XamlReader.IsEof%2A>quando o leitor estiver no final da subárvore, conforme definido pelo seu ponto de entrada.</xref:System.Xaml.XamlReader.IsEof%2A> </xref:System.Xaml.XamlReader.Read%2A> Em geral, você assume que qualquer <xref:System.Xaml.XamlReader>API chamada de um leitor de subárvore tem a mesma implementação como geral <xref:System.Xaml.XamlReader>, exceto o percurso delimitadora comportamento.</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>       No entanto, ReadSubtree é virtual. Portanto, um determinado <xref:System.Xaml.XamlReader>implementação pode fornecer um comportamento que difere o <xref:System.Xaml.XamlReader>comportamento de wrapper interna e um <xref:System.Xaml.XamlReader>implementação ainda pode desabilitar a funcionalidade de leitor de subárvore retornando <xref:System.NotImplementedException>ou outras exceções.</xref:System.NotImplementedException> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public virtual System.Xaml.XamlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xaml.XamlReader
      description: "Uma nova instância de leitor XAML da subárvore."
  overload: System.Xaml.XamlReader.ReadSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, obtém um objeto que fornece informações de contexto de esquema XAML para o conjunto de informações."
  syntax:
    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "Um objeto que fornece informações de contexto de esquema XAML para as informações de conjunto."
  overload: System.Xaml.XamlReader.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Skip
  id: Skip
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Ignora o nó atual e avança a posição do leitor para o próximo nó."
  remarks: "Uma vez ignorada, <xref:System.Xaml.XamlReader.Read%2A>é chamado pelo padrão de implementação de ignorar.</xref:System.Xaml.XamlReader.Read%2A> Você normalmente não chama Skip e <xref:System.Xaml.XamlReader.Read%2A>em sequência.</xref:System.Xaml.XamlReader.Read%2A>       No padrão de implementação de ignorar, diferentes ações são tomadas dependendo de quais <xref:System.Xaml.XamlReader.NodeType%2A>a posição do leitor é na momento.</xref:System.Xaml.XamlReader.NodeType%2A> Se a posição do leitor está atualmente em um <xref:System.Xaml.XamlNodeType>ou <xref:System.Xaml.XamlNodeType>, que o membro ou objeto é ignorado.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> Para outros <xref:System.Xaml.XamlReader.NodeType%2A>valores, nenhuma ação será tomada diferente chamada <xref:System.Xaml.XamlReader.Read%2A>da posição atual.</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.NodeType%2A>       Leitores de subárvore podem chamar ignorar, com restrições de comportamento. Para obter mais informações, consulte a seção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>       O comportamento de árvore do nó de ignorar se baseia em XML equivalente <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> Com base no <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>equivalência de comportamento, ignorar ignora o nó e sua subárvore, não apenas o nó de entrada única.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>"
  syntax:
    content: public virtual void Skip ();
    parameters: []
  overload: System.Xaml.XamlReader.Skip*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Libera todos os recursos usados pela instância atual do <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> classe."
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Type
  id: Type
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementado em uma classe derivada, obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do nó atual."
  remarks: "Leitores de subárvore podem chamar o tipo, com restrições de comportamento. Para obter mais informações, consulte a seção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do nó atual; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a posição atual do leitor não está em um objeto."
  overload: System.Xaml.XamlReader.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Value
  id: Value
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, obtém o valor do nó atual."
  syntax:
    content: public abstract object Value { get; }
    return:
      type: System.Object
      description: "O valor do nó atual; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a posição atual do leitor não está em um <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref> tipo de nó."
  overload: System.Xaml.XamlReader.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xaml.XamlReader.#ctor
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
- uid: System.Xaml.XamlReader.Close
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlReader.IsDisposed
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlReader.Namespace
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
- uid: System.Xaml.NamespaceDeclaration
  parent: System.Xaml
  isExternal: false
  name: NamespaceDeclaration
  nameWithType: NamespaceDeclaration
  fullName: System.Xaml.NamespaceDeclaration
- uid: System.Xaml.XamlReader.NodeType
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
- uid: System.Xaml.XamlNodeType
  parent: System.Xaml
  isExternal: false
  name: XamlNodeType
  nameWithType: XamlNodeType
  fullName: System.Xaml.XamlNodeType
- uid: System.Xaml.XamlReader.Read
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
- uid: System.Xaml.XamlReader.ReadSubtree
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Xaml.XamlReader.SchemaContext
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlReader.Skip
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
- uid: System.Xaml.XamlReader.Type
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlReader.Value
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
- uid: System.Xaml.XamlReader.#ctor*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Xaml.XamlReader.Close*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close
  nameWithType: XamlReader.Close
- uid: System.Xaml.XamlReader.Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose
  nameWithType: XamlReader.Dispose
- uid: System.Xaml.XamlReader.IsDisposed*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
- uid: System.Xaml.XamlReader.Namespace*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
- uid: System.Xaml.XamlReader.NodeType*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
- uid: System.Xaml.XamlReader.Read*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read
  nameWithType: XamlReader.Read
- uid: System.Xaml.XamlReader.ReadSubtree*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree
  nameWithType: XamlReader.ReadSubtree
- uid: System.Xaml.XamlReader.SchemaContext*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
- uid: System.Xaml.XamlReader.Skip*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip
  nameWithType: XamlReader.Skip
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: XamlReader.System.IDisposable.Dispose
- uid: System.Xaml.XamlReader.Type*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
- uid: System.Xaml.XamlReader.Value*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
