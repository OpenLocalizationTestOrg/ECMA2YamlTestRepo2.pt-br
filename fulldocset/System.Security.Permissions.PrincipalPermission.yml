### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermission
  id: PrincipalPermission
  children:
  - System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  - System.Security.Permissions.PrincipalPermission.Copy
  - System.Security.Permissions.PrincipalPermission.Demand
  - System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  - System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.PrincipalPermission.GetHashCode
  - System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsUnrestricted
  - System.Security.Permissions.PrincipalPermission.ToString
  - System.Security.Permissions.PrincipalPermission.ToXml
  - System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PrincipalPermission
  nameWithType: PrincipalPermission
  fullName: System.Security.Permissions.PrincipalPermission
  type: Class
  summary: "Permite que verificações contra a entidade de segurança ativa (consulte <xref:System.Security.Principal.IPrincipal>) usando as construções de linguagem definidas para ambas as ações de segurança declarativa e imperativas.</xref:System.Security.Principal.IPrincipal> Essa classe não pode ser herdada."
  remarks: "Passando informações de identidade (nome de usuário e funções) para o construtor, PrincipalPermission pode ser usado para solicitar que a identidade da entidade de segurança ativa corresponde a essas informações.       Para fazer a correspondência ativo <xref:System.Security.Principal.IPrincipal>e associados <xref:System.Security.Principal.IIdentity>, a identidade especificada e a função devem corresponder.</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal> Se `null` cadeia de caracteres de identidade é usada, ele será interpretado como uma solicitação para corresponder a qualquer identidade. O uso de `null` cadeia de caracteres de função corresponderá a qualquer função. Implicitamente, passando `null` parâmetro `name` ou `role` para PrincipalPermission corresponderá a identidade e funções em qualquer <xref:System.Security.Principal.IPrincipal>.</xref:System.Security.Principal.IPrincipal> Também é possível construir um PrincipalPermission que só determina se o <xref:System.Security.Principal.IIdentity>representa uma entidade autenticada ou não autenticada.</xref:System.Security.Principal.IIdentity> Nesse caso, `name` e `role` são ignorados.       Ao contrário da maioria das outras permissões PrincipalPermission não estende <xref:System.Security.CodeAccessPermission>.</xref:System.Security.CodeAccessPermission> Porém, implementar a <xref:System.Security.IPermission>interface.</xref:System.Security.IPermission> Isso ocorre porque PrincipalPermission não é uma permissão de acesso de código; ou seja, não é concedida com base na identidade do assembly em execução. Em vez disso, ele permite que o código executar ações (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>e assim por diante) em relação a identidade do usuário atual de maneira consistente com a maneira como essas ações são executadas para acesso ao código e as permissões de identidade do código.</xref:System.Security.Permissions.PrincipalPermission.Intersect%2A> </xref:System.Security.Permissions.PrincipalPermission.Union%2A> </xref:System.Security.Permissions.PrincipalPermission.Demand%2A>      > [!IMPORTANT] > Antes de uma solicitação de permissão principal é necessário definir a política de entidade do atual domínio de aplicativo para o valor de enumeração <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Por padrão, a política de entidade é definida como <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Se você não definir a política de entidade <xref:System.Security.Principal.PrincipalPolicy>, uma solicitação de permissão principal falhará.</xref:System.Security.Principal.PrincipalPolicy> O código a seguir deve ser executado antes que a permissão principal é exigida: >>`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/t-system.security.permis_19_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_19_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/t-system.security.permis_19_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> classe com especificado <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  remarks: "`None`corresponde apenas a entidade de segurança não autenticada (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> é a cadeia de caracteres vazia (&quot;&quot;), nenhum <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>é `false`).</xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> `Unrestricted`corresponde a todas as entidades (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> é `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>é `null`).</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>      > [!NOTE] > Este construtor é incluído para manter a consistência com o design de outras permissões, mas não é útil na prática."
  syntax:
    content: public PrincipalPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Uma da <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> valores."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> state </code> parâmetro não é válido <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> classe especificado <code> name </code> e <code> role </code>."
  remarks: "Ambos os `name` parâmetro e o `role` parâmetro deve corresponder para que essa permissão corresponder às ativa <xref:System.Security.Principal.IPrincipal>e <xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity> associado</xref:System.Security.Principal.IPrincipal> Definir `name` para `null` para verificar se há qualquer usuário em uma função."
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n **Note** In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/b42fc3af-7a7c-4eef-9f54-_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/b42fc3af-7a7c-4eef-9f54-_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/b42fc3af-7a7c-4eef-9f54-_1.cpp)]"
  syntax:
    content: public PrincipalPermission (string name, string role);
    parameters:
    - id: name
      type: System.String
      description: "O nome do <xref:System.Security.Principal.IPrincipal>usuário do objeto do.</xref:System.Security.Principal.IPrincipal>"
    - id: role
      type: System.String
      description: "A função de <xref:System.Security.Principal.IPrincipal>de usuário do objeto (por exemplo, administrador).</xref:System.Security.Principal.IPrincipal>"
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> classe especificado <code> name </code>, <code> role </code>e o status de autenticação."
  remarks: "Ambos os `name` parâmetro e o `role` parâmetro deve corresponder para que essa permissão corresponder às ativa <xref:System.Security.Principal.IPrincipal>e <xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity> associado</xref:System.Security.Principal.IPrincipal>"
  syntax:
    content: public PrincipalPermission (string name, string role, bool isAuthenticated);
    parameters:
    - id: name
      type: System.String
      description: "O nome do <xref:System.Security.Principal.IPrincipal>usuário do objeto do.</xref:System.Security.Principal.IPrincipal>"
    - id: role
      type: System.String
      description: "A função de <xref:System.Security.Principal.IPrincipal>de usuário do objeto (por exemplo, administrador).</xref:System.Security.Principal.IPrincipal>"
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para indicar que o usuário está autenticado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Copy
  id: Copy
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria e retorna uma cópia idêntica da permissão atual."
  remarks: "Uma cópia da permissão representa a mesma entidade de segurança e identidade como a permissão original."
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Uma cópia da permissão atual."
  overload: System.Security.Permissions.PrincipalPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Demand
  id: Demand
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determina o tempo de execução se o servidor principal atual corresponde a entidade especificada pela permissão atual."
  remarks: "Se nenhum <xref:System.Security.SecurityException>é gerado, a solicitação será bem-sucedida.</xref:System.Security.SecurityException>       Esse método funciona em relação a entidade de segurança anexada ao thread de chamada.      > [!IMPORTANT] > Antes de chamar o método de demanda, é necessário definir a política de entidade do atual domínio de aplicativo para o valor de enumeração <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Por padrão, a política de entidade é definida como <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Se você não definir a política de entidade <xref:System.Security.Principal.PrincipalPolicy>, uma solicitação de permissão principal falhará.</xref:System.Security.Principal.PrincipalPolicy> O código a seguir deve ser executado antes que ocorra a demanda de permissão principal: >>`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.Permissions.PrincipalPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A entidade de segurança atual não passou na verificação de segurança para a entidade especificada pela permissão atual.       atual - ou - <xref:System.Security.Principal.IPrincipal>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Principal.IPrincipal>"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determina se o especificado <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> objeto é igual ao atual <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>."
  remarks: "Para obter mais informações, consulte <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> objeto a ser comparado com o atual <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se especificado <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> é igual à atual <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> objeto; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Reconstrói uma permissão com um estado especificado de uma codificação de XML."
  syntax:
    content: public void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "O XML de codificação a ser usada para reconstruir a permissão."
  overload: System.Security.Permissions.PrincipalPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> elem </code> parâmetro não é um elemento de permissão válido.       - ou - <code> elem </code> o número de versão do parâmetro não é válido."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém um código hash para o <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> objeto que é adequado para uso em algoritmos e estruturas de dados como uma tabela de hash de hash."
  remarks: "O código hash para duas instâncias da mesma permissão pode ser diferente, portanto, um código de hash não deve ser usado para comparar dois <xref:System.Security.Permissions.PrincipalPermission>objetos.</xref:System.Security.Permissions.PrincipalPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para a atual <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> objeto."
  overload: System.Security.Permissions.PrincipalPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria e retorna uma permissão que é a interseção de permissão atual e a permissão especificada."
  remarks: "Porque dois usuários nunca cruzam, esse método não é útil para <xref:System.Security.Permissions.PrincipalPermission>.</xref:System.Security.Permissions.PrincipalPermission> Por exemplo, [!code-cpp [System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_1.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_1.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_1.vb) ] é equivalente a [!code-cpp [System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_2.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_2.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_2.vb) ] porque nenhuma identidade simultaneamente pode representar Bob e Luiz.         Na verdade, `pp1.Demand()` só terá êxito se uma entidade de segurança não autenticada (com nome igual à cadeia de caracteres vazia (&quot;&quot;)) é permitido para atuar na função de administrador."
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uma permissão a interseção com a permissão atual. Ele deve ser o mesmo tipo da permissão atual."
    return:
      type: System.Security.IPermission
      description: "Uma nova permissão que representa a interseção de permissão atual e a permissão especificada. Essa nova permissão será <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a interseção está vazia."
  overload: System.Security.Permissions.PrincipalPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> target </code> parâmetro não é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e não é uma instância da classe mesmo como a permissão atual."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determina se a permissão atual é um subconjunto de permissão especificada."
  remarks: "A permissão atual é um subconjunto de permissão especificada se todas as demandas que bem-sucedida da permissão atual também obter êxito para a permissão especificada."
  example:
  - "The following example defines instances of <xref:System.Security.Permissions.PrincipalPermission> corresponding to three distinct users. Two additional instances are then created as groups of users. `pp1` represents Bob and Louise, `pp2` represents Bob, Louise, and Greg.  \n  \n [!code-cpp[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/cpp/88c77b70-6ab7-4d6b-914d-_1.cpp)]\n [!code-vb[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/visualbasic/88c77b70-6ab7-4d6b-914d-_1.vb)]\n [!code-cs[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/csharp/88c77b70-6ab7-4d6b-914d-_1.cs)]  \n  \n With the preceding declarations, `pp1.IsSubsetOf(pp2)` returns `true`, and `pp2.IsSubsetOf(pp1)` returns `false`."
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Uma permissão a ser testado para a relação de subconjunto. Essa permissão deve ser o mesmo tipo da permissão atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a permissão atual é um subconjunto da permissão especificada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> target </code> parâmetro é um objeto que não é do mesmo tipo que a permissão atual."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Retorna um valor que indica se a permissão atual é irrestrita."
  remarks: "Um irrestrito <xref:System.Security.Permissions.PrincipalPermission>corresponde a qualquer entidade de segurança.</xref:System.Security.Permissions.PrincipalPermission>"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a permissão atual é irrestrita; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToString
  id: ToString
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria e retorna uma cadeia de caracteres que representa a permissão atual."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma representação da permissão atual."
  overload: System.Security.Permissions.PrincipalPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria uma codificação de XML de permissão e seu estado atual."
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Uma codificação de XML de permissão, incluindo quaisquer informações de estado."
  overload: System.Security.Permissions.PrincipalPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria uma permissão que é a união de permissão atual e a permissão especificada."
  remarks: "União cria uma permissão que representa os critérios de um determinado conjunto de indivíduo <xref:System.Security.Permissions.PrincipalPermission>objetos.</xref:System.Security.Permissions.PrincipalPermission> É útil para compacta que representa um conjunto de condições de teste. Por exemplo, com as declarações [!code-cpp [System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/cpp/dd443af0-98ea-4e3c-9761-_1.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/csharp/dd443af0-98ea-4e3c-9761-_1.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/visualbasic/dd443af0-98ea-4e3c-9761-_1.vb) ] `(ppBob.Union(ppLouise)).Demand()` terá êxito se o servidor principal atual representa Bob na função de administrador ou Luiz na função de administrador.           "
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "Uma permissão para combinar com a permissão atual. Ele deve ser o mesmo tipo da permissão atual."
    return:
      type: System.Security.IPermission
      description: "Uma nova permissão que representa a união de permissão atual e a permissão especificada."
  overload: System.Security.Permissions.PrincipalPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> other </code> parâmetro é um objeto que não é do mesmo tipo que a permissão atual."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermission.Copy
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermission.Demand
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
- uid: System.Security.Permissions.PrincipalPermission.ToString
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.#ctor*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission
  nameWithType: PrincipalPermission.PrincipalPermission
- uid: System.Security.Permissions.PrincipalPermission.Copy*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy
  nameWithType: PrincipalPermission.Copy
- uid: System.Security.Permissions.PrincipalPermission.Demand*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand
  nameWithType: PrincipalPermission.Demand
- uid: System.Security.Permissions.PrincipalPermission.Equals*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals
  nameWithType: PrincipalPermission.Equals
- uid: System.Security.Permissions.PrincipalPermission.FromXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml
  nameWithType: PrincipalPermission.FromXml
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode
  nameWithType: PrincipalPermission.GetHashCode
- uid: System.Security.Permissions.PrincipalPermission.Intersect*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect
  nameWithType: PrincipalPermission.Intersect
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PrincipalPermission.IsSubsetOf
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PrincipalPermission.IsUnrestricted
- uid: System.Security.Permissions.PrincipalPermission.ToString*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString
  nameWithType: PrincipalPermission.ToString
- uid: System.Security.Permissions.PrincipalPermission.ToXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml
  nameWithType: PrincipalPermission.ToXml
- uid: System.Security.Permissions.PrincipalPermission.Union*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union
  nameWithType: PrincipalPermission.Union
