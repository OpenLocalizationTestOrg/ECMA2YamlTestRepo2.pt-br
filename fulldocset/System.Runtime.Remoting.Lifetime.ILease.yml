### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Lifetime.ILease
  id: ILease
  children:
  - System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.CurrentState
  - System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  - System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  - System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  - System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  langs:
  - csharp
  name: ILease
  nameWithType: ILease
  fullName: System.Runtime.Remoting.Lifetime.ILease
  type: Interface
  summary: "Define um objeto de concessão de tempo de vida é usado pelo serviço de tempo de vida de comunicação remota."
  remarks: "Distribuído controles de coleta de lixo quando aplicativos de servidor podem ser excluídos. Tradicionalmente, a coleta de lixo distribuída usa contagens de referência e executar o ping para o controle. Isso funciona bem quando há alguns clientes por objeto, mas não funciona bem quando há milhares de clientes por cada objeto. O serviço de tempo de vida pode assumir a função de um coletor de lixo distribuído tradicional e escalas bem quando o número de clientes aumenta.       O serviço de tempo de vida associa uma concessão de cada objeto ativado remotamente. Quando a concessão expirar, o objeto é removido. Uma concessão pode especificar que um objeto tem um tempo de vida infinito.       Cada <xref:System.AppDomain>contém um Gerenciador de concessão que administra as concessões no domínio.</xref:System.AppDomain> O Gerenciador de concessão periodicamente examina as concessões de tempo de expiração. Se uma concessão expirar, ela pode ser cancelada, removendo sua referência para a concessão, ou renovada com a invocação de um ou mais dos patrocinadores da concessão.       Uma concessão contém propriedades que determinam as políticas e os métodos que renovar o tempo de concessão. A concessão expõe a interface ILease.       Para obter um exemplo mostrando como usar a interface ILease consulte [tempos de vida](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ILease
  implements: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  id: CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém a quantidade de tempo restante da concessão."
  syntax:
    content: public TimeSpan CurrentLeaseTime { get; }
    return:
      type: System.TimeSpan
      description: "A quantidade de tempo restante da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  id: CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém a atual <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> da concessão."
  syntax:
    content: public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }
    return:
      type: System.Runtime.Remoting.Lifetime.LeaseState
      description: "Atual <xref href=&quot;System.Runtime.Remoting.Lifetime.LeaseState&quot;> </xref> da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  id: InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém ou define a hora inicial para a concessão."
  remarks: "Se a propriedade InitialLeaseTime é definida como <xref:System.TimeSpan?displayProperty=fullName>, a concessão nunca atingirá o tempo limite e o objeto associado a ele terá um tempo de vida infinito.</xref:System.TimeSpan?displayProperty=fullName>"
  syntax:
    content: public TimeSpan InitialLeaseTime { get; set; }
    return:
      type: System.TimeSpan
      description: "A hora inicial para a concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Registra um patrocinador para a concessão sem renovar a concessão."
  remarks: "Se um patrocinador é registrado com o método atual, a concessão não for renovada."
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "O objeto de retorno de chamada do Patrocinador."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  id: Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Registra um patrocinador da concessão e renova o por <xref:System.TimeSpan>.</xref:System.TimeSpan> especificado"
  syntax:
    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "O objeto de retorno de chamada do Patrocinador."
    - id: renewalTime
      type: System.TimeSpan
      description: "O período de tempo para renovar a concessão por."
  overload: System.Runtime.Remoting.Lifetime.ILease.Register*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  id: Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Renova uma concessão para o tempo especificado."
  remarks: "O tempo de concessão é definido como o máximo da <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>ou a hora atual e o tempo de renovação.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan Renew (TimeSpan renewalTime);
    parameters:
    - id: renewalTime
      type: System.TimeSpan
      description: "O período de tempo para renovar a concessão por."
    return:
      type: System.TimeSpan
      description: "A nova hora de expiração da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.Renew*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  id: RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém ou define a quantidade de tempo pelo qual uma chamada para o objeto remoto renova <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  remarks: "Quando você faz uma chamada para um objeto remoto, o serviço de tempo de vida adiciona RenewOnCallTime para o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>somente se o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>caiu abaixo do RenewOnCallTime.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> </xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Chamadas sequenciais, portanto, não aumentam o <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>sem limite.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> Em vez disso, imediatamente após qualquer chamada a <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>é garantido para ser o RenewOnCallTime ou mais.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A>"
  syntax:
    content: public TimeSpan RenewOnCallTime { get; set; }
    return:
      type: System.TimeSpan
      description: "A quantidade de tempo pelo qual uma chamada para o objeto remoto renova <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>.</xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*>"
  overload: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  id: SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Obtém ou define a quantidade de tempo de espera para um patrocinador retornar com um tempo de renovação da concessão."
  remarks: "Se for o SponsorshipTimeout <xref:System.TimeSpan?displayProperty=fullName>, em seguida, essa concessão não terão patrocinadores.</xref:System.TimeSpan?displayProperty=fullName>       Se um patrocinador não responder a uma chamada para renovar uma concessão dentro do período de tempo limite, ele será considerado inativo e é removido da lista de patrocinadores para a concessão atual."
  syntax:
    content: public TimeSpan SponsorshipTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "A quantidade de tempo de espera para um patrocinador retornar com um tempo de renovação da concessão."
  overload: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  id: Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  langs:
  - csharp
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "Remove um patrocinador da lista patrocinador."
  syntax:
    content: public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);
    parameters:
    - id: obj
      type: System.Runtime.Remoting.Lifetime.ISponsor
      description: "Patrocinador de concessão para cancelar o registro."
  overload: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato faz a chamada por meio de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
  fullName: System.Runtime.Remoting.Lifetime.ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.LeaseState
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: LeaseState
  nameWithType: LeaseState
  fullName: System.Runtime.Remoting.Lifetime.LeaseState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor)
  nameWithType: ILease.Register(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ISponsor
  parent: System.Runtime.Remoting.Lifetime
  isExternal: false
  name: ISponsor
  nameWithType: ISponsor
  fullName: System.Runtime.Remoting.Lifetime.ISponsor
- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register(ISponsor,TimeSpan)
  nameWithType: ILease.Register(ISponsor,TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Register(ISponsor,TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew(TimeSpan)
  nameWithType: ILease.Renew(TimeSpan)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Renew(TimeSpan)
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister(ISponsor)
  nameWithType: ILease.Unregister(ISponsor)
  fullName: System.Runtime.Remoting.Lifetime.ILease.Unregister(ISponsor)
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentLeaseTime
  nameWithType: ILease.CurrentLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: CurrentState
  nameWithType: ILease.CurrentState
- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: InitialLeaseTime
  nameWithType: ILease.InitialLeaseTime
- uid: System.Runtime.Remoting.Lifetime.ILease.Register*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Register
  nameWithType: ILease.Register
- uid: System.Runtime.Remoting.Lifetime.ILease.Renew*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Renew
  nameWithType: ILease.Renew
- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: RenewOnCallTime
  nameWithType: ILease.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: ILease.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister*
  parent: System.Runtime.Remoting.Lifetime.ILease
  isExternal: false
  name: Unregister
  nameWithType: ILease.Unregister
