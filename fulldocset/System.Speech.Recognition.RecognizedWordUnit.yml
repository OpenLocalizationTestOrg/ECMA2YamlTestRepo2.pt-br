### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedWordUnit
  id: RecognizedWordUnit
  children:
  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  - System.Speech.Recognition.RecognizedWordUnit.Confidence
  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  - System.Speech.Recognition.RecognizedWordUnit.Text
  langs:
  - csharp
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit
  type: Class
  summary: "Fornece a unidade atômica de voz reconhecida."
  remarks: "Todos os resultados retornados por um mecanismo de reconhecimento são construídos de objetos RecognizedWordUnit.       Uma matriz de objetos RecognizedWordUnit está acessível para qualquer operação de reconhecimento por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>propriedade o <xref:System.Speech.Recognition.RecognizedPhrase>objeto.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>       Além de fornecer uma medida de certeza reconhecimento (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) fornece uma instância de RecognizedWordUnit: - normalizado e exata (ou lexical) representações de texto de uma palavra reconhecida.</xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> Para obter mais informações, consulte <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> </xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> </xref:System.Speech.Recognition.ReplacementText>      -Informações pronúncia usando caracteres de um alfabeto fonético com suporte, como o alfabeto fonético de internacional (IPA) ou o Universal telefone definido (UPS). Para obter mais informações, consulte <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>      -Formatação para impressão. Para obter mais informações, consulte o <xref:System.Speech.Recognition.DisplayAttributes>classe e seu <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>propriedade.</xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> </xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of RecognizedWordUnit objects. The RecognizedWordUnit objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Text: {Text}")]

      public class RecognizedWordUnit
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> classe."
  remarks: "Se `text` ou `pronunciation` são `null`, &quot;&quot;, ou <xref:System.String.Empty>e o <xref:System.Speech.Recognition.RecognizedWordUnit>é usado em uma operação de reconhecimento, o mecanismo de reconhecimento irá gerar valores apropriados na saída <xref:System.Speech.Recognition.RecognizedWordUnit>instância.</xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.String.Empty>       Construção direta de <xref:System.Speech.Recognition.RecognizedWordUnit>instâncias normalmente é usado somente durante a emulação de operações de reconhecimento usando o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>ou <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>métodos da <xref:System.Speech.Recognition.SpeechRecognitionEngine>classe e o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>ou <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>métodos de <xref:System.Speech.Recognition.SpeechRecognizer>classe.</xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       Para aplicativos reais, não diretamente construir <xref:System.Speech.Recognition.RecognizedWordUnit>, em vez disso, obtê-la por meio de <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>propriedade no <xref:System.Speech.Recognition.RecognizedPhrase>objeto.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>"
  example:
  - "The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \n  \n```c#  \nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \n{  \n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\t' };  \n  string text = _emulateTextBox.Text;  \n  string[] words = text.Split(delimiterChars);  \n  \n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \n  for (int i = 0; i < words.Length; i++)   \n  {  \n    InputWordUnits[i] = new RecognizedWordUnit(  \n        \"\",   \n        0,   \n        \"\",  \n        words[i].ToLower(),   \n        DisplayAttributes.OneTrailingSpace,   \n        new TimeSpan(),   \n        new TimeSpan());  \n  }  \n  \n  RecognitionResult rec = _recognizer.EmulateRecognize(  \n        InputWordUnits,   \n        System.Globalization.CompareOptions.IgnoreCase);  \n  if (rec == null)   \n  {  \n    MessageBox.Show(String.Format(\"Recognition emulation for {0} failed.\\n\", text));  \n  }   \n  else if (InputWordUnits.Length != rec.Words.Count)   \n  {  \n    MessageBox.Show(  \n       String.Format(\"Length mismatch: Input was {0} words, Recognition has {1} words.\\n}\"));  \n  }   \n  else   \n  {  \n    for (int i = 0; i < InputWordUnits.Length; i++)   \n    {  \n  \n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \n      {  \n        MessageBox.Show(  \n          String.Format(\"Input word {0} \\\"{1}\\\" not found. Recognition output is {2}\",  \n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \n        continue;  \n      }  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    parameters:
    - id: text
      type: System.String
      description: "O texto normalizado de uma palavra reconhecida.       Esse valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, &quot;&quot;, ou <xref:System.String>.</xref:System.String>"
    - id: confidence
      type: System.Single
      description: "Um <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;> </xref> valor de 0,0 a 1,0 indicando a certeza do reconhecimento."
    - id: pronunciation
      type: System.String
      description: "A grafia fonética de uma palavra reconhecida.       Esse valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, &quot;&quot;, ou <xref:System.String>.</xref:System.String>"
    - id: lexicalForm
      type: System.String
      description: "O texto não normalizado para uma palavra reconhecida.       Esse argumento é necessário e não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, &quot;&quot;, ou <xref:System.String>.</xref:System.String>"
    - id: displayAttributes
      type: System.Speech.Recognition.DisplayAttributes
      description: "Define o uso de espaço em branco para exibir palavras reconhecidas."
    - id: audioPosition
      type: System.TimeSpan
      description: "O local da palavra reconhecida no fluxo de áudio de entrada.       Esse valor pode ser <xref:System.TimeSpan>.</xref:System.TimeSpan>"
    - id: audioDuration
      type: System.TimeSpan
      description: "O comprimento do áudio entrada para a palavra reconhecida.       Esse valor pode ser <xref:System.TimeSpan>.</xref:System.TimeSpan>"
  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém um valor atribuído pelo identificador, que representa a probabilidade de uma palavra reconhecida corresponde a uma determinada entrada."
  remarks: "Pontuações de confiança indica a probabilidade absoluta de uma palavra foi reconhecida corretamente. Em vez disso, as pontuações de confiança fornecem um mecanismo para comparar a precisão relativa de várias alternativas de reconhecimento para uma determinada entrada. Isso facilita a retornar o resultado mais preciso de reconhecimento. Por exemplo, se uma palavra reconhecida tiver uma pontuação de confiança 0,8, isso não significa que a palavra tem uma 80% de chance de ser a correspondência correta para a entrada.  Isso significa que a palavra é mais provável de ser a correspondência correta para a entrada de outros resultados que têm confiança pontuações inferior 0,8.       Uma pontuação de confiança por conta própria não é significativa, a menos que você tenha resultados alternativos para comparação, a partir da mesma operação de reconhecimento ou anteriores reconhecimentos da mesma entrada.       Os valores retornados por confiança são relativas e exclusivo para cada mecanismo de reconhecimento. Há uma definição de como compararem valores de confiança entre dois mecanismos de reconhecimento diferente, nem a confiança da individuais <xref:System.Speech.Recognition.RecognizedWordUnit>objetos definem a <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>de <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       Um mecanismo de reconhecimento de fala pode atribuir uma baixa pontuação de confiança de entrada de fala por várias razões, incluindo interferência de plano de fundo, inarticulate fala, ou palavras inesperadas ou sequências de palavra. Se seu aplicativo estiver usando um <xref:System.Speech.Recognition.SpeechRecognitionEngine>instância, você pode modificar o nível de confiança no qual fala entrada é aceita ou rejeitada com um do <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>métodos.</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> Os limites de confiança do reconhecedor compartilhado, gerenciado pelo <xref:System.Speech.Recognition.SpeechRecognizer>, são associados a um perfil de usuário e armazenadas no registro do Windows.</xref:System.Speech.Recognition.SpeechRecognizer> Aplicativos não devem gravar as alterações no registro para as propriedades do reconhecedor compartilhado."
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "Uma medida relativa de certeza do reconhecimento correto para uma palavra. O valor é de 0.0 a 1.0, de baixa para alta confiança, respectivamente."
  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém as informações usadas para criar a saída de texto do atual de formatação <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> instância."
  remarks: "O <xref:System.Speech.Recognition.DisplayAttributes>objeto retornado pela propriedade DisplayAttributes Especifica os espaços à esquerda e à direita a ser usada com uma determinada palavra, se houver.</xref:System.Speech.Recognition.DisplayAttributes>       Para obter mais informações sobre como usar essas informações de formatação, consulte o <xref:System.Speech.Recognition.DisplayAttributes>enumeração.</xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the DisplayAttributes property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n        ReadOnlyCollection<RecognizedWordUnit> words,   \n        WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }  \n    else if (type == WordType.Pronunciation)   \n    {  \n       wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n         String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "Especifica o uso de espaço em branco para exibir o conteúdo de um <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> objeto."
  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  id: LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o texto não normalizado de uma palavra reconhecida."
  remarks: "Na maioria dos casos, os valores retornados por <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>e LexicalForm são idênticos.</xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> No entanto, os mecanismos de reconhecimento podem usar normalização de fala para retornar mais amigável ou colloquial representações de texto de entrada de áudio.       Normalização de fala é o uso de construções especiais ou símbolos para expressar fala por escrito. Por exemplo, a normalização pode substituir as palavras faladas &quot;um dólar e dezesseis centavos&quot; com &quot;$1.16&quot; no texto de saída."
  example:
  - "The following example shows a utility routine that generates text in one of three formats: lexical (using LexicalForm), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n         ReadOnlyCollection<RecognizedWordUnit> words,   \n         WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n    wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string LexicalForm { get; }
    return:
      type: System.String
      description: "Retorna um <xref:System.String>que contém o texto de uma palavra reconhecido, sem nenhuma normalização.</xref:System.String>"
  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém a grafia fonética de uma palavra reconhecida."
  remarks: "O conteúdo de pronúncia indica que o mecanismo de reconhecimento de fala usado para corresponder à entrada de voz para um dos seus carregado de pronúncia <xref:System.Speech.Recognition.Grammar>objetos.</xref:System.Speech.Recognition.Grammar> Pronúncia pode ser definida no léxico interno do mecanismo de reconhecimento de fala, em um documento de léxico que está vinculado a partir de uma gramática reconhecimento em um carregado <xref:System.Speech.Recognition.Grammar>objeto ou embutido em uma gramática reconhecimento em um carregado <xref:System.Speech.Recognition.Grammar>objeto.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar> Um mecanismo de reconhecimento de fala também pode criar pronúncia palavras incomuns cuja pronúncia não está definida em um dicionário ou gramática à qual o mecanismo de reconhecimento de fala no momento tiver acesso.       Muitas fontes Unicode baseados no Windows, como Courier New, dão suporte à exibição de cadeias de caracteres de IPA. Para obter mais informações, consulte [alfabeto fonético de International](http://go.microsoft.com/fwlink/?LinkId=58363)."
  example:
  - "The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using Pronunciation). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Pronunciation { get; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres de um alfabeto fonético com suporte, como o alfabeto fonético de internacional (IPA) ou o Universal telefone definido (UPS)."
  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o texto normalizado para uma palavra reconhecida."
  remarks: "Na maioria dos casos, os valores retornados pelo texto e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>serão idênticas.</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> No entanto, os mecanismos de reconhecimento podem usar normalização de fala para retornar mais amigável ou colloquial representações de texto de entrada de áudio.       Normalização de fala é o uso de construções especiais ou símbolos para expressar fala por escrito. Por exemplo, a normalização pode substituir as palavras faladas &quot;um dólar e dezesseis centavos&quot; com &quot;$1.16&quot; no texto de saída."
  example:
  - "The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using Text), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n           String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a saída de texto normalizado para uma determinada palavra de entrada."
  overload: System.Speech.Recognition.RecognizedWordUnit.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit.RecognizedWordUnit
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
