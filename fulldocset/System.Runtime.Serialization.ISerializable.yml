### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Permite que um objeto controlar sua própria serialização e desserialização."
  remarks: "Qualquer classe que pode ser serializado deve ser marcado com o <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Se precisar de uma classe controlar o processo de serialização, ela pode implementar a interface ISerializable. O <xref:System.Runtime.Serialization.Formatter>chama o <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>em tempo de serialização e preenche fornecido <xref:System.Runtime.Serialization.SerializationInfo>com todos os dados necessários para representar o objeto.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> O <xref:System.Runtime.Serialization.Formatter>cria um <xref:System.Runtime.Serialization.SerializationInfo>com o tipo de objeto no gráfico.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Objetos que precisam enviar proxies para si mesmos podem usar o <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>e <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>métodos em <xref:System.Runtime.Serialization.SerializationInfo>para alterar as informações transmitidas.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       No caso de herança de classe, é possível serializar uma classe que deriva de uma classe base que implementa ISerializable. Nesse caso, a classe derivada deve chamar a implementação da classe base de <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>dentro de sua implementação de <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> Caso contrário, os dados da classe base não serão serializados.       A interface ISerializable implica um construtor com o construtor de assinatura (<xref:System.Runtime.Serialization.SerializationInfo> informações, <xref:System.Runtime.Serialization.StreamingContext>contexto).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> Em tempo de desserialização, o construtor atual é chamado somente depois que os dados no <xref:System.Runtime.Serialization.SerializationInfo>desserializados pelo formatador.</xref:System.Runtime.Serialization.SerializationInfo> Em geral, este construtor deve ser protegido se a classe não for fechada.       A ordem na qual os objetos são desserializados não pode ser garantida. Por exemplo, se um tipo referencia um tipo que ainda não foi desserializado, ocorrerá uma exceção. Se você estiver criando tipos que têm essas dependências, você pode contornar o problema com a implementação de `IDeserializationCallback` interface e o `OnDeserialization` método.       A arquitetura de serialização trata tipos de objetos que estendem <xref:System.MarshalByRefObject>os mesmos tipos que estendem <xref:System.Object>.</xref:System.Object> </xref:System.MarshalByRefObject> Esses tipos podem ser marcados com o <xref:System.SerializableAttribute>e implementa a interface ISerializable como qualquer outro tipo de objeto.</xref:System.SerializableAttribute> O estado do objeto será capturado e persistente para o fluxo.       Quando esses tipos estão sendo usados, <xref:System.Runtime.Remoting>a infraestrutura de comunicação remota fornece um substituto que ocupa o lugar de serialização típica e serializa em vez disso, um proxy para <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> </xref:System.Runtime.Remoting> Um substituto é um auxiliar que sabe como serializar e desserializar objetos de um tipo específico. O proxy, invisível para o usuário na maioria dos casos, será do tipo <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       Como um padrão de design geral, não seria comum uma classe ser marcado com o atributo serializable e estender <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> Os desenvolvedores devem pensar cuidadosamente os possíveis cenários de serialização e a comunicação remota ao combinar essas duas características. Um exemplo em que isso pode ser aplicável é <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> Embora a classe base de <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) se estende de <xref:System.MarshalByRefObject>, é possível capturar o estado de um <xref:System.IO.MemoryStream>e restaurá-lo à vontade.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> Portanto, pode ser significativo para serializar o estado deste fluxo em um banco de dados e restaurá-lo posteriormente em tempo. No entanto, quando usado por meio de comunicação remota, um objeto desse tipo seria delegado.       Para obter mais informações sobre a serialização de classes que estendem <xref:System.MarshalByRefObject>, consulte <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> Para obter mais informações sobre como implementar ISerializable, consulte [serialização personalizada](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Preenche uma <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> com os dados necessários para serializar o objeto de destino."
  remarks: "Todos os objetos que estão incluídos no <xref:System.Runtime.Serialization.SerializationInfo>automaticamente são rastreadas e serializado pelo formatador.</xref:System.Runtime.Serialization.SerializationInfo>       Código que chama GetObjectData requer o <xref:System.Security.Permissions.SecurityPermission>para fornecer serviços de serialização.</xref:System.Security.Permissions.SecurityPermission> Enumeração associada: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      > [!NOTE] > Não há garantia de que esse método será chamado apenas uma vez por instância do objeto durante a serialização. Portanto, o método deve ser implementado de forma que o comportamento será o mesmo, independentemente do número de vezes que ele é chamado."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> para popular com dados."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "O destino (consulte <xref:System.Runtime.Serialization.StreamingContext>) desta serialização.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
