### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Define um objeto de ponto de conexão que permite um controle de servidor que atua como um provedor para formar uma conexão com um consumidor."
  remarks: "Em cada conexão de Web Parts entre dois controles de servidor, cada controle deve ter (entre outros requisitos de) um objeto de ponto de conexão associado que permite que ele se conectar a outro controle e fornecer ou consumir dados, dependendo se o controle é designado como o provedor ou o consumidor para a conexão. Um <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objeto em geral contém os detalhes de como um controle pode se conectar a outro controle e o tipo de dados pode compartilhar.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Para um controle que atua como o provedor em uma conexão, o seu ponto de conexão deve ser um objeto de ProviderConnectionPoint. Para obter detalhes sobre pontos de conexão e conexões de Web Parts, consulte os tópicos listados na seção Consulte também abaixo.       Para criar um objeto de ProviderConnectionPoint, várias etapas são necessárias: 1.  Crie uma interface. Quando um provedor compartilhamentos de dados com um consumidor, ele faz isso obtendo uma instância de uma interface, e retornar a instância com um consumidor.      2.  Implemente a interface em um provedor. Um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor (qualquer tipo de controle de servidor em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona pode ser usada) que será o provedor deve implementar a interface criada na primeira etapa.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Identificar um método de retorno de chamada. Um método no provedor deve ser identificado como o método de retorno de chamada para estabelecer uma conexão. Esse método retorna uma instância da interface implementada com um consumidor. A abordagem de Web Parts para identificar um método de retorno de chamada no provedor é adicionar um `ConnectionProvider` atributo de metadados (definido pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe) para o método que retorna a instância da interface.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Quando o atributo é adicionado, o único parâmetro necessário é um nome de exibição a ser usado para o ponto de conexão do provedor. Parâmetros opcionais também podem ser adicionados, como uma ID para o ponto de conexão.       Depois que um controle foi equipado para atuar como um provedor, o controle pode participar de conexões (supondo que um controle de consumidor da mesma forma está equipado e disponível). Para criar uma conexão estática, declarativa na marcação de uma página da Web, os desenvolvedores podem usar o `<asp:webpartconnection>` elemento. Se o `ConnectionProvider` atributo no código-fonte provedor que identifica o método de retorno de chamada especifica uma ID para o ponto de conexão e, em seguida, esse valor deve ser atribuído ao `ProviderConnectionPointID` atributo o `<asp:webpartconnection>` elemento em uma página. Um motivo que um desenvolvedor pode especificar uma ID para um ponto de conexão do provedor é se houver vários pontos de conexão no controle do provedor. Se uma ID não é especificada para o ponto de conexão do provedor no controle de provedor, um valor não precisa ser atribuído ao `ProviderConnectionPointID` atributo na página, porque a conexão será criada usando um valor padrão obtido o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Para criar uma conexão no código, os desenvolvedores devem criar um novo objeto de ProviderConnectionPoint chamando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>método e transmitindo a ele a ID do controle do provedor, juntamente com a ID ou o índice do objeto ProviderConnectionPoint definido no controle do provedor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> O objeto retornado de ProviderConnectionPoint, junto com uma referência para o controle de provedor, uma referência para o controle de consumidor e um correspondente <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>de objeto, terão passado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método para criar um novo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Embora os desenvolvedores podem usar pontos de conexão do provedor como parte do estabelecimento de conexões declarativamente ou por meio de programação, os usuários também podem interagir com pontos de conexão do provedor para estabelecer conexões por meio da interface do usuário (IU). Se os desenvolvedores declarar um <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle em uma página da Web, ele fornece uma interface de usuário em tempo de execução para que os usuários criem conexões.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Se os usuários optarem controle consumidor como ponto de partida para estabelecer a conexão clicando em seu conectar verbo (eles também podem escolher o provedor; não há nenhuma diferença na conexão resultante), a interface do usuário, eles verão um controle de lista suspensa com o nome para exibição do ponto de conexão do provedor disponível (ou pontos se houver várias). Os usuários devem selecionar um ponto de conexão do provedor para criar uma conexão.       Um objeto de ProviderConnectionPoint associa diretamente em um controle específico de provedor e armazena os detalhes sobre uma conexão nas propriedades do qual que ela herda da <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> base Por exemplo, no herdadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>propriedade, um ponto de conexão do provedor mantém o tipo de interface retornado pelo provedor.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se o provedor e consumidor em uma conexão que ambos funcionam com o mesmo tipo de interface, os controles são compatíveis e é capaz de formar uma conexão direta. Se o provedor e consumidor não podem funcionar com o mesmo tipo de interface, elas são incompatíveis e deve usar um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto para converter o ponto de conexão de provedor <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>valor em um tipo que o consumidor pode trabalhar com.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Outra propriedade herdada importante é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>durante a criação de conexões do ponto de propriedade, que fornece um nome amigável para exibir na interface de usuário, os usuários podem escolher uma conexão de provedor.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> O nome de exibição é o parâmetro necessário quando os desenvolvedores de adicionar um `ConnectionProvider` de atributo para o método de retorno de chamada em um controle de provedor. O herdadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>propriedade também é útil, conforme indicado acima, porque ele fornece um identificador exclusivo para um ponto de conexão do provedor que um provedor tem vários pontos de conexão.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Um provedor pode ter vários objetos de ProviderConnectionPoint definidos nele e nesse caso, quando os desenvolvedores de adicionar o `ConnectionProvider` atributo para um método, eles devem especificar um valor de ID para distinguir cada ponto de conexão. Uma outra propriedade herdada notável é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>propriedade, que indica se um ponto de conexão do provedor pode se conectar simultaneamente para vários consumidores.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> O valor da propriedade é `true` por padrão para pontos de conexão do provedor (enquanto o padrão é `false` para pontos de conexão do consumidor).       A classe de ProviderConnectionPoint adiciona vários métodos exclusivos para os membros que ele herda da <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> de O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>método recupera uma instância da interface que o método de retorno de chamada será retornado para os consumidores.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>método recupera as interfaces de consumidor adicionais que fazem parte de uma conexão existente, mas não as interfaces que são usadas para estabelecer a conexão.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> classe."
  remarks: "O construtor ProviderConnectionPoint para a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>classe simplesmente chama o construtor base, transmitindo a ele os vários parâmetros e inicializar a classe base.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       O construtor de classe base verifica um número de parâmetros para um ponto de conexão e pode gerar várias exceções. Para obter uma lista de exceções possíveis, consulte a seção de exceções.       Você pode chamar o construtor ProviderConnectionPoint para criar sua própria instância da <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> No entanto, nos casos em que você simplesmente estabelecer uma conexão e não estende a classe, você deve chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>método para retornar um objeto de ponto de conexão existente de um provedor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "O método no controle do provedor que retorna uma instância da interface para os consumidores para estabelecer uma conexão."
    - id: interfaceType
      type: System.Type
      description: "O <xref:System.Type>da interface que atua como o provedor para consumidores.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "O <xref:System.Type>do controle provedor ao qual o ponto de conexão do provedor está associado.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Um nome para exibição amigável para o ponto de conexão do provedor exibido aos usuários na interface do usuário de conexão (IU)."
    - id: id
      type: System.String
      description: "Um identificador exclusivo para o ponto de conexão do provedor."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Um valor booliano que indica se o ponto de conexão do provedor pode ter várias conexões simultâneas com os consumidores."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>não é o mesmo tipo que o controle de provedor (ou uma classe válida derivada)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Invoca o método de retorno de chamada em um controle de provedor que obtém uma instância da interface para retornar para os consumidores."
  remarks: "Esse método retorna um objeto do controle de provedor que é uma instância da interface usada para estabelecer uma conexão. O tipo de objeto será o tipo da interface implementada. Por exemplo, duas interfaces que são implementadas para conexões no conjunto de controle de Web Parts <xref:System.Web.UI.WebControls.WebParts.IWebPartField>e <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> Quando o método GetObject é chamado em um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>do objeto, se o provedor associado implementa uma dessas interfaces, o objeto retornado será o mesmo tipo.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       O método GetObject é chamado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objetos quando uma conexão está sendo ativado.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Essa é uma etapa crítica que inicia uma conexão e inicia o processo que permite que dois controles para compartilhar dados.       O controle de consumidor em uma conexão deve ser capaz de trabalhar com o mesmo tipo de interface como o provedor. Se isso não acontecer, os controles são incompatíveis e um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto deve ser usado para estabelecer uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controle que atua como o provedor em uma conexão de Web Parts."
    return:
      type: System.Object
      description: "Um <xref:System.Object>que é uma instância da interface de um provedor retorna para os consumidores para estabelecer uma conexão.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um conjunto opcional de interfaces secundárias que podem ter suporte por um ponto de conexão do provedor."
  remarks: "Um objeto de ponto de conexão do provedor sempre tem uma interface padrão que é usada para estabelecer uma conexão com os consumidores. Uma instância da interface padrão é recuperada por uma chamada a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>método em um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       No entanto, alguns controles provedor implementar várias interfaces para fornecer aos clientes como parte de uma conexão. Essas interfaces, o que não são o padrão usado para estabelecer uma conexão, são chamadas de interfaces secundárias. O método GetSecondaryInterfaces fornece uma maneira de retornar uma coleção de referências às interfaces secundárias, assim como o <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>método retorna uma referência para a interface padrão.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controle que atua como o provedor em uma conexão de Web Parts."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> de interfaces adicionais fornecidos pelo controle que atua como um provedor."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
