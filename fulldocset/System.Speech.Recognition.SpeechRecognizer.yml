### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SpeechRecognizer
  id: SpeechRecognizer
  children:
  - System.Speech.Recognition.SpeechRecognizer.#ctor
  - System.Speech.Recognition.SpeechRecognizer.AudioFormat
  - System.Speech.Recognition.SpeechRecognizer.AudioLevel
  - System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated
  - System.Speech.Recognition.SpeechRecognizer.AudioPosition
  - System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred
  - System.Speech.Recognition.SpeechRecognizer.AudioState
  - System.Speech.Recognition.SpeechRecognizer.AudioStateChanged
  - System.Speech.Recognition.SpeechRecognizer.Dispose
  - System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)
  - System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted
  - System.Speech.Recognition.SpeechRecognizer.Enabled
  - System.Speech.Recognition.SpeechRecognizer.Grammars
  - System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)
  - System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)
  - System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted
  - System.Speech.Recognition.SpeechRecognizer.MaxAlternates
  - System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition
  - System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition
  - System.Speech.Recognition.SpeechRecognizer.RecognizerInfo
  - System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached
  - System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate
  - System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)
  - System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)
  - System.Speech.Recognition.SpeechRecognizer.SpeechDetected
  - System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized
  - System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected
  - System.Speech.Recognition.SpeechRecognizer.SpeechRecognized
  - System.Speech.Recognition.SpeechRecognizer.State
  - System.Speech.Recognition.SpeechRecognizer.StateChanged
  - System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars
  - System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)
  langs:
  - csharp
  name: SpeechRecognizer
  nameWithType: SpeechRecognizer
  fullName: System.Speech.Recognition.SpeechRecognizer
  type: Class
  summary: "Fornece acesso para o serviço de reconhecimento de fala compartilhado disponível na área de trabalho do Windows."
  remarks: "Aplicativos usam o reconhecedor compartilhado para acessar o reconhecimento de fala do Windows. Use o objeto SpeechRecognizer para adicionar à experiência do usuário de fala do Windows.       Essa classe fornece controle sobre os vários aspectos do processo de reconhecimento de fala: - para gerenciar as gramáticas de reconhecimento de fala, use o <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>e <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> </xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A> </xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A> </xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> </xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>      -Para obter informações sobre a fala atual operações de reconhecimento, assinar o SpeechRecognizer <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>eventos.</xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>      -Para exibir ou modificar o número de resultados alternativa retorna o reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> O reconhecedor retorna resultados de reconhecimento em um <xref:System.Speech.Recognition.RecognitionResult>objeto.</xref:System.Speech.Recognition.RecognitionResult>      -Para acessar ou monitorar o estado do reconhecedor compartilhado, use o <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, e <xref:System.Speech.Recognition.SpeechRecognizer.State%2A>Propriedades e o <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged>, e <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged>eventos.</xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> </xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged> </xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred> </xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated> </xref:System.Speech.Recognition.SpeechRecognizer.State%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> </xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> </xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> </xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> </xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> </xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>      -Para sincronizar as alterações para o reconhecedor, use o <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> O reconhecedor compartilhado usa mais de um thread para executar tarefas.      -Para emular a entrada para o reconhecedor compartilhado, use o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>e <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>métodos.</xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>       A configuração do reconhecimento de fala do Windows é gerenciada pelo uso do **propriedades de fala** na caixa de diálogo de **painel de controle**. Essa interface é usada para selecionar o mecanismo de reconhecimento de fala de área de trabalho padrão e idioma, o dispositivo de áudio de entrada e o comportamento do modo de suspensão do reconhecimento de fala. Se a configuração do reconhecimento de fala do Windows for alterada enquanto o aplicativo está em execução, (por exemplo, se o reconhecimento de fala está desabilitado ou o idioma de entrada for alterado), a alteração afeta todos os objetos de SpeechRecognizer.       Para criar um reconhecedor de fala no processo é independente do reconhecimento de fala do Windows, use a <xref:System.Speech.Recognition.SpeechRecognitionEngine>classe.</xref:System.Speech.Recognition.SpeechRecognitionEngine>      > [!NOTE] > Sempre chamada <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A>antes de liberar sua última referência para o reconhecedor de fala.</xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chama o objeto de reconhecedor `Finalize` método."
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.  If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition. If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Threading;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n  \n    // Indicate whether the asynchronous emulate recognition  \n    // operation has completed.  \n    static bool completed;  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize an instance of the shared recognizer.  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n  \n        // Create and load a sample grammar.  \n        Grammar testGrammar =  \n          new Grammar(new GrammarBuilder(\"testing testing\"));  \n        testGrammar.Name = \"Test Grammar\";  \n        recognizer.LoadGrammar(testGrammar);  \n  \n        // Attach event handlers for recognition events.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(  \n            SpeechRecognizedHandler);  \n        recognizer.EmulateRecognizeCompleted +=  \n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \n            EmulateRecognizeCompletedHandler);  \n  \n        completed = false;  \n  \n        // Start asynchronous emulated recognition.   \n        // This matches the grammar and generates a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing testing\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n  \n        completed = false;  \n  \n        // Start asynchronous emulated recognition.  \n        // This does not match the grammar or generate a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing one two three\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void SpeechRecognizedHandler(  \n      object sender, SpeechRecognizedEventArgs e)  \n    {  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(\"Recognition result = {0}\",  \n          e.Result.Text ?? \"<no text>\");  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No recognition result\");  \n      }  \n    }  \n  \n    // Handle the SpeechRecognizeCompleted event.  \n    static void EmulateRecognizeCompletedHandler(  \n      object sender, EmulateRecognizeCompletedEventArgs e)  \n    {  \n      if (e.Result == null)  \n      {  \n        Console.WriteLine(\"No result generated.\");  \n      }  \n  \n      // Indicate the asynchronous operation is complete.  \n      completed = true;  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public class SpeechRecognizer : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: SpeechRecognizer()
  nameWithType: SpeechRecognizer.SpeechRecognizer()
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechRecognizer()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> classe."
  remarks: "Cada <xref:System.Speech.Recognition.SpeechRecognizer>objeto mantém um conjunto separado de gramáticas de reconhecimento de fala.</xref:System.Speech.Recognition.SpeechRecognizer>"
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition. If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Threading;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n  \n    // Indicate whether the asynchronous emulate recognition  \n    // operation has completed.  \n    static bool completed;  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize an instance of the shared recognizer.  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n  \n        // Create and load a sample grammar.  \n        Grammar testGrammar =  \n          new Grammar(new GrammarBuilder(\"testing testing\"));  \n        testGrammar.Name = \"Test Grammar\";  \n        recognizer.LoadGrammar(testGrammar);  \n  \n        // Attach event handlers for recognition events.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(  \n            SpeechRecognizedHandler);  \n        recognizer.EmulateRecognizeCompleted +=  \n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \n            EmulateRecognizeCompletedHandler);  \n  \n        completed = false;  \n  \n        // Start asynchronous emulated recognition.   \n        // This matches the grammar and generates a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing testing\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n  \n        completed = false;  \n  \n        // Start asynchronous emulated recognition.  \n        // This does not match the grammar or generate a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing one two three\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void SpeechRecognizedHandler(  \n      object sender, SpeechRecognizedEventArgs e)  \n    {  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(\"Recognition result = {0}\",  \n          e.Result.Text ?? \"<no text>\");  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No recognition result\");  \n      }  \n    }  \n  \n    // Handle the SpeechRecognizeCompleted event.  \n    static void EmulateRecognizeCompletedHandler(  \n      object sender, EmulateRecognizeCompletedEventArgs e)  \n    {  \n      if (e.Result == null)  \n      {  \n        Console.WriteLine(\"No result generated.\");  \n      }  \n  \n      // Indicate the asynchronous operation is complete.  \n      completed = true;  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public SpeechRecognizer ();
    parameters: []
  overload: System.Speech.Recognition.SpeechRecognizer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioFormat
  id: AudioFormat
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioFormat
  nameWithType: SpeechRecognizer.AudioFormat
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioFormat
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o formato de áudio sendo recebido pelo reconhecedor de fala."
  syntax:
    content: public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }
    return:
      type: System.Speech.AudioFormat.SpeechAudioFormatInfo
      description: "O formato de áudio de entrada para o reconhecedor de fala ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a entrada para o reconhecedor não está configurada."
  overload: System.Speech.Recognition.SpeechRecognizer.AudioFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioLevel
  id: AudioLevel
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioLevel
  nameWithType: SpeechRecognizer.AudioLevel
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioLevel
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o nível do áudio sendo recebido pelo reconhecedor de fala."
  syntax:
    content: public int AudioLevel { get; }
    return:
      type: System.Int32
      description: "O nível de áudio de entrada para o reconhecedor de fala, de 0 a 100."
  overload: System.Speech.Recognition.SpeechRecognizer.AudioLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated
  id: AudioLevelUpdated
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioLevelUpdated
  nameWithType: SpeechRecognizer.AudioLevelUpdated
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor compartilhado relata o nível de sua entrada de áudio."
  remarks: "O reconhecedor gera esse evento várias vezes por segundo. A frequência com que o evento é gerado depende do computador no qual o aplicativo está sendo executado.       Para obter o nível de áudio no momento do evento, use a <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A>propriedade de <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs> associado</xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> Para obter o nível atual de áudio de entrada para o reconhecedor, use o reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>       Quando você cria um delegado para um `AudioLevelUpdated` eventos, identificar o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example adds a handler for the `AudioLevelUpdated` event to a <xref:System.Speech.Recognition.SpeechRecognizer> object. The handler outputs the new audio level to the console.  \n  \n```c#  \nprivate SpeechRecognizer recognizer;  \n  \n// Initialize the SpeechRecognizer object.   \nprivate void Initialize()  \n{  \n  recognizer = new SpeechRecognizer();  \n  \n  // Add an event handler for the AudioLevelUpdated event.  \n  recognizer.AudioLevelUpdated +=   \n    new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  \n  \n  // Add other initialization code here.  \n  \n}  \n  \n// Write the audio level to the console when the AudioLevelUpdated event is raised.  \nvoid recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  \n{  \n  Console.WriteLine(\"The audio level is now: {0}.\", e.AudioLevel);  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.AudioLevelUpdatedEventArgs> AudioLevelUpdated;
    return:
      type: System.EventHandler{System.Speech.Recognition.AudioLevelUpdatedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioPosition
  id: AudioPosition
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioPosition
  nameWithType: SpeechRecognizer.AudioPosition
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioPosition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o local atual no fluxo de áudio que está sendo gerado pelo dispositivo que está fornecendo a entrada para o reconhecedor de fala."
  remarks: "O reconhecedor compartilhado recebe entrada, enquanto o reconhecimento de fala de área de trabalho está em execução.       O `AudioPosition` propriedade faz referência a posição do dispositivo de entrada no seu fluxo de áudio gerado. Por outro lado, o <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>propriedade faz referência a posição do reconhecedor no processamento de entrada de áudio.</xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> Essas posições podem ser diferentes.  Por exemplo, se tiver recebido o reconhecedor de entrada para o qual não tem ainda gerado um resultado de reconhecimento e o valor da <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>propriedade é menor que o valor da propriedade AudioPosition.</xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>"
  example:
  - "In the following example, the shared speech recognizer uses a dictation grammar to match speech input. A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event writes to the console the AudioPosition, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> when the speech recognizer detects speech at its input.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n      // Add handlers for events.  \n      recognizer.LoadGrammarCompleted +=   \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n      recognizer.SpeechRecognized +=   \n        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n      recognizer.StateChanged +=   \n        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n      recognizer.SpeechDetected +=   \n        new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  \n  \n      // Create a dictation grammar.  \n      Grammar dictation = new DictationGrammar();  \n      dictation.Name = \"Dictation\";  \n  \n      // Load the grammar object to the recognizer.  \n      recognizer.LoadGrammarAsync(dictation);  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Gather information about detected speech and write it to the console.  \n    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  \n    {  \n      Console.WriteLine();  \n      Console.WriteLine(\"Speech detected:\");  \n      Console.WriteLine(\"  Audio level: \" + recognizer.AudioLevel);  \n      Console.WriteLine(\"  Audio position: \" + recognizer.AudioPosition);  \n      Console.WriteLine(\"  Recognizer audio position: \" + recognizer.RecognizerAudioPosition);  \n    }  \n  \n    // Write the text of the recognition result to the console.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {   \n      Console.WriteLine(\"Speech recognized: \" + e.Result.Text);  \n  \n      // Add event handler code here.  \n    }  \n  \n    // Write the name of the loaded grammar to the console.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n    }  \n  \n    // Put the shared speech recognizer into \"listening\" mode.  \n    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public TimeSpan AudioPosition { get; }
    return:
      type: System.TimeSpan
      description: "O local atual no fluxo entrada áudio do reconhecedor de fala através do qual o recebimento de entrada."
  overload: System.Speech.Recognition.SpeechRecognizer.AudioPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred
  id: AudioSignalProblemOccurred
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioSignalProblemOccurred
  nameWithType: SpeechRecognizer.AudioSignalProblemOccurred
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor encontra um problema no sinal de áudio."
  remarks: "Para obter o problema, use a <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A>propriedade de <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs> associado</xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A>       Quando você cria um delegado para um `AudioSignalProblemOccurred` eventos, identificar o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example defines an event handler that gathers information about an `AudioSignalProblemOccurred` event.  \n  \n```  \nprivate SpeechRecognizer recognizer;  \n  \n// Initialize the speech recognition engine.  \nprivate void Initialize()  \n{  \n  recognizer = new SpeechRecognizer();  \n  \n  // Add a handler for the AudioSignalProblemOccurred event.  \n  recognizer.AudioSignalProblemOccurred +=   \n    new EventHandler<AudioSignalProblemOccurredEventArgs>(  \n      recognizer_AudioSignalProblemOccurred);  \n}  \n  \n// Gather information when the AudioSignalProblemOccurred event is raised.  \nvoid recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  \n{  \n  StringBuilder details = new StringBuilder();  \n  \n  details.AppendLine(\"Audio signal problem information:\");  \n  details.AppendFormat(  \n    \" Audio level:               {0}\" + Environment.NewLine +  \n    \" Audio position:            {1}\" + Environment.NewLine +  \n    \" Audio signal problem:      {2}\" + Environment.NewLine +  \n    \" Recognition engine audio position: {3}\" + Environment.NewLine,  \n    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  \n    e.recoEngineAudioPosition);  \n  \n  // Insert additional event handler code here.  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.AudioSignalProblemOccurredEventArgs> AudioSignalProblemOccurred;
    return:
      type: System.EventHandler{System.Speech.Recognition.AudioSignalProblemOccurredEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioState
  id: AudioState
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioState
  nameWithType: SpeechRecognizer.AudioState
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioState
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o estado do áudio sendo recebido pelo reconhecedor de fala."
  syntax:
    content: public System.Speech.Recognition.AudioState AudioState { get; }
    return:
      type: System.Speech.Recognition.AudioState
      description: "O estado da entrada de áudio para o reconhecedor de fala."
  overload: System.Speech.Recognition.SpeechRecognizer.AudioState*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.AudioStateChanged
  id: AudioStateChanged
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: AudioStateChanged
  nameWithType: SpeechRecognizer.AudioStateChanged
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioStateChanged
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando as alterações de estado no áudio sendo recebidos pelo reconhecedor."
  remarks: "Para obter o estado de áudio no momento do evento, use a <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A>propriedade de <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</xref:System.Speech.Recognition.AudioStateChangedEventArgs> associado</xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> Para obter o estado atual de áudio de entrada para o reconhecedor, use o reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> Para obter mais informações sobre o estado de áudio, consulte o <xref:System.Speech.Recognition.AudioState>enumeração.</xref:System.Speech.Recognition.AudioState>       Quando você cria um delegado para um `AudioStateChanged` eventos, identificar o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example uses a handler for the `AudioStateChanged` event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> to the console each time it changes using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n        // Create and load a grammar.  \n        Grammar dictation = new DictationGrammar();  \n        dictation.Name = \"Dictation Grammar\";  \n        recognizer.LoadGrammar(dictation);  \n  \n        // Attach event handlers.  \n        recognizer.AudioStateChanged +=  \n          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n        recognizer.StateChanged +=  \n          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n  \n    // Handle the AudioStateChanged event.  \n    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  \n    {  \n      Console.WriteLine(\"The new audio state is: \" + e.AudioState);  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      if (e.Result != null && e.Result.Text != null)  \n      {  \n        Console.WriteLine();  \n        Console.WriteLine(\"  Recognized text =  {0}\", e.Result.Text);  \n        Console.WriteLine();  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"  Recognized text not available.\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Done.\");  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Put the recognizer into Listening mode.  \n    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        Console.WriteLine();  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.AudioStateChangedEventArgs> AudioStateChanged;
    return:
      type: System.EventHandler{System.Speech.Recognition.AudioStateChangedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.Dispose
  id: Dispose
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: Dispose()
  nameWithType: SpeechRecognizer.Dispose()
  fullName: System.Speech.Recognition.SpeechRecognizer.Dispose()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Descarta o <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> objeto."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Speech.Recognition.SpeechRecognizer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SpeechRecognizer.Dispose(Boolean)
  fullName: System.Speech.Recognition.SpeechRecognizer.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Descarta o <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> recursos de objeto e as versões usados durante a sessão."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Speech.Recognition.SpeechRecognizer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)
  id: EmulateRecognize(System.String)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognize(String)
  nameWithType: SpeechRecognizer.EmulateRecognize(String)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Emula a entrada de uma frase para o reconhecedor de fala compartilhado, usando texto em vez de áudio para o reconhecimento de fala síncrona."
  remarks: "Os identificadores que acompanham o Vista e Windows 7 Ignorar maiusculas e minúsculas e largura de caracteres ao aplicar regras de gramática para a expressão de entrada. Para obter mais informações sobre esse tipo de comparação, consulte a <xref:System.Globalization.CompareOptions>enumeração de valores <xref:System.Globalization.CompareOptions>e <xref:System.Globalization.CompareOptions>.</xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> Os identificadores também ignoram linhas novas e espaço em branco extra e tratam a pontuação como entrada literal."
  example:
  - "The following example loads a sample grammar to the shared recognizer and emulates input to the recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition. If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> always returns null.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n  \n    static void Main(string[] args)  \n    {  \n      // Initialize an instance of the shared recognizer.  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n        // Create and load a sample grammar.  \n        Grammar testGrammar =  \n          new Grammar(new GrammarBuilder(\"testing testing\"));  \n        testGrammar.Name = \"Test Grammar\";  \n  \n        recognizer.LoadGrammar(testGrammar);  \n  \n        RecognitionResult result;  \n  \n        // This EmulateRecognize call matches the grammar and returns a  \n        // recognition result.  \n        result = recognizer.EmulateRecognize(\"testing testing\");  \n        OutputResult(result);  \n  \n        // This EmulateRecognize call does not match the grammar and   \n        // returns null.  \n        result = recognizer.EmulateRecognize(\"testing one two three\");  \n        OutputResult(result);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Output information about a recognition result to the console.  \n    private static void OutputResult(RecognitionResult result)  \n    {  \n      if (result != null)  \n      {  \n        Console.WriteLine(\"Recognition result = {0}\",  \n          result.Text ?? \"<no text>\");  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No recognition result\");  \n      }  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);
    parameters:
    - id: inputText
      type: System.String
      description: "A entrada para a operação de reconhecimento."
    return:
      type: System.Speech.Recognition.RecognitionResult
      description: "O resultado de reconhecimento para a operação de reconhecimento, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a operação não for bem-sucedida ou o reconhecimento de fala do Windows está no **em espera** estado."
  overload: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  id: EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognize(RecognizedWordUnit[],CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognize(RecognizedWordUnit[],CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(RecognizedWordUnit[],CompareOptions)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Emula a entrada de palavras específicas para o reconhecedor de fala compartilhado, usando texto em vez de áudio para reconhecimento de fala síncrona e especifica como o reconhecedor trata Unicode comparação entre as palavras e as gramáticas de reconhecimento de fala carregado."
  remarks: "Esse método cria um <xref:System.Speech.Recognition.RecognitionResult>objeto usando as informações fornecidas a `wordUnits` parâmetro.</xref:System.Speech.Recognition.RecognitionResult>       O reconhecedor usa o `compareOptions` quando ele aplica regras da gramática a frase de entrada. Os identificadores que acompanham o Vista e Windows 7 Ignorar maiusculas e minúsculas, se o <xref:System.Globalization.CompareOptions>ou <xref:System.Globalization.CompareOptions>valor está presente.</xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> Os identificadores sempre ignorar a largura de caractere e nunca ignorar o tipo Kana. Os identificadores também ignorar linhas novas e espaço em branco extra e trata pontuação como entrada literal. Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions>enumeração.</xref:System.Globalization.CompareOptions>"
  syntax:
    content: public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);
    parameters:
    - id: wordUnits
      type: System.Speech.Recognition.RecognizedWordUnit[]
      description: "Uma matriz de unidades do word que contém a entrada para a operação de reconhecimento."
    - id: compareOptions
      type: System.Globalization.CompareOptions
      description: "Uma combinação bit a bit dos valores de enumeração que descreve o tipo de comparação a ser usado para a operação de reconhecimento emulado."
    return:
      type: System.Speech.Recognition.RecognitionResult
      description: "O resultado de reconhecimento para a operação de reconhecimento, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a operação não for bem-sucedida ou o reconhecimento de fala do Windows está no **em espera** estado."
  overload: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)
  id: EmulateRecognize(System.String,System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognize(String,CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognize(String,CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(String,CompareOptions)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Emula a entrada de uma frase para o reconhecedor de fala compartilhado, usando texto em vez de áudio para reconhecimento de fala síncrona e especifica como o reconhecedor trata a comparação Unicode entre a frase e as gramáticas de reconhecimento de fala carregado."
  remarks: "O reconhecedor usa o `compareOptions` quando ele aplica regras da gramática a frase de entrada. Os identificadores que acompanham o Vista e Windows 7 Ignorar maiusculas e minúsculas, se o <xref:System.Globalization.CompareOptions>ou <xref:System.Globalization.CompareOptions>valor está presente.</xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> Os identificadores sempre ignorar a largura de caractere e nunca ignorar o tipo Kana. Os identificadores também ignorar linhas novas e espaço em branco extra e trata pontuação como entrada literal. Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions>enumeração.</xref:System.Globalization.CompareOptions>"
  syntax:
    content: public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);
    parameters:
    - id: inputText
      type: System.String
      description: "A frase de entrada para a operação de reconhecimento."
    - id: compareOptions
      type: System.Globalization.CompareOptions
      description: "Uma combinação bit a bit dos valores de enumeração que descreve o tipo de comparação a ser usado para a operação de reconhecimento emulado."
    return:
      type: System.Speech.Recognition.RecognitionResult
      description: "O resultado de reconhecimento para a operação de reconhecimento, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a operação não for bem-sucedida ou o reconhecimento de fala do Windows está no **em espera** estado."
  overload: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)
  id: EmulateRecognizeAsync(System.String)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognizeAsync(String)
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync(String)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Emula a entrada de uma frase para o reconhecedor de fala compartilhado, usando texto em vez de áudio para o reconhecimento de fala assíncrona."
  remarks: "Os identificadores que acompanham o Vista e Windows 7 Ignorar maiusculas e minúsculas e largura de caracteres ao aplicar regras de gramática para a expressão de entrada. Para obter mais informações sobre esse tipo de comparação, consulte a <xref:System.Globalization.CompareOptions>enumeração de valores <xref:System.Globalization.CompareOptions>e <xref:System.Globalization.CompareOptions>.</xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> Os identificadores também ignoram linhas novas e espaço em branco extra e tratam a pontuação como entrada literal."
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition. If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Threading;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n    static bool completed;  \n  \n    static void Main(string[] args)  \n    {  \n      // Initialize an instance of the shared recognizer.  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n        // Create and load a sample grammar.  \n        Grammar testGrammar =  \n          new Grammar(new GrammarBuilder(\"testing testing\"));  \n        testGrammar.Name = \"Test Grammar\";  \n  \n        recognizer.LoadGrammar(testGrammar);  \n  \n        // Attach event handlers for recognition events.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(  \n            SpeechRecognizedHandler);  \n        recognizer.EmulateRecognizeCompleted +=  \n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \n            EmulateRecognizeCompletedHandler);  \n  \n        completed = false;  \n  \n        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing testing\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n  \n        completed = false;  \n  \n        // This EmulateRecognizeAsync call does not match the grammar   \n        // or generate a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing one two three\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void SpeechRecognizedHandler(  \n      object sender, SpeechRecognizedEventArgs e)  \n    {  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(\"Recognition result = {0}\",  \n          e.Result.Text ?? \"<no text>\");  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No recognition result\");  \n      }  \n    }  \n  \n    // Handle the EmulateRecognizeCompleted event.   \n    static void EmulateRecognizeCompletedHandler(  \n      object sender, EmulateRecognizeCompletedEventArgs e)  \n    {  \n      if (e.Result == null)  \n      {  \n        Console.WriteLine(\"No result generated.\");  \n      }  \n  \n      completed = true;  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void EmulateRecognizeAsync (string inputText);
    parameters:
    - id: inputText
      type: System.String
      description: "A entrada para a operação de reconhecimento."
  overload: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  id: EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Emula a entrada de palavras específicas para o reconhecedor de fala compartilhado, usando texto em vez de áudio para reconhecimento de fala assíncrona e especifica como o reconhecedor trata Unicode comparação entre as palavras e as gramáticas de reconhecimento de fala carregado."
  remarks: "Esse método cria um <xref:System.Speech.Recognition.RecognitionResult>objeto usando as informações fornecidas a `wordUnits` parâmetro.</xref:System.Speech.Recognition.RecognitionResult>       O reconhecedor usa o `compareOptions` quando ele aplica regras da gramática a frase de entrada. Os identificadores que acompanham o Vista e Windows 7 Ignorar maiusculas e minúsculas, se o <xref:System.Globalization.CompareOptions>ou <xref:System.Globalization.CompareOptions>valor está presente.</xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> Os identificadores sempre ignorar a largura de caractere e nunca ignorar o tipo Kana. Os identificadores também ignorar linhas novas e espaço em branco extra e trata pontuação como entrada literal. Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions>enumeração.</xref:System.Globalization.CompareOptions>"
  syntax:
    content: public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);
    parameters:
    - id: wordUnits
      type: System.Speech.Recognition.RecognizedWordUnit[]
      description: "Uma matriz de unidades do word que contém a entrada para a operação de reconhecimento."
    - id: compareOptions
      type: System.Globalization.CompareOptions
      description: "Uma combinação bit a bit dos valores de enumeração que descreve o tipo de comparação a ser usado para a operação de reconhecimento emulado."
  overload: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)
  id: EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognizeAsync(String,CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync(String,CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(String,CompareOptions)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Emula a entrada de uma frase para o reconhecedor de fala compartilhado, usando texto em vez de áudio para reconhecimento de fala assíncrona e especifica como o reconhecedor trata a comparação Unicode entre a frase e as gramáticas de reconhecimento de fala carregado."
  remarks: "O reconhecedor usa o `compareOptions` quando ele aplica regras da gramática a frase de entrada. Os identificadores que acompanham o Vista e Windows 7 Ignorar maiusculas e minúsculas, se o <xref:System.Globalization.CompareOptions>ou <xref:System.Globalization.CompareOptions>valor está presente.</xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareOptions> Os identificadores sempre ignorar a largura de caractere e nunca ignorar o tipo Kana. Os identificadores também ignorar linhas novas e espaço em branco extra e trata pontuação como entrada literal. Para obter mais informações sobre o tipo Kana e de largura de caractere, consulte o <xref:System.Globalization.CompareOptions>enumeração.</xref:System.Globalization.CompareOptions>"
  syntax:
    content: public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);
    parameters:
    - id: inputText
      type: System.String
      description: "A frase de entrada para a operação de reconhecimento."
    - id: compareOptions
      type: System.Globalization.CompareOptions
      description: "Uma combinação bit a bit dos valores de enumeração que descreve o tipo de comparação a ser usado para a operação de reconhecimento emulado."
  overload: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted
  id: EmulateRecognizeCompleted
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: EmulateRecognizeCompleted
  nameWithType: SpeechRecognizer.EmulateRecognizeCompleted
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor compartilhado Finaliza uma operação assíncrona reconhecimento para entrada emulada."
  remarks: "Cada <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>método começa uma operação assíncrona reconhecimento.</xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> Gera o reconhecedor de `EmulateRecognizeCompleted` evento quando ele finaliza a operação assíncrona.       A operação assíncrona de reconhecimento pode gerar o <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>eventos.</xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> O evento EmulateRecognizeCompleted é o último evento desse tipo que o reconhecedor gera para uma determinada operação.       Quando você cria um delegado para um `EmulateRecognizeCompleted` eventos, identificar o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition. If Windows Speech Recognition is in the **Sleeping** mode, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Threading;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n    // Indicate whether the asynchronous emulate recognition  \n    // operation has completed.  \n    static bool completed;  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize an instance of the shared recognizer.  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n        // Create and load a sample grammar.  \n        Grammar testGrammar =  \n          new Grammar(new GrammarBuilder(\"testing testing\"));  \n        testGrammar.Name = \"Test Grammar\";  \n        recognizer.LoadGrammar(testGrammar);  \n  \n        // Attach event handlers for recognition events.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  \n        recognizer.EmulateRecognizeCompleted +=   \n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \n            EmulateRecognizeCompletedHandler);  \n  \n        completed = false;  \n  \n        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing testing\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n  \n        completed = false;  \n  \n        // This EmulateRecognizeAsync call does not match the grammar  \n        // or generate a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing one two three\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void SpeechRecognizedHandler(  \n      object sender, SpeechRecognizedEventArgs e)  \n    {  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(\"Recognition result = {0}\",  \n          e.Result.Text ?? \"<no text>\");  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No recognition result\");  \n      }  \n    }  \n  \n    // Handle the EmulateRecognizeCompleted event.  \n    static void EmulateRecognizeCompletedHandler(  \n      object sender, EmulateRecognizeCompletedEventArgs e)  \n    {  \n      if (e.Result == null)  \n      {  \n        Console.WriteLine(\"No result generated.\");  \n      }  \n  \n      // Indicate the asynchronous operation is complete.  \n      completed = true;  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> EmulateRecognizeCompleted;
    return:
      type: System.EventHandler{System.Speech.Recognition.EmulateRecognizeCompletedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.Enabled
  id: Enabled
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: Enabled
  nameWithType: SpeechRecognizer.Enabled
  fullName: System.Speech.Recognition.SpeechRecognizer.Enabled
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém ou define um valor que indica se este <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> objeto está pronto para processar a fala."
  remarks: "As alterações a esta propriedade não afetam outras instâncias de <xref:System.Speech.Recognition.SpeechRecognizer>classe.</xref:System.Speech.Recognition.SpeechRecognizer>       Por padrão, o valor da propriedade Enabled é `true` para uma instância recém-instanciado de <xref:System.Speech.Recognition.SpeechRecognizer>.</xref:System.Speech.Recognition.SpeechRecognizer> Enquanto o reconhecedor está desabilitado, nenhuma das gramáticas de reconhecimento de fala do reconhecedor estão disponíveis para operações de reconhecimento. Definindo a propriedade Enabled do reconhecedor não tem efeito sobre o reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.State%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.State%2A>"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> objeto está executando o reconhecimento de fala; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Speech.Recognition.SpeechRecognizer.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.Grammars
  id: Grammars
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: Grammars
  nameWithType: SpeechRecognizer.Grammars
  fullName: System.Speech.Recognition.SpeechRecognizer.Grammars
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém uma coleção do <xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref> objetos que são carregados na <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> instância."
  remarks: "Essa propriedade não retorna qualquer fala gramáticas de reconhecimento carregadas por outro aplicativo."
  example:
  - "The following example outputs information to the console for each speech recognition grammar loaded into the shared speech recognizer.  \n  \n```c#  \n  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Speech.Recognition;  \nusing System.Threading;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n        Grammar sampleGrammar = new Grammar(new GrammarBuilder(\"sample phrase\"));  \n        sampleGrammar.Name = \"Sample Grammar\";  \n        recognizer.LoadGrammar(sampleGrammar);  \n  \n        OutputGrammarList(recognizer);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    private static void OutputGrammarList(SpeechRecognizer recognizer)  \n    {  \n      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  \n      if (grammars.Count > 0)  \n      {  \n        Console.WriteLine(\"Loaded grammars:\");  \n        foreach (Grammar g in grammars)  \n        {  \n          Console.WriteLine(\"  Grammar: {0}\",  \n            (g.Name != null) ? g.Name : \"<no name>\");  \n        }  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No grammars loaded.\");  \n      }  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.Grammar> Grammars { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.Grammar}
      description: "Uma coleção do <xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref> objetos que o aplicativo é carregado na instância atual do reconhecedor compartilhado."
  overload: System.Speech.Recognition.SpeechRecognizer.Grammars*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)
  id: LoadGrammar(System.Speech.Recognition.Grammar)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: LoadGrammar(Grammar)
  nameWithType: SpeechRecognizer.LoadGrammar(Grammar)
  fullName: System.Speech.Recognition.SpeechRecognizer.LoadGrammar(Grammar)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Carrega uma gramática de reconhecimento de fala."
  remarks: "O reconhecedor compartilhado lança uma exceção se a gramática de reconhecimento de fala já está carregada, está sendo carregada de forma assíncrona ou falhou ao carregar qualquer reconhecedor. Se o reconhecedor está em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>para pausar o mecanismo de reconhecimento de fala antes do carregamento, descarregamento, habilitar ou desabilitar uma gramática.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>       Para carregar uma gramática de reconhecimento de fala de forma assíncrona, use o <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>"
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition. If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Threading;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n    // Indicate whether the asynchronous emulate recognition  \n    // operation has completed.  \n    static bool completed;  \n  \n    static void Main(string[] args)  \n    {  \n      // Initialize an instance of the shared recognizer.  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n        // Create and load a sample grammar.  \n        Grammar testGrammar =  \n          new Grammar(new GrammarBuilder(\"testing testing\"));  \n        testGrammar.Name = \"Test Grammar\";  \n  \n        recognizer.LoadGrammar(testGrammar);  \n  \n        // Attach event handlers for recognition events.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(  \n            SpeechRecognizedHandler);  \n        recognizer.EmulateRecognizeCompleted +=  \n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \n            EmulateRecognizeCompletedHandler);  \n  \n        completed = false;  \n  \n        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing testing\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n  \n        completed = false;  \n  \n        // This EmulateRecognizeAsync call does not match the grammar   \n        // or generate a SpeechRecognized event.  \n        recognizer.EmulateRecognizeAsync(\"testing one two three\");  \n  \n        // Wait for the asynchronous operation to complete.  \n        while (!completed)  \n        {  \n          Thread.Sleep(333);  \n        }  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void SpeechRecognizedHandler(  \n      object sender, SpeechRecognizedEventArgs e)  \n    {  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(\"Recognition result = {0}\",  \n          e.Result.Text ?? \"<no text>\");  \n      }  \n      else  \n      {  \n        Console.WriteLine(\"No recognition result\");  \n      }  \n    }   \n  \n    // Handle the EmulateRecognizeCompleted event.   \n    static void EmulateRecognizeCompletedHandler(  \n      object sender, EmulateRecognizeCompletedEventArgs e)  \n    {  \n      if (e.Result == null)  \n      {  \n        Console.WriteLine(\"No result generated.\");  \n      }  \n  \n      completed = true;  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void LoadGrammar (System.Speech.Recognition.Grammar grammar);
    parameters:
    - id: grammar
      type: System.Speech.Recognition.Grammar
      description: "A gramática de reconhecimento de fala para carregar."
  overload: System.Speech.Recognition.SpeechRecognizer.LoadGrammar*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)
  id: LoadGrammarAsync(System.Speech.Recognition.Grammar)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: LoadGrammarAsync(Grammar)
  nameWithType: SpeechRecognizer.LoadGrammarAsync(Grammar)
  fullName: System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(Grammar)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Carrega assincronamente uma gramática de reconhecimento de fala."
  remarks: "Quando o reconhecedor de conclusão dessa operação assíncrona, ela gera um <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted>evento.</xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> O reconhecedor lança uma exceção se a gramática de reconhecimento de fala já está carregada, está sendo carregada de forma assíncrona ou falhou ao carregar qualquer reconhecedor. Se o reconhecedor está em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>para pausar o mecanismo de reconhecimento de fala antes do carregamento, descarregamento, habilitar ou desabilitar uma gramática.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>       Para carregar uma gramática de reconhecimento de fala de forma síncrona, use o <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>"
  syntax:
    content: public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);
    parameters:
    - id: grammar
      type: System.Speech.Recognition.Grammar
      description: "A gramática de reconhecimento de fala para carregar."
  overload: System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted
  id: LoadGrammarCompleted
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: LoadGrammarCompleted
  nameWithType: SpeechRecognizer.LoadGrammarCompleted
  fullName: System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor termina o carregamento assíncrono de uma gramática de reconhecimento de fala."
  remarks: "O reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>método inicia uma operação assíncrona.</xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> Gera o reconhecedor de `LoadGrammarCompleted` evento quando concluir a operação. Para obter o <xref:System.Speech.Recognition.Grammar>objeto que o reconhecedor carregado, use a <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A>propriedade de <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs> associado</xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> </xref:System.Speech.Recognition.Grammar> Para obter atual <xref:System.Speech.Recognition.Grammar>o reconhecedor tiver sido carregado, os objetos usam o reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> </xref:System.Speech.Recognition.Grammar>       Quando você cria um delegado para um `LoadGrammarCompleted` eventos, identificar o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation. The example asynchronously loads all the created grammars to the recognizer. Handlers for the recognizer's LoadGrammarCompleted and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events write to the console the name of the grammar that was used to perform the recognition and the text of the recognition result, respectively.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Add a handler for the StateChanged event.  \n        recognizer.StateChanged +=  \n          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n  \n        // Create \"yesno\" grammar.  \n        Choices yesChoices = new Choices(new string[] { \"yes\", \"yup\", \"yeah}\" });  \n        SemanticResultValue yesValue =  \n            new SemanticResultValue(yesChoices, (bool)true);  \n        Choices noChoices = new Choices(new string[] { \"no\", \"nope\", \"neah\" });  \n        SemanticResultValue noValue =  \n            new SemanticResultValue(noChoices, (bool)false);  \n        SemanticResultKey yesNoKey =  \n            new SemanticResultKey(\"yesno\", new Choices(new GrammarBuilder[] { yesValue, noValue }));  \n        Grammar yesnoGrammar = new Grammar(yesNoKey);  \n        yesnoGrammar.Name = \"yesNo\";  \n  \n        // Create \"done\" grammar.  \n        Grammar doneGrammar =  \n          new Grammar(new Choices(new string[] { \"done\", \"exit\", \"quit\", \"stop\" }));  \n        doneGrammar.Name = \"Done\";  \n  \n        // Create dictation grammar.  \n        Grammar dictation = new DictationGrammar();  \n        dictation.Name = \"Dictation\";  \n  \n        // Load grammars to the recognizer.  \n        recognizer.LoadGrammarAsync(yesnoGrammar);  \n        recognizer.LoadGrammarAsync(doneGrammar);  \n        recognizer.LoadGrammarAsync(dictation);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar({0}): {1}\", e.Result.Grammar.Name, e.Result.Text);  \n  \n      // Add event handler code here.  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded.\",  \n      grammarName, (grammarLoaded) ? \"is\" : \"is not\");  \n    }  \n  \n    // Put the shared speech recognizer into \"listening\" mode.   \n    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.LoadGrammarCompletedEventArgs> LoadGrammarCompleted;
    return:
      type: System.EventHandler{System.Speech.Recognition.LoadGrammarCompletedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.MaxAlternates
  id: MaxAlternates
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: MaxAlternates
  nameWithType: SpeechRecognizer.MaxAlternates
  fullName: System.Speech.Recognition.SpeechRecognizer.MaxAlternates
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém ou define o número máximo de resultados do reconhecimento alternativo que retorna o reconhecedor compartilhado para cada operação de reconhecimento."
  remarks: "O <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>propriedade o <xref:System.Speech.Recognition.RecognitionResult>classe contém a coleção de <xref:System.Speech.Recognition.RecognizedPhrase>objetos que representam outros interpretações de candidato da entrada.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>       O valor padrão para MaxAlternates é 10."
  syntax:
    content: public int MaxAlternates { get; set; }
    return:
      type: System.Int32
      description: "O número máximo de resultados alternativa que retorna o reconhecedor de fala para cada operação de reconhecimento."
  overload: System.Speech.Recognition.SpeechRecognizer.MaxAlternates*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition
  id: PauseRecognizerOnRecognition
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: PauseRecognizerOnRecognition
  nameWithType: SpeechRecognizer.PauseRecognizerOnRecognition
  fullName: System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém ou define um valor que indica se o reconhecedor compartilhado pausa operações de reconhecimento, enquanto um aplicativo está tratando uma <xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&quot;> </xref> eventos."
  remarks: "Defina essa propriedade como `true`, se dentro de <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>manipulador de eventos que seu aplicativo precisa alterar o estado do serviço de reconhecimento de fala ou alterar as gramáticas de reconhecimento de fala carregado ou habilitado antes do serviço de reconhecimento de fala processa a entrada mais.</xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>      > [!NOTE] > Configuração o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>propriedade `true` faz com que cada <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>manipulador de eventos em todos os aplicativos para bloquear o serviço de reconhecimento de fala do Windows.</xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> </xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>       Para sincronizar as alterações para o reconhecedor compartilhado com o estado do aplicativo, use o <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>       Quando for PauseRecognizerOnRecognition `true`, durante a execução do <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>manipulador o serviço de reconhecimento de fala pausa e armazena em buffer nova entrada de áudio que elas chegam.</xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> Uma vez o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>sai de manipulador de eventos, o serviço currículos fala reconhecimento e começa a processar informações de seu buffer de entrada.</xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>       Para habilitar ou desabilitar o serviço de reconhecimento de fala, use o <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>"
  syntax:
    content: public bool PauseRecognizerOnRecognition { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o reconhecedor compartilhado aguarda para processar a entrada durante o tratamento de qualquer aplicativo de <xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&quot;> </xref> evento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition
  id: RecognizerAudioPosition
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: RecognizerAudioPosition
  nameWithType: SpeechRecognizer.RecognizerAudioPosition
  fullName: System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o local atual do reconhecedor na entrada de áudio que está processando."
  remarks: "O `RecognizerAudioPosition` propriedade faz referência a posição do reconhecedor no processamento de sua entrada de áudio. Por outro lado, o <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>propriedade faz referência a posição do dispositivo de entrada no seu fluxo de áudio gerado.</xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> Essas posições podem ser diferentes. Por exemplo, se tiver recebido o reconhecedor de entrada para o qual não tem ainda gerado um resultado de reconhecimento e o valor da propriedade RecognizerAudioPosition é menor que o valor da <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>"
  syntax:
    content: public TimeSpan RecognizerAudioPosition { get; }
    return:
      type: System.TimeSpan
      description: "A posição do reconhecedor de entrada de áudio está processando."
  overload: System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerInfo
  id: RecognizerInfo
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: RecognizerInfo
  nameWithType: SpeechRecognizer.RecognizerInfo
  fullName: System.Speech.Recognition.SpeechRecognizer.RecognizerInfo
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém informações sobre o reconhecedor de fala compartilhado."
  remarks: "Essa propriedade retorna informações sobre o reconhecedor de fala em uso pelo reconhecimento de fala do Windows."
  example:
  - "The following example sends information about the shared recognizer to the console.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SharedRecognizer  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n        Console.WriteLine(\"Recognizer information for the shared recognizer:\");  \n        Console.WriteLine(\"  Name: {0}\", recognizer.RecognizerInfo.Name);  \n        Console.WriteLine(\"  Culture: {0}\", recognizer.RecognizerInfo.Culture.ToString());  \n        Console.WriteLine(\"  Description: {0}\", recognizer.RecognizerInfo.Description);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }
    return:
      type: System.Speech.Recognition.RecognizerInfo
      description: "Informações sobre o reconhecedor de fala compartilhado."
  overload: System.Speech.Recognition.SpeechRecognizer.RecognizerInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached
  id: RecognizerUpdateReached
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: RecognizerUpdateReached
  nameWithType: SpeechRecognizer.RecognizerUpdateReached
  fullName: System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor pausa para sincronizar o reconhecimento e outras operações."
  remarks: "Os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>para pausar uma instância em execução de <xref:System.Speech.Recognition.SpeechRecognizer>antes de modificar seu <xref:System.Speech.Recognition.Grammar>objetos.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> Por exemplo, o <xref:System.Speech.Recognition.SpeechRecognizer>é pausado, você pode carregar, descarregar, habilitar e desabilitar <xref:System.Speech.Recognition.Grammar>objetos.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SpeechRecognizer> O <xref:System.Speech.Recognition.SpeechRecognizer>gera esse evento quando ele estiver pronto para aceitar as modificações.</xref:System.Speech.Recognition.SpeechRecognizer>       Quando você cria um delegado para um evento RecognizerUpdateReached, identifica o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects. The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update. The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.  \n  \n At each update, a handler for RecognizerUpdateReached event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console. As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Collections.Generic;  \nusing System.Threading;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n      // Create the first grammar - Farm.  \n      Choices animals = new Choices(new string[] { \"cow\", \"pig\", \"goat\" });  \n      GrammarBuilder farm = new GrammarBuilder(animals);  \n      Grammar farmAnimals = new Grammar(farm);  \n      farmAnimals.Name = \"Farm\";  \n  \n      // Create the second grammar - Fruit.  \n      Choices fruit = new Choices(new string[] { \"apples\", \"peaches\", \"oranges\" });  \n      GrammarBuilder favorite = new GrammarBuilder(fruit);  \n      Grammar favoriteFruit = new Grammar(favorite);  \n      favoriteFruit.Name = \"Fruit\";  \n  \n      // Attach event handlers.  \n      recognizer.SpeechRecognized +=  \n        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n      recognizer.RecognizerUpdateReached +=  \n        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  \n      recognizer.StateChanged +=   \n        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n  \n      // Load the Farm grammar.  \n      recognizer.LoadGrammar(farmAnimals);  \n      Console.WriteLine(\"Grammar Farm is loaded\");  \n  \n      // Pause to recognize farm animals.  \n      Thread.Sleep(7000);  \n      Console.WriteLine();  \n  \n      // Request an update and load the Fruit grammar.  \n      recognizer.RequestRecognizerUpdate();  \n      recognizer.LoadGrammarAsync(favoriteFruit);  \n      Thread.Sleep(5000);  \n  \n      // Request an update and unload the Farm grammar.  \n      recognizer.RequestRecognizerUpdate();  \n      recognizer.UnloadGrammar(farmAnimals);  \n      Thread.Sleep(5000);  \n  \n      // Keep the console window open.  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Put the shared speech recognizer into \"listening\" mode.  \n    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  \n    // At the update, get the names and enabled status of the currently loaded grammars.  \n    public static void recognizer_RecognizerUpdateReached(  \n      object sender, RecognizerUpdateReachedEventArgs e)  \n    {  \n      Console.WriteLine();  \n      Console.WriteLine(\"Update reached:\");  \n      Thread.Sleep(1000);  \n  \n      string qualifier;  \n      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  \n      foreach (Grammar g in grammars)  \n      {  \n        qualifier = (g.Enabled) ? \"enabled\" : \"disabled\";  \n        Console.WriteLine(\"  Grammar {0} is loaded and is {1}.\",  \n        g.Name, qualifier);  \n      }  \n    }  \n  \n    // Write the text of the recognized phrase to the console.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"  Speech recognized: \" + e.Result.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.RecognizerUpdateReachedEventArgs> RecognizerUpdateReached;
    return:
      type: System.EventHandler{System.Speech.Recognition.RecognizerUpdateReachedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate
  id: RequestRecognizerUpdate
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: RequestRecognizerUpdate()
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate()
  fullName: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Solicita que o reconhecedor compartilhado pausa e seu estado de atualização."
  remarks: "Quando o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>evento, o <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>propriedade do <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>é `null`.</xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> </xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>       Para fornecer um token de usuário, use o <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>ou <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> Para especificar um deslocamento de posição de áudio, use o <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>"
  syntax:
    content: public void RequestRecognizerUpdate ();
    parameters: []
  overload: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)
  id: RequestRecognizerUpdate(System.Object)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: RequestRecognizerUpdate(Object)
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate(Object)
  fullName: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Solicita que o reconhecedor compartilhado pausa e atualize seu estado e fornece um token de usuário para o evento associado."
  remarks: "Quando o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>evento, o <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>propriedade do <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>contém o valor da `userToken` parâmetro.</xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> </xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>       Para especificar um deslocamento de posição de áudio, use o <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>"
  syntax:
    content: public void RequestRecognizerUpdate (object userToken);
    parameters:
    - id: userToken
      type: System.Object
      description: "Informações definidas pelo usuário que contém informações para a operação."
  overload: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)
  id: RequestRecognizerUpdate(System.Object,System.TimeSpan)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: RequestRecognizerUpdate(Object,TimeSpan)
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate(Object,TimeSpan)
  fullName: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(Object,TimeSpan)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Solicita que o reconhecedor compartilhado pausa e atualize seu estado e fornece um deslocamento e um token de usuário para o evento associado."
  remarks: "O reconhecedor não iniciará a solicitação de atualização do reconhecedor até que o reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>é igual a atual <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>mais o valor da `audioPositionAheadToRaiseUpdate` parâmetro.</xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>       Quando o reconhecedor gera o <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>evento, o <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>propriedade do <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>contém o valor da `userToken` parâmetro.</xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> </xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached>"
  syntax:
    content: public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    parameters:
    - id: userToken
      type: System.Object
      description: "Informações definidas pelo usuário que contém informações para a operação."
    - id: audioPositionAheadToRaiseUpdate
      type: System.TimeSpan
      description: "O deslocamento do atual <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition*>para atrasar a solicitação.</xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition*>"
  overload: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechDetected
  id: SpeechDetected
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: SpeechDetected
  nameWithType: SpeechRecognizer.SpeechDetected
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechDetected
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor detecta a entrada, ele pode identificar como fala."
  remarks: "O reconhecedor compartilhado pode gerar esse evento em resposta à entrada. O <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A>propriedade associado <xref:System.Speech.Recognition.SpeechDetectedEventArgs>objeto indica o local no fluxo de entrada em que o reconhecedor detectado fala.</xref:System.Speech.Recognition.SpeechDetectedEventArgs> </xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> Para obter mais informações, consulte o <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>e <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>Propriedades e o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>e <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>métodos.</xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> </xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> </xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>       Quando você cria um delegado para um evento SpeechDetected, identifica o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\"  The example uses the SpeechDetected event to report the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> each time speech is detected.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize a shared speech recognition engine.  \n    {  \n      using (SpeechRecognizer recognizer =  \n         new SpeechRecognizer())  \n      {  \n  \n        // Create a grammar.  \n        Choices cities = new Choices(new string[] {   \n          \"Los Angeles\", \"New York\", \"Chicago\", \"San Francisco\", \"Miami\", \"Dallas\" });  \n  \n        GrammarBuilder gb = new GrammarBuilder();  \n        gb.Append(\"I would like to fly from\");  \n        gb.Append(cities);  \n        gb.Append(\"to\");  \n        gb.Append(cities);  \n  \n        // Create a Grammar object and load it to the recognizer.  \n        Grammar g = new Grammar(gb);  \n        g.Name = (\"City Chooser\");  \n        recognizer.LoadGrammarAsync(g);  \n  \n        // Attach event handlers.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n        recognizer.SpeechDetected +=   \n          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the SpeechDetected event.  \n    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech detected at AudioPosition = {0}\", e.AudioPosition);  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized: \" + e.Result.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.SpeechDetectedEventArgs> SpeechDetected;
    return:
      type: System.EventHandler{System.Speech.Recognition.SpeechDetectedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized
  id: SpeechHypothesized
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: SpeechHypothesized
  nameWithType: SpeechRecognizer.SpeechHypothesized
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor reconheceu uma palavra ou palavras que podem ser um componente de várias frases completas em uma gramática."
  remarks: "O reconhecedor compartilhado pode gerar esse evento quando a entrada é ambígua. Por exemplo, para uma gramática de reconhecimento de fala que oferece suporte ao reconhecimento do &quot;novo jogo.&quot; ou &quot;novo jogo&quot;, &quot;novo jogo,&quot; é uma entrada ambígua, e &quot;novo jogo&quot; é uma entrada ambígua.       Quando você cria um delegado para um evento SpeechHypothesized, identifica o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example recognizes phrases such as \"Display the list of artists in the jazz category\". The example uses the SpeechHypothesized event to display incomplete phrase fragments in the console as they are recognized.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize a shared speech recognition engine.  \n    {  \n      using (SpeechRecognizer recognizer =  \n         new SpeechRecognizer())  \n      {  \n  \n        // Create a grammar.  \n        //  Create lists of alternative choices.  \n        Choices listTypes = new Choices(new string[] { \"albums\", \"artists\" });  \n        Choices genres = new Choices(new string[] {   \n          \"blues\", \"classical\", \"gospel\", \"jazz\", \"rock\" });  \n  \n        //  Create a GrammarBuilder object and assemble the grammar components.  \n        GrammarBuilder mediaMenu = new GrammarBuilder(\"Display the list of\");  \n        mediaMenu.Append(listTypes);  \n        mediaMenu.Append(\"in the\");  \n        mediaMenu.Append(genres);  \n        mediaMenu.Append(\"category.\");  \n  \n        //  Build a Grammar object from the GrammarBuilder.  \n        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  \n        mediaMenuGrammar.Name = \"Media Chooser\";  \n  \n        // Attach event handlers.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n        recognizer.SpeechHypothesized +=   \n          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  \n  \n        // Load the grammar object to the recognizer.  \n        recognizer.LoadGrammarAsync(mediaMenuGrammar);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the SpeechHypothesized event.  \n    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech hypothesized: \" + e.Result.Text);  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized: \" + e.Result.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.SpeechHypothesizedEventArgs> SpeechHypothesized;
    return:
      type: System.EventHandler{System.Speech.Recognition.SpeechHypothesizedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected
  id: SpeechRecognitionRejected
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: SpeechRecognitionRejected
  nameWithType: SpeechRecognizer.SpeechRecognitionRejected
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor recebe entrada que não corresponde a nenhum as gramáticas de reconhecimento de fala que foi carregado."
  remarks: "O reconhecedor compartilhado gera esse evento se determinar que entrada não coincide com confiança suficiente qualquer as gramáticas de reconhecimento de fala carregado. O <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>propriedade o <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>contém o rejeitado <xref:System.Speech.Recognition.RecognitionResult>objeto.</xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> </xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>       Os limites de confiança do reconhecedor compartilhado, gerenciado pelo <xref:System.Speech.Recognition.SpeechRecognizer>, são associados a um perfil de usuário e armazenadas no registro do Windows.</xref:System.Speech.Recognition.SpeechRecognizer> Aplicativos não devem gravar as alterações no registro para as propriedades do reconhecedor compartilhado.       Quando você cria um delegado para um evento SpeechRecognitionRejected, identifica o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example recognizes phrases such as \"Display the list of artists in the jazz category\" or \"Display albums gospel\". The example uses a handler for the SpeechRecognitionRejected event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient confidence to produce a successful recognition.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize a shared speech recognition engine.  \n    {  \n      using (SpeechRecognizer recognizer =  \n         new SpeechRecognizer())  \n      {  \n  \n        // Create a grammar.  \n        //  Create lists of alternative choices.  \n        Choices listTypes = new Choices(new string[] { \"albums\", \"artists\" });  \n        Choices genres = new Choices(new string[] {   \n          \"blues\", \"classical\", \"gospel\", \"jazz\", \"rock\" });  \n  \n        //  Create a GrammarBuilder object and assemble the grammar components.  \n        GrammarBuilder mediaMenu = new GrammarBuilder(\"Display\");  \n        mediaMenu.Append(\"the list of\", 0, 1);  \n        mediaMenu.Append(listTypes);  \n        mediaMenu.Append(\"in the\", 0, 1);  \n        mediaMenu.Append(genres);  \n        mediaMenu.Append(\"category\", 0, 1);  \n  \n        //  Build a Grammar object from the GrammarBuilder.  \n        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  \n        mediaMenuGrammar.Name = \"Media Chooser\";  \n  \n        // Attach event handlers.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n        recognizer.SpeechRecognitionRejected +=   \n          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  \n  \n        // Load the grammar object to the recognizer.  \n        recognizer.LoadGrammarAsync(mediaMenuGrammar);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the SpeechRecognitionRejected event.  \n    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech input was rejected.\");  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized: \" + e.Result.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> SpeechRecognitionRejected;
    return:
      type: System.EventHandler{System.Speech.Recognition.SpeechRecognitionRejectedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechRecognized
  id: SpeechRecognized
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: SpeechRecognized
  nameWithType: SpeechRecognizer.SpeechRecognized
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechRecognized
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o reconhecedor recebe entrada que corresponde a um dos seus gramáticas de reconhecimento de fala."
  remarks: "Gera o reconhecedor de `SpeechRecognized` evento se determinar com confiança suficiente que entrada corresponde a um das gramáticas de reconhecimento de fala carregados e habilitados. O <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>propriedade o <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>contém o aceito <xref:System.Speech.Recognition.RecognitionResult>objeto.</xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> </xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>       Os limites de confiança do reconhecedor compartilhado, gerenciado pelo <xref:System.Speech.Recognition.SpeechRecognizer>, são associados a um perfil de usuário e armazenadas no registro do Windows.</xref:System.Speech.Recognition.SpeechRecognizer> Aplicativos não devem gravar as alterações no registro para as propriedades do reconhecedor compartilhado.       Quando o reconhecedor recebe entrada que corresponde a uma gramática, o <xref:System.Speech.Recognition.Grammar>objeto pode disparar o <xref:System.Speech.Recognition.Grammar.SpeechRecognized>evento.</xref:System.Speech.Recognition.Grammar.SpeechRecognized> </xref:System.Speech.Recognition.Grammar> O <xref:System.Speech.Recognition.Grammar>do objeto <xref:System.Speech.Recognition.Grammar.SpeechRecognized>é gerado antes do evento SpeechRecognized do reconhecedor de fala.</xref:System.Speech.Recognition.Grammar.SpeechRecognized> </xref:System.Speech.Recognition.Grammar>       Quando você cria um delegado para um evento SpeechRecognized, identifica o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.  \n  \n Spoken input such as \"I want to fly from Chicago to Miami\" will trigger a SpeechRecognized event. Speaking the phrase \"Fly me from Houston to Chicago \" will not trigger a SpeechRecognized event.  \n  \n The example uses a handler for the SpeechRecognized event to display successfully recognized phrases and the semantics they contain in the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize a shared speech recognition engine.  \n    {  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n  \n        // Create SemanticResultValue objects that contain cities and airport codes.  \n        SemanticResultValue chicago = new SemanticResultValue(\"Chicago\", \"ORD\");  \n        SemanticResultValue boston = new SemanticResultValue(\"Boston\", \"BOS\");  \n        SemanticResultValue miami = new SemanticResultValue(\"Miami\", \"MIA\");  \n        SemanticResultValue dallas = new SemanticResultValue(\"Dallas\", \"DFW\");  \n  \n        // Create a Choices object and add the SemanticResultValue objects, using  \n        // implicit conversion from SemanticResultValue to GrammarBuilder  \n        Choices cities = new Choices();  \n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Load the grammar object to the recognizer.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs> SpeechRecognized;
    return:
      type: System.EventHandler{System.Speech.Recognition.SpeechRecognizedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.State
  id: State
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: State
  nameWithType: SpeechRecognizer.State
  fullName: System.Speech.Recognition.SpeechRecognizer.State
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o estado de um <xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;> </xref> objeto."
  remarks: "Essa propriedade somente leitura que indica se o reconhecedor compartilhado residente no Windows é o `Stopped` ou `Listening` estado. Para obter mais informações, consulte o <xref:System.Speech.Recognition.RecognizerState>enumeração.</xref:System.Speech.Recognition.RecognizerState>"
  syntax:
    content: public System.Speech.Recognition.RecognizerState State { get; }
    return:
      type: System.Speech.Recognition.RecognizerState
      description: "O estado do <xref uid=&quot;langword_csharp_SpeechRecognizer&quot; name=&quot;SpeechRecognizer&quot; href=&quot;&quot;> </xref> objeto."
  overload: System.Speech.Recognition.SpeechRecognizer.State*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.StateChanged
  id: StateChanged
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: StateChanged
  nameWithType: SpeechRecognizer.StateChanged
  fullName: System.Speech.Recognition.SpeechRecognizer.StateChanged
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ocorre quando o estado de execução do mecanismo de reconhecimento de tecnologia de voz de área de trabalho do Windows é alterado."
  remarks: "O reconhecedor compartilhado gera esse evento quando muda o estado de reconhecimento de fala do Windows para o <xref:System.Speech.Recognition.RecognizerState>ou <xref:System.Speech.Recognition.RecognizerState>estado.</xref:System.Speech.Recognition.RecognizerState> </xref:System.Speech.Recognition.RecognizerState>       Para obter o estado do reconhecedor compartilhado no momento do evento, use a <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A>propriedade de <xref:System.Speech.Recognition.StateChangedEventArgs>.</xref:System.Speech.Recognition.StateChangedEventArgs> associado</xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> Para obter o estado atual do reconhecedor compartilhado, use o reconhecedor <xref:System.Speech.Recognition.SpeechRecognizer.State%2A>propriedade.</xref:System.Speech.Recognition.SpeechRecognizer.State%2A>       Quando você cria um delegado para um evento StateChanged, identifica o método que manipulará o evento. Para associar o evento com o manipulador de eventos, adicione uma instância do representante ao evento. O manipulador de eventos é chamado sempre que o evento ocorre, a menos que você remova o delegado. Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos e delegados](http://go.microsoft.com/fwlink/?LinkId=162418)."
  example:
  - "The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation. The example asynchronously loads all the created grammars to the recognizer.  A handler for the StateChanged event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in \"listening\" mode.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognizer recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a shared speech recognition engine.  \n      recognizer = new SpeechRecognizer();  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the SpeechRecognized event.  \n      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n      // Add a handler for the StateChanged event.  \n      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  \n  \n      // Create \"yesno\" grammar.  \n      Choices yesChoices = new Choices(new string[] { \"yes\", \"yup\", \"yah}\" });  \n      SemanticResultValue yesValue =  \n          new SemanticResultValue(yesChoices, (bool)true);  \n      Choices noChoices = new Choices(new string[] { \"no\", \"nope\", \"nah\" });  \n      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  \n      SemanticResultKey yesNoKey =  \n          new SemanticResultKey(\"yesno\", new Choices(new GrammarBuilder[] { yesValue, noValue }));  \n      Grammar yesnoGrammar = new Grammar(yesNoKey);  \n      yesnoGrammar.Name = \"yesNo\";  \n  \n      // Create \"done\" grammar.  \n      Grammar doneGrammar =  \n        new Grammar(new Choices(new string[] { \"done\", \"exit\", \"quit\", \"stop\" }));  \n      doneGrammar.Name = \"Done\";  \n  \n      // Create dictation grammar.  \n      Grammar dictation = new DictationGrammar();  \n      dictation.Name = \"Dictation\";  \n  \n      // Load grammars to the recognizer.  \n      recognizer.LoadGrammarAsync(yesnoGrammar);  \n      recognizer.LoadGrammarAsync(doneGrammar);  \n      recognizer.LoadGrammarAsync(dictation);  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Put the shared speech recognizer into \"listening\" mode.  \n    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n     if (e.RecognizerState != RecognizerState.Stopped)  \n      {  \n        recognizer.EmulateRecognizeAsync(\"Start listening\");  \n      }  \n    }  \n  \n    // Write the text of the recognized phrase to the console.  \n    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n     Console.WriteLine(\"Grammar({0}): {1}\", e.Result.Grammar.Name, e.Result.Text);  \n  \n      // Add event handler code here.  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n     string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n      }  \n  \n      // Add exception handling code here.  \n      Console.WriteLine(\"Grammar {0} {1} loaded.\",  \n      grammarName, (grammarLoaded) ? \"is\" : \"is not\");  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.StateChangedEventArgs> StateChanged;
    return:
      type: System.EventHandler{System.Speech.Recognition.StateChangedEventArgs}
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars
  id: UnloadAllGrammars
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: UnloadAllGrammars()
  nameWithType: SpeechRecognizer.UnloadAllGrammars()
  fullName: System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Descarrega todas as gramáticas de reconhecimento de fala do reconhecedor compartilhado."
  remarks: "Se o reconhecedor está atualmente carregando uma gramática assincronamente, este método espera até que a gramática é carregada, antes de ele descarrega todas as gramáticas do reconhecedor.       Para descarregar uma gramática específica, use o <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>"
  syntax:
    content: public void UnloadAllGrammars ();
    parameters: []
  overload: System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)
  id: UnloadGrammar(System.Speech.Recognition.Grammar)
  parent: System.Speech.Recognition.SpeechRecognizer
  langs:
  - csharp
  name: UnloadGrammar(Grammar)
  nameWithType: SpeechRecognizer.UnloadGrammar(Grammar)
  fullName: System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(Grammar)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Descarrega uma gramática de reconhecimento de fala especificado do reconhecedor compartilhado."
  remarks: "Se o reconhecedor está em execução, os aplicativos devem usar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A>para pausar o mecanismo de reconhecimento de fala antes do carregamento, descarregamento, habilitar ou desabilitar uma gramática.</xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> Para descarregar todas as gramáticas, use o <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>método.</xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>"
  syntax:
    content: public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);
    parameters:
    - id: grammar
      type: System.Speech.Recognition.Grammar
      description: "A gramática de ser descarregado."
  overload: System.Speech.Recognition.SpeechRecognizer.UnloadGrammar*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SpeechRecognizer.#ctor
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: SpeechRecognizer()
  nameWithType: SpeechRecognizer.SpeechRecognizer()
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechRecognizer()
- uid: System.Speech.Recognition.SpeechRecognizer.AudioFormat
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioFormat
  nameWithType: SpeechRecognizer.AudioFormat
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioFormat
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
  parent: System.Speech.AudioFormat
  isExternal: false
  name: SpeechAudioFormatInfo
  nameWithType: SpeechAudioFormatInfo
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo
- uid: System.Speech.Recognition.SpeechRecognizer.AudioLevel
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioLevel
  nameWithType: SpeechRecognizer.AudioLevel
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioLevelUpdated
  nameWithType: SpeechRecognizer.AudioLevelUpdated
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated
- uid: System.EventHandler{System.Speech.Recognition.AudioLevelUpdatedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AudioLevelUpdatedEventArgs>
  nameWithType: EventHandler<AudioLevelUpdatedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.AudioLevelUpdatedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.AudioLevelUpdatedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.AudioLevelUpdatedEventArgs
    name: AudioLevelUpdatedEventArgs
    nameWithType: AudioLevelUpdatedEventArgs
    fullName: AudioLevelUpdatedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.AudioPosition
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioPosition
  nameWithType: SpeechRecognizer.AudioPosition
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioPosition
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioSignalProblemOccurred
  nameWithType: SpeechRecognizer.AudioSignalProblemOccurred
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred
- uid: System.EventHandler{System.Speech.Recognition.AudioSignalProblemOccurredEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AudioSignalProblemOccurredEventArgs>
  nameWithType: EventHandler<AudioSignalProblemOccurredEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.AudioSignalProblemOccurredEventArgs
    name: AudioSignalProblemOccurredEventArgs
    nameWithType: AudioSignalProblemOccurredEventArgs
    fullName: AudioSignalProblemOccurredEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.AudioState
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioState
  nameWithType: SpeechRecognizer.AudioState
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioState
- uid: System.Speech.Recognition.AudioState
  parent: System.Speech.Recognition
  isExternal: false
  name: AudioState
  nameWithType: AudioState
  fullName: System.Speech.Recognition.AudioState
- uid: System.Speech.Recognition.SpeechRecognizer.AudioStateChanged
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioStateChanged
  nameWithType: SpeechRecognizer.AudioStateChanged
  fullName: System.Speech.Recognition.SpeechRecognizer.AudioStateChanged
- uid: System.EventHandler{System.Speech.Recognition.AudioStateChangedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AudioStateChangedEventArgs>
  nameWithType: EventHandler<AudioStateChangedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.AudioStateChangedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.AudioStateChangedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.AudioStateChangedEventArgs
    name: AudioStateChangedEventArgs
    nameWithType: AudioStateChangedEventArgs
    fullName: AudioStateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.Dispose
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Dispose()
  nameWithType: SpeechRecognizer.Dispose()
  fullName: System.Speech.Recognition.SpeechRecognizer.Dispose()
- uid: System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SpeechRecognizer.Dispose(Boolean)
  fullName: System.Speech.Recognition.SpeechRecognizer.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognize(String)
  nameWithType: SpeechRecognizer.EmulateRecognize(String)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(String)
- uid: System.Speech.Recognition.RecognitionResult
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognitionResult
  nameWithType: RecognitionResult
  fullName: System.Speech.Recognition.RecognitionResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognize(RecognizedWordUnit[],CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognize(RecognizedWordUnit[],CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(RecognizedWordUnit[],CompareOptions)
- uid: System.Speech.Recognition.RecognizedWordUnit[]
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit[]
  spec.csharp:
  - uid: System.Speech.Recognition.RecognizedWordUnit
    name: RecognizedWordUnit
    nameWithType: RecognizedWordUnit
    fullName: RecognizedWordUnit[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CompareOptions
  parent: System.Globalization
  isExternal: true
  name: CompareOptions
  nameWithType: CompareOptions
  fullName: System.Globalization.CompareOptions
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognize(String,CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognize(String,CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(String,CompareOptions)
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognizeAsync(String)
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync(String)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(String)
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognizeAsync(String,CompareOptions)
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync(String,CompareOptions)
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(String,CompareOptions)
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognizeCompleted
  nameWithType: SpeechRecognizer.EmulateRecognizeCompleted
  fullName: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted
- uid: System.EventHandler{System.Speech.Recognition.EmulateRecognizeCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<EmulateRecognizeCompletedEventArgs>
  nameWithType: EventHandler<EmulateRecognizeCompletedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.EmulateRecognizeCompletedEventArgs
    name: EmulateRecognizeCompletedEventArgs
    nameWithType: EmulateRecognizeCompletedEventArgs
    fullName: EmulateRecognizeCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.Enabled
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Enabled
  nameWithType: SpeechRecognizer.Enabled
  fullName: System.Speech.Recognition.SpeechRecognizer.Enabled
- uid: System.Speech.Recognition.SpeechRecognizer.Grammars
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Grammars
  nameWithType: SpeechRecognizer.Grammars
  fullName: System.Speech.Recognition.SpeechRecognizer.Grammars
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.Grammar}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<Grammar>
  nameWithType: ReadOnlyCollection<Grammar>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.Grammar>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Recognition.Grammar>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.Grammar
    name: Grammar
    nameWithType: Grammar
    fullName: Grammar
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: LoadGrammar(Grammar)
  nameWithType: SpeechRecognizer.LoadGrammar(Grammar)
  fullName: System.Speech.Recognition.SpeechRecognizer.LoadGrammar(Grammar)
- uid: System.Speech.Recognition.Grammar
  parent: System.Speech.Recognition
  isExternal: false
  name: Grammar
  nameWithType: Grammar
  fullName: System.Speech.Recognition.Grammar
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: LoadGrammarAsync(Grammar)
  nameWithType: SpeechRecognizer.LoadGrammarAsync(Grammar)
  fullName: System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(Grammar)
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: LoadGrammarCompleted
  nameWithType: SpeechRecognizer.LoadGrammarCompleted
  fullName: System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted
- uid: System.EventHandler{System.Speech.Recognition.LoadGrammarCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LoadGrammarCompletedEventArgs>
  nameWithType: EventHandler<LoadGrammarCompletedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.LoadGrammarCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.LoadGrammarCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.LoadGrammarCompletedEventArgs
    name: LoadGrammarCompletedEventArgs
    nameWithType: LoadGrammarCompletedEventArgs
    fullName: LoadGrammarCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.MaxAlternates
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: MaxAlternates
  nameWithType: SpeechRecognizer.MaxAlternates
  fullName: System.Speech.Recognition.SpeechRecognizer.MaxAlternates
- uid: System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: PauseRecognizerOnRecognition
  nameWithType: SpeechRecognizer.PauseRecognizerOnRecognition
  fullName: System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RecognizerAudioPosition
  nameWithType: SpeechRecognizer.RecognizerAudioPosition
  fullName: System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerInfo
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RecognizerInfo
  nameWithType: SpeechRecognizer.RecognizerInfo
  fullName: System.Speech.Recognition.SpeechRecognizer.RecognizerInfo
- uid: System.Speech.Recognition.RecognizerInfo
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognizerInfo
  nameWithType: RecognizerInfo
  fullName: System.Speech.Recognition.RecognizerInfo
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RecognizerUpdateReached
  nameWithType: SpeechRecognizer.RecognizerUpdateReached
  fullName: System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached
- uid: System.EventHandler{System.Speech.Recognition.RecognizerUpdateReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<RecognizerUpdateReachedEventArgs>
  nameWithType: EventHandler<RecognizerUpdateReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.RecognizerUpdateReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.RecognizerUpdateReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.RecognizerUpdateReachedEventArgs
    name: RecognizerUpdateReachedEventArgs
    nameWithType: RecognizerUpdateReachedEventArgs
    fullName: RecognizerUpdateReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RequestRecognizerUpdate()
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate()
  fullName: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate()
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RequestRecognizerUpdate(Object)
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate(Object)
  fullName: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(Object)
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RequestRecognizerUpdate(Object,TimeSpan)
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate(Object,TimeSpan)
  fullName: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(Object,TimeSpan)
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechDetected
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: SpeechDetected
  nameWithType: SpeechRecognizer.SpeechDetected
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechDetected
- uid: System.EventHandler{System.Speech.Recognition.SpeechDetectedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeechDetectedEventArgs>
  nameWithType: EventHandler<SpeechDetectedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.SpeechDetectedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.SpeechDetectedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SpeechDetectedEventArgs
    name: SpeechDetectedEventArgs
    nameWithType: SpeechDetectedEventArgs
    fullName: SpeechDetectedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: SpeechHypothesized
  nameWithType: SpeechRecognizer.SpeechHypothesized
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized
- uid: System.EventHandler{System.Speech.Recognition.SpeechHypothesizedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeechHypothesizedEventArgs>
  nameWithType: EventHandler<SpeechHypothesizedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.SpeechHypothesizedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.SpeechHypothesizedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SpeechHypothesizedEventArgs
    name: SpeechHypothesizedEventArgs
    nameWithType: SpeechHypothesizedEventArgs
    fullName: SpeechHypothesizedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: SpeechRecognitionRejected
  nameWithType: SpeechRecognizer.SpeechRecognitionRejected
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected
- uid: System.EventHandler{System.Speech.Recognition.SpeechRecognitionRejectedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeechRecognitionRejectedEventArgs>
  nameWithType: EventHandler<SpeechRecognitionRejectedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SpeechRecognitionRejectedEventArgs
    name: SpeechRecognitionRejectedEventArgs
    nameWithType: SpeechRecognitionRejectedEventArgs
    fullName: SpeechRecognitionRejectedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.SpeechRecognized
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: SpeechRecognized
  nameWithType: SpeechRecognizer.SpeechRecognized
  fullName: System.Speech.Recognition.SpeechRecognizer.SpeechRecognized
- uid: System.EventHandler{System.Speech.Recognition.SpeechRecognizedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeechRecognizedEventArgs>
  nameWithType: EventHandler<SpeechRecognizedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SpeechRecognizedEventArgs
    name: SpeechRecognizedEventArgs
    nameWithType: SpeechRecognizedEventArgs
    fullName: SpeechRecognizedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.State
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: State
  nameWithType: SpeechRecognizer.State
  fullName: System.Speech.Recognition.SpeechRecognizer.State
- uid: System.Speech.Recognition.RecognizerState
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognizerState
  nameWithType: RecognizerState
  fullName: System.Speech.Recognition.RecognizerState
- uid: System.Speech.Recognition.SpeechRecognizer.StateChanged
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: StateChanged
  nameWithType: SpeechRecognizer.StateChanged
  fullName: System.Speech.Recognition.SpeechRecognizer.StateChanged
- uid: System.EventHandler{System.Speech.Recognition.StateChangedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<StateChangedEventArgs>
  nameWithType: EventHandler<StateChangedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.StateChangedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.StateChangedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.StateChangedEventArgs
    name: StateChangedEventArgs
    nameWithType: StateChangedEventArgs
    fullName: StateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: UnloadAllGrammars()
  nameWithType: SpeechRecognizer.UnloadAllGrammars()
  fullName: System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars()
- uid: System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: UnloadGrammar(Grammar)
  nameWithType: SpeechRecognizer.UnloadGrammar(Grammar)
  fullName: System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(Grammar)
- uid: System.Speech.Recognition.SpeechRecognizer.#ctor*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: SpeechRecognizer
  nameWithType: SpeechRecognizer.SpeechRecognizer
- uid: System.Speech.Recognition.SpeechRecognizer.AudioFormat*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioFormat
  nameWithType: SpeechRecognizer.AudioFormat
- uid: System.Speech.Recognition.SpeechRecognizer.AudioLevel*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioLevel
  nameWithType: SpeechRecognizer.AudioLevel
- uid: System.Speech.Recognition.SpeechRecognizer.AudioPosition*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioPosition
  nameWithType: SpeechRecognizer.AudioPosition
- uid: System.Speech.Recognition.SpeechRecognizer.AudioState*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: AudioState
  nameWithType: SpeechRecognizer.AudioState
- uid: System.Speech.Recognition.SpeechRecognizer.Dispose*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Dispose
  nameWithType: SpeechRecognizer.Dispose
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognize*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognize
  nameWithType: SpeechRecognizer.EmulateRecognize
- uid: System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: EmulateRecognizeAsync
  nameWithType: SpeechRecognizer.EmulateRecognizeAsync
- uid: System.Speech.Recognition.SpeechRecognizer.Enabled*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Enabled
  nameWithType: SpeechRecognizer.Enabled
- uid: System.Speech.Recognition.SpeechRecognizer.Grammars*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: Grammars
  nameWithType: SpeechRecognizer.Grammars
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammar*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: LoadGrammar
  nameWithType: SpeechRecognizer.LoadGrammar
- uid: System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: LoadGrammarAsync
  nameWithType: SpeechRecognizer.LoadGrammarAsync
- uid: System.Speech.Recognition.SpeechRecognizer.MaxAlternates*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: MaxAlternates
  nameWithType: SpeechRecognizer.MaxAlternates
- uid: System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: PauseRecognizerOnRecognition
  nameWithType: SpeechRecognizer.PauseRecognizerOnRecognition
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RecognizerAudioPosition
  nameWithType: SpeechRecognizer.RecognizerAudioPosition
- uid: System.Speech.Recognition.SpeechRecognizer.RecognizerInfo*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RecognizerInfo
  nameWithType: SpeechRecognizer.RecognizerInfo
- uid: System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: RequestRecognizerUpdate
  nameWithType: SpeechRecognizer.RequestRecognizerUpdate
- uid: System.Speech.Recognition.SpeechRecognizer.State*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: State
  nameWithType: SpeechRecognizer.State
- uid: System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: UnloadAllGrammars
  nameWithType: SpeechRecognizer.UnloadAllGrammars
- uid: System.Speech.Recognition.SpeechRecognizer.UnloadGrammar*
  parent: System.Speech.Recognition.SpeechRecognizer
  isExternal: false
  name: UnloadGrammar
  nameWithType: SpeechRecognizer.UnloadGrammar
