### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  id: InMemorySymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  type: Class
  summary: "Representa as chaves que são geradas usando algoritmos simétricos e são armazenadas apenas na memória do computador local."
  remarks: "Normalmente, essa classe só é usada pela infraestrutura para transformar XML usando uma chave simétrica."
  syntax:
    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.SymmetricSecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;> </xref> classe usando a chave simétrica especificada."
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave simétrica.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>tem comprimento zero."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;> </xref> classe usando a chave simétrica especificada e um valor que indica se os dados binários devem ser clonados."
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey, bool cloneBuffer);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave simétrica.</xref:System.Byte>"
    - id: cloneBuffer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para clonar a matriz passada para o `symmetricKey` parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>tem comprimento zero."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Descriptografa a chave especificada."
  remarks: "Use os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de criptografia que foi usado para criptografar a chave."
    - id: keyData
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave criptografada.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave descriptografada.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Criptografa a chave especificada."
  remarks: "Use os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de criptografia para criptografar a chave com."
    - id: keyData
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave criptografada.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, or <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Gera uma chave derivada usando o algoritmo de criptografia especificado e os parâmetros para a chave atual."
  remarks: "Para especificar SHA1 P como o algoritmo de criptografia, use o <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>campo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>"
  syntax:
    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: "Um URI que representa o algoritmo de criptografia a ser usado para gerar a chave derivada."
    - id: label
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o parâmetro de rótulo para o algoritmo criptográfico.</xref:System.Byte>"
    - id: nonce
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o valor de uso único que é usado para criar uma chave derivada.</xref:System.Byte>"
    - id: derivedKeyLength
      type: System.Int32
      description: "O tamanho da chave derivada."
    - id: offset
      type: System.Int32
      description: "A posição em que a chave derivada está localizada na matriz de bytes que é retornado deste método."
    return:
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave derivada.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. Os algoritmos com suporte é <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&quot;> </xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém uma transformação descriptografa codificação de texto usando o algoritmo de criptografia especificado."
  remarks: "Use os campos que representam os algoritmos de descriptografia no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "Um algoritmo de criptografia que descriptografa codificação de texto, como XML criptografado."
    - id: iv
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) para o algoritmo especificado.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Um <xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> que representa a transformação de descriptografia."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém uma transformação que criptografa o XML usando o algoritmo de criptografia especificado."
  remarks: "Use os campos que representam os algoritmos de criptografia no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "Um algoritmo de criptografia que criptografa o XML."
    - id: iv
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém o vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) para o algoritmo especificado.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Um <xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> que representa a transformação de criptografia."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o tamanho, em bits, o vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) que é necessário para o algoritmo de criptografia especificado."
  remarks: "Use os campos que representam os algoritmos de criptografia no <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo criptográfico para obter o tamanho do vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)."
    return:
      type: System.Int32
      description: "O tamanho, em bits, o vetor de inicialização (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) que é necessário para o algoritmo de criptografia especificado no <code> algorithm </code> parâmetro."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém uma instância do algoritmo de hash com chave especificada."
  syntax:
    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de hash com chave para obter uma instância do."
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "Um <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref> que representa o algoritmo de hash com chave."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. Os algoritmos com suporte é <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature&quot;> </xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém uma instância do algoritmo simétrico especificado."
  syntax:
    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo simétrico para obter uma instância do."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "Um <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> que representa o algoritmo simétrico."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>Não há suporte. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>,  <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém os bytes que representam a chave simétrica."
  syntax:
    content: public override byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Uma matriz de <xref:System.Byte>que contém a chave simétrica.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um valor que indica se o algoritmo especificado usa chaves assimétricas."
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de criptografia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando o algoritmo especificado usa chaves assimétricas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um valor que indica se esta classe oferece suporte para o algoritmo especificado."
  remarks: "Os algoritmos simétricos que são suportados por essa classe são os algoritmos representados pelos seguintes campos:- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap></xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de criptografia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando o algoritmo especificado é suportado por esta classe. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um valor que indica se o algoritmo especificado usa chaves simétricas."
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de criptografia."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando o algoritmo especificado usa chaves simétricas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o tamanho, em bits, da chave."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "O tamanho, em bits, da chave."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SymmetricSecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
