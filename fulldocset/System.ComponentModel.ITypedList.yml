### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ITypedList
  id: ITypedList
  children:
  - System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  - System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  langs:
  - csharp
  name: ITypedList
  nameWithType: ITypedList
  fullName: System.ComponentModel.ITypedList
  type: Interface
  summary: "Fornece a funcionalidade para descobrir o esquema para obter uma lista vinculável, onde as propriedades disponíveis para associação diferem das propriedades públicas do objeto ao qual associar."
  remarks: "Usar esta interface se, por exemplo, você estiver usando um <xref:System.Data.DataView>objeto que representa um `customer` tabela, que você deseja associar às propriedades no `customer` do objeto que o <xref:System.Data.DataView>representa, não as propriedades de <xref:System.Data.DataView>.</xref:System.Data.DataView> </xref:System.Data.DataView> </xref:System.Data.DataView>       Esta interface não é necessário para suporte de tempo de design de uma lista associável.       Associação de dados pode ocorrer em tempo de execução ou em um designer, mas existem regras para ambos. Em tempo de execução, você pode associar aos dados em qualquer um dos seguintes:- <xref:System.Array>-implementador de <xref:System.Collections.IList>, desde que o implementador tem fortemente tipada <xref:System.Collections.IList.Item%2A>propriedade (ou seja, o <xref:System.Type>for qualquer coisa <xref:System.Object>).</xref:System.Object> </xref:System.Type> </xref:System.Collections.IList.Item%2A> </xref:System.Collections.IList> </xref:System.Array> Você pode fazer isso, tornando a implementação padrão de <xref:System.Collections.IList.Item%2A>particular.</xref:System.Collections.IList.Item%2A> Se você quiser criar um <xref:System.Collections.IList>que segue as regras de uma coleção fortemente tipada, você deve derivar de <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.IList>      -Implementador de ITypedList.       Em um designer, você pode inicializar a associação a <xref:System.ComponentModel.Component>objetos seguindo as mesmas regras.</xref:System.ComponentModel.Component>       Para obter mais informações sobre associação a uma fonte de dados, consulte a <xref:System.Windows.Forms.Binding?displayProperty=fullName>classe.</xref:System.Windows.Forms.Binding?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how to implement the ITypedList interface. A generic type named `SortableBindingList` derives from the <xref:System.ComponentModel.BindingList%601> class and implements the ITypedList interface. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.ComponentModel.ITypedList#1](~/add/codesnippet/csharp/t-system.componentmodel._167_1.cs)]\n [!code-vb[System.ComponentModel.ITypedList#1](~/add/codesnippet/visualbasic/t-system.componentmodel._167_1.vb)]"
  syntax:
    content: public interface ITypedList
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  id: GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  langs:
  - csharp
  name: GetItemProperties(PropertyDescriptor[])
  nameWithType: ITypedList.GetItemProperties(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> que representa as propriedades em cada item usado para associar dados."
  remarks: "Se o `listAccessors` parâmetro não é `null`, normalmente contém um descritor de propriedade que identifica uma lista de contêineres para recuperar o objeto que implementa <xref:System.ComponentModel.ITypedList>.</xref:System.ComponentModel.ITypedList> Por exemplo, um <xref:System.Data.DataSet>que contém duas tabelas, `myCustomers` e `myOrders`, com uma relação entre eles chamado `myCustOrders`.</xref:System.Data.DataSet> Se você criar um <xref:System.Data.DataView>objeto para exibir `myCustomers`, em seguida, chamar o método GetItemProperties com `null` retorna os descritores de propriedade para as colunas `myCustomers`.</xref:System.Data.DataView> Como resultado, um dos descritores de propriedade retornado é um descritor de propriedade para `myCustOrders`, assim como chamando o método GetItemProperties com uma matriz de acessador de lista que contém os descritores de propriedade de `myCustOrders` retornará os descritores de propriedade de `myOrders`."
  example:
  - "The following code example demonstrates how to implement the GetItemProperties method. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.ComponentModel.ITypedList#3](~/add/codesnippet/csharp/3b46cd55-3314-419e-a8e7-_1.cs)]\n [!code-vb[System.ComponentModel.ITypedList#3](~/add/codesnippet/visualbasic/3b46cd55-3314-419e-a8e7-_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.ComponentModel.PropertyDescriptor[] listAccessors);
    parameters:
    - id: listAccessors
      type: System.ComponentModel.PropertyDescriptor[]
      description: "Uma matriz de <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> objetos a localizar na coleção como associável. Isso pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "O <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> que representa as propriedades em cada item usado para associar dados."
  overload: System.ComponentModel.ITypedList.GetItemProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  id: GetListName(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  langs:
  - csharp
  name: GetListName(PropertyDescriptor[])
  nameWithType: ITypedList.GetListName(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Retorna o nome da lista."
  remarks: "Esse método é usado somente na estrutura de tempo de design e os obsoletos <xref:System.Windows.Forms.DataGrid>controle.</xref:System.Windows.Forms.DataGrid>"
  example:
  - "The following code example demonstrates how to implement the GetListName method. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.ComponentModel.ITypedList#4](~/add/codesnippet/csharp/a1408425-c386-40d6-a339-_1.cs)]\n [!code-vb[System.ComponentModel.ITypedList#4](~/add/codesnippet/visualbasic/a1408425-c386-40d6-a339-_1.vb)]"
  syntax:
    content: public string GetListName (System.ComponentModel.PropertyDescriptor[] listAccessors);
    parameters:
    - id: listAccessors
      type: System.ComponentModel.PropertyDescriptor[]
      description: "Uma matriz de <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> objetos, para que o nome da lista será retornado. Isso pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "O nome da lista."
  overload: System.ComponentModel.ITypedList.GetListName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetItemProperties(PropertyDescriptor[])
  nameWithType: ITypedList.GetItemProperties(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[])
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor[]
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor[]
  spec.csharp:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: PropertyDescriptor[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetListName(PropertyDescriptor[])
  nameWithType: ITypedList.GetListName(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.ITypedList.GetItemProperties*
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetItemProperties
  nameWithType: ITypedList.GetItemProperties
- uid: System.ComponentModel.ITypedList.GetListName*
  parent: System.ComponentModel.ITypedList
  isExternal: false
  name: GetListName
  nameWithType: ITypedList.GetListName
