### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "Fornece um ouvinte simples que direciona rastreamento ou depuração da saída para um <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "Uma instância desse EventLogTraceListener pode ser adicionada para o <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, ou <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>coleções para enviar a saída de rastreamento ou de depuração para um <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> Você pode adicionar a instância em seu código ou especificá-lo no arquivo de configuração do aplicativo. Para adicionar um EventLogTraceListener usando um arquivo de configuração do aplicativo, edite o arquivo que corresponde ao nome do seu aplicativo ou o arquivo App. config em um [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] projeto. Nesse arquivo, insira um elemento de um tipo EventLogTraceListener.       O exemplo a seguir adiciona um objeto EventLogTraceListener chamado `myListener` para o <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>coleção.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> O `initializeData` parâmetro especifica o nome da origem do log de eventos que deve ser passado para o <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>construtor.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```Para obter mais informações sobre como adicionar ouvintes de rastreamento no arquivo de configuração do aplicativo, consulte ou.      > [!NOTE] > Se o <xref:System.Diagnostics.EventLog.Source%2A>para o log de eventos que está associado com a instância de EventLogTraceListener não existir, uma nova fonte de evento é criada.</xref:System.Diagnostics.EventLog.Source%2A> Para criar uma fonte de evento no Windows Vista, Windows XP Professional ou Windows Server 2003, você deve ter privilégios administrativos.   >> O motivo disso é que todos os logs de eventos, incluindo segurança, devem ser pesquisados para determinar se a origem do evento é exclusiva. No Windows Vista, os usuários não têm permissão para acessar o log de segurança; Portanto, um <xref:System.Security.SecurityException>é gerada.</xref:System.Security.SecurityException>   >> No Windows Vista, o controle de conta de usuário (UAC) determina os privilégios de um usuário. Se você for um membro do grupo Administradores interno, são atribuídos dois tokens de acesso de tempo de execução: um token de acesso de usuário padrão e um token de acesso de administrador. Por padrão, você está na função de usuário padrão. Para executar o código que acessa o log de segurança, primeiro elevar seus privilégios de usuário padrão para o administrador. Você pode fazer isso quando você iniciar um aplicativo clicando duas vezes no ícone do aplicativo e que indica que você deseja executar como administrador.       A classe fornece a <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>propriedade para obter ou definir o log de eventos que recebe o rastreamento ou depuração da saída, e o <xref:System.Diagnostics.EventLogTraceListener.Name%2A>propriedade para armazenar o nome do EventLogTraceListener.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       O <xref:System.Diagnostics.EventLogTraceListener.Close%2A>método fecha o log de eventos para que ele não recebe do rastreamento ou a saída de depuração.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> O <xref:System.Diagnostics.EventLogTraceListener.Write%2A>e <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>métodos de gravar uma mensagem de log de eventos.</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> </xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > Para evitar a possibilidade de gravar grandes quantidades de dados para o log de eventos, o EventLogTraceListener não dados de saída de rastreamento opcional especificados pelo <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>propriedade.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe sem um ouvinte de rastreamento."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe usando o log de eventos especificado."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "O log de eventos para gravar."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe usando a origem especificada."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "O nome de uma fonte de log de eventos existente."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Fecha o log de eventos para que ele não recebe a saída de rastreamento ou de depuração."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "A ser adicionado."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o log de eventos para gravar."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "O log de eventos para gravar."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome deste <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>."
  remarks: "Essa propriedade padroniza como o nome de origem do log de eventos."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "O nome do ouvinte de rastreamento."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de rastreamento, um objeto de dados e informações de evento para o log de eventos."
  remarks: "> [!IMPORTANT]> De <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>métodos não se destinam a ser chamado pelo código do aplicativo.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Eles são chamados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes de dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>método, como o <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se ferramentas automatizadas, mas também permite que a anexação de objetos adicionais, por exemplo uma instância de exceção, o rastreamento.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       O `eventCache` e `source` parâmetros são usados para determinar se o evento deve ser rastreado. `id`é usado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>equivale a um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é gravada no log de evento com o `data` object, formatada como uma cadeia de caracteres usando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65.535. Se o `id` valor especificado é maior que 65.535, o valor máximo é usado."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída; Normalmente, o nome do aplicativo que gerou o evento de rastreamento."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores de enumeração que especifica o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: data
      type: System.Object
      description: "Um objeto de dados para gravar no arquivo de saída ou o fluxo."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>não foi especificado.       - ou - a cadeia de caracteres de entrada de log excede 32.766 caracteres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de rastreamento, uma matriz de objetos de dados e informações de evento para o log de eventos."
  remarks: "> [!IMPORTANT]> De <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>métodos não se destinam a ser chamado pelo código do aplicativo.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Eles são chamados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes de dados de rastreamento de saída.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>método, como o <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se ferramentas automatizadas, mas também permite que a anexação de objetos adicionais, por exemplo uma instância de exceção, o rastreamento.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       O `severity` e `id` dados do parâmetro são usados para criar um <xref:System.Diagnostics.EventInstance>objeto, que é gravado no log de eventos com os dados da matriz de objetos de dados.</xref:System.Diagnostics.EventInstance>       O `eventCache` e `source` parâmetros são usados para determinar se o evento deve ser rastreado. `id`é usado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>equivale a um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é gravada no log de evento com o `data` matriz object, formatada como uma matriz de cadeia de caracteres, usando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65.535. Se o `id` valor especificado é maior que 65.535, o valor máximo é usado."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída; Normalmente, o nome do aplicativo que gerou o evento de rastreamento."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores de enumeração que especifica o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: data
      type: System.Object[]
      description: "Uma matriz de objetos de dados."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>não foi especificado.       - ou - a cadeia de caracteres de entrada de log excede 32.766 caracteres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de evento para o log de eventos, uma mensagem e informações de rastreamento."
  remarks: "> [!IMPORTANT]> De <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>métodos não se destinam a ser chamado pelo código do aplicativo.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Esses métodos são chamados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se para eventos de rastreamento que podem ser processados automaticamente por ferramentas.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Por exemplo uma ferramenta de monitoramento pode notificar um administrador, se um evento específico é rastreado por uma fonte específica.       O `eventCache` e `source` parâmetros são usados para determinar se o evento deve ser rastreado. `id`é usado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>equivale a um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é gravada no log de evento com o `message` dados usando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65.535. Se o `id` valor especificado é maior que 65.535, o valor máximo é usado."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída; Normalmente, o nome do aplicativo que gerou o evento de rastreamento."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores de enumeração que especifica o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: message
      type: System.String
      description: "A mensagem de rastreamento."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>não foi especificado.       - ou - a cadeia de caracteres de entrada de log excede 32.766 caracteres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava informações de rastreamento, uma matriz formatada de objetos e informações de evento para o log de eventos."
  remarks: "> [!IMPORTANT]> De <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>métodos não se destinam a ser chamado pelo código do aplicativo.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Esses métodos são chamados pelos métodos do <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classes para gravar dados de rastreamento.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       O <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>método destina-se para eventos de rastreamento que podem ser processados automaticamente por ferramentas.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Por exemplo uma ferramenta de monitoramento pode notificar um administrador, se um evento específico é rastreado por uma fonte específica.       O `eventCache` e `source` parâmetros são usados para determinar se o evento deve ser rastreado. `id`é usado para criar um <xref:System.Diagnostics.EventInstance>objeto e o <xref:System.Diagnostics.TraceEventType>equivale a um <xref:System.Diagnostics.EventLogEntryType>para o <xref:System.Diagnostics.EventInstance.EntryType%2A>propriedade.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> O <xref:System.Diagnostics.EventInstance>é gravada no log de eventos usando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método, com a mensagem obtido o `format` e `args` parâmetros.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> O `args` matriz de objeto é convertido em uma cadeia de caracteres usando o <xref:System.String.Format%2A>método, passando o `format` cadeia de caracteres e `args` matriz para a cadeia de caracteres de formato da mensagem para o log de eventos.</xref:System.String.Format%2A>      > [!NOTE] > O valor máximo de `id` parâmetro é de 65.535. Se o `id` valor especificado é maior que 65.535, o valor máximo é usado."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome usado para identificar a saída; Normalmente, o nome do aplicativo que gerou o evento de rastreamento."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Um dos valores de enumeração que especifica o tipo de evento que causou o rastreamento."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento. A combinação de `source` e `id` identifica exclusivamente um evento."
    - id: format
      type: System.String
      description: "Uma cadeia de caracteres de formato que contém zero ou mais itens de formato que correspondem aos objetos a `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matriz que contém zero ou mais objetos a serem formatados."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>não foi especificado.       - ou - a cadeia de caracteres de entrada de log excede 32.766 caracteres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem no log de eventos para essa instância."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem a ser gravada."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>excede 32.766 caracteres."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Grava uma mensagem no log de eventos para essa instância."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "A mensagem a ser gravada."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>excede 32.766 caracteres."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
