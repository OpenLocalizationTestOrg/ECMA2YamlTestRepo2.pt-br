### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "O <xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref> módulo contém procedimentos usados para executar operações de cadeia de caracteres."
  remarks: "Este módulo oferece suporte a palavras-chave de linguagem Visual Basic e membros da biblioteca em tempo de execução que manipulam cadeias de caracteres."
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  remarks: "`Asc`Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.       `AscW`Retorna o ponto de código Unicode para o caractere de entrada. Isso pode ser de 0 a 65535. O valor retornado é independente das configurações da página cultura e o código para o thread atual.      > [!NOTE] > O `AscB` função de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caractere da cadeia de caracteres é usada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém caracteres, um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  remarks: "`Asc`Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.       `AscW`Retorna o ponto de código Unicode para o caractere de entrada. Isso pode ser de 0 a 65535. O valor retornado é independente das configurações da página cultura e o código para o thread atual.      > [!NOTE] > O `AscB` função de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caractere da cadeia de caracteres é usada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém caracteres, um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  remarks: "`Asc`Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.       `AscW`Retorna o ponto de código Unicode para o caractere de entrada. Isso pode ser de 0 a 65535. O valor retornado é independente das configurações da página cultura e o código para o thread atual.      > [!NOTE] > O `AscB` função de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caractere da cadeia de caracteres é usada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém caracteres, um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  remarks: "`Asc`Retorna o *ponto de código*, ou código de caractere, para o caractere de entrada. Isso pode ser de 0 a 255 para caracteres de byte único (SBCS) conjunto de valores e -32768 a 32767 para caracteres de dois bytes (DBCS) conjunto de valores.       `AscW`Retorna o ponto de código Unicode para o caractere de entrada. Isso pode ser de 0 a 65535. O valor retornado é independente das configurações da página cultura e o código para o thread atual.      > [!NOTE] > O `AscB` função de versões anteriores do Visual Basic retorna um código para um byte, em vez de um caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `AscB` não é mais suportada."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão. Se `String` é um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão, apenas o primeiro caractere da cadeia de caracteres é usada para a entrada. Se `String` é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não contém caracteres, um <xref:System.ArgumentException>ocorre erro.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retorna um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa o código de caractere correspondente a um caractere."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna o caractere associado ao código de caractere especificado."
  remarks: "O intervalo assimétrico aceito por `CharCode` compensa as diferenças de armazenamento entre o `Short` e `Integer`. Por exemplo, -29183 é um `Short` mas +&36353; é um `Integer`. Isso também facilita a compatibilidade com o Visual Basic 6.0.       `Chr`usa o <xref:System.Text.Encoding>classe no <xref:System.Text?displayProperty=fullName>conjunto de namespace para determinar se o thread atual está usando um conjunto de caracteres de byte único (SBCS) ou um caractere de dois bytes (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Em seguida, leva `CharCode` como um código de pontos no conjunto apropriado. O intervalo pode ser de 0 a 255 caracteres SBCS e -32768 a 65535 para caracteres DBCS.       O valor retornado depende de página de código para o segmento atual, que está contida no <xref:System.Globalization.TextInfo.ANSICodePage%2A>propriedade o <xref:System.Globalization.TextInfo>classe no <xref:System.Globalization>namespace.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Você pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A>especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`usa `CharCode` como Unicode ponto de código. O intervalo é independente das configurações da página cultura e o código para o thread atual. Valores de -32768 a-1 são tratados o mesmo como valores no intervalo de +&32768; a +&65535;.       Números de 0 a 31 são os mesmos códigos de ASCII não imprimíveis padrão. Por exemplo, `Chr(10)` retorna o caractere de alimentação de uma linha.      > [!NOTE] > O `ChrB` função em versões anteriores do Visual Basic retorna um único byte. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` não é mais suportada."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Obrigatório. Um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> expressão que representa o `code point`, ou código de caractere, para o caractere."
    return:
      type: System.Char
      description: "Retorna o caractere associado ao código de caractere especificado."
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna o caractere associado ao código de caractere especificado."
  remarks: "O intervalo assimétrico aceito por `CharCode` compensa as diferenças de armazenamento entre o `Short` e `Integer`. Por exemplo, -29183 é um `Short` mas +&36353; é um `Integer`. Isso também facilita a compatibilidade com o Visual Basic 6.0.       `Chr`usa o <xref:System.Text.Encoding>classe no <xref:System.Text?displayProperty=fullName>conjunto de namespace para determinar se o thread atual está usando um conjunto de caracteres de byte único (SBCS) ou um caractere de dois bytes (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Em seguida, leva `CharCode` como um código de pontos no conjunto apropriado. O intervalo pode ser de 0 a 255 caracteres SBCS e -32768 a 65535 para caracteres DBCS.       O valor retornado depende de página de código para o segmento atual, que está contida no <xref:System.Globalization.TextInfo.ANSICodePage%2A>propriedade o <xref:System.Globalization.TextInfo>classe no <xref:System.Globalization>namespace.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> Você pode obter <xref:System.Globalization.TextInfo.ANSICodePage%2A>especificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`usa `CharCode` como Unicode ponto de código. O intervalo é independente das configurações da página cultura e o código para o thread atual. Valores de -32768 a-1 são tratados o mesmo como valores no intervalo de +&32768; a +&65535;.       Números de 0 a 31 são os mesmos códigos de ASCII não imprimíveis padrão. Por exemplo, `Chr(10)` retorna o caractere de alimentação de uma linha.      > [!NOTE] > O `ChrB` função em versões anteriores do Visual Basic retorna um único byte. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres no Visual Basic e o .NET Framework estão em Unicode, e `ChrB` não é mais suportada."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Obrigatório. Um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> expressão que representa o `code point`, ou código de caractere, para o caractere."
    return:
      type: System.Char
      description: "Retorna o caractere associado ao código de caractere especificado."
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma matriz de base zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base em critérios de filtro especificados."
  remarks: "Se nenhuma correspondência de `Match` são encontradas nos `Source`, o `Filter` função retorna uma matriz vazia. Ocorrerá um erro se `Source` é definido como `Nothing` ou não é uma matriz unidimensional.       A matriz retornada pelo `Filter` função contém apenas o número de elementos suficientes para conter o número de itens correspondentes.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `CompareMethod.Binary`| Executa uma comparação binária |   | `CompareMethod.Text`| Executa uma comparação textual |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "Obrigatório. Matriz unidimensional de cadeias de caracteres a ser pesquisada."
    - id: Match
      type: System.String
      description: "Obrigatório. Cadeia de caracteres a ser pesquisado."
    - id: Include
      type: System.Boolean
      description: "Opcional. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>valor que indica se deve retornar subcadeias de caracteres que incluem ou exclua `Match`. Se `Include` é <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função retorna o subconjunto da matriz que contém `Match` como uma subcadeia de caracteres. Se `Include` é <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função retorna o subconjunto da matriz não contém `Match` como uma subcadeia de caracteres."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação de cadeia de caracteres a ser usado. Consulte &quot;Configurações&quot; para valores."
    return:
      type: System.String[]
      description: "Retorna uma matriz de base zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base em critérios de filtro especificados."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não é uma matriz unidimensional."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma matriz de base zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base em critérios de filtro especificados."
  remarks: "Se nenhuma correspondência de `Match` são encontradas nos `Source`, o `Filter` função retorna uma matriz vazia. Ocorrerá um erro se `Source` é definido como `Nothing` ou não é uma matriz unidimensional.       A matriz retornada pelo `Filter` função contém apenas o número de elementos suficientes para conter o número de itens correspondentes.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `CompareMethod.Binary`| Executa uma comparação binária |   | `CompareMethod.Text`| Executa uma comparação textual |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "Obrigatório. Matriz unidimensional de cadeias de caracteres a ser pesquisada."
    - id: Match
      type: System.String
      description: "Obrigatório. Cadeia de caracteres a ser pesquisado."
    - id: Include
      type: System.Boolean
      description: "Opcional. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>valor que indica se deve retornar subcadeias de caracteres que incluem ou exclua `Match`. Se `Include` é <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função retorna o subconjunto da matriz que contém `Match` como uma subcadeia de caracteres. Se `Include` é <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> função retorna o subconjunto da matriz não contém `Match` como uma subcadeia de caracteres."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação de cadeia de caracteres a ser usado. Consulte &quot;Configurações&quot; para valores."
    return:
      type: System.String[]
      description: "Retorna uma matriz de base zero contendo um subconjunto de um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz com base em critérios de filtro especificados."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> ou não é uma matriz unidimensional."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres formatada de acordo com as instruções contidas em um formato <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "Obrigatório. Qualquer expressão válida."
    - id: Style
      type: System.String
      description: "Opcional. Um formato válido de nomeada ou definido pelo usuário <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres formatada de acordo com as instruções contidas em um formato <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma expressão formatada como um valor de moeda usando o símbolo de moeda definido no painel de controle do sistema."
  remarks: "Quando um ou mais argumentos opcionais são omitidos, os valores correspondentes de configurações regionais do computador são usados em vez disso.       A posição do símbolo da moeda em relação ao valor de moeda é determinada pelas configurações regionais do sistema.      > [!NOTE] > Vêm de todas as informações de configurações de localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework, exceto o zero à esquerda, que é proveniente do `Number` guia.       O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos usar os seguintes valores de enumeração de três estados.      |||   |-|-|   | Valor | Descrição |   | `TriState.True`| True |   | `TriState.False`| False |   | `TriState.UseDefault`| Configurações regionais do computador |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obrigatório. Expressão a ser formatado."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcional. Valor numérico que indica quantas casas são exibidas à direita da vírgula decimal. Valor padrão é -1, que indica que as configurações regionais do computador são usadas."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumeração que indica se um zero à esquerda é exibido para valores fracionários. Consulte &quot;Comentários&quot; para valores."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumeração que indica se deve ou não colocar valores negativos entre parênteses. Consulte &quot;Comentários&quot; para valores."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumeração que indica se os números são agrupados usando o delimitador de grupo especificado nas configurações regionais do computador. Consulte &quot;Comentários&quot; para valores."
    return:
      type: System.String
      description: "Retorna uma expressão formatada como um valor de moeda usando o símbolo de moeda definido no painel de controle do sistema."
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Número de dígitos após o ponto decimal é maior que 99."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Tipo não é numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma expressão de cadeia de caracteres que representa um valor de data/hora."
  remarks: "O `Date` tipo de dados sempre contém informações de data e hora. Para fins de conversão de tipo, Visual Basic considera 1/1/1 (1 de janeiro do ano 1) como um valor neutro para a data e 00:00:00 (meia-noite) deve ser um valor neutro para a hora. Se você formatar uma `Date` valor como uma cadeia de caracteres de data/hora, `FormatDateTime` não inclui valores neutros na cadeia de caracteres resultante. Por exemplo, se você converter # 1/1/0001 9:30:&#00; em uma cadeia de caracteres, o resultado é &quot;9:30:00 AM&quot;; as informações de data são suprimidas. No entanto, as informações de data ainda estão presentes no original `Date` valor e pode ser recuperada com funções como `DatePart`.      > [!NOTE] > Se você passar o `Expression` argumento como um `String` literal, `FormatDateTime` interpreta isso de acordo com o <xref:System.Globalization.CultureInfo.CurrentCulture%2A>configuração do seu aplicativo.</xref:System.Globalization.CultureInfo.CurrentCulture%2A> No entanto, se você passá-lo como um `Date` literal, use o formato #mm/dd/aaaa #, porque `FormatDateTime` sempre interpreta um `Date` literal de acordo com a cultura do inglês (EUA). Isso é necessário porque, se um aplicativo é desenvolvido e codificado usando `Date` literais de uma cultura, mas, em seguida, é executada em uma plataforma com uma cultura diferente, o `Date` literais podem ser interpretados incorretamente.       O `NamedFormat` argumento tem as seguintes configurações.      |||   |-|-|   | Constante | Descrição |   | `DateFormat.GeneralDate`| Exibe uma data / hora. Exiba uma parte de data como uma data abreviada. Se houver uma parte de hora, exibe um longo tempo. Se estiver presente, exibir as duas partes. |   | `DateFormat.LongDate`| Exibe uma data usando o formato de data por extenso especificado nas configurações regionais do computador. |   | `DateFormat.ShortDate`| Exibe uma data usando o formato de data abreviada especificado nas configurações regionais do computador. |   | `DateFormat.LongTime`| Exibe uma hora usando o formato de hora especificado nas configurações regionais do computador. |   | `DateFormat.ShortTime`| Exibe uma hora usando o formato de 24 horas (hh: mm). |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>expressão a ser formatado."
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "Opcional. Valor numérico que indica o formato de data/hora usado. Se omitido, <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref> é usado."
    return:
      type: System.String
      description: "Retorna uma expressão de cadeia de caracteres que representa um valor de data/hora."
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>configuração não é válida."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma expressão formatada como um número."
  remarks: "Quando um ou mais argumentos opcionais são omitidos os valores dos argumentos omitidos são fornecidos pelas configurações de localidade.      > [!NOTE] > Vêm de todas as informações de configurações de localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework.       O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos têm as seguintes configurações.      |||   |-|-|   | Constante | Descrição |   | `TriState.True`| True |   | `TriState.False`| False |   | `TriState.UseDefault`| Configurações regionais do computador |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obrigatório. Expressão a ser formatado."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcional. Valor numérico que indica quantas casas são exibidas à direita da vírgula decimal. O valor padrão é -1, que indica que as configurações regionais do computador são usadas."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se um 0 à esquerda é exibida para valores fracionários. Consulte &quot;Configurações&quot; para valores."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se deve colocar valores negativos entre parênteses. Consulte &quot;Configurações&quot; para valores."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se os números são agrupados usando o delimitador de grupo especificado nas configurações de localidade. Consulte &quot;Configurações&quot; para valores."
    return:
      type: System.String
      description: "Retorna uma expressão formatada como um número."
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Tipo não é numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma expressão formatada como uma porcentagem (isto é, multiplicada por 100) com um caractere % à direita."
  remarks: "Quando um ou mais argumentos opcionais são omitidos, os valores dos argumentos omitidos são fornecidos pelas configurações de localidade.      > [!NOTE] > Vêm de todas as informações de configurações de localidade do aplicativo. Por padrão, que será a localidade definida no painel de controle. No entanto, ele pode ser alterado por meio de programação usando o .NET Framework.       O `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` argumentos têm as seguintes configurações.      |||   |-|-|   | Constante | Descrição |   | `TriState.True`| True |   | `TriState.False`| False |   | `TriState.Default`| Configurações regionais do computador |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obrigatório. Expressão a ser formatado."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Opcional. Valor numérico indicando quantas casas à direita do decimal são exibidos. Valor padrão é -1, que indica que as configurações de localidade são usadas."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se um zero à esquerda exibe para valores fracionários. Consulte &quot;Configurações&quot; para valores."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se deve ou não colocar valores negativos entre parênteses. Consulte &quot;Configurações&quot; para valores."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Opcional. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante que indica se os números são agrupados usando o delimitador de grupo especificado nas configurações de localidade. Consulte &quot;Configurações&quot; para valores."
    return:
      type: System.String
      description: "Retorna uma expressão formatada como uma porcentagem (isto é, multiplicada por 100) com um caractere % à direita."
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Tipo não é numérico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> valor que representa o caractere do índice especificado na cadeia de caracteres fornecida."
  remarks: "Se `Index` é menor que 1 ou maior que o índice do último caractere no `str`, uma `ArgumentException` é gerada."
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    - id: Index
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O índice (baseado em&1;) do caractere de `str` a ser retornado."
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>valor que representa o caractere do índice especificado na cadeia de caracteres fornecida."
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>é <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <code>Index</code> &lt; 1, ou <code>Index</code> é maior do que o índice do último caractere do <code>str</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que especifica a posição inicial da primeira ocorrência de uma cadeia de caracteres dentro de outra."
  remarks: "Normalmente, o `InStr` função é usada durante a análise de cadeias de caracteres.      > [!NOTE] > O `InStrB` função nas versões anteriores do Visual Basic retorna um número de bytes em vez de uma posição de caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `InStrB` não é mais suportada.       O `Compare` configurações de argumento são: | | |   |-|-|-|   | Constante | Valor | Descrição |   | `Binary`|0| Executa uma comparação binária |   | `Text`|1| Executa uma comparação de texto |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão que está sendo pesquisado."
    - id: String2
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão procurado."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Especifica o tipo de comparação de cadeia de caracteres. Se `Compare` for omitido, o <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> determina o tipo de comparação."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> InStr retorna       </td></tr><tr><td>           <code>String1</code>tem comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>tem comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> A posição inicial da pesquisa, cujo padrão é a primeira posição de caractere.       </td></tr><tr><td>           <code>String2</code>não foi encontrado       </td><td> 0       </td></tr><tr><td>           <code>String2</code>foi encontrado em<code>String1</code></td><td> Posição onde a correspondência começa       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que especifica a posição inicial da primeira ocorrência de uma cadeia de caracteres dentro de outra."
  remarks: "Normalmente, o `InStr` função é usada durante a análise de cadeias de caracteres.      > [!NOTE] > O `InStrB` função nas versões anteriores do Visual Basic retorna um número de bytes em vez de uma posição de caractere. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic 2005 estão em Unicode, e `InStrB` não é mais suportada.       O `Compare` configurações de argumento são: | | |   |-|-|-|   | Constante | Valor | Descrição |   | `Binary`|0| Executa uma comparação binária |   | `Text`|1| Executa uma comparação de texto |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "Opcional. Expressão numérica que define a posição inicial para cada pesquisa. Se omitido, a pesquisa começa na posição do primeiro caractere. O índice de início é baseado em 1."
    - id: String1
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão que está sendo pesquisado."
    - id: String2
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão procurado."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Especifica o tipo de comparação de cadeia de caracteres. Se `Compare` for omitido, o <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> determina o tipo de comparação."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> InStr retorna       </td></tr><tr><td>           <code>String1</code>tem comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>tem comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>não foi encontrado       </td><td> 0       </td></tr><tr><td>           <code>String2</code>foi encontrado em<code>String1</code></td><td> Posição onde a correspondência começa       </td></tr><tr><td>           <code>Start</code>&gt; comprimento de<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna a posição da primeira ocorrência de uma cadeia de caracteres dentro de outra, a partir do lado direito da cadeia de caracteres."
  remarks: "Observe que a sintaxe para a `InStrRev` função não é igual à sintaxe para a `InStr` função.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `Binary`| Executa uma comparação binária. |   | `Text`| Executa uma comparação textual. |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "Obrigatório. Expressão de cadeia de caracteres que está sendo pesquisado."
    - id: StringMatch
      type: System.String
      description: "Obrigatório. Expressão de cadeia de caracteres que está sendo pesquisado."
    - id: Start
      type: System.Int32
      description: "Opcional. Definindo a posição inicial baseada em um para cada pesquisa a partir do lado esquerdo da cadeia de caracteres de expressão numérica. Se `Start` for omitido e&1; for usado, o que significa que a pesquisa começa na posição do último caractere. Pesquisa, em seguida, continua a partir da direita para a esquerda."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação para usar ao avaliar subcadeias de caracteres. Se omitido, será executada uma comparação binária. Consulte as configurações para os valores."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> Retorna InStrRev       </td></tr><tr><td>           <code>StringCheck</code>tem comprimento zero       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>tem comprimento zero       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>não foi encontrado       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>foi encontrado em<code>StringCheck</code></td><td> Posição na qual a primeira correspondência é encontrada, começando com o lado direito da cadeia de caracteres.       </td></tr><tr><td>           <code>Start</code>é maior do que o comprimento do<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres criada pela associação a um número de subcadeias de caracteres contidas em uma matriz."
  remarks: "Há uma paridade entre o `Join` e `Split` funções. O `Join` pega uma matriz de cadeias de caracteres de função e associa usando uma cadeia de caracteres delimitadora para retornar uma única cadeia de caracteres. O `Split` função usa uma cadeia de caracteres e a separa no delimitador, para retornar uma matriz de cadeias de caracteres. No entanto, uma diferença importante é que `Join` pode concatenar cadeias de caracteres com qualquer cadeia de caracteres delimitadora, `Split` somente pode separar cadeias de caracteres usando um único caractere delimitador."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "Obrigatório. Matriz unidimensional contendo subcadeias de caracteres a ser inserida."
    - id: Delimiter
      type: System.String
      description: "Opcional. Qualquer cadeia de caracteres, usada para separar as subcadeias de caracteres na cadeia de caracteres retornada. Se omitido, o caractere de espaço (&quot;&quot;) é usado. Se `Delimiter` é uma cadeia de caracteres de comprimento zero (&quot;&quot;) ou <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, todos os itens na lista são concatenados sem delimitadores."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres criada pela associação a um número de subcadeias de caracteres contidas em uma matriz."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>não é uma dimensão."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres criada pela associação a um número de subcadeias de caracteres contidas em uma matriz."
  remarks: "Há uma paridade entre o `Join` e `Split` funções. O `Join` pega uma matriz de cadeias de caracteres de função e associa usando uma cadeia de caracteres delimitadora para retornar uma única cadeia de caracteres. O `Split` função usa uma cadeia de caracteres e a separa no delimitador, para retornar uma matriz de cadeias de caracteres. No entanto, uma diferença importante é que `Join` pode concatenar cadeias de caracteres com qualquer cadeia de caracteres delimitadora, `Split` somente pode separar cadeias de caracteres usando um único caractere delimitador."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "Obrigatório. Matriz unidimensional contendo subcadeias de caracteres a ser inserida."
    - id: Delimiter
      type: System.String
      description: "Opcional. Qualquer cadeia de caracteres, usada para separar as subcadeias de caracteres na cadeia de caracteres retornada. Se omitido, o caractere de espaço (&quot;&quot;) é usado. Se `Delimiter` é uma cadeia de caracteres de comprimento zero (&quot;&quot;) ou <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, todos os itens na lista são concatenados sem delimitadores."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres criada pela associação a um número de subcadeias de caracteres contidas em uma matriz."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>não é uma dimensão."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas."
  remarks: "Somente as letras maiusculas são convertidas em minúsculas; todas as letras minúsculas e caracteres que não sejam letras permanecem inalterados.       Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.      > [!IMPORTANT] > Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=fullName>método e passe <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.Char
      description: "Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas."
  remarks: "Somente as letras maiusculas são convertidas em minúsculas; todas as letras minúsculas e caracteres que não sejam letras permanecem inalterados.       Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.      > [!IMPORTANT] > Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=fullName>método e passe <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres ou um caractere convertido em minúsculas."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres contendo um número especificado de caracteres do lado esquerdo de uma cadeia de caracteres."
  remarks: "Para determinar o número de caracteres em `str`, use o `Len` função. Se usado em um aplicativo Windows Forms ou qualquer outra classe que tenha uma `Left` propriedade, você deve qualificar totalmente a função com `Microsoft.VisualBasic.Left`.      > [!NOTE] > O `LeftB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LeftB` não é mais suportada."
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão do qual os caracteres mais à esquerda são retornados."
    - id: Length
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Expressão numérica indicando quantos caracteres para retornar. Se for 0, uma cadeia de caracteres de comprimento zero (&quot;&quot;) será retornado. Se maior ou igual ao número de caracteres em `str`, a cadeia de caracteres inteira será retornada."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres contendo um número especificado de caracteres do lado esquerdo de uma cadeia de caracteres."
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  remarks: "Com tipos definidos pelo usuário e `Object` variáveis, o `Len` função retorna o tamanho como ele será gravado no arquivo pelo `FilePut` função. Se um `Object` contém um `String`, ela retornará o comprimento da cadeia de caracteres. Se um `Object` contém qualquer outro tipo, ele retornará o tamanho do objeto como ele será gravado no arquivo pelo `FilePut` função.       O `VBFixedString` atributo pode ser aplicado a campos de cadeia de caracteres em objetos para indicar o tamanho da cadeia de caracteres, em bytes, quando gravados em disco. O `Len` função usa o `VBFixedString` atributo, se disponível, ao determinar o tamanho de `Object` variáveis.      > [!NOTE] > O `Len` função pode não ser capaz de determinar o número real de bytes de armazenamento necessário quando usado com cadeias de caracteres de comprimento variável em tipos de dados definidos pelo usuário.      > [!NOTE] > O `LenB` função em versões anteriores do Visual Basic retorna o número de bytes em uma cadeia de caracteres em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `LenB` não é mais suportada.      ## Inteligente notas do desenvolvedor de dispositivo de `Len` função aceita apenas `String` e `Object` variáveis como parâmetros. Se um `Object` contém um `String`, ela retornará o comprimento do `String`. Se um parâmetro é um valor nulo `Object` referência, a função retornará zero. Se um `Object` contém qualquer outro tipo, uma exceção será lançada."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome de variável ou expressão. Se `Expression` é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, o <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> função retorna o tamanho como ele será gravado no arquivo pelo <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> função."
    return:
      type: System.Int32
      description: "Retorna um inteiro que contém o número de caracteres em uma cadeia de caracteres ou o nominal número de bytes necessários para armazenar uma variável."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres alinhada à esquerda contendo a cadeia especificada ajustada ao comprimento especificado."
  remarks: "Se a cadeia de caracteres especificada é maior que o comprimento especificado, a cadeia de caracteres retornada é reduzida para o comprimento especificado. Se a cadeia de caracteres especificada é menor que o comprimento especificado, os espaços são adicionados para a extremidade direita da cadeia de caracteres retornada para produzir o tamanho apropriado."
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão. Nome da variável de cadeia de caracteres."
    - id: Length
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Comprimento da cadeia de caracteres retornada."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres alinhada à esquerda contendo a cadeia especificada ajustada ao comprimento especificado."
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que contém uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), sem espaços à direita (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não à esquerda ou espaços à direita (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que contém uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), sem espaços à direita (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não à esquerda ou espaços à direita (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que contém todos os caracteres a partir de uma posição especificada em uma cadeia de caracteres."
  remarks: "Para determinar o número de caracteres em `str`, use o `Len` função.       Visual Basic tem um `Mid` função e um `Mid` instrução. Os dois elementos operam em um número especificado de caracteres em uma cadeia de caracteres, mas o `Mid` função retorna os caracteres enquanto o `Mid` instrução substitui os caracteres. Para obter mais informações, consulte [instrução Mid](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > O `MidB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic estão em Unicode, e `MidB` não é mais suportada."
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão do qual os caracteres são retornados."
    - id: Start
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Posição inicial de caracteres a serem retornados. Se `Start` é maior que o número de caracteres em `str`, o <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> função retorna uma cadeia de caracteres de comprimento zero (&quot;&quot;). `Start`é baseado em um."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que consiste em todos os caracteres a partir da posição especificada na cadeia de caracteres."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que contém um número especificado de caracteres a partir de uma posição especificada em uma cadeia de caracteres."
  remarks: "Para determinar o número de caracteres em `str`, use o `Len` função.       Visual Basic tem um `Mid` função e um `Mid` instrução. Os dois elementos operam em um número especificado de caracteres em uma cadeia de caracteres, mas o `Mid` função retorna os caracteres enquanto o `Mid` instrução substitui os caracteres. Para obter mais informações, consulte [instrução Mid](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > O `MidB` função nas versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres do Visual Basic estão em Unicode, e `MidB` não é mais suportada."
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão do qual os caracteres são retornados."
    - id: Start
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Posição inicial de caracteres a serem retornados. Se `Start` é maior que o número de caracteres em `str`, o <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> função retorna uma cadeia de caracteres de comprimento zero (&quot;&quot;). `Start`é baseado em um."
    - id: Length
      type: System.Int32
      description: "Opcional. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Número de caracteres a ser retornado. Se for omitido ou se houver menos de `Length` caracteres no texto (incluindo o caractere na posição `Start`), todos os caracteres da posição inicial até o final da cadeia de caracteres são retornados."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que consiste no número especificado de caracteres a partir da posição especificada na cadeia de caracteres."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres na qual uma subcadeia de caracteres especificada foi substituída por outra subcadeia de caracteres um número especificado de vezes."
  remarks: "O valor de retorno de `Replace` função é uma cadeia de caracteres que começa na posição especificada pelo `Start` e termina no final do `Expression` cadeia de caracteres, com as substituições feitas conforme especificado pelo `Find` e `Replace` valores.       O `Compare` argumento pode ter os seguintes valores.      |||   |-|-|   | Constante | Descrição |   | `Binary`| Executa uma comparação binária |   | `Text`| Executa uma comparação textual |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Obrigatório. Expressão que contém a subcadeia de caracteres a substituir da cadeia de caracteres."
    - id: Find
      type: System.String
      description: "Obrigatório. Subcadeia de caracteres que está sendo pesquisada."
    - id: Replacement
      type: System.String
      description: "Obrigatório. Subcadeia de caracteres de substituição."
    - id: Start
      type: System.Int32
      description: "Opcional. Posicionar dentro de `Expression` que inicia uma subcadeia de caracteres usada para a substituição. O valor de retorno <xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;> </xref> é uma cadeia de caracteres que começa em `Start`, com substituições apropriadas. Se omitido, 1 será utilizado."
    - id: Count
      type: System.Int32
      description: "Opcional. Número de substituições de subcadeia de caracteres para executar. Se omitido, o valor padrão é -1, que significa &quot;tornar todas as substituições possíveis&quot;."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico que indica o tipo de comparação para usar ao avaliar subcadeias de caracteres. Consulte as configurações para os valores."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>Retorna os seguintes valores.       <table><tbody><tr><td> Se       </td><td> Replace retornará       </td></tr><tr><td><code>Find</code>tem comprimento zero ou<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Cópia de<code>Expression</code></td></tr><tr><td><code>Replace</code>tem comprimento zero       </td><td> Cópia de <code> Expression </code> com nenhuma ocorrência de<code>Find</code></td></tr><tr><td><code>Expression</code>o comprimento for zero ou <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, ou <code> Start </code> é maior que o comprimento do<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>é 0       </td><td> Cópia de<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres contendo um número especificado de caracteres do lado direito de uma cadeia de caracteres."
  remarks: "Para determinar o número de caracteres em `str`, use o `Len` função. Se usado em um formulário do Windows, ou qualquer outra classe que tenha uma `Right` propriedade, você deve qualificar totalmente a função com `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] > O `RightB` função em versões anteriores do Visual Basic retorna uma cadeia de caracteres em bytes, em vez de caracteres. Ele é usado principalmente para converter cadeias de caracteres de dois bytes (DBCS) conjunto de aplicativos. Todas as cadeias de caracteres atuais do Visual Basic estão em Unicode, e `RightB` não é mais suportada."
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão do qual os caracteres mais à direita são retornados."
    - id: Length
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Expressão numérica indicando quantos caracteres para retornar. Se for 0, uma cadeia de caracteres de comprimento zero (&quot;&quot;) será retornado. Se maior ou igual ao número de caracteres em `str`, a cadeia de caracteres inteira será retornada."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres contendo um número especificado de caracteres do lado direito de uma cadeia de caracteres."
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres alinhada à direita que contém a cadeia especificada ajustada para o comprimento especificado."
  remarks: "Se `Source` é maior do que `Length`, `RSet` coloca apenas os caracteres mais à esquerda, até o comprimento de `Source`, na cadeia de caracteres retornada. Se a cadeia de caracteres especificada é menor que o comprimento especificado, os espaços são adicionados para o lado esquerdo da cadeia de caracteres para produzir o tamanho apropriado. Se a cadeia de caracteres especificada é maior que o comprimento especificado, ele é reduzido para o comprimento especificado."
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão. Nome da variável de cadeia de caracteres."
    - id: Length
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. Comprimento da cadeia de caracteres retornada."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres alinhada à direita que contém a cadeia especificada ajustada para o comprimento especificado."
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que contém uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), sem espaços à direita (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não à esquerda ou espaços à direita (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que contém uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), sem espaços à direita (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não à esquerda ou espaços à direita (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que consiste no número especificado de espaços."
  remarks: "O `Space` função é útil para formatação de saída e para limpar dados em cadeias de caracteres de comprimento fixo."
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O número de espaços na cadeia de caracteres."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que consiste no número especificado de espaços."
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma matriz unidimensional de base zero contendo um número especificado de subcadeias de caracteres."
  remarks: "Por padrão, ou quando `Limit` é igual a -1, o `Split` função divide a cadeia de caracteres de entrada em cada ocorrência da cadeia de caracteres delimitadora e retorna as subcadeias de caracteres em uma matriz. Quando o `Limit` parâmetro for maior que zero, o `Split` função divide a cadeia de caracteres no primeiro `Limit`ocorrências de-1 do delimitador e retorna uma matriz com as subcadeias de caracteres resultantes. Por exemplo, `Split(&quot;a:b:c&quot;, &quot;:&quot;)` retorna a matriz `{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`, enquanto `Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)` retorna a matriz `{&quot;a&quot;, &quot;b:c&quot;}`.       Quando o `Split` função encontra dois delimitadores em uma linha ou um delimitador no início ou no final da cadeia de caracteres, ele interpreta como envolvem uma cadeia de caracteres vazia (&quot;&quot;). Por exemplo, `Split(&quot;xx&quot;, &quot;x&quot;)` retorna a matriz que contém três cadeias de caracteres vazias: uma entre o início da cadeia de caracteres e o primeiro &quot;x&quot;, uma entre as duas &quot;cadeias de caracteres x&quot; e outra entre o último &quot;x&quot; e o fim da cadeia de caracteres.       Esta tabela mostra como opcional `Delimiter`, `Limit`, e `Compare` parâmetros podem alterar o comportamento do `Split` função.      |||   |-|-|   | Chamada de divisão | Valor de retorno |   | `Split(&quot;42, 12, 19&quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`| {&quot;42&quot;, &quot;12, 19&quot;} |   | `Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`| {&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`| {&quot;Alice e Bob&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`| {&quot;Alice&quot;, &quot;Bob&quot;} |   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`| {&quot;someone@example.com&quot;}|   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`| {&quot;alguém&quot;, &quot;example.com&quot;}|       O `Compare` argumento pode ter os seguintes valores.      ||||   |-|-|-|   | Constante | Descrição | Valor |   | `CompareMethod.Binary`| Executa uma comparação binária |&0; |   | `CompareMethod.Text`| Executa uma comparação textual |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão contendo substrings e delimitadores."
    - id: Delimiter
      type: System.String
      description: "Opcional. Qualquer caractere único usado para identificar limites de subcadeia de caracteres. Se `Delimiter` for omitido, o caractere de espaço (&quot;&quot;) é assumido como o delimitador."
    - id: Limit
      type: System.Int32
      description: "Opcional. Número máximo de subcadeias de caracteres no qual a cadeia de caracteres de entrada deve ser dividida. O padrão, –&1;, indica que a cadeia de caracteres de entrada deve ser dividida em cada ocorrência da `Delimiter` cadeia de caracteres."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Valor numérico indicando a comparação para usar ao avaliar subcadeias de caracteres. Consulte &quot;Configurações&quot; para valores."
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>matriz. Se <code> Expression </code> é uma cadeia de caracteres de comprimento zero (&quot;&quot;), <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> retorna uma matriz de elemento único que contém uma cadeia de caracteres de comprimento zero. Se <code> Delimiter </code> é uma cadeia de caracteres de comprimento zero, ou se ele não aparecer em qualquer lugar na <code> Expression </code>, <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> retorna uma matriz de elemento único que contém todo o <code> Expression </code> cadeia de caracteres."
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna -1, 0 ou 1, com base no resultado de uma comparação de cadeia de caracteres."
  remarks: "As cadeias de caracteres são comparadas por valores de classificação alfanumérica começando com o primeiro caractere. Para obter mais informações sobre comparações binárias, comparações textuais e ordem de classificação, consulte [Option Compare Statement](~/add/includes/ajax-current-ext-md.md).       O `Compare` configurações de argumento são: | | |   |-|-|   | Constante | Descrição |   | `Binary`| Executa uma comparação binária, com base em uma ordem de classificação derivada de representações binárias internas dos caracteres. |   | `Text`| Executa uma comparação de texto, com base em uma ordem de classificação de maiusculas e minúsculas do texto determinada pelo seu sistema `LocaleID` valor. |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    - id: String2
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Opcional. Especifica o tipo de comparação de cadeia de caracteres. Se `Compare` for omitido, o <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> determina o tipo de comparação."
    return:
      type: System.Int32
      description: "O <xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref> função tem os seguintes valores de retorno.       <table><tbody><tr><td> Se       </td><td> StrComp retorna       </td></tr><tr><td><code>String1</code>Classifica adiantado<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>é igual a<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>Classifica após<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>valor não é válido."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres convertida conforme especificado."
  remarks: "As constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, e `VbStrConv.Hiragana` podem causar erros de tempo de execução quando usadas em localidades onde eles não se aplicam, mas nem sempre: as constantes `VbStrConv.Katakana` e `VbStrConv.Hiragana` pode ser usado em um sistema não-japonês com o pacote de idiomas japonês instalado. Além disso, o uso das constantes `VbStrConv.Wide` e `VbStrConv.Narrow` é suportado em qualquer sistema com um idioma do Leste Asiático instalado.       Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.      > [!IMPORTANT] > Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=fullName>método e passe <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/add/includes/ajax-current-ext-md.md).       O `Conversion` configurações de argumento são: | | |   |-|-|   | Membro de enumeração | Descrição |   | `VbStrConv.None`| Não realiza nenhuma conversão |   | `VbStrConv.LinguisticCasing`| Usa regras linguísticas de maiusculas e minúsculas, em vez de sistema de arquivos (padrão). Válido com `VbStrConv.UpperCase` e `VbStrConv.LowerCase` apenas. |   | `VbStrConv.UpperCase`| Converte a cadeia de caracteres para caracteres maiusculos. |   | `VbStrConv.LowerCase`| Converte a cadeia de caracteres para caracteres minúsculos. |   | `VbStrConv.ProperCase`| Converte a primeira letra de cada palavra na cadeia de caracteres em maiusculas. |   | `VbStrConv.Wide` <sup>*</sup>| Converte estreitos (meia largura) caracteres na cadeia de caracteres (largura inteira). |   | `VbStrConv.Narrow` <sup>*</sup>| Converte caracteres todo (largura inteira) na cadeia de caracteres (meia largura). |   | `VbStrConv.Katakana` <sup>**</sup>| Converte caracteres Hiragana na cadeia de caracteres para caracteres Katakana. |   | `VbStrConv.Hiragana` <sup>**</sup>| Converte caracteres Katakana na cadeia de caracteres para caracteres Hiragana. |   | `VbStrConv.SimplifiedChinese` <sup>*</sup>| Converte caracteres de chinês tradicional em chinês simplificado. |   | `VbStrConv.TraditionalChinese` <sup>*</sup>| Converte caracteres de chinês simplificado em chinês tradicional. |       <sup> * </sup> Aplica-se a localidades asiáticas.       <sup>**</sup>Aplica-se para o Japão apenas.      > [!NOTE] > Essas constantes são especificadas no common language runtime do .NET Framework. Como resultado, eles podem ser usados em qualquer lugar no seu código no lugar dos valores reais. A maioria pode ser combinada (por exemplo, `UpperCase + Wide`), exceto quando eles são mutuamente exclusivos (por exemplo, `VbStrConv.Wide + VbStrConv.Narrow`).       Estes são os separadores de palavras válidos para capitalização apropriada: nulo (`Chr$(0)`), guia horizontal (`Chr$(9)`), alimentação de linha (`Chr$(10)`), barra vertical (`Chr$(11)`), alimentação de formulário (`Chr$(12)`), retorno de carro (`Chr$(13)`), espaço (conjunto de caracteres de byte único) (`Chr$(32)`). O valor real para um espaço, o que pode ser total ou meia largura, varia por país/região para culturas do Leste Asiático."
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressão a ser convertida."
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "Obrigatório. <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>membro. O valor de enumeração que especifica o tipo de conversão a ser executada."
    - id: LocaleID
      type: System.Int32
      description: "Opcional. O <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valor, se for diferente do sistema <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valor. (O sistema <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valor é o padrão.)"
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres convertida conforme especificado."
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Não há suporte para <code> LocaleID </code>, <code> Conversion </code> &lt; 0 ou &gt; 2048, ou não há suporte para conversão de localidade especificada."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou objeto que consiste o caractere especificado repetido o número de vezes especificado."
  remarks: "Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere no `Character` argumento e ele é duplicado `Number` número de vezes."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O comprimento de cadeia de caracteres a ser retornado."
    - id: Character
      type: System.Char
      description: "Obrigatório. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Usará apenas o primeiro caractere da expressão. Se o caractere é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, ele deve conter um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valor."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres ou objeto que consiste o caractere especificado repetido o número de vezes especificado."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é menor que 0 ou <code>Character</code> tipo não é válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou objeto que consiste o caractere especificado repetido o número de vezes especificado."
  remarks: "Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere no `Character` argumento e ele é duplicado `Number` número de vezes."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O comprimento de cadeia de caracteres a ser retornado."
    - id: Character
      type: System.Object
      description: "Obrigatório. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Usará apenas o primeiro caractere da expressão. Se o caractere é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, ele deve conter um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valor."
    return:
      type: System.Object
      description: "Retorna uma cadeia de caracteres ou objeto que consiste o caractere especificado repetido o número de vezes especificado."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é menor que 0 ou <code>Character</code> tipo não é válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou objeto que consiste o caractere especificado repetido o número de vezes especificado."
  remarks: "Essa função retorna um `String` composto por caracteres repetidos. O caractere que compõe a cadeia de caracteres é o primeiro caractere no `Character` argumento e ele é duplicado `Number` número de vezes."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>expressão. O comprimento de cadeia de caracteres a ser retornado."
    - id: Character
      type: System.String
      description: "Obrigatório. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Usará apenas o primeiro caractere da expressão. Se o caractere é do tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, ele deve conter um <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valor."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres ou objeto que consiste o caractere especificado repetido o número de vezes especificado."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>é menor que 0 ou <code>Character</code> tipo não é válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres na qual a ordem dos caracteres de uma cadeia de caracteres especificada é invertida."
  remarks: "O `StrReverse` função retorna uma cadeia de caracteres que contém os mesmos caracteres como `Expression`, mas em ordem oposta."
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Obrigatório. Expressão de cadeia de caracteres cujos caracteres serão invertidos. Se `Expression` é uma cadeia de caracteres de comprimento zero (&quot;&quot;), uma cadeia de caracteres de comprimento zero será retornada."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres na qual a ordem dos caracteres de uma cadeia de caracteres especificada é invertida."
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres que contém uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), sem espaços à direita (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não à esquerda ou espaços à direita (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "O `LTrim`, `RTrim`, e `Trim` funções remover espaços de extremidades de cadeias de caracteres."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que contém uma cópia de uma cadeia de caracteres especificada sem espaços à esquerda (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), sem espaços à direita (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), ou não à esquerda ou espaços à direita (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiusculas."
  remarks: "Somente letras minúsculas são convertidas em letras maiusculas; todas as letras maiusculas e caracteres que não sejam letras permanecem inalterados.       Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.      > [!IMPORTANT] > Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=fullName>método e passe <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.Char
      description: "Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiusculas."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiusculas."
  remarks: "Somente letras minúsculas são convertidas em letras maiusculas; todas as letras maiusculas e caracteres que não sejam letras permanecem inalterados.       Essa função usa informações de cultura do aplicativo ao manipular a cadeia de caracteres para que as alterações sejam apropriadas para a localidade em que o aplicativo está sendo usado.      > [!IMPORTANT] > Se seu aplicativo toma decisões de segurança com base no resultado de uma comparação ou operação de alteração de caso, a operação deve usar o <xref:System.String.Compare%2A?displayProperty=fullName>método e passe <xref:System.StringComparison>ou <xref:System.StringComparison>para o `comparisonType` argumento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Para obter mais informações, consulte [como cultura afeta cadeias de caracteres no Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Obrigatório. Qualquer <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressão."
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres ou um caractere que contém a cadeia de caracteres especificada, convertida em maiusculas."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
