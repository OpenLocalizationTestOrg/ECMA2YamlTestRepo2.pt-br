### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerRequest
  id: HttpListenerRequest
  children:
  - System.Net.HttpListenerRequest.AcceptTypes
  - System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  - System.Net.HttpListenerRequest.ClientCertificateError
  - System.Net.HttpListenerRequest.ContentEncoding
  - System.Net.HttpListenerRequest.ContentLength64
  - System.Net.HttpListenerRequest.ContentType
  - System.Net.HttpListenerRequest.Cookies
  - System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  - System.Net.HttpListenerRequest.GetClientCertificate
  - System.Net.HttpListenerRequest.GetClientCertificateAsync
  - System.Net.HttpListenerRequest.HasEntityBody
  - System.Net.HttpListenerRequest.Headers
  - System.Net.HttpListenerRequest.HttpMethod
  - System.Net.HttpListenerRequest.InputStream
  - System.Net.HttpListenerRequest.IsAuthenticated
  - System.Net.HttpListenerRequest.IsLocal
  - System.Net.HttpListenerRequest.IsSecureConnection
  - System.Net.HttpListenerRequest.IsWebSocketRequest
  - System.Net.HttpListenerRequest.KeepAlive
  - System.Net.HttpListenerRequest.LocalEndPoint
  - System.Net.HttpListenerRequest.ProtocolVersion
  - System.Net.HttpListenerRequest.QueryString
  - System.Net.HttpListenerRequest.RawUrl
  - System.Net.HttpListenerRequest.RemoteEndPoint
  - System.Net.HttpListenerRequest.RequestTraceIdentifier
  - System.Net.HttpListenerRequest.ServiceName
  - System.Net.HttpListenerRequest.TransportContext
  - System.Net.HttpListenerRequest.Url
  - System.Net.HttpListenerRequest.UrlReferrer
  - System.Net.HttpListenerRequest.UserAgent
  - System.Net.HttpListenerRequest.UserHostAddress
  - System.Net.HttpListenerRequest.UserHostName
  - System.Net.HttpListenerRequest.UserLanguages
  langs:
  - csharp
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
  type: Class
  summary: "Descreve uma solicitação HTTP de entrada para um <xref href=&quot;System.Net.HttpListener&quot;> </xref> objeto. Essa classe não pode ser herdada."
  remarks: "Quando um cliente faz uma solicitação para um identificador de recurso uniforme (URI) tratados por um <xref:System.Net.HttpListener>objeto, o <xref:System.Net.HttpListener>fornece um <xref:System.Net.HttpListenerContext>objeto que contém informações sobre o remetente, a solicitação e resposta que é enviada ao cliente.</xref:System.Net.HttpListenerContext> </xref:System.Net.HttpListener> </xref:System.Net.HttpListener> O <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName>propriedade retorna o objeto HttpListenerRequest que descreve a solicitação.</xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName>       O objeto HttpListenerRequest contém informações sobre a solicitação, como a solicitação <xref:System.Net.HttpListenerRequest.HttpMethod%2A>cadeia de caracteres, <xref:System.Net.HttpListenerRequest.UserAgent%2A>de cadeia de caracteres e dados do corpo da solicitação (consulte o <xref:System.Net.HttpListenerRequest.InputStream%2A>propriedade).</xref:System.Net.HttpListenerRequest.InputStream%2A> </xref:System.Net.HttpListenerRequest.UserAgent%2A> </xref:System.Net.HttpListenerRequest.HttpMethod%2A>       Para responder à solicitação, você deve obter a resposta associada usando o <xref:System.Net.HttpListenerContext.Response%2A>propriedade.</xref:System.Net.HttpListenerContext.Response%2A>"
  example:
  - "The following code example demonstrates how to receive and respond to a HttpListenerRequest.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_3_1.cs)]"
  syntax:
    content: public sealed class HttpListenerRequest
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.AcceptTypes
  id: AcceptTypes
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
  fullName: System.Net.HttpListenerRequest.AcceptTypes
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém os tipos MIME aceitos pelo cliente."
  remarks: "O `Accept` cabeçalho é uma cadeia de caracteres dos nomes de tipo de email extensões MIME (Multipurpose Internet) separados por espaços (por exemplo, `image/jpeg`), que indicam os tipos MIME que o cliente está preparado para aceitar e processar em uma resposta. O `*/*` entrada indica que o cliente aceita qualquer tipo MIME. Para obter uma descrição detalhada do `Accept` cabeçalho, consulte RFC 2616, disponível em [http://www.rfc-editor.org](http://www.rfc-editor.org/).       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_37_1.cs)]"
  syntax:
    content: public string[] AcceptTypes { get; }
    return:
      type: System.String[]
      description: "A <xref:System.String>matriz que contém os nomes de tipo especificados na solicitação de <xref uid=&quot;langword_csharp_Accept&quot; name=&quot;Accept&quot; href=&quot;&quot;> </xref> cabeçalho ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a solicitação do cliente não incluiu uma <xref uid=&quot;langword_csharp_Accept&quot; name=&quot;Accept&quot; href=&quot;&quot;> </xref> cabeçalho.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.AcceptTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  id: BeginGetClientCertificate(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: BeginGetClientCertificate(AsyncCallback,Object)
  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Inicia uma solicitação assíncrona para o certificado do cliente x.&509; v.&3;."
  syntax:
    content: public IAsyncResult BeginGetClientCertificate (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "Um <xref:System.AsyncCallback>representante que referencia o método a ser invocado quando a operação for concluída.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Um objeto definido pelo usuário que contém informações sobre a operação. Este objeto é passado para o representante de retorno de chamada quando a operação for concluída."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>que indica o status da operação.</xref:System.IAsyncResult>"
  overload: System.Net.HttpListenerRequest.BeginGetClientCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ClientCertificateError
  id: ClientCertificateError
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
  fullName: System.Net.HttpListenerRequest.ClientCertificateError
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um código de erro que identifica um problema com o <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref> fornecido pelo cliente."
  remarks: "Esta propriedade contém um código de erro do Windows retornado por canal seguro (Schannel) segurança suporte provedor de Interface (SSPI), que é usado para validar o certificado. Para obter mais informações sobre o suporte SSPI de Schannel, consulte &quot;Criando um seguro Conexão usando Schannel&quot; na documentação de segurança em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  example:
  - "The following code example checks this property to determine whether the request includes a valid client certificate.  \n  \n [!code-vb[NCLListener#3](~/add/codesnippet/visualbasic/p-system.net.httplistene_33_1.vb)]\n [!code-cs[NCLListener#3](~/add/codesnippet/csharp/p-system.net.httplistene_33_1.cs)]"
  syntax:
    content: public int ClientCertificateError { get; }
    return:
      type: System.Int32
      description: "Um <xref:System.Int32>valor que contém um código de erro do Windows.</xref:System.Int32>"
  overload: System.Net.HttpListenerRequest.ClientCertificateError*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O certificado do cliente não foi inicializado ainda por uma chamada para o <> </> *> ou <> </> *> métodos - ou - a operação ainda está em andamento."
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentEncoding
  id: ContentEncoding
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
  fullName: System.Net.HttpListenerRequest.ContentEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém a codificação do conteúdo que pode ser usado com os dados enviados na solicitação"
  remarks: "Um <xref:System.Text.Encoding>objeto pode ser usado para converter as sequências de bytes em conjuntos de caracteres (páginas de código) e caracteres em sequências de bytes.</xref:System.Text.Encoding> Essa propriedade usará o valor de conjunto de caracteres do `Content-Type` cabeçalho para determinar a codificação. Se essa informação não estiver disponível, essa propriedade retornará <xref:System.Text.Encoding.Default%2A?displayProperty=fullName>.</xref:System.Text.Encoding.Default%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates using the ContentEncoding property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_40_1.cs)]"
  syntax:
    content: public System.Text.Encoding ContentEncoding { get; }
    return:
      type: System.Text.Encoding
      description: "Um <xref:System.Text.Encoding>adequado para uso com os dados do objeto de <xref:System.Net.HttpListenerRequest.InputStream*>propriedade.</xref:System.Net.HttpListenerRequest.InputStream*> </xref:System.Text.Encoding>"
  overload: System.Net.HttpListenerRequest.ContentEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentLength64
  id: ContentLength64
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
  fullName: System.Net.HttpListenerRequest.ContentLength64
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o comprimento do corpo de dados incluído na solicitação."
  remarks: "O `Content-Length` cabeçalho expressa o comprimento, em bytes, dos dados de corpo que acompanha a solicitação.       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example uses the ContentLength64 property while processing body data.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_8_1.cs)]"
  syntax:
    content: public long ContentLength64 { get; }
    return:
      type: System.Int64
      description: "O valor da solicitação de <xref uid=&quot;langword_csharp_Content-Length&quot; name=&quot;Content-Length&quot; href=&quot;&quot;> </xref> cabeçalho. Esse valor é -1 se o comprimento do conteúdo não for conhecido."
  overload: System.Net.HttpListenerRequest.ContentLength64*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentType
  id: ContentType
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
  fullName: System.Net.HttpListenerRequest.ContentType
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o tipo MIME do corpo de dados incluído na solicitação."
  remarks: "Se um cliente inclui o corpo de dados em uma solicitação, ele declara o tipo de email extensões MIME (Multipurpose Internet) dos dados no corpo de `Content-Type` cabeçalho. Por exemplo, o tipo MIME padrão dos dados retornados de um formulário da Web usando o `POST` método é `application/x-www-form-urlencoded`.       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração e RFC 2616, disponível em [http://www.rfc-editor.org](http://www.rfc-editor.org/).</xref:System.Net.HttpRequestHeader>       O ContentType é nulo quando não há nenhum `Content-Type` cabeçalho na solicitação."
  example:
  - "The following code example demonstrates how to use this property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_12_1.cs)]"
  syntax:
    content: public string ContentType { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o texto da solicitação de <xref uid=&quot;langword_csharp_Content-Type&quot; name=&quot;Content-Type&quot; href=&quot;&quot;> </xref> cabeçalho.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.ContentType*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Cookies
  id: Cookies
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
  fullName: System.Net.HttpListenerRequest.Cookies
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém os cookies enviados com a solicitação."
  remarks: "Um cookie é dados de texto de nome/valor de um servidor Web que é armazenado no computador local (cliente)."
  example:
  - "The following code example displays the values of cookies sent with the request.  \n  \n [!code-cs[Net_Listener_Basic#18](~/add/codesnippet/csharp/p-system.net.httplistene_7_1.cs)]"
  syntax:
    content: public System.Net.CookieCollection Cookies { get; }
    return:
      type: System.Net.CookieCollection
      description: "Um <xref:System.Net.CookieCollection>que contém os cookies que acompanham a solicitação.</xref:System.Net.CookieCollection> Essa propriedade retorna uma coleção vazia se a solicitação não tem cookies."
  overload: System.Net.HttpListenerRequest.Cookies*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  id: EndGetClientCertificate(System.IAsyncResult)
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: EndGetClientCertificate(IAsyncResult)
  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Termina uma solicitação assíncrona para o certificado do cliente x.&509; v.&3;."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "A solicitação pendente para o certificado."
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "O <xref:System.IAsyncResult>objeto que é retornado quando a operação foi iniciada.</xref:System.IAsyncResult>"
  overload: System.Net.HttpListenerRequest.EndGetClientCertificate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>não foi obtido chamando<xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*><code>e.</code>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Este método já foi chamado para a operação identificada por <code> asyncResult </code>."
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.GetClientCertificate
  id: GetClientCertificate
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: GetClientCertificate()
  nameWithType: HttpListenerRequest.GetClientCertificate()
  fullName: System.Net.HttpListenerRequest.GetClientCertificate()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Recupera o certificado do cliente x.&509; v.&3;."
  remarks: "Esse método bloqueia até que o certificado é recuperado."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate ();
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "Um <xref href=&quot;System.Security.Cryptography.X509Certificates&quot;> </xref> objeto que contém o certificado do cliente x.&509; v.&3;."
  overload: System.Net.HttpListenerRequest.GetClientCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uma chamada para esse método para recuperar o certificado do cliente x.&509; v.&3; está em andamento e, portanto, outra chamada para esse método não pode ser feita."
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync
  id: GetClientCertificateAsync
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: GetClientCertificateAsync()
  nameWithType: HttpListenerRequest.GetClientCertificateAsync()
  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Recupera o certificado do cliente x.&509; v.&3; como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída quando o certificado tiver sido recuperado.</xref:System.Threading.Tasks.Task%601>       Se uma chamada para esse método para recuperar o certificado do cliente x.&509; v.&3; está em andamento, outra chamada para esse método não pode ser feita."
  syntax:
    content: public System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}
      description: "Retorna &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade no objeto de tarefa retorna um <xref href=&quot;System.Security.Cryptography.X509Certificates&quot;> </xref> objeto que contém o certificado do cliente x.&509; v.&3;."
  overload: System.Net.HttpListenerRequest.GetClientCertificateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.HasEntityBody
  id: HasEntityBody
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
  fullName: System.Net.HttpListenerRequest.HasEntityBody
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um <xref:System.Boolean>valor que indica se a solicitação foi associado a dados do corpo.</xref:System.Boolean>"
  remarks: "Uma solicitação que envia dados ao servidor usando o `POST` método, por exemplo, deve ter um corpo de entidade."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_17_1.cs)]"
  syntax:
    content: public bool HasEntityBody { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a solicitação associada a dados do corpo; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListenerRequest.HasEntityBody*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Headers
  id: Headers
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Headers
  nameWithType: HttpListenerRequest.Headers
  fullName: System.Net.HttpListenerRequest.Headers
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém a coleção de pares de nome/valor de cabeçalho enviados na solicitação."
  remarks: "Cabeçalhos de solicitação contém informações de metadados. Por exemplo, cabeçalhos podem conter o identificador de URI (Uniform Resource) do recurso que chamadas, o cliente para o servidor, a identidade do agente de usuário utilizados pelo cliente e MIME aceitável tipos de dados no corpo da resposta.       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example displays all the information in a given <xref:System.Net.WebHeaderCollection> object.  \n  \n [!code-cs[Net_Listener_Basic#21](~/add/codesnippet/csharp/p-system.net.httplistene_14_1.cs)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection Headers { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "Um <xref:System.Net.WebHeaderCollection>que contém os cabeçalhos HTTP incluídos na solicitação.</xref:System.Net.WebHeaderCollection>"
  overload: System.Net.HttpListenerRequest.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.HttpMethod
  id: HttpMethod
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
  fullName: System.Net.HttpListenerRequest.HttpMethod
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o método HTTP especificado pelo cliente."
  remarks: "O método HTTP normalmente é GET ou POST, dependendo da ação desejada pelo cliente."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_10_1.cs)]"
  syntax:
    content: public string HttpMethod { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o método usado na solicitação.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.HttpMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.InputStream
  id: InputStream
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
  fullName: System.Net.HttpListenerRequest.InputStream
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um fluxo que contém o corpo de dados enviado pelo cliente."
  remarks: "Se o cliente transmite dados (por exemplo, usando o HTTP `POST` método), o fluxo retornado por este método contém os dados.      > [!NOTE] > Fechar a solicitação não fecha o fluxo retornado por essa propriedade. Quando você não precisa mais o fluxo, você deve fechá-lo chamando o <xref:System.IO.Stream.Close%2A>método.</xref:System.IO.Stream.Close%2A>"
  example:
  - "The following code example demonstrates using this property to read the data sent with a request.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_27_1.cs)]"
  syntax:
    content: public System.IO.Stream InputStream { get; }
    return:
      type: System.IO.Stream
      description: "Um legível <xref:System.IO.Stream>objeto que contém os bytes enviados pelo cliente no corpo da solicitação.</xref:System.IO.Stream> Essa propriedade retorna <xref:System.IO.Stream>se nenhum dado é enviado com a solicitação.</xref:System.IO.Stream>"
  overload: System.Net.HttpListenerRequest.InputStream*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
  fullName: System.Net.HttpListenerRequest.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um <xref:System.Boolean>valor que indica se o cliente enviar esta solicitação é autenticado.</xref:System.Boolean>"
  remarks: "O aplicativo solicita a autenticação de cliente usando o <xref:System.Net.HttpListener.AuthenticationSchemes%2A>ou <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>propriedade.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.HttpListener.AuthenticationSchemes%2A>       Seu aplicativo não recebe um <xref:System.Net.HttpListenerContext>para solicitações de clientes que não são autenticadas com êxito.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example displays the value of the IsAuthenticated property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_1_1.cs)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cliente foi autenticado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListenerRequest.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsLocal
  id: IsLocal
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
  fullName: System.Net.HttpListenerRequest.IsLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um <xref:System.Boolean>valor que indica se a solicitação é enviada do computador local.</xref:System.Boolean>"
  remarks: "Aplicativos podem usar essa propriedade para executar um processamento especial quando solicitações do computador local."
  example:
  - "The following code example demonstrates using the IsLocal property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_28_1.cs)]"
  syntax:
    content: public bool IsLocal { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a solicitação teve origem no mesmo computador como o <xref href=&quot;System.Net.HttpListener&quot;> </xref> objeto fornecido a solicitação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListenerRequest.IsLocal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsSecureConnection
  id: IsSecureConnection
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
  fullName: System.Net.HttpListenerRequest.IsSecureConnection
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um <xref:System.Boolean>valor que indica se a conexão TCP usada para enviar a solicitação está usando o protocolo Secure Sockets Layer (SSL).</xref:System.Boolean>"
  remarks: "Para solicitar uma conexão segura, a solicitação do cliente usa <xref:System.Uri.UriSchemeHttps>em vez de <xref:System.Uri.UriSchemeHttp>.</xref:System.Uri.UriSchemeHttp> </xref:System.Uri.UriSchemeHttps> Se a conexão não pode ser estabelecida usando SSL, o cliente recebe um <xref:System.Net.WebException>que fornece informações sobre o erro.</xref:System.Net.WebException>"
  example:
  - "The following code example demonstrates using the IsSecureConnection property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_3_1.cs)]"
  syntax:
    content: public bool IsSecureConnection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conexão TCP está usando SSL; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListenerRequest.IsSecureConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest
  id: IsWebSocketRequest
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um <xref:System.Boolean>valor que indica se a conexão TCP foi uma solicitação WebSocket.</xref:System.Boolean>"
  syntax:
    content: public bool IsWebSocketRequest { get; }
    return:
      type: System.Boolean
      description: "Retorna <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conexão TCP é uma solicitação WebSocket; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListenerRequest.IsWebSocketRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.KeepAlive
  id: KeepAlive
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
  fullName: System.Net.HttpListenerRequest.KeepAlive
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um <xref:System.Boolean>valor que indica se o cliente solicita uma conexão persistente.</xref:System.Boolean>"
  remarks: "Se um cliente HTTP e o servidor esperam trocar dados várias vezes em um curto período de tempo, uma conexão persistente acelera suas comunicações, permitindo que eles evitar a sobrecarga necessária para abrir e fechar uma conexão TCP para cada mensagem. Para clientes usando HTTP/1.1, o valor padrão dessa propriedade é `true`."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_5_1.cs)]"
  syntax:
    content: public bool KeepAlive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conexão deve ser mantido aberto. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListenerRequest.KeepAlive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
  fullName: System.Net.HttpListenerRequest.LocalEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obter o servidor de número de porta e endereço IP para o qual a solicitação é direcionada."
  remarks: "Essa propriedade é útil quando você deseja responder a solicitações com base na maneira como eles são resolvidos."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_38_1.cs)]"
  syntax:
    content: public System.Net.IPEndPoint LocalEndPoint { get; }
    return:
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que representa o endereço IP que a solicitação é enviada para.</xref:System.Net.IPEndPoint>"
  overload: System.Net.HttpListenerRequest.LocalEndPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
  fullName: System.Net.HttpListenerRequest.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém a versão HTTP usada pelo cliente solicitante."
  remarks: "Os recursos de versões diferentes de HTTP são especificados nos documentos disponíveis em [http://www.rfc-editor.org](http://www.rfc-editor.org/)."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_9_1.cs)]"
  syntax:
    content: public Version ProtocolVersion { get; }
    return:
      type: System.Version
      description: "Um <xref:System.Version>que identifica a versão do cliente do HTTP.</xref:System.Version>"
  overload: System.Net.HttpListenerRequest.ProtocolVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.QueryString
  id: QueryString
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
  fullName: System.Net.HttpListenerRequest.QueryString
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém a cadeia de caracteres de consulta incluída na solicitação."
  remarks: "Em uma URL, as informações de consulta são separadas das informações de caminho por um ponto de interrogação (?). Pares de nome/valor são separados por um sinal de igual (=). Para acessar os dados da consulta como uma única cadeia de caracteres, obtenha o <xref:System.Uri.Query%2A>valor da propriedade do <xref:System.Uri>objeto retornado por <xref:System.Net.HttpListenerRequest.Url%2A>.</xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Uri> </xref:System.Uri.Query%2A>      > [!NOTE] > Consultas sem um sinal de igual (exemplo: [http://www.contoso.com/query.htm?Name](http://www.contoso.com/query.htm?Name) ) são adicionados para o `null` chave em <xref:System.Collections.Specialized.NameValueCollection>.</xref:System.Collections.Specialized.NameValueCollection>"
  example:
  - "The following code example demonstrates using the QueryString property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_4_1.cs)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection QueryString { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "Um <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> objeto que contém os dados de consulta incluídos na solicitação <xref:System.Net.HttpListenerRequest.Url*>.</xref:System.Net.HttpListenerRequest.Url*>"
  overload: System.Net.HttpListenerRequest.QueryString*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RawUrl
  id: RawUrl
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
  fullName: System.Net.HttpListenerRequest.RawUrl
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém as informações de URL (sem o host e porta) solicitadas pelo cliente."
  remarks: "A URL bruta é definida como parte da URL a seguir as informações de domínio. Na cadeia de caracteres de URL `http://www.contoso.com/articles/recent.aspx`, a URL bruta é `/articles/recent.aspx`. A URL bruta inclui a cadeia de caracteres de consulta, se presente.       Para obter as informações de porta e host, use o <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>propriedade.</xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>"
  example:
  - "The following code example demonstrates using the RawUrl property.  \n  \n [!code-cs[Net_Listener_Basic#11](~/add/codesnippet/csharp/p-system.net.httplistene_29_1.cs)]"
  syntax:
    content: public string RawUrl { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>que contém a URL bruta para esta solicitação.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.RawUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
  fullName: System.Net.HttpListenerRequest.RemoteEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o cliente do número de porta e endereço IP que originou a solicitação."
  remarks: ''
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_11_1.cs)]"
  syntax:
    content: public System.Net.IPEndPoint RemoteEndPoint { get; }
    return:
      type: System.Net.IPEndPoint
      description: "Um <xref:System.Net.IPEndPoint>que representa o número de porta e endereço IP que originou a solicitação.</xref:System.Net.IPEndPoint>"
  overload: System.Net.HttpListenerRequest.RemoteEndPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier
  id: RequestTraceIdentifier
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o identificador da solicitação da solicitação HTTP de entrada."
  syntax:
    content: public Guid RequestTraceIdentifier { get; }
    return:
      type: System.Guid
      description: "Um <xref:System.Guid>objeto que contém o identificador da solicitação HTTP.</xref:System.Guid>"
  overload: System.Net.HttpListenerRequest.RequestTraceIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ServiceName
  id: ServiceName
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
  fullName: System.Net.HttpListenerRequest.ServiceName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o provedor de serviço nome (SPN) que o cliente enviou na solicitação."
  remarks: "Um aplicativo poderia usar a propriedade ServiceName para realizar a validação personalizada de nome de fornecer serviço (SPN)."
  syntax:
    content: public string ServiceName { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o SPN do cliente enviado na solicitação.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.ServiceName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.TransportContext
  id: TransportContext
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
  fullName: System.Net.HttpListenerRequest.TransportContext
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o <xref:System.Net.TransportContext>para a solicitação do cliente.</xref:System.Net.TransportContext>"
  remarks: "O <xref:System.Net.TransportContext>propriedade pode ser usada para recuperar o token de associação de canal (CBT) para um <xref:System.Net.HttpListenerRequest>que foi enviado por meio de HTTPS.</xref:System.Net.HttpListenerRequest> </xref:System.Net.TransportContext>       Um aplicativo pode usar o <xref:System.Net.TransportContext>propriedade para realizar autenticação personalizada usando chamadas para o Win32 nativo [AcceptSecurityContext](http://go.microsoft.com/fwlink/?LinkId=147021) função.</xref:System.Net.TransportContext>       Se um aplicativo tenta recuperar o token de associação de canal (CBT) dessa propriedade TransportContext usando o <xref:System.Net.TransportContext.GetChannelBinding%2A>método e o <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>não é <xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>, em seguida, <xref:System.Net.HttpListenerRequest>gera <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Net.HttpListenerRequest> </xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> </xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> </xref:System.Net.TransportContext.GetChannelBinding%2A> O <xref:System.Net.HttpListenerRequest>substitui o <xref:System.Net.TransportContext.GetChannelBinding%2A>método com uma implementação interna.</xref:System.Net.TransportContext.GetChannelBinding%2A> </xref:System.Net.HttpListenerRequest>"
  syntax:
    content: public System.Net.TransportContext TransportContext { get; }
    return:
      type: System.Net.TransportContext
      description: "Um <xref:System.Net.TransportContext>objeto para a solicitação do cliente.</xref:System.Net.TransportContext>"
  overload: System.Net.HttpListenerRequest.TransportContext*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Url
  id: Url
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Url
  nameWithType: HttpListenerRequest.Url
  fullName: System.Net.HttpListenerRequest.Url
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o <xref:System.Uri>objeto solicitada pelo cliente.</xref:System.Uri>"
  remarks: "A propriedade Url permite que você obtenha todas as informações disponíveis de um <xref:System.Uri>objeto.</xref:System.Uri> Se você precisa saber apenas o texto não processado da solicitação de URI, considere o uso de <xref:System.Net.HttpListenerRequest.RawUrl%2A>propriedade em vez disso.</xref:System.Net.HttpListenerRequest.RawUrl%2A>       A propriedade de Url é nula se o <xref:System.Uri>do cliente não pôde ser analisado.</xref:System.Uri>       O <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>propriedade indica se <xref:System.Net.HttpListener>usa o URI de escape bruto em vez do URI convertido em que quaisquer valores codificados por percentual são convertidos e outras etapas de normalização são obtidas.</xref:System.Net.HttpListener> </xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>       Quando um <xref:System.Net.HttpListener>instância recebe uma solicitação por meio de `http.sys` serviço, ele cria uma instância da cadeia de caracteres URI fornecida pelo `http.sys`e o expõe como a propriedade Url.</xref:System.Net.HttpListener>       O `http.sys` serviço expõe duas cadeias de caracteres URI de solicitação: - URI bruto - convertido URI o URI bruto é o <xref:System.Uri?displayProperty=fullName>fornecido na linha de solicitação de uma solicitação HTTP: `GET /path/` `Host: www.contoso.com` o URI bruto fornecido pelo `http.sys` para a solicitação mencionada acima, é &quot;/ caminho /&quot;.       </xref:System.Uri?displayProperty=fullName> Isso representa a cadeia de caracteres após o verbo HTTP, como ele foi enviado pela rede.       O `http.sys` serviço cria um URI convertido a partir das informações fornecidas na solicitação usando o URI fornecido na linha da solicitação HTTP e o cabeçalho de Host para determinar a solicitação do servidor de origem deve ser encaminhado. Isso é feito comparando as informações da solicitação com um conjunto de prefixos registrados do URI. Para poder comparar esses valores, alguns normalização para a solicitação precisa ser feito. O exemplo acima convertido URI ficaria assim: `http://www.contoso.com/path/` o `http.sys` serviço combina o <xref:System.Uri.Host%2A?displayProperty=fullName>valor da propriedade e a cadeia de caracteres na linha da solicitação para criar um URI convertido.</xref:System.Uri.Host%2A?displayProperty=fullName> Além disso, `http.sys` e <xref:System.Uri?displayProperty=fullName>classe também fazer o seguinte:-Cancelar-ignora valores codificados todos os percentuais.</xref:System.Uri?displayProperty=fullName>      – Converte caracteres de não-ASCII codificados por percentual em uma representação de caractere UTF-16. Observe que há suporte para caracteres UTF-8 e ANSI DBCS, bem como caracteres Unicode (codificação Unicode usando o formato de uXXXX %).      -Executa outras etapas de normalização, como compactação de caminho.       Desde que a solicitação não contém todas as informações sobre a codificação usada para valores codificados por percentual, pode não ser possível determinar a codificação correta analisando apenas os valores codificados por porcentagem.       Portanto, `http.sys` fornece duas chaves do registro para modificar o processo: | Chave do registro | Valor padrão | Descrição |   |------------------|-------------------|-----------------|   | EnableNonUTF8 |&1; | Se for zero, `http.sys` aceita apenas as URLs codificados em UTF-8.<br /><br /> Se diferente de zero, `http.sys` também aceita URLs codificado em ANSI ou DBCS codificado em solicitações. |   | FavorUTF8 |&1; | Se diferente de zero, `http.sys` sempre tenta decodificar uma URL como UTF-8 primeiro; se a conversão falhará e EnableNonUTF8 é diferente de zero, o HTTP. sys, em seguida, tenta decodificá-la como ANSI ou DBCS.<br /><br /> Se for zero (e EnableNonUTF8 é diferente de zero), `http.sys` tenta decodificá-la como ANSI ou DBCS; se esse não for bem-sucedida, ele tenta uma conversão de UTF-8. |       Quando <xref:System.Net.HttpListener>recebe uma solicitação, ele usa o URI convertido do `http.sys` como entrada para a propriedade de Url.</xref:System.Net.HttpListener>       É necessário para dar suporte a caracteres além de caracteres e números nos URIs. Um exemplo é o URI a seguir, que é usado para recuperar informações do cliente para o cliente número &quot;1/3812&quot;: `http://www.contoso.com/Customer(&quot;1%2F3812&quot;)/` Observe a barra codificados por percentual no Uri (%&2;F). Isso é necessário, pois, nesse caso o caractere de barra representa dados e não um delimitador de caminho.       Passando a cadeia de caracteres de construtor Uri levará para o seguinte URI: `http://www.contoso.com/Customer(&quot;1/3812&quot;)/` dividir o caminho em seus segmentos resultaria nos seguintes elementos: `Customer(&quot;1` `3812&quot;)` não for a intenção do remetente da solicitação.              Se o <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>propriedade é definida como false, então quando o <xref:System.Net.HttpListener>recebe uma solicitação, ele usa o URI bruto em vez do URI convertido do `http.sys` como entrada para a propriedade Url.</xref:System.Net.HttpListener> </xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>"
  example:
  - "The following code example demonstrates using the Url property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_20_1.cs)]"
  syntax:
    content: public Uri Url { get; }
    return:
      type: System.Uri
      description: "Um <xref:System.Uri>objeto que identifica o recurso solicitado pelo cliente.</xref:System.Uri>"
  overload: System.Net.HttpListenerRequest.Url*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UrlReferrer
  id: UrlReferrer
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
  fullName: System.Net.HttpListenerRequest.UrlReferrer
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o identificador de URI (Uniform Resource) do recurso que chamadas, o cliente para o servidor."
  remarks: "Se um cliente tiver seguido um hiperlink para o URI solicitado, a solicitação pode conter um `Referrer` cabeçalho que identifica o URI do recurso que continha o hiperlink.       Os clientes podem falsificar ou optar por não apresentar um <xref:System.Net.HttpRequestHeader>cabeçalho.</xref:System.Net.HttpRequestHeader> Portanto, enquanto o UrlReferrer propriedade pode ser útil para identificar tendências básicas no tráfego da Web; Você não deve usá-lo como parte de um esquema de autorização para controlar o acesso aos dados.       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>       O UrlReferrer é nulo quando não há nenhum `Referrer` cabeçalho na solicitação ou quando o `Referrer` cabeçalho está presente na solicitação, mas não analisa a <xref:System.Uri>.</xref:System.Uri> válido"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_22_1.cs)]"
  syntax:
    content: public Uri UrlReferrer { get; }
    return:
      type: System.Uri
      description: "Um <xref:System.Uri>objeto que contém o texto da solicitação de <xref:System.Net.HttpRequestHeader>cabeçalho, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o cabeçalho não estava incluído na solicitação.</xref:System.Net.HttpRequestHeader> </xref:System.Uri>"
  overload: System.Net.HttpListenerRequest.UrlReferrer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserAgent
  id: UserAgent
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
  fullName: System.Net.HttpListenerRequest.UserAgent
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o agente do usuário apresentado pelo cliente."
  remarks: "O `User-Agent` cabeçalho normalmente contém o texto que identifica o número de versão e o nome do software usado para gerar a solicitação.       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>       O UserAgent é nulo quando não há nenhum `User-Agent` cabeçalho na solicitação."
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_42_1.cs)]"
  syntax:
    content: public string UserAgent { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>objeto que contém o texto da solicitação de <xref uid=&quot;langword_csharp_User-Agent&quot; name=&quot;User-Agent&quot; href=&quot;&quot;> </xref> cabeçalho.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserAgent*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserHostAddress
  id: UserHostAddress
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
  fullName: System.Net.HttpListenerRequest.UserHostAddress
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o servidor de número de porta e endereço IP para o qual a solicitação é direcionada."
  remarks: "As informações retornadas por esta propriedade também estão disponíveis na <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>o valor da propriedade.</xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_6_1.cs)]"
  syntax:
    content: public string UserHostAddress { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>que contém as informações de endereço do host.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserHostAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserHostName
  id: UserHostName
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
  fullName: System.Net.HttpListenerRequest.UserHostName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o nome DNS e, se fornecido, o número de porta especificado pelo cliente."
  remarks: "O `Host` cabeçalho contém o nome de host do servidor solicitado e o número da porta, se especificado, separados por dois-pontos (por exemplo, `www.contoso.com:8080`).       Você pode usar essa propriedade para retornar respostas diferentes dependendo do nome de host especificado na solicitação.       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_39_1.cs)]"
  syntax:
    content: public string UserHostName { get; }
    return:
      type: System.String
      description: "Um <xref:System.String>valor que contém o texto da solicitação de <xref uid=&quot;langword_csharp_Host&quot; name=&quot;Host&quot; href=&quot;&quot;> </xref> cabeçalho.</xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserHostName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserLanguages
  id: UserLanguages
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
  fullName: System.Net.HttpListenerRequest.UserLanguages
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém os idiomas naturais preferenciais para a resposta."
  remarks: "Para obter uma descrição detalhada do `Accept-Language` cabeçalho, consulte a seção de RFC 2616 14.4, disponível em [http://www.rfc-editor.org](http://www.rfc-editor.org/).       Para obter uma lista completa dos cabeçalhos de solicitação, consulte o <xref:System.Net.HttpRequestHeader>enumeração.</xref:System.Net.HttpRequestHeader>"
  example:
  - "The following code example displays the languages from the request's `Accept-Language` header.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_18_1.cs)]"
  syntax:
    content: public string[] UserLanguages { get; }
    return:
      type: System.String[]
      description: "A <xref:System.String>matriz que contém os idiomas especificados na solicitação de <xref:System.Net.HttpRequestHeader>cabeçalho ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a solicitação do cliente não incluiu uma <xref:System.Net.HttpRequestHeader>cabeçalho.</xref:System.Net.HttpRequestHeader> </xref:System.Net.HttpRequestHeader> </xref:System.String>"
  overload: System.Net.HttpListenerRequest.UserLanguages*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.HttpListenerRequest.AcceptTypes
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
  fullName: System.Net.HttpListenerRequest.AcceptTypes
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: BeginGetClientCertificate(AsyncCallback,Object)
  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.HttpListenerRequest.ClientCertificateError
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
  fullName: System.Net.HttpListenerRequest.ClientCertificateError
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerRequest.ContentEncoding
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
  fullName: System.Net.HttpListenerRequest.ContentEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Net.HttpListenerRequest.ContentLength64
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
  fullName: System.Net.HttpListenerRequest.ContentLength64
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.HttpListenerRequest.ContentType
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
  fullName: System.Net.HttpListenerRequest.ContentType
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerRequest.Cookies
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
  fullName: System.Net.HttpListenerRequest.Cookies
- uid: System.Net.CookieCollection
  parent: System.Net
  isExternal: true
  name: CookieCollection
  nameWithType: CookieCollection
  fullName: System.Net.CookieCollection
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: EndGetClientCertificate(IAsyncResult)
  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Net.HttpListenerRequest.GetClientCertificate
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificate()
  nameWithType: HttpListenerRequest.GetClientCertificate()
  fullName: System.Net.HttpListenerRequest.GetClientCertificate()
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificateAsync()
  nameWithType: HttpListenerRequest.GetClientCertificateAsync()
  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()
- uid: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<X509Certificate2>
  nameWithType: Task<X509Certificate2>
  fullName: System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Security.Cryptography.X509Certificates.X509Certificate2>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    nameWithType: X509Certificate2
    fullName: X509Certificate2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerRequest.HasEntityBody
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
  fullName: System.Net.HttpListenerRequest.HasEntityBody
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.HttpListenerRequest.Headers
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Headers
  nameWithType: HttpListenerRequest.Headers
  fullName: System.Net.HttpListenerRequest.Headers
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Net.HttpListenerRequest.HttpMethod
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
  fullName: System.Net.HttpListenerRequest.HttpMethod
- uid: System.Net.HttpListenerRequest.InputStream
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
  fullName: System.Net.HttpListenerRequest.InputStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.HttpListenerRequest.IsAuthenticated
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
  fullName: System.Net.HttpListenerRequest.IsAuthenticated
- uid: System.Net.HttpListenerRequest.IsLocal
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
  fullName: System.Net.HttpListenerRequest.IsLocal
- uid: System.Net.HttpListenerRequest.IsSecureConnection
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
  fullName: System.Net.HttpListenerRequest.IsSecureConnection
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest
- uid: System.Net.HttpListenerRequest.KeepAlive
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
  fullName: System.Net.HttpListenerRequest.KeepAlive
- uid: System.Net.HttpListenerRequest.LocalEndPoint
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
  fullName: System.Net.HttpListenerRequest.LocalEndPoint
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.HttpListenerRequest.ProtocolVersion
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
  fullName: System.Net.HttpListenerRequest.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.HttpListenerRequest.QueryString
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
  fullName: System.Net.HttpListenerRequest.QueryString
- uid: System.Net.HttpListenerRequest.RawUrl
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
  fullName: System.Net.HttpListenerRequest.RawUrl
- uid: System.Net.HttpListenerRequest.RemoteEndPoint
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
  fullName: System.Net.HttpListenerRequest.RemoteEndPoint
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Net.HttpListenerRequest.ServiceName
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
  fullName: System.Net.HttpListenerRequest.ServiceName
- uid: System.Net.HttpListenerRequest.TransportContext
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
  fullName: System.Net.HttpListenerRequest.TransportContext
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.HttpListenerRequest.Url
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Url
  nameWithType: HttpListenerRequest.Url
  fullName: System.Net.HttpListenerRequest.Url
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.HttpListenerRequest.UrlReferrer
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
  fullName: System.Net.HttpListenerRequest.UrlReferrer
- uid: System.Net.HttpListenerRequest.UserAgent
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
  fullName: System.Net.HttpListenerRequest.UserAgent
- uid: System.Net.HttpListenerRequest.UserHostAddress
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
  fullName: System.Net.HttpListenerRequest.UserHostAddress
- uid: System.Net.HttpListenerRequest.UserHostName
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
  fullName: System.Net.HttpListenerRequest.UserHostName
- uid: System.Net.HttpListenerRequest.UserLanguages
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
  fullName: System.Net.HttpListenerRequest.UserLanguages
- uid: System.Net.HttpListenerRequest.AcceptTypes*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: BeginGetClientCertificate
  nameWithType: HttpListenerRequest.BeginGetClientCertificate
- uid: System.Net.HttpListenerRequest.ClientCertificateError*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
- uid: System.Net.HttpListenerRequest.ContentEncoding*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
- uid: System.Net.HttpListenerRequest.ContentLength64*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
- uid: System.Net.HttpListenerRequest.ContentType*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
- uid: System.Net.HttpListenerRequest.Cookies*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: EndGetClientCertificate
  nameWithType: HttpListenerRequest.EndGetClientCertificate
- uid: System.Net.HttpListenerRequest.GetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificate
  nameWithType: HttpListenerRequest.GetClientCertificate
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificateAsync
  nameWithType: HttpListenerRequest.GetClientCertificateAsync
- uid: System.Net.HttpListenerRequest.HasEntityBody*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
- uid: System.Net.HttpListenerRequest.Headers*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Headers
  nameWithType: HttpListenerRequest.Headers
- uid: System.Net.HttpListenerRequest.HttpMethod*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
- uid: System.Net.HttpListenerRequest.InputStream*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
- uid: System.Net.HttpListenerRequest.IsAuthenticated*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
- uid: System.Net.HttpListenerRequest.IsLocal*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
- uid: System.Net.HttpListenerRequest.IsSecureConnection*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
- uid: System.Net.HttpListenerRequest.KeepAlive*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
- uid: System.Net.HttpListenerRequest.LocalEndPoint*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
- uid: System.Net.HttpListenerRequest.ProtocolVersion*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
- uid: System.Net.HttpListenerRequest.QueryString*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
- uid: System.Net.HttpListenerRequest.RawUrl*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
- uid: System.Net.HttpListenerRequest.RemoteEndPoint*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
- uid: System.Net.HttpListenerRequest.ServiceName*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
- uid: System.Net.HttpListenerRequest.TransportContext*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
- uid: System.Net.HttpListenerRequest.Url*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Url
  nameWithType: HttpListenerRequest.Url
- uid: System.Net.HttpListenerRequest.UrlReferrer*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
- uid: System.Net.HttpListenerRequest.UserAgent*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
- uid: System.Net.HttpListenerRequest.UserHostAddress*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
- uid: System.Net.HttpListenerRequest.UserHostName*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
- uid: System.Net.HttpListenerRequest.UserLanguages*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
