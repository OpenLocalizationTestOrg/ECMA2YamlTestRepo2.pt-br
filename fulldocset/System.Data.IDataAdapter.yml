### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "Permite que um objeto implementar um DataAdapter e representa um conjunto de métodos e propriedades relacionadas à ação de mapeamento que são usadas para preencher e atualizar um <xref href=&quot;System.Data.DataSet&quot;> </xref> e atualizar uma fonte de dados.       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>instâncias são para fontes de dados (ou semelhante) bancos de dados relacionais com comandos textuais (como [!INCLUDE[tsql](~/add/includes/tsql-md.md)]), enquanto as instâncias de IDataAdapter foi pode usar qualquer tipo de fonte de dados."
  remarks: "A interface IDataAdapter permite que uma classe implementar uma classe DataAdapter, que representa a ponte entre uma fonte de dados e <xref:System.Data.DataSet>.</xref:System.Data.DataSet> de herança Para obter mais informações sobre classes de DataAdapter, consulte [preenchendo um DataSet de um DataAdapter](~/add/includes/ajax-current-ext-md.md).       Um aplicativo não cria uma instância da interface IDataAdapter diretamente, mas implementa uma instância de uma classe que herda IDataAdapter.       As classes que herdam IDataAdapter devem implementar os membros herdados e geralmente definem membros adicionais para adicionar funcionalidade específica do provedor. Por exemplo, a interface IDataAdapter define um <xref:System.Data.IDataAdapter.Fill%2A>método que utiliza um <xref:System.Data.DataSet>como um parâmetro.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.Fill%2A> Por sua vez, a <xref:System.Data.OleDb.OleDbDataAdapter>classe herda o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método e também define duas sobrecargas adicionais do <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>que levam a um objeto de conjunto de registros ADO como um parâmetro de método.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Adiciona ou atualiza linhas no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponder da fonte de dados usando o <xref href=&quot;System.Data.DataSet&quot;> </xref> nome e cria um <xref href=&quot;System.Data.DataTable&quot;> </xref> chamado &quot;Table&quot;."
  remarks: "Preenchimento recupera linhas da fonte de dados usando a instrução SELECT especificada por um associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> O objeto de conexão associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta. Se a conexão é fechada antes de preenchimento é chamado, ele é aberto para recuperar dados e fechado. Se a conexão está aberta antes de preenchimento é chamado, ele permanecerá aberto.       A operação de preenchimento, em seguida, adiciona as linhas para o destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criando o <xref:System.Data.DataTable>objetos se eles ainda não existirem.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Ao criar <xref:System.Data.DataTable>objetos, a operação de preenchimento geralmente cria metadados de nome de coluna única.</xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>está definida como `AddWithKey`, restrições e chaves primárias apropriadas também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).       Se o <xref:System.Data.IDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas sucessivas, usando o padrão &quot;nome_da_coluna1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>, cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Aplicativos devem ter cuidado ao usar nomes de coluna e tabela para garantir que não ocorrem conflitos com esses padrões de nomenclatura.       Quando a instrução SELECT que é usada para popular o <xref:System.Data.DataSet>retornar vários resultados, como um instrução SQL em lote, se um dos resultados contiver um erro, todos os resultados sucessivos são ignorados e não adicionados ao <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Você pode usar o método de preenchimento várias vezes na mesma <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Se existir uma chave primária, linhas de entrada são mescladas com as linhas correspondentes que já existem. Se nenhuma chave primária existe, linhas de entrada são acrescentadas ao <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de preenchimento e <xref:System.Data.IDataAdapter.FillSchema%2A>para dados do .NET Framework provedor recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.IDataAdapter.FillSchema%2A>"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com registros e, se necessário, esquema."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataSet&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> chamado &quot;Table&quot; especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para corresponder da fonte de dados com base em especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "O método FillSchema recupera o esquema da fonte de dados usando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> O objeto de conexão associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>devem ser válidos, mas não precisa estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a conexão é fechada antes FillSchema é chamado, ele é aberto para recuperar dados e fechado. Se a conexão está aberta antes de FillSchema é chamado, ele permanecerá aberto.       Uma operação de FillSchema adiciona um <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Em seguida, adiciona colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>propriedades se eles existirem na fonte de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Você deve definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema também configura o <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades de acordo com as seguintes regras: - se uma ou mais colunas de chave primária são retornadas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>elas são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se não há colunas de chave primária são retornadas, mas são colunas exclusivas, as colunas exclusivas são usadas como chave primária se todas as colunas exclusivas não são nulas. Se qualquer uma das colunas são nulas, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se colunas de chave primária e de colunas exclusivas são retornadas, colunas de chave primária são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observe que as chaves primárias e restrições exclusivas serão adicionadas para o <xref:System.Data.ConstraintCollection>acordo com as regras anteriores, mas outra restrição de tipos não são adicionados.</xref:System.Data.ConstraintCollection>       Se o cluster de um único índice é definido em uma coluna ou colunas em uma tabela do SQL Server e a restrição de chave primária é definida em um conjunto separado de colunas, em seguida, os nomes das colunas no índice clusterizado serão retornados. Para retornar o nome ou nomes de colunas de chave primária, use uma dica de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar dicas de consulta, consulte [a dica de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.IDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas sucessivas, usando o padrão &quot;nome_da_coluna1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>, cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Aplicativos devem ter cuidado ao usar nomes de coluna e tabela para garantir que não ocorrem conflitos com esses padrões de nomenclatura.       FillSchema não retorna nenhuma linha. Use o <xref:System.Data.IDataAdapter.Fill%2A>método para adicionar linhas a serem <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter.Fill%2A>"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> a ser preenchido com o esquema da fonte de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uma da <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    return:
      type: System.Data.DataTable[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos que contêm informações de esquema retornado da fonte de dados."
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém os parâmetros definidos pelo usuário ao executar uma instrução SQL SELECT."
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Uma matriz de <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objetos que contém os parâmetros definidos pelo usuário."
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Indica ou especifica se colunas ou tabelas de origem não mapeados são passadas com seus nomes de fonte para ser filtrada ou para gerar um erro."
  remarks: "A <xref:System.Data.IDataAdapter.TableMappings%2A>propriedade fornece o mapeamento entre os registros retornados e <xref:System.Data.DataSet>.</xref:System.Data.DataSet> de mestre</xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "Uma da <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> valores. O padrão é <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O conjunto de valor não é um do <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> valores."
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Indica ou especifica se as tabelas de origem ausentes, colunas e suas relações são adicionadas ao esquema do conjunto de dados, ignorado, ou causam um erro a ser gerado."
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "Uma da <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valores. O padrão é <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O conjunto de valor não é um do <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valores."
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Indica como uma tabela de origem é mapeada para uma tabela de conjunto de dados."
  remarks: "O <xref:System.Data.IDataAdapter>usa apenas os mapeamentos para a tabela de origem chamada &quot;Table&quot;.</xref:System.Data.IDataAdapter> Todas as SELECT, instruções INSERT, DELETE e UPDATE, retornando dados devem fazer isso usando o nome da coluna consistente. Os nomes de coluna retornados nos registros devem ser exclusivos, caso contrário, colunas com nomes duplicados substituir dados anteriores. Em <xref:System.Data.IDataAdapter.Update%2A>, somente a tabela mapeada para a tabela de origem chamada &quot;Table&quot; terá suas alterações reconciliadas.</xref:System.Data.IDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "Uma coleção que fornece o mapeamento entre os registros retornados de mestre e o <xref href=&quot;System.Data.DataSet&quot;> </xref>. O valor padrão é uma coleção vazia."
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Chama as respectivas instruções INSERT, UPDATE ou DELETE para cada inseridas, atualizadas ou excluídas de linha especificado na <xref href=&quot;System.Data.DataSet&quot;> </xref> de um <xref href=&quot;System.Data.DataTable&quot;> </xref> chamado &quot;Table&quot;."
  remarks: "Quando um aplicativo chama o método de atualização, o <xref:System.Data.IDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iterativamente para cada linha, com base na ordem de índices configurados em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.IDataAdapter> Por exemplo, a atualização pode executar uma instrução DELETE, seguida por uma instrução INSERT e, em seguida, outra instrução de exclusão, devido a ordenação de linhas em <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Lembre-se de que essas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Um aplicativo pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método se você deve controlar a sequência de tipos de instrução (por exemplo, inserções antes de atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [Atualizar fontes de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não forem especificadas, o <xref:System.Data.Common.DataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DataAdapter.Update%2A> No entanto, você pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente instruções SQL para atualizações de tabela única se você definir o `SelectCommand` propriedade de um provedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, qualquer instrução SQL adicional que você não defina é geradas pelo CommandBuilder. Essa lógica de geração exige informações de coluna de chave esteja presente em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações, consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DataAdapter.Update%2A>método recupera linhas da tabela listada no mapeamento primeiro antes de executar uma atualização.</xref:System.Data.Common.DataAdapter.Update%2A> O <xref:System.Data.Common.DataAdapter.Update%2A>, em seguida, atualiza a linha com o valor de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DataAdapter.Update%2A> As linhas adicionais retornadas são ignoradas.       Depois que os dados sejam carregados para o <xref:System.Data.DataSet>, o <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado, permitindo que o usuário inspecionar o reconciliado <xref:System.Data.DataSet>retornados pelo comando de parâmetros de saída de linha e qualquer.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois que uma linha é atualizado com êxito, as alterações a essa linha são aceitas.       Ao usar a atualização, a ordem de execução é o seguinte: 1.  Os valores de <xref:System.Data.DataRow>são movidos para os valores de parâmetro.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  O comando é executado.      4.  Se o comando é definido como `FirstReturnedRecord`, retornado do primeiro resultado é colocado em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se não houver parâmetros de saída, eles são colocados no <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado que <xref:System.Data.IDataAdapter>geralmente tem uma coleção de parâmetros associada a.</xref:System.Data.IDataAdapter> Parâmetros são mapeados para a linha atual por meio de `SourceColumn` e `SourceVersion` propriedades de um provedor de dados do .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.IDataAdapter>referências para obter valores de parâmetro para a linha atual.</xref:System.Data.IDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se ao nome da coluna mapeada antes de qualquer mapeamento de tabela tiverem sido aplicado. Se `SourceColumn` refere-se a uma coluna que não existe, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação realizada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Use os nomes de coluna de origem e os nomes de tabela o <xref:System.Data.DataSet>se nenhum mapeamento estiver presente. |   | `MissingMappingAction.Ignore`| Um <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definidos, um mapeamento ausente para um parâmetro de entrada é geralmente causado por um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é usada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se ela se refere a uma coluna que não existe.       O `SourceVersion` propriedade de um provedor de dados do .NET Framework `Parameter` classe determina se deve usar o `Original`, `Current`, ou `Proposed` versão do valor da coluna. Esse recurso é usado com frequência para incluir valores originais na cláusula WHERE de uma instrução UPDATE para verificar se há violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, uma exceção será lançada e a execução da atualização será interrompida. Para continuar a operação de atualização sem gerar exceções quando um erro for encontrado, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Você também pode responder a erros em uma base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção dentro de `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> usado para atualizar a fonte de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou em zero registros afetados."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
