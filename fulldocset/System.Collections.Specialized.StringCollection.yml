### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.StringCollection
  id: StringCollection
  children:
  - System.Collections.Specialized.StringCollection.#ctor
  - System.Collections.Specialized.StringCollection.Add(System.String)
  - System.Collections.Specialized.StringCollection.AddRange(System.String[])
  - System.Collections.Specialized.StringCollection.Clear
  - System.Collections.Specialized.StringCollection.Contains(System.String)
  - System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
  - System.Collections.Specialized.StringCollection.Count
  - System.Collections.Specialized.StringCollection.GetEnumerator
  - System.Collections.Specialized.StringCollection.IndexOf(System.String)
  - System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
  - System.Collections.Specialized.StringCollection.IsReadOnly
  - System.Collections.Specialized.StringCollection.IsSynchronized
  - System.Collections.Specialized.StringCollection.Item(System.Int32)
  - System.Collections.Specialized.StringCollection.Remove(System.String)
  - System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  - System.Collections.Specialized.StringCollection.SyncRoot
  - System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)
  - System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)
  - System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize
  - System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly
  - System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)
  - System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: StringCollection
  nameWithType: StringCollection
  fullName: System.Collections.Specialized.StringCollection
  type: Class
  summary: "Representa uma coleção de cadeias de caracteres."
  remarks: "StringCollection aceita `null` como um valor válido e permite que os elementos duplicados.       Comparações de cadeia de caracteres diferenciam maiusculas de minúsculas.       Elementos nesta coleção podem ser acessados usando um índice de inteiro.  Índices nesta coleção são baseadas em zero."
  example:
  - "The following code example demonstrates several of the properties and methods of StringCollection.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollection2#1](~/add/codesnippet/cpp/t-system.collections.spe_2_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollection2#1](~/add/codesnippet/csharp/t-system.collections.spe_2_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollection2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_2_1.vb)]"
  syntax:
    content: 'public class StringCollection : System.Collections.IList'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: StringCollection()
  nameWithType: StringCollection.StringCollection()
  fullName: System.Collections.Specialized.StringCollection.StringCollection()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> classe."
  remarks: "Este construtor é uma operação de (1)."
  syntax:
    content: public StringCollection ();
    parameters: []
  overload: System.Collections.Specialized.StringCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: StringCollection.Add(String)
  fullName: System.Collections.Specialized.StringCollection.Add(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Adiciona uma cadeia de caracteres ao final do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "<xref:System.Collections.Specialized.StringCollection>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.StringCollection>       Se <xref:System.Collections.Specialized.StringCollection.Count%2A>é menor que a capacidade, esse método é uma operação de (1).</xref:System.Collections.Specialized.StringCollection.Count%2A> Se a capacidade precisa ser aumentado para acomodar o novo elemento, esse método se torna um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example adds new elements to the <xref:System.Collections.Specialized.StringCollection>.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/cpp/m-system.collections.spe_39_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/csharp/m-system.collections.spe_39_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/visualbasic/m-system.collections.spe_39_1.vb)]"
  syntax:
    content: public int Add (string value);
    parameters:
    - id: value
      type: System.String
      description: "A cadeia de caracteres para adicionar ao final do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice de base zero no qual o novo elemento é inserido."
  overload: System.Collections.Specialized.StringCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: AddRange(String[])
  nameWithType: StringCollection.AddRange(String[])
  fullName: System.Collections.Specialized.StringCollection.AddRange(String[])
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Copia os elementos de uma matriz de cadeia de caracteres ao final do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "<xref:System.Collections.Specialized.StringCollection>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.StringCollection>       Se o <xref:System.Collections.Specialized.StringCollection>pode acomodar os novos elementos sem aumentar a capacidade, esse método é um O (`n`) operação, onde `n` é o número de elementos a serem adicionados.</xref:System.Collections.Specialized.StringCollection> Se a capacidade precisa ser aumentado para acomodar os novos elementos, esse método se torna um O (`n` + `m`) operação, onde `n` é o número de elementos a serem adicionados e `m` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example adds new elements to the <xref:System.Collections.Specialized.StringCollection>.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/cpp/m-system.collections.spe_4_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/csharp/m-system.collections.spe_4_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/visualbasic/m-system.collections.spe_4_1.vb)]"
  syntax:
    content: public void AddRange (string[] value);
    parameters:
    - id: value
      type: System.String[]
      description: "Uma matriz de cadeias de caracteres para adicionar ao final do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>. A matriz em si não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , mas pode conter elementos que são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Clear
  id: Clear
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: StringCollection.Clear()
  fullName: System.Collections.Specialized.StringCollection.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove todas as cadeias de caracteres da <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "<xref:System.Collections.Specialized.StringCollection.Count%2A>é definido como zero, e referências a outros objetos de elementos da coleção também são liberadas.</xref:System.Collections.Specialized.StringCollection.Count%2A>       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example removes elements from the <xref:System.Collections.Specialized.StringCollection>.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_2_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_2_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_2_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Specialized.StringCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: StringCollection.Contains(String)
  fullName: System.Collections.Specialized.StringCollection.Contains(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Determina se a cadeia de caracteres especificada é a <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "O método Contains pode confirmar a existência de uma cadeia de caracteres antes de realizar mais operações.       Este método determina a igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> Comparações de cadeia de caracteres diferenciam maiusculas de minúsculas.       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches the <xref:System.Collections.Specialized.StringCollection> for an element.  \n  \n [!code-cs[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/csharp/m-system.collections.spe_28_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/cpp/m-system.collections.spe_28_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_28_1.vb)]"
  syntax:
    content: public bool Contains (string value);
    parameters:
    - id: value
      type: System.String
      description: "A cadeia de caracteres a ser localizado no <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>value</code> is found in the <xref href=&quot;System.Collections.Specialized.StringCollection&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.StringCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: StringCollection.CopyTo(String[],Int32)
  fullName: System.Collections.Specialized.StringCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Copia todo o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> valores em uma matriz unidimensional de cadeias de caracteres, começando no índice especificado da matriz de destino."
  remarks: "A matriz especificada deve ser de um tipo compatível.       Os elementos são copiados para o <xref:System.Array>na mesma ordem em que o enumerador dos que <xref:System.Collections.Specialized.StringCollection>itera por meio de <xref:System.Collections.Specialized.StringCollection>.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection> </xref:System.Array>       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example copies a <xref:System.Collections.Specialized.StringCollection> to an array.  \n  \n [!code-cs[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/csharp/6398d0a9-11dc-4566-8dea-_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/cpp/6398d0a9-11dc-4566-8dea-_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/visualbasic/6398d0a9-11dc-4566-8dea-_1.vb)]"
  syntax:
    content: public void CopyTo (string[] array, int index);
    parameters:
    - id: array
      type: System.String[]
      description: "A matriz unidimensional de cadeias de caracteres que é o destino dos elementos copiados de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>. O <xref:System.Array>devem ter a indexação com base em zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice de base zero no `array` no qual a cópia começa."
  overload: System.Collections.Specialized.StringCollection.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       o número de elementos na origem - ou - <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é maior que o espaço disponível do <code>index</code> até o final do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da fonte de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Count
  id: Count
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Count
  nameWithType: StringCollection.Count
  fullName: System.Collections.Specialized.StringCollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém o número de cadeias de caracteres dentro de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Recuperar o valor dessa propriedade é uma operação de (1)."
  example:
  - "The following code example copies a <xref:System.Collections.Specialized.StringCollection> to an array.  \n  \n [!code-cs[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/csharp/p-system.collections.spe_15_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/cpp/p-system.collections.spe_15_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringCollectionCopyTo#1](~/add/codesnippet/visualbasic/p-system.collections.spe_15_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de cadeias de caracteres dentro de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: StringCollection.GetEnumerator()
  fullName: System.Collections.Specialized.StringCollection.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Retorna um <xref href=&quot;System.Collections.Specialized.StringEnumerator&quot;> </xref> que itera por meio de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Portanto, usando `foreach` é recomendada, em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>também traz o enumerador de volta para essa posição.</xref:System.Collections.Specialized.StringEnumerator.Reset%2A>  Nesta posição, <xref:System.Collections.Specialized.StringEnumerator.Current%2A>é indefinido.</xref:System.Collections.Specialized.StringEnumerator.Current%2A> Portanto, você deve chamar <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.</xref:System.Collections.Specialized.StringEnumerator.Current%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       <xref:System.Collections.Specialized.StringEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>ou <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>é chamado.</xref:System.Collections.Specialized.StringEnumerator.Reset%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A></xref:System.Collections.Specialized.StringEnumerator.Current%2A> <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>define <xref:System.Collections.Specialized.StringEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.Specialized.StringEnumerator.Current%2A></xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       Se <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>retornado `false`, <xref:System.Collections.Specialized.StringEnumerator.Current%2A>é indefinido.</xref:System.Collections.Specialized.StringEnumerator.Current%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> Definir <xref:System.Collections.Specialized.StringEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>seguido pelo <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> </xref:System.Collections.Specialized.StringEnumerator.Reset%2A> </xref:System.Collections.Specialized.StringEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente e seu comportamento é indefinido.       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de segurança do thread.  Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração.  Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.       Esse método é uma operação de (1)."
  syntax:
    content: public System.Collections.Specialized.StringEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Specialized.StringEnumerator
      description: "A <xref href=&quot;System.Collections.Specialized.StringEnumerator&quot;></xref> for the <xref href=&quot;System.Collections.Specialized.StringCollection&quot;></xref>."
  overload: System.Collections.Specialized.StringCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: StringCollection.IndexOf(String)
  fullName: System.Collections.Specialized.StringCollection.IndexOf(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Procura a cadeia de caracteres especificada e retorna o índice baseado em zero da primeira ocorrência dentro de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Este método determina a igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> Comparações de cadeia de caracteres diferenciam maiusculas de minúsculas.       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches the <xref:System.Collections.Specialized.StringCollection> for an element.  \n  \n [!code-cs[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/csharp/m-system.collections.spe_7_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/cpp/m-system.collections.spe_7_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringCollectionContains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_7_1.vb)]"
  syntax:
    content: public int IndexOf (string value);
    parameters:
    - id: value
      type: System.String
      description: "A cadeia de caracteres a ser localizado. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência de <code> value </code> no <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>, se encontrado; caso contrário, -1."
  overload: System.Collections.Specialized.StringCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: StringCollection.Insert(Int32,String)
  fullName: System.Collections.Specialized.StringCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Insere uma cadeia de caracteres para o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> no índice especificado."
  remarks: "Cadeias de caracteres duplicadas são permitidas em <xref:System.Collections.Specialized.StringCollection>.</xref:System.Collections.Specialized.StringCollection>       Se `index` é igual a <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` é adicionada ao final da <xref:System.Collections.Specialized.StringCollection>.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection.Count%2A>       Coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção se mover para baixo para acomodar o novo elemento. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash.       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example adds new elements to the <xref:System.Collections.Specialized.StringCollection>.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/cpp/5308ad74-fbfb-4390-83de-_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/csharp/5308ad74-fbfb-4390-83de-_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollectionAdd#1](~/add/codesnippet/visualbasic/5308ad74-fbfb-4390-83de-_1.vb)]"
  syntax:
    content: public void Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero no qual `value` é inserido."
    - id: value
      type: System.String
      description: "A cadeia de caracteres a ser inserido. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> maior <xref:System.Collections.Specialized.StringCollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: StringCollection.IsReadOnly
  fullName: System.Collections.Specialized.StringCollection.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é somente leitura."
  remarks: "<xref:System.Collections.Specialized.StringCollection>implementa a propriedade IsReadOnly porque ele é necessário para o <xref:System.Collections.IList?displayProperty=fullName>interface.</xref:System.Collections.IList?displayProperty=fullName></xref:System.Collections.Specialized.StringCollection>       Uma coleção que é somente leitura não permite a adição, remoção ou modificação de elementos após a criação da coleção.       Uma coleção que é somente leitura é simplesmente uma coleção com um wrapper que impede a modificação da coleção; Portanto, se forem feitas alterações à coleção subjacente, a coleção somente leitura reflete as alterações.       Um <xref:System.Collections.Specialized.StringCollection>instância sempre é gravável.</xref:System.Collections.Specialized.StringCollection>       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Essa propriedade sempre retorna <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: StringCollection.IsSynchronized
  fullName: System.Collections.Specialized.StringCollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o acesso para o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é sincronizado (thread-safe)."
  remarks: "<xref:System.Collections.Specialized.StringCollection>implementa a propriedade IsSynchronized porque ele é necessário para o <xref:System.Collections.ICollection>interface.</xref:System.Collections.ICollection></xref:System.Collections.Specialized.StringCollection>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       O exemplo de código a seguir mostra como bloquear a coleção usando o <xref:System.Collections.Specialized.StringCollection.SyncRoot%2A>durante toda a enumeração: [!code-cpp [System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_23_1.cpp)][!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_23_1.cs)][!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_23_1.vb) ] recuperar o valor dessa propriedade é uma operação de (1).    </xref:System.Collections.Specialized.StringCollection.SyncRoot%2A>"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Essa propriedade sempre retorna <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: StringCollection.Item(Int32)
  fullName: System.Collections.Specialized.StringCollection.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém ou define o elemento no índice especificado."
  remarks: "Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: `myCollection[index]`.       <xref:System.Collections.Specialized.StringCollection>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.StringCollection>       A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar a propriedade do Item. Visual Basic implementa um Item como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.       Recuperar o valor dessa propriedade é uma operação de (1); definindo a propriedade também é uma operação de (1)."
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero da entrada a ser obtido ou definido."
    return:
      type: System.String
      description: "O elemento no índice especificado."
  overload: System.Collections.Specialized.StringCollection.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é maior ou igual a <xref:System.Collections.Specialized.StringCollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: StringCollection.Remove(String)
  fullName: System.Collections.Specialized.StringCollection.Remove(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove a primeira ocorrência de uma cadeia de caracteres específica da <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Cadeias de caracteres duplicadas são permitidas em <xref:System.Collections.Specialized.StringCollection>.</xref:System.Collections.Specialized.StringCollection> Somente a primeira ocorrência será removida. Para remover todas as ocorrências de cadeia de caracteres especificada, use `RemoveAt(IndexOf(value))` repetidamente ao <xref:System.Collections.Specialized.StringCollection.IndexOf%2A>não retorna -1.</xref:System.Collections.Specialized.StringCollection.IndexOf%2A>       Se o <xref:System.Collections.Specialized.StringCollection>não contém o objeto especificado, o <xref:System.Collections.Specialized.StringCollection>permanece inalterado.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection> Nenhuma exceção é lançada.       Coleções de elementos de contíguos, como listas, os elementos que seguem o elemento removido mover para cima para ocupar o ponto vagas. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash.       Este método determina a igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName> Comparações de cadeia de caracteres diferenciam maiusculas de minúsculas.       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example removes elements from the <xref:System.Collections.Specialized.StringCollection>.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_20_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_20_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_20_1.vb)]"
  syntax:
    content: public void Remove (string value);
    parameters:
    - id: value
      type: System.String
      description: "A cadeia de caracteres para remover do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: StringCollection.RemoveAt(Int32)
  fullName: System.Collections.Specialized.StringCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove a cadeia de caracteres no índice especificado do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Coleções de elementos de contíguos, como listas, os elementos que seguem o elemento removido mover para cima para ocupar o ponto vagas. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash.       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  example:
  - "The following code example removes elements from the <xref:System.Collections.Specialized.StringCollection>.  \n  \n [!code-cpp[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_16_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_16_1.cs)]\n [!code-vb[System.Collections.Specialized.StringCollectionRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_16_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero da cadeia de caracteres a ser removido."
  overload: System.Collections.Specialized.StringCollection.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é maior ou igual a <xref:System.Collections.Specialized.StringCollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: StringCollection.SyncRoot
  fullName: System.Collections.Specialized.StringCollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um objeto que pode ser usado para sincronizar o acesso a <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Classes derivadas podem fornecer sua própria versão sincronizada de <xref:System.Collections.Specialized.StringCollection>usando a propriedade SyncRoot.</xref:System.Collections.Specialized.StringCollection> O código de sincronização deve executar operações no SyncRoot do <xref:System.Collections.Specialized.StringCollection>, não diretamente no <xref:System.Collections.Specialized.StringCollection>.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection> Isso garante que a operação correta de coleções que são derivados de outros objetos. Especificamente, ele mantém uma sincronização adequada com outros threads que podem ser simultaneamente modificando o <xref:System.Collections.Specialized.StringCollection>objeto.</xref:System.Collections.Specialized.StringCollection>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       O exemplo de código a seguir mostra como bloquear a coleção usando o SyncRoot durante toda a enumeração: [!code-cpp [System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/cpp/p-system.collections.spe_3_1.cpp)][!code-cs[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/csharp/p-system.collections.spe_3_1.cs)][!code-vb[System.Collections.Specialized.StringCollection2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_3_1.vb) ] recuperar o valor dessa propriedade é uma operação de (1).    "
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser usado para sincronizar o acesso a <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Copia todo o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> para um unidimensional compatível <xref:System.Array>, começando no índice especificado da matriz de destino.</xref:System.Array>"
  remarks: "A matriz especificada deve ser de um tipo compatível.       Esse método usa <xref:System.Array.Copy%2A?displayProperty=fullName>para copiar os elementos.</xref:System.Array.Copy%2A?displayProperty=fullName>       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino dos elementos copiados de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Array> O <xref:System.Array>devem ter a indexação com base em zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice de base zero no `array` no qual a cópia começa."
  overload: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       o número de elementos na origem - ou - <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é maior que o espaço disponível do <code>index</code> até o final do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da fonte de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: StringCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Retorna um <xref:System.Collections.IEnumerator>que itera por meio de <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Portanto, usando `foreach` é recomendada, em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. <xref:System.Collections.IEnumerator.Reset%2A>também traz o enumerador de volta para essa posição.</xref:System.Collections.IEnumerator.Reset%2A> AT isso posicionar, chamando <xref:System.Collections.IEnumerator.Current%2A>lança uma exceção.</xref:System.Collections.IEnumerator.Current%2A> Portanto, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A>retornado `false`, chamar <xref:System.Collections.IEnumerator.Current%2A>lança uma exceção.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido pelo <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente e a próxima chamada ou <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>gera um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>retorna o elemento que está definido como, mesmo se o enumerador já é invalidado.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       Esse método é uma operação de (1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "A <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Specialized.StringCollection&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: StringCollection.System.Collections.IList.Add(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Adiciona um objeto ao final do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "<xref:System.Collections.Specialized.StringCollection>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.StringCollection>       Se <xref:System.Collections.Specialized.StringCollection.Count%2A>já for igual à capacidade, a capacidade do <xref:System.Collections.Specialized.StringCollection>é aumentado, automaticamente realocando matriz interna, e os elementos existentes são copiados para a nova matriz antes de adicionar o novo elemento.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection.Count%2A>       Se <xref:System.Collections.Specialized.StringCollection.Count%2A>é menor que a capacidade, esse método é uma operação de (1).</xref:System.Collections.Specialized.StringCollection.Count%2A> Se a capacidade precisa ser aumentado para acomodar o novo elemento, esse método se torna um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>a serem adicionadas ao final do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> índice no qual o <code> value </code> foi adicionado."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é somente leitura.       - ou - <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: StringCollection.System.Collections.IList.Contains(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Determina se um elemento está no <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Este método determina a igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para localizar no <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>value</code> is found in the <xref href=&quot;System.Collections.Specialized.StringCollection&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: StringCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Procura especificado <xref:System.Object>e retorna o índice baseado em zero da primeira ocorrência dentro de toda a <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Object>"
  remarks: "O <xref:System.Collections.Specialized.StringCollection>é pesquisado forward iniciando no primeiro elemento e terminando no último elemento.</xref:System.Collections.Specialized.StringCollection>       Este método determina a igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>       Começando com o .NET Framework 2.0, esse método usa objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se o item existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, isso foi feito por meio de <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos do `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para localizar no <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência de <code> value </code> em todo o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>, se encontrado; caso contrário, -1."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: StringCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Insere um elemento no <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> no índice especificado."
  remarks: "Se <xref:System.Collections.Specialized.StringCollection.Count%2A>já for igual à capacidade, a capacidade do <xref:System.Collections.Specialized.StringCollection>é aumentado, automaticamente realocando matriz interna, e os elementos existentes são copiados para a nova matriz antes de adicionar o novo elemento.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection.Count%2A>       Se `index` é igual a <xref:System.Collections.Specialized.StringCollection.Count%2A>, `value` é adicionada ao final da <xref:System.Collections.Specialized.StringCollection>.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection.Count%2A>       Coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção se mover para baixo para acomodar o novo elemento. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash.       Esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero no qual `value` devem ser inseridos."
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para inserir.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é maior do que <xref:System.Collections.Specialized.StringCollection.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é somente leitura.       - ou - <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: StringCollection.System.Collections.IList.IsFixedSize
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> objeto tem um tamanho fixo."
  remarks: "Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos após a coleção é criada, mas permitir a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Portanto, se forem feitas alterações à coleção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete as alterações.       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> objeto tem um fixa tamanho; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: StringCollection.System.Collections.IList.IsReadOnly
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> objeto é somente leitura."
  remarks: "Uma coleção que é somente leitura não permite a adição, remoção ou modificação de elementos após a criação da coleção.       Uma coleção que é somente leitura é simplesmente uma coleção com um wrapper que impede a modificação da coleção; Portanto, se forem feitas alterações à coleção subjacente, a coleção somente leitura reflete as alterações.       Recuperar o valor dessa propriedade é uma operação de (1)."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> objeto é somente leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: StringCollection.System.Collections.IList.Item(Int32)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém ou define o elemento no índice especificado."
  remarks: "Esse método fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: `myCollection[index]`.       A linguagem c# usa o [isso](~/add/includes/ajax-current-ext-md.md) palavra-chave para definir os indexadores em vez de implementar a propriedade IList.Item. Visual Basic implementa IList.Item como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.       <xref:System.Collections.Specialized.StringCollection>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.StringCollection>       Recuperar o valor dessa propriedade é uma operação de (1); definindo a propriedade também é uma operação de (1)."
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero do elemento a ser obtido ou definido."
    return:
      type: System.Object
      description: "O elemento no índice especificado."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é maior ou igual a <xref:System.Collections.Specialized.StringCollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: StringCollection.System.Collections.IList.Remove(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove a primeira ocorrência de um objeto específico do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>."
  remarks: "Se o <xref:System.Collections.Specialized.StringCollection>não contém o objeto especificado, o <xref:System.Collections.Specialized.StringCollection>permanece inalterado.</xref:System.Collections.Specialized.StringCollection> </xref:System.Collections.Specialized.StringCollection> Nenhuma exceção é lançada.       Coleções de elementos de contíguos, como listas, os elementos que seguem o elemento removido mover para cima para ocupar o ponto vagas. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções onde os elementos são agrupados conceitualmente em blocos, como uma tabela de hash.       Este método determina a igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Esse método executa uma pesquisa linear; Portanto, esse método é um O (`n`) operação, onde `n` é <xref:System.Collections.Specialized.StringCollection.Count%2A>.</xref:System.Collections.Specialized.StringCollection.Count%2A>"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para remover do <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> é somente leitura.       - ou - <xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.Specialized.StringCollection.#ctor
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: StringCollection()
  nameWithType: StringCollection.StringCollection()
  fullName: System.Collections.Specialized.StringCollection.StringCollection()
- uid: System.Collections.Specialized.StringCollection.Add(System.String)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Add(String)
  nameWithType: StringCollection.Add(String)
  fullName: System.Collections.Specialized.StringCollection.Add(String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.StringCollection.AddRange(System.String[])
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: AddRange(String[])
  nameWithType: StringCollection.AddRange(String[])
  fullName: System.Collections.Specialized.StringCollection.AddRange(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Specialized.StringCollection.Clear
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Clear()
  nameWithType: StringCollection.Clear()
  fullName: System.Collections.Specialized.StringCollection.Clear()
- uid: System.Collections.Specialized.StringCollection.Contains(System.String)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Contains(String)
  nameWithType: StringCollection.Contains(String)
  fullName: System.Collections.Specialized.StringCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: StringCollection.CopyTo(String[],Int32)
  fullName: System.Collections.Specialized.StringCollection.CopyTo(String[],Int32)
- uid: System.Collections.Specialized.StringCollection.Count
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Count
  nameWithType: StringCollection.Count
  fullName: System.Collections.Specialized.StringCollection.Count
- uid: System.Collections.Specialized.StringCollection.GetEnumerator
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: StringCollection.GetEnumerator()
  fullName: System.Collections.Specialized.StringCollection.GetEnumerator()
- uid: System.Collections.Specialized.StringEnumerator
  parent: System.Collections.Specialized
  isExternal: false
  name: StringEnumerator
  nameWithType: StringEnumerator
  fullName: System.Collections.Specialized.StringEnumerator
- uid: System.Collections.Specialized.StringCollection.IndexOf(System.String)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: StringCollection.IndexOf(String)
  fullName: System.Collections.Specialized.StringCollection.IndexOf(String)
- uid: System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: StringCollection.Insert(Int32,String)
  fullName: System.Collections.Specialized.StringCollection.Insert(Int32,String)
- uid: System.Collections.Specialized.StringCollection.IsReadOnly
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: StringCollection.IsReadOnly
  fullName: System.Collections.Specialized.StringCollection.IsReadOnly
- uid: System.Collections.Specialized.StringCollection.IsSynchronized
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: StringCollection.IsSynchronized
  fullName: System.Collections.Specialized.StringCollection.IsSynchronized
- uid: System.Collections.Specialized.StringCollection.Item(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: StringCollection.Item(Int32)
  fullName: System.Collections.Specialized.StringCollection.Item(Int32)
- uid: System.Collections.Specialized.StringCollection.Remove(System.String)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Remove(String)
  nameWithType: StringCollection.Remove(String)
  fullName: System.Collections.Specialized.StringCollection.Remove(String)
- uid: System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: StringCollection.RemoveAt(Int32)
  fullName: System.Collections.Specialized.StringCollection.RemoveAt(Int32)
- uid: System.Collections.Specialized.StringCollection.SyncRoot
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: SyncRoot
  nameWithType: StringCollection.SyncRoot
  fullName: System.Collections.Specialized.StringCollection.SyncRoot
- uid: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: StringCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: StringCollection.System.Collections.IList.Add(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Add(Object)
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: StringCollection.System.Collections.IList.Contains(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Contains(Object)
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: StringCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IndexOf(Object)
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: StringCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: StringCollection.System.Collections.IList.IsFixedSize
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsFixedSize
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: StringCollection.System.Collections.IList.IsReadOnly
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.IsReadOnly
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: StringCollection.System.Collections.IList.Item(Int32)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Item(Int32)
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: StringCollection.System.Collections.IList.Remove(Object)
  fullName: System.Collections.Specialized.StringCollection.System.Collections.IList.Remove(Object)
- uid: System.Collections.Specialized.StringCollection.#ctor*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: StringCollection
  nameWithType: StringCollection.StringCollection
- uid: System.Collections.Specialized.StringCollection.Add*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Add
  nameWithType: StringCollection.Add
- uid: System.Collections.Specialized.StringCollection.AddRange*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: AddRange
  nameWithType: StringCollection.AddRange
- uid: System.Collections.Specialized.StringCollection.Clear*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Clear
  nameWithType: StringCollection.Clear
- uid: System.Collections.Specialized.StringCollection.Contains*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Contains
  nameWithType: StringCollection.Contains
- uid: System.Collections.Specialized.StringCollection.CopyTo*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: CopyTo
  nameWithType: StringCollection.CopyTo
- uid: System.Collections.Specialized.StringCollection.Count*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Count
  nameWithType: StringCollection.Count
- uid: System.Collections.Specialized.StringCollection.GetEnumerator*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: StringCollection.GetEnumerator
- uid: System.Collections.Specialized.StringCollection.IndexOf*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: IndexOf
  nameWithType: StringCollection.IndexOf
- uid: System.Collections.Specialized.StringCollection.Insert*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Insert
  nameWithType: StringCollection.Insert
- uid: System.Collections.Specialized.StringCollection.IsReadOnly*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: StringCollection.IsReadOnly
- uid: System.Collections.Specialized.StringCollection.IsSynchronized*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: StringCollection.IsSynchronized
- uid: System.Collections.Specialized.StringCollection.Item*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Item
  nameWithType: StringCollection.Item
- uid: System.Collections.Specialized.StringCollection.Remove*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: Remove
  nameWithType: StringCollection.Remove
- uid: System.Collections.Specialized.StringCollection.RemoveAt*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: RemoveAt
  nameWithType: StringCollection.RemoveAt
- uid: System.Collections.Specialized.StringCollection.SyncRoot*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: SyncRoot
  nameWithType: StringCollection.SyncRoot
- uid: System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: StringCollection.System.Collections.ICollection.CopyTo
- uid: System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: StringCollection.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Add*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: StringCollection.System.Collections.IList.Add
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Contains*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: StringCollection.System.Collections.IList.Contains
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: StringCollection.System.Collections.IList.IndexOf
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Insert*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: StringCollection.System.Collections.IList.Insert
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: StringCollection.System.Collections.IList.IsFixedSize
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: StringCollection.System.Collections.IList.IsReadOnly
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Item*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: StringCollection.System.Collections.IList.Item
- uid: System.Collections.Specialized.StringCollection.System#Collections#IList#Remove*
  parent: System.Collections.Specialized.StringCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: StringCollection.System.Collections.IList.Remove
