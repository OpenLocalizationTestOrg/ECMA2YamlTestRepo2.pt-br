### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Financial
  id: Financial
  children:
  - Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  - Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)
  - Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)
  - Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)
  - Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  - Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)
  - Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)
  langs:
  - csharp
  name: Financial
  nameWithType: Financial
  fullName: Microsoft.VisualBasic.Financial
  type: Class
  summary: "O <xref uid=&quot;langword_csharp_Financial&quot; name=&quot;Financial&quot; href=&quot;&quot;> </xref> módulo contém procedimentos usados para executar operações financeiras."
  remarks: "Este módulo oferece suporte para os membros de biblioteca de tempo de execução do Visual Basic que executa cálculos financeiros como depreciação, valores futuros e presentes, taxas de interesse, taxas de retorno e pagamentos."
  example:
  - "This example uses the `Rate` function to calculate the interest rate of a loan, given the total number of payments (`TotPmts`), the amount of the loan payment (`Payment`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`), and an approximation of the expected interest rate (`Guess`).  \n  \n [!code-vb[VbVbalrMath#2](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._25_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Financial
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  id: DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: DDB(Double,Double,Double,Double,Double)
  nameWithType: Financial.DDB(Double,Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.DDB(Double,Double,Double,Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a depreciação de um ativo por um período de tempo específico usando o método de saldo decrescente duplo ou algum outro método que você especificar."
  remarks: "O método de saldo decrescente duplo calcula a depreciação a uma taxa acelerada. A depreciação é mais alta no primeiro período e diminui em períodos sucessivos.       O `Life` e `Period` argumentos devem ser expressos nas mesmas unidades. Por exemplo, se `Life` é fornecido em meses, `Period` também deve ser fornecido em meses. Todos os argumentos devem ser números positivos.       O `DDB` função usa a seguinte fórmula para calcular a depreciação de um determinado período: depreciação período = ((Cost – Salvage) * fator) / vida"
  example:
  - "This example uses the `DDB` function to return the depreciation of an asset for a specified period given the initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), the total life of the asset in years (`LifeTime`), and the period in years for which the depreciation is calculated (`Depr`).  \n  \n [!code-vb[VbVbalrMath#3](~/add/codesnippet/visualbasic/0a9b2d8a-2f04-4c59-80da-_1.vb)]"
  syntax:
    content: public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);
    parameters:
    - id: Cost
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o custo inicial do ativo."
    - id: Salvage
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor do ativo no final de sua vida útil."
    - id: Life
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o período de vida útil do ativo."
    - id: Period
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o período para o ativo a depreciação é calculada."
    - id: Factor
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa à qual o saldo diminui. Se omitido, 2 (método decrescente duplo) é assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a depreciação de um ativo por um período de tempo específico usando o método de saldo decrescente duplo ou algum outro método que você especificar."
  overload: Microsoft.VisualBasic.Financial.DDB*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Factor</code>&lt;= 0, <code>Salvage</code> &lt; 0, <code>Period</code> &lt;= 0, or <code>Period</code> &gt;<code>Life.</code>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: FV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.FV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.FV(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o valor futuro de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados ao longo do tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       O `Rate` e `NPer` argumentos devem ser calculados usando períodos de pagamento expressados nas mesmas unidades. Por exemplo, se `Rate` é calculada usando meses, `NPer` também deve ser calculado usando meses.       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos."
  example:
  - "This example uses the `FV` function to return the future value of an investment given the percentage rate that accrues per period (`APR / 12`), the total number of payments (`TotPmts`), the payment (`Payment`), the current value of the investment (`PVal`), and a number that indicates whether the payment is made at the beginning or end of the payment period (`PayType`). Note that because `Payment` represents cash paid out, it is a negative number.  \n  \n [!code-vb[VbVbalrMath#22](~/add/codesnippet/visualbasic/0c46fa91-bd2b-4dd0-a9f3-_1.vb)]"
  syntax:
    content: public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa de juros por período. Por exemplo, se você obtiver um empréstimo de carro com uma taxa de porcentagem anual (APR) de 10% e fizer pagamentos mensais, a taxa por período é 0,1/12 ou 0,0083."
    - id: NPer
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o número total de períodos de pagamento na anuidade. Por exemplo, se você fizer pagamentos mensais de um empréstimo de carro de quatro anos, o empréstimo tem um total de 4 x 12 (ou 48) períodos de pagamento."
    - id: Pmt
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificação de pagamento a ser feito em cada período. Pagamentos geralmente contêm juros e que não são alterados ao longo da anuidade."
    - id: PV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor presente (ou soma total) de uma série de pagamentos futuros. Por exemplo, quando você pega emprestado dinheiro para comprar um carro, o valor do empréstimo é o valor presente para o credor dos pagamentos mensais do carro que serão tomadas. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser <xref uid=&quot;langword_csharp_DueDate.EndOfPeriod&quot; name=&quot;DueDate.EndOfPeriod&quot; href=&quot;&quot;> </xref> se os pagamentos são feitos no final do período de pagamento, ou <xref uid=&quot;langword_csharp_DueDate.BegOfPeriod&quot; name=&quot;DueDate.BegOfPeriod&quot; href=&quot;&quot;> </xref> se os pagamentos são feitos no início do período. Se omitido, <xref uid=&quot;langword_csharp_DueDate.EndOfPeriod&quot; name=&quot;DueDate.EndOfPeriod&quot; href=&quot;&quot;> </xref> será assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o valor futuro de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  overload: Microsoft.VisualBasic.Financial.FV*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: IPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o pagamento de juros para um determinado período de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados ao longo do tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       O `Rate` e `NPer` argumentos devem ser calculados usando períodos de pagamento expressados nas mesmas unidades. Por exemplo, se `Rate` é calculada usando meses, `NPer` também deve ser calculado usando meses.       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos."
  example:
  - "This example uses the `IPmt` function to calculate how much of a payment is interest when all the payments are of equal value. Given are the interest percentage rate per period (`APR / 12`), the payment period for which the interest portion is desired (`Period`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \n  \n [!code-vb[VbVbalrMath#26](~/add/codesnippet/visualbasic/2fa7f248-74e0-4498-aee1-_1.vb)]"
  syntax:
    content: public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa de juros por período. Por exemplo, se você obtiver um empréstimo de carro com uma taxa de porcentagem anual (APR) de 10% e fizer pagamentos mensais, a taxa por período é 0,1/12 ou 0,0083."
    - id: Per
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o período de pagamento no intervalo de 1 a `NPer`."
    - id: NPer
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o número total de períodos de pagamento na anuidade. Por exemplo, se você fizer pagamentos mensais de um empréstimo de carro de quatro anos, o empréstimo tem um total de 4 x 12 (ou 48) períodos de pagamento."
    - id: PV
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando presente valor ou valor atual, de uma série de futuros pagamentos ou confirmações. Por exemplo, quando você pega emprestado dinheiro para comprar um carro, o valor do empréstimo é o valor presente para o credor dos pagamentos mensais do carro que serão tomadas."
    - id: FV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor futuro ou o saldo, que você quer depois que você fez o pagamento final. Por exemplo, o valor futuro de um empréstimo é $0 porque esse é o valor após o pagamento final. No entanto, se você deseja salvar r $50.000 em 18 anos para aprendizado, $50.000 é o valor futuro. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser `DueDate.EndOfPeriod` se os pagamentos são feitos no final do período de pagamento, ou `DueDate.BegOfPeriod` se os pagamentos são feitos no início do período. Se omitido, `DueDate.EndOfPeriod` será assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o pagamento de juros para um determinado período de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  overload: Microsoft.VisualBasic.Financial.IPmt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Per</code>&lt;= 0 or <code>Per</code> &gt;<code>NPer</code>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)
  id: IRR(System.Double[]@,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: IRR(Double[],Double)
  nameWithType: Financial.IRR(Double[],Double)
  fullName: Microsoft.VisualBasic.Financial.IRR(Double[],Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a taxa interna de retorno para uma série de fluxos de caixa periódicos (pagamentos e recebimentos)."
  remarks: "A taxa interna de retorno é a taxa de juros recebida para um investimento que consiste em pagamentos e recebimentos que ocorrem em intervalos regulares.       O `IRR` função usa a ordem dos valores dentro da matriz para interpretar a ordem de pagamentos e recebimentos. Certifique-se de inserir os valores de recebimento e pagamento na sequência correta. O fluxo de caixa para cada período não precisa ser corrigido, assim como para uma anuidade.       `IRR`é calculada por iteração. Iniciando com o valor de `Guess`, `IRR` verificará o cálculo até que o resultado é preciso 0,00001%. Se `IRR` não é possível encontrar um resultado após 20 tentativas, ele falhará."
  example:
  - "In this example, the `IRR` function returns the internal rate of return for a series of five cash flows contained in the array `Values()`. The first array element is a negative cash flow representing business start-up costs. The remaining four cash flows represent positive cash flows for the subsequent four years. `Guess` is the estimated internal rate of return.  \n  \n [!code-vb[VbVbalrMath#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._228_1.vb)]"
  syntax:
    content: public static double IRR (ref double[] ValueArray, double Guess = 0.1);
    parameters:
    - id: ValueArray
      type: System.Double[]
      description: "Obrigatório. Matriz de <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando valores de fluxo de caixa. A matriz deve conter pelo menos um valor negativo (um pagamento) e um valor positivo (um recebimento)."
    - id: Guess
      type: System.Double
      description: "Opcional. Objeto que especifica o valor que você acha será retornado por <xref uid=&quot;langword_csharp_IRR&quot; name=&quot;IRR&quot; href=&quot;&quot;> </xref>. Se omitido, `Guess` é 0,1 (10 por cento)."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a taxa interna de retorno para uma série de fluxos de caixa periódicos (pagamentos e recebimentos)."
  overload: Microsoft.VisualBasic.Financial.IRR*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Argumento de matriz valores é inválidos ou <code> Guess </code> &lt;= -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)
  id: MIRR(System.Double[]@,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: MIRR(Double[],Double,Double)
  nameWithType: Financial.MIRR(Double[],Double,Double)
  fullName: Microsoft.VisualBasic.Financial.MIRR(Double[],Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a taxa interna modificada de retorno para uma série de fluxos de caixa periódicos (pagamentos e recebimentos)."
  remarks: "A taxa interna modificada de retorno é a taxa interna de retorno quando pagamentos e recebimentos são financiados em diferentes taxas. O `MIRR` função leva em conta o custo do investimento (`FinanceRate`) e a taxa de juros recebidos no reinvestimento do capital (`ReinvestRate`).       O `FinanceRate` e `ReinvestRatearguments` são porcentagens expressadas como valores decimais. Por exemplo, 12% é expresso como 0,12.       O `MIRR` função usa a ordem dos valores dentro da matriz para interpretar a ordem de pagamentos e recebimentos. Certifique-se de inserir os valores de recebimento e pagamento na sequência correta."
  example:
  - "This example uses the `MIRR` function to return the modified internal rate of return for a series of cash flows contained in the array `Values()`. `LoanAPR` represents the financing interest, and `InvAPR` represents the interest rate received on reinvestment.  \n  \n [!code-vb[VbVbalrMath#29](~/add/codesnippet/visualbasic/ba568dc0-432d-4a7b-b1d0-_1.vb)]"
  syntax:
    content: public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);
    parameters:
    - id: ValueArray
      type: System.Double[]
      description: "Obrigatório. Matriz de <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando valores de fluxo de caixa. A matriz deve conter pelo menos um valor negativo (um pagamento) e um valor positivo (um recebimento)."
    - id: FinanceRate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa de juros paga como custo do financiamento."
    - id: ReinvestRate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa de juros recebida sobre o lucro de reinvestimento."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a taxa interna modificada de retorno para uma série de fluxos de caixa periódicos (pagamentos e recebimentos)."
  overload: Microsoft.VisualBasic.Financial.MIRR*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Rank of <code>ValueArray</code> does not equal 1, <code>FinanceRate</code> = -1, or <code>ReinvestRate</code> = -1"
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "Ocorreu uma divisão por zero."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: NPer(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.NPer(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.NPer(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o número de períodos de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados por um período de tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos."
  example:
  - "This example uses the `NPer` function to return the number of periods during which payments must be made to pay off a loan whose value is contained in `PVal`. Also provided are the interest percentage rate per period (`APR / 12`), the payment (`Payment`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \n  \n [!code-vb[VbVbalrMath#19](~/add/codesnippet/visualbasic/57cf6dfc-5811-4703-a937-_1.vb)]"
  syntax:
    content: public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa de juros por período. Por exemplo, se você obtiver um empréstimo de carro com uma taxa de porcentagem anual (APR) de 10% e fizer pagamentos mensais, a taxa por período é 0,1/12 ou 0,0083."
    - id: Pmt
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificação de pagamento a ser feito em cada período. Pagamentos geralmente contêm principal e os juros que não é alterado durante a vida útil da anuidade."
    - id: PV
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando presente valor ou valor atual, de uma série de futuros pagamentos ou confirmações. Por exemplo, quando você pega emprestado dinheiro para comprar um carro, o valor do empréstimo é o valor presente para o credor dos pagamentos mensais do carro que serão tomadas."
    - id: FV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor futuro ou o saldo desejada depois que você fez o pagamento final. Por exemplo, o valor futuro de um empréstimo é $0 porque esse é o valor após o pagamento final. No entanto, se você deseja salvar r $50.000 em 18 anos para aprendizado, $50.000 é o valor futuro. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser `DueDate.EndOfPeriod` se os pagamentos são feitos no final do período de pagamento, ou `DueDate.BegOfPeriod` se os pagamentos são feitos no início do período. Se omitido, `DueDate.EndOfPeriod` será assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o número de períodos de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  overload: Microsoft.VisualBasic.Financial.NPer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Rate</code>= 0 and <code>Pmt</code> = 0"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)
  id: NPV(System.Double,System.Double[]@)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: NPV(Double,Double[])
  nameWithType: Financial.NPV(Double,Double[])
  fullName: Microsoft.VisualBasic.Financial.NPV(Double,Double[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o valor líquido atual de um investimento com base em uma série de fluxos de caixa periódicos (pagamentos e recebimentos) e uma taxa de desconto."
  remarks: "O valor líquido atual de um investimento é o valor atual de uma série futura de pagamentos e recebimentos.       O `NPV` função usa a ordem dos valores dentro da matriz para interpretar a ordem de pagamentos e recebimentos. Certifique-se de inserir os valores de recebimento e pagamento na sequência correta.       O `NPV` investimento começa um período antes da data do primeiro valor de fluxo de caixa e termina com o último valor de fluxo de caixa na matriz.       O cálculo do valor presente líquido é baseado em fluxos de caixa futuros. Se seu primeiro fluxo de caixa ocorrer no início do primeiro período, o primeiro valor deve ser adicionado ao valor retornado por `NPV` e não deve ser incluído nos valores de fluxo de caixa de `ValueArray`.       O `NPV` função é semelhante ao `PV` função (valor presente), exceto que o `PV` função permite que os fluxos de caixa comecem tanto no final ou no início de um período. Ao contrário da variável `NPV` valores de fluxo de caixa, `PV` fluxos de caixa devem ser corrigidos em todo o investimento."
  example:
  - "This example uses the `NPV` function to return the net present value for a series of cash flows contained in the array `values()`. The return value, stored in `FixedRetRate`, represents the fixed internal rate of return.  \n  \n [!code-vb[VbVbalrMath#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._103_1.vb)]"
  syntax:
    content: public static double NPV (double Rate, ref double[] ValueArray);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando a taxa de desconto sobre a duração do período, expressa como um decimal."
    - id: ValueArray
      type: System.Double[]
      description: "Obrigatório. Matriz de <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando valores de fluxo de caixa. A matriz deve conter pelo menos um valor negativo (um pagamento) e um valor positivo (um recebimento)."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o valor líquido atual de um investimento com base em uma série de fluxos de caixa periódicos (pagamentos e recebimentos) e uma taxa de desconto."
  overload: Microsoft.VisualBasic.Financial.NPV*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ValueArray</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>, rank of <code>ValueArray</code> &lt;&gt; 1, or <code>Rate</code> = -1"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: Pmt(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.Pmt(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.Pmt(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o pagamento de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados durante um período de tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       O `Rate` e `NPer` argumentos devem ser calculados usando períodos de pagamento expressados nas mesmas unidades. Por exemplo, se `Rate` é calculada usando meses, `NPer` também deve ser calculado usando meses.       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos."
  example:
  - "This example uses the `Pmt` function to return the monthly payment for a loan during a fixed period. Given are the interest percentage rate per period (`APR / 12`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period `(PayType).`  \n  \n [!code-vb[VbVbalrMath#7](~/add/codesnippet/visualbasic/7dc3a2f6-c47c-4a51-b799-_1.vb)]"
  syntax:
    content: public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica a taxa de juros por período. Por exemplo, se você obtiver um empréstimo de carro com uma taxa de porcentagem anual (APR) de 10% e fizer pagamentos mensais, a taxa por período é 0,1/12 ou 0,0083."
    - id: NPer
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o número total de períodos de pagamento na anuidade. Por exemplo, se você fizer pagamentos mensais de um empréstimo de carro de quatro anos, o empréstimo tem um total de 4 x 12 (ou 48) períodos de pagamento."
    - id: PV
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o valor presente (ou soma total) que uma série de pagamentos a serem pagos no futuro vale agora. Por exemplo, quando você pega emprestado dinheiro para comprar um carro, o valor do empréstimo é o valor presente para o credor dos pagamentos mensais do carro que serão tomadas."
    - id: FV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor futuro ou o saldo desejada depois que você fez o pagamento final. Por exemplo, o valor futuro de um empréstimo é $0 porque esse é o valor após o pagamento final. No entanto, se você deseja salvar r $50.000 durante 18 anos para aprendizado, $50.000 é o valor futuro. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser `DueDate.EndOfPeriod` se os pagamentos são feitos no final do período de pagamento, ou `DueDate.BegOfPeriod` se os pagamentos são feitos no início do período. Se omitido, `DueDate.EndOfPeriod` será assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o pagamento de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  overload: Microsoft.VisualBasic.Financial.Pmt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NPer</code> = 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: PPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o pagamento principal para um determinado período de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados por um período de tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       O `Rate` e `NPer` argumentos devem ser calculados usando períodos de pagamento expressados nas mesmas unidades. Por exemplo, se `Rate` é calculada usando meses, `NPer` também deve ser calculado usando meses.       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos."
  example:
  - "This example uses the `PPmt` function to calculate how much of a payment for a specific period is principal when all the payments are of equal value. Given are the interest percentage rate per period (`APR / 12`), the payment period for which the principal portion is desired (`Period`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \n  \n [!code-vb[VbVbalrMath#24](~/add/codesnippet/visualbasic/43623fd2-2acb-4eab-9abc-_1.vb)]"
  syntax:
    content: public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica a taxa de juros por período. Por exemplo, se você obtiver um empréstimo de carro com uma taxa de porcentagem anual (APR) de 10% e fizer pagamentos mensais, a taxa por período é 0,1/12 ou 0,0083."
    - id: Per
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o período de pagamento no intervalo de 1 a `NPer`."
    - id: NPer
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o número total de períodos de pagamento na anuidade. Por exemplo, se você fizer pagamentos mensais de um empréstimo de carro de quatro anos, o empréstimo tem um total de 4 x 12 (ou 48) períodos de pagamento."
    - id: PV
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o valor atual de uma série de futuros pagamentos ou confirmações. Por exemplo, quando você pega emprestado dinheiro para comprar um carro, o valor do empréstimo é o valor presente para o credor dos pagamentos mensais do carro que serão tomadas."
    - id: FV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor futuro ou o saldo desejada depois que você fez o pagamento final. Por exemplo, o valor futuro de um empréstimo é $0 porque esse é o valor após o pagamento final. No entanto, se você deseja salvar r $50.000 em 18 anos para aprendizado, $50.000 é o valor futuro. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser `DueDate.EndOfPeriod` se os pagamentos são feitos no final do período de pagamento, ou `DueDate.BegOfPeriod` se os pagamentos são feitos no início do período. Se omitido, `DueDate.EndOfPeriod` será assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o pagamento principal para um determinado período de uma anuidade com base em pagamentos fixos periódicos e uma taxa de juros fixa."
  overload: Microsoft.VisualBasic.Financial.PPmt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Per</code>&lt;=0 or <code>Per</code> &gt; <code>NPer</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: PV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PV(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o valor atual de uma anuidade com base em pagamentos fixos periódicos a serem pagos no futuro e uma taxa de juros fixa."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados por um período de tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       O `Rate` e `NPer` argumentos devem ser calculados usando períodos de pagamento expressados nas mesmas unidades. Por exemplo, se `Rate` é calculada usando meses, `NPer` também deve ser calculado usando meses.       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos."
  example:
  - "In this example, the `PV` function returns the present value of an $1,000,000 annuity that will provide $50,000 a year for the next 20 years. Provided are the expected annual percentage rate (`APR`), the total number of payments (`TotPmts`), the amount of each payment (`YrIncome`), the total future value of the investment (`FVal`), and a number that indicates whether each payment is made at the beginning or end of the payment period (`PayType`). Note that `YrIncome` is a negative number because it represents cash paid out from the annuity each year.  \n  \n [!code-vb[VbVbalrMath#25](~/add/codesnippet/visualbasic/0175a2c1-5f6c-4f6b-9587-_1.vb)]"
  syntax:
    content: public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica a taxa de juros por período. Por exemplo, se você obtiver um empréstimo de carro com uma taxa de porcentagem anual (APR) de 10% e fizer pagamentos mensais, a taxa por período é 0,1/12 ou 0,0083."
    - id: NPer
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o número total de períodos de pagamento na anuidade. Por exemplo, se você fizer pagamentos mensais de um empréstimo de carro de quatro anos, o empréstimo terá 4 x 12 (ou 48) períodos de pagamento."
    - id: Pmt
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o pagamento a ser feito em cada período. Pagamentos geralmente contêm juros e que não seja alterado durante a vida útil da anuidade."
    - id: FV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o saldo de valor ou dinheiro futuro desejada depois que você fizer o pagamento final. Por exemplo, o valor futuro de um empréstimo é $0 porque esse é o valor após o pagamento final. No entanto, se você deseja salvar r $50.000 em 18 anos para aprendizado, $50.000 é o valor futuro. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser `DueDate.EndOfPeriod` se os pagamentos são feitos no final do período de pagamento, ou `DueDate.BegOfPeriod` se os pagamentos são feitos no início do período. Se omitido, `DueDate.EndOfPeriod` será assumido."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando o valor atual de uma anuidade com base em pagamentos fixos periódicos a serem pagos no futuro e uma taxa de juros fixa."
  overload: Microsoft.VisualBasic.Financial.PV*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  id: Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: Rate(Double,Double,Double,Double,DueDate,Double)
  nameWithType: Financial.Rate(Double,Double,Double,Double,DueDate,Double)
  fullName: Microsoft.VisualBasic.Financial.Rate(Double,Double,Double,Double,DueDate,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a taxa de juros por período de uma anuidade."
  remarks: "Uma anuidade é uma série de pagamentos fixos realizados por um período de tempo. Uma anuidade pode ser um empréstimo (como uma hipoteca doméstica) ou um investimento (como um plano de economias mensais).       Para todos os argumentos, dinheiro pago (como depósitos de economias) é representado por números negativos; dinheiro recebido (como cheques de dividendos) é representado por números positivos.       `Rate`é calculada por iteração. Iniciando com o valor de `Guess`, `Rate` verificará o cálculo até que o resultado é preciso 0,00001%. Se `Rate` não é possível encontrar um resultado após 20 tentativas, ele falhará. Se sua estimativa é 10 por cento e `Rate` falhar, tente um valor diferente para `Guess`."
  example:
  - "This example uses the `Rate` function to calculate the interest rate of a loan given the total number of payments (`TotPmts`), the amount of the loan payment (`Payment`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`), and an approximation of the expected interest rate (`Guess`).  \n  \n [!code-vb[VbVbalrMath#2](~/add/codesnippet/visualbasic/ea19cd36-8223-44a7-9131-_1.vb)]"
  syntax:
    content: public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);
    parameters:
    - id: NPer
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o número total de períodos de pagamento na anuidade. Por exemplo, se você fizer pagamentos mensais de um empréstimo de carro de quatro anos, o empréstimo tem um total de 4 * 12 (ou 48) períodos de pagamento."
    - id: Pmt
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o pagamento a ser feito em cada período. Pagamentos geralmente contêm juros e que não são alterados ao longo da anuidade."
    - id: PV
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o momento de valor, ou valor atual, de uma série de futuros pagamentos ou confirmações. Por exemplo, quando você pega emprestado dinheiro para comprar um carro, o valor do empréstimo é o valor presente para o credor dos pagamentos mensais do carro que serão tomadas."
    - id: FV
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o saldo de valor ou dinheiro futuro desejada depois que você fizer o pagamento final. Por exemplo, o valor futuro de um empréstimo é $0 porque esse é o valor após o pagamento final. No entanto, se você deseja salvar r $50.000 em 18 anos para aprendizado, $50.000 é o valor futuro. Se omitido, 0 será assumido."
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "Opcional. Objeto do tipo <xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> que especifica quando os pagamentos são feitos. Esse argumento deve ser `DueDate.EndOfPeriod` se os pagamentos são feitos no final do período de pagamento, ou `DueDate.BegOfPeriod` se os pagamentos são feitos no início do período. Se omitido, `DueDate.EndOfPeriod` será assumido."
    - id: Guess
      type: System.Double
      description: "Opcional. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificar o valor que você acha será retornado por <xref uid=&quot;langword_csharp_Rate&quot; name=&quot;Rate&quot; href=&quot;&quot;> </xref>. Se omitido, `Guess` é 0,1 (10 por cento)."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a taxa de juros por período de uma anuidade."
  overload: Microsoft.VisualBasic.Financial.Rate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NPer</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)
  id: SLN(System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: SLN(Double,Double,Double)
  nameWithType: Financial.SLN(Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SLN(Double,Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a depreciação linear de um ativo para um único período."
  remarks: "O período de depreciação deve ser expresso na mesma unidade como o `Life` argumento. Todos os argumentos devem ser números positivos."
  example:
  - "This example uses the `SLN` function to return the straight-line depreciation of an asset for a single period given the asset's initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), and the total life of the asset in years (`LifeTime`).  \n  \n [!code-vb[VbVbalrMath#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._10_1.vb)]"
  syntax:
    content: public static double SLN (double Cost, double Salvage, double Life);
    parameters:
    - id: Cost
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o custo inicial do ativo."
    - id: Salvage
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor do ativo no final de sua vida útil."
    - id: Life
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica a vida útil do ativo."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a depreciação linear de um ativo para um único período."
  overload: Microsoft.VisualBasic.Financial.SLN*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Life</code> = 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)
  id: SYD(System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: SYD(Double,Double,Double,Double)
  nameWithType: Financial.SYD(Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SYD(Double,Double,Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a depreciação de dígitos da soma dos anos de um ativo por um período especificado."
  remarks: "O `Life` e `Period` argumentos devem ser expressos nas mesmas unidades. Por exemplo, se `Life` é fornecido em meses, `Period` também deve ser fornecido em meses. Todos os argumentos devem ser números positivos."
  example:
  - "This example uses the `SYD` function to return the depreciation of an asset for a specified period given the asset's initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), and the total life of the asset in years (`LifeTime`).  \n  \n [!code-vb[VbVbalrMath#3](~/add/codesnippet/visualbasic/9fc7d5a0-c6cb-4861-b899-_1.vb)]"
  syntax:
    content: public static double SYD (double Cost, double Salvage, double Life, double Period);
    parameters:
    - id: Cost
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o custo inicial do ativo."
    - id: Salvage
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o valor do ativo no final de sua vida útil."
    - id: Life
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>Especifica o período da vida útil do ativo."
    - id: Period
      type: System.Double
      description: "Obrigatório. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>especificando o período para o ativo a depreciação é calculada."
    return:
      type: System.Double
      description: "Retorna um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> especificando a depreciação de dígitos da soma dos anos de um ativo por um período especificado."
  overload: Microsoft.VisualBasic.Financial.SYD*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Salvage</code>&lt; 0, <code>Period</code> &gt; <code>Life</code>, or <code>Period</code> &lt;=0."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.DivideByZeroException
  isExternal: true
  name: System.DivideByZeroException
- uid: Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: DDB(Double,Double,Double,Double,Double)
  nameWithType: Financial.DDB(Double,Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.DDB(Double,Double,Double,Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: FV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.FV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.FV(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.DueDate
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DueDate
  nameWithType: DueDate
  fullName: Microsoft.VisualBasic.DueDate
- uid: Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IRR(Double[],Double)
  nameWithType: Financial.IRR(Double[],Double)
  fullName: Microsoft.VisualBasic.Financial.IRR(Double[],Double)
- uid: System.Double[]
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double[]
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: MIRR(Double[],Double,Double)
  nameWithType: Financial.MIRR(Double[],Double,Double)
  fullName: Microsoft.VisualBasic.Financial.MIRR(Double[],Double,Double)
- uid: Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPer(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.NPer(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.NPer(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPV(Double,Double[])
  nameWithType: Financial.NPV(Double,Double[])
  fullName: Microsoft.VisualBasic.Financial.NPV(Double,Double[])
- uid: Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Pmt(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.Pmt(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.Pmt(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PV(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Rate(Double,Double,Double,Double,DueDate,Double)
  nameWithType: Financial.Rate(Double,Double,Double,Double,DueDate,Double)
  fullName: Microsoft.VisualBasic.Financial.Rate(Double,Double,Double,Double,DueDate,Double)
- uid: Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SLN(Double,Double,Double)
  nameWithType: Financial.SLN(Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SLN(Double,Double,Double)
- uid: Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SYD(Double,Double,Double,Double)
  nameWithType: Financial.SYD(Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SYD(Double,Double,Double,Double)
- uid: Microsoft.VisualBasic.Financial.DDB*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: DDB
  nameWithType: Financial.DDB
- uid: Microsoft.VisualBasic.Financial.FV*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: FV
  nameWithType: Financial.FV
- uid: Microsoft.VisualBasic.Financial.IPmt*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IPmt
  nameWithType: Financial.IPmt
- uid: Microsoft.VisualBasic.Financial.IRR*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IRR
  nameWithType: Financial.IRR
- uid: Microsoft.VisualBasic.Financial.MIRR*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: MIRR
  nameWithType: Financial.MIRR
- uid: Microsoft.VisualBasic.Financial.NPer*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPer
  nameWithType: Financial.NPer
- uid: Microsoft.VisualBasic.Financial.NPV*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPV
  nameWithType: Financial.NPV
- uid: Microsoft.VisualBasic.Financial.Pmt*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Pmt
  nameWithType: Financial.Pmt
- uid: Microsoft.VisualBasic.Financial.PPmt*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PPmt
  nameWithType: Financial.PPmt
- uid: Microsoft.VisualBasic.Financial.PV*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PV
  nameWithType: Financial.PV
- uid: Microsoft.VisualBasic.Financial.Rate*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Rate
  nameWithType: Financial.Rate
- uid: Microsoft.VisualBasic.Financial.SLN*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SLN
  nameWithType: Financial.SLN
- uid: Microsoft.VisualBasic.Financial.SYD*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SYD
  nameWithType: Financial.SYD
