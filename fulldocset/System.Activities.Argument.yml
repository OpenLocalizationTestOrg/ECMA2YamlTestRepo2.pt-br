### YamlMime:ManagedReference
items:
- uid: System.Activities.Argument
  id: Argument
  children:
  - System.Activities.Argument.ArgumentType
  - System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)
  - System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)
  - System.Activities.Argument.Direction
  - System.Activities.Argument.EvaluationOrder
  - System.Activities.Argument.Expression
  - System.Activities.Argument.Get(System.Activities.ActivityContext)
  - System.Activities.Argument.Get``1(System.Activities.ActivityContext)
  - System.Activities.Argument.GetLocation(System.Activities.ActivityContext)
  - System.Activities.Argument.ResultValue
  - System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)
  - System.Activities.Argument.UnspecifiedEvaluationOrder
  langs:
  - csharp
  name: Argument
  nameWithType: Argument
  fullName: System.Activities.Argument
  type: Class
  summary: "A classe base abstrata que representa um terminal de associação que suporta o fluxo de dados dentro e fora de uma atividade."
  syntax:
    content: public abstract class Argument
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.Argument.ArgumentType
  id: ArgumentType
  parent: System.Activities.Argument
  langs:
  - csharp
  name: ArgumentType
  nameWithType: Argument.ArgumentType
  fullName: System.Activities.Argument.ArgumentType
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Obtém o tipo de dados para os dados associados a este <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  syntax:
    content: public Type ArgumentType { get; }
    return:
      type: System.Type
      description: "O tipo de dados para os dados associados a este <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  overload: System.Activities.Argument.ArgumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)
  id: Create(System.Type,System.Activities.ArgumentDirection)
  parent: System.Activities.Argument
  langs:
  - csharp
  name: Create(Type,ArgumentDirection)
  nameWithType: Argument.Create(Type,ArgumentDirection)
  fullName: System.Activities.Argument.Create(Type,ArgumentDirection)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Inicializa e retorna um novo <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  syntax:
    content: public static System.Activities.Argument Create (Type type, System.Activities.ArgumentDirection direction);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de dados de <xref href=&quot;System.Activities.Argument&quot;> </xref>."
    - id: direction
      type: System.Activities.ArgumentDirection
      description: "Um dos valores de enumeração que especifica a direção do fluxo de dados por meio de <xref href=&quot;System.Activities.Argument&quot;> </xref>."
    return:
      type: System.Activities.Argument
      description: "O argumento recém-criado."
  overload: System.Activities.Argument.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)
  id: CreateReference(System.Activities.Argument,System.String)
  parent: System.Activities.Argument
  langs:
  - csharp
  name: CreateReference(Argument,String)
  nameWithType: Argument.CreateReference(Argument,String)
  fullName: System.Activities.Argument.CreateReference(Argument,String)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Cria um novo argumento que referencia o argumento de destino especificado usando o nome do argumento de referência especificado."
  syntax:
    content: public static System.Activities.Argument CreateReference (System.Activities.Argument argumentToReference, string referencedArgumentName);
    parameters:
    - id: argumentToReference
      type: System.Activities.Argument
      description: "O argumento de destino para fazer referência."
    - id: referencedArgumentName
      type: System.String
      description: "O nome do argumento referenciado."
    return:
      type: System.Activities.Argument
      description: "Um novo argumento que referencia o argumento de destino especificado."
  overload: System.Activities.Argument.CreateReference*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.Direction
  id: Direction
  parent: System.Activities.Argument
  langs:
  - csharp
  name: Direction
  nameWithType: Argument.Direction
  fullName: System.Activities.Argument.Direction
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Obtém um <xref href=&quot;System.Activities.ArgumentDirection&quot;> </xref> que especifica se o <xref href=&quot;System.Activities.Argument&quot;> </xref> representa o fluxo de dados em uma atividade, fora de uma atividade ou ambas dentro e fora de uma atividade."
  syntax:
    content: public System.Activities.ArgumentDirection Direction { get; }
    return:
      type: System.Activities.ArgumentDirection
      description: "Um dos valores de enumeração que especifica a direção do fluxo de dados por meio de <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  overload: System.Activities.Argument.Direction*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.EvaluationOrder
  id: EvaluationOrder
  parent: System.Activities.Argument
  langs:
  - csharp
  name: EvaluationOrder
  nameWithType: Argument.EvaluationOrder
  fullName: System.Activities.Argument.EvaluationOrder
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Obtém ou define um valor de base zero que especifica a ordem em que o argumento é avaliado."
  remarks: "Por padrão, a ordem de avaliação do argumento não for especificada e é igual de <xref:System.Activities.Argument.UnspecifiedEvaluationOrder>valor.</xref:System.Activities.Argument.UnspecifiedEvaluationOrder> Defina EvaluationOrder como um valor maior ou igual a zero para especificar uma ordem de avaliação para esse argumento. [!INCLUDE[wf2](~/add/includes/wf2-md.md)]avalia os argumentos com uma ordem de avaliação especificado em ordem crescente. Observe que os argumentos com uma ordem de avaliação não especificados são avaliados antes daqueles com uma ordem de avaliação especificado."
  syntax:
    content: public int EvaluationOrder { get; set; }
    return:
      type: System.Int32
      description: "Um valor com base em zero que especifica a ordem em que o argumento é avaliado."
  overload: System.Activities.Argument.EvaluationOrder*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor é menor que zero e não é igual a <xref href=&quot;System.Activities.Argument.UnspecifiedEvaluationOrder&quot;> </xref>."
  platform:
  - net462
- uid: System.Activities.Argument.Expression
  id: Expression
  parent: System.Activities.Argument
  langs:
  - csharp
  name: Expression
  nameWithType: Argument.Expression
  fullName: System.Activities.Argument.Expression
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Obtém ou define um <xref href=&quot;System.Activities.ActivityWithResult&quot;> </xref> que representa o valor dos dados associados a este <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  syntax:
    content: public System.Activities.ActivityWithResult Expression { get; set; }
    return:
      type: System.Activities.ActivityWithResult
      description: "O valor de dados associado a este <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  overload: System.Activities.Argument.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.Get(System.Activities.ActivityContext)
  id: Get(System.Activities.ActivityContext)
  parent: System.Activities.Argument
  langs:
  - csharp
  name: Get(ActivityContext)
  nameWithType: Argument.Get(ActivityContext)
  fullName: System.Activities.Argument.Get(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Obtém o valor do argumento usando o contexto da atividade especificada."
  syntax:
    content: public object Get (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "O contexto da atividade atual."
    return:
      type: System.Object
      description: "O valor do argumento."
  overload: System.Activities.Argument.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.Get``1(System.Activities.ActivityContext)
  id: Get``1(System.Activities.ActivityContext)
  parent: System.Activities.Argument
  langs:
  - csharp
  name: Get(ActivityContext)
  nameWithType: Argument.Get(ActivityContext)
  fullName: System.Activities.Argument.Get(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public T Get<T> (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "A ser adicionado."
    return:
      type: T
      description: "A ser adicionado."
  overload: System.Activities.Argument.Get<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.GetLocation(System.Activities.ActivityContext)
  id: GetLocation(System.Activities.ActivityContext)
  parent: System.Activities.Argument
  langs:
  - csharp
  name: GetLocation(ActivityContext)
  nameWithType: Argument.GetLocation(ActivityContext)
  fullName: System.Activities.Argument.GetLocation(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Gets the <xref href=&quot;System.Activities.Location&quot;></xref> for this <xref href=&quot;System.Activities.Argument&quot;></xref>."
  syntax:
    content: public System.Activities.Location GetLocation (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "O contexto de atividade da atividade em execução."
    return:
      type: System.Activities.Location
      description: "O local para este <xref href=&quot;System.Activities.Argument&quot;> </xref>."
  overload: System.Activities.Argument.GetLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.ResultValue
  id: ResultValue
  parent: System.Activities.Argument
  langs:
  - csharp
  name: ResultValue
  nameWithType: Argument.ResultValue
  fullName: System.Activities.Argument.ResultValue
  type: Field
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Representa o valor da constante de &quot;Resultado&quot;, que corresponde ao nome do <xref:System.Activities.ActivityWithResult.Result*>propriedade do tipo <xref href=&quot;System.Activities.OutArgument&quot;> </xref> na classe base expressão <xref href=&quot;System.Activities.ActivityWithResult&quot;> </xref>.</xref:System.Activities.ActivityWithResult.Result*>"
  remarks: "Use esta constante para referenciar o resultado de uma atividade de expressão durante o uso de associação tardia."
  syntax:
    content: public const string ResultValue;
    return:
      type: System.String
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)
  id: Set(System.Activities.ActivityContext,System.Object)
  parent: System.Activities.Argument
  langs:
  - csharp
  name: Set(ActivityContext,Object)
  nameWithType: Argument.Set(ActivityContext,Object)
  fullName: System.Activities.Argument.Set(ActivityContext,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Define o valor do argumento usando o contexto da atividade especificada."
  syntax:
    content: public void Set (System.Activities.ActivityContext context, object value);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "O contexto da atividade atual."
    - id: value
      type: System.Object
      description: "O valor do argumento."
  overload: System.Activities.Argument.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Argument.UnspecifiedEvaluationOrder
  id: UnspecifiedEvaluationOrder
  parent: System.Activities.Argument
  langs:
  - csharp
  name: UnspecifiedEvaluationOrder
  nameWithType: Argument.UnspecifiedEvaluationOrder
  fullName: System.Activities.Argument.UnspecifiedEvaluationOrder
  type: Field
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Representa o valor da <xref:System.Activities.Argument.EvaluationOrder*>propriedade para um argumento com uma ordem de avaliação não especificado.</xref:System.Activities.Argument.EvaluationOrder*> Esse valor é somente leitura."
  syntax:
    content: public static readonly int UnspecifiedEvaluationOrder;
    return:
      type: System.Int32
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Activities.Argument.ArgumentType
  parent: System.Activities.Argument
  isExternal: false
  name: ArgumentType
  nameWithType: Argument.ArgumentType
  fullName: System.Activities.Argument.ArgumentType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)
  parent: System.Activities.Argument
  isExternal: false
  name: Create(Type,ArgumentDirection)
  nameWithType: Argument.Create(Type,ArgumentDirection)
  fullName: System.Activities.Argument.Create(Type,ArgumentDirection)
- uid: System.Activities.Argument
  parent: System.Activities
  isExternal: false
  name: Argument
  nameWithType: Argument
  fullName: System.Activities.Argument
- uid: System.Activities.ArgumentDirection
  parent: System.Activities
  isExternal: false
  name: ArgumentDirection
  nameWithType: ArgumentDirection
  fullName: System.Activities.ArgumentDirection
- uid: System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)
  parent: System.Activities.Argument
  isExternal: false
  name: CreateReference(Argument,String)
  nameWithType: Argument.CreateReference(Argument,String)
  fullName: System.Activities.Argument.CreateReference(Argument,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Argument.Direction
  parent: System.Activities.Argument
  isExternal: false
  name: Direction
  nameWithType: Argument.Direction
  fullName: System.Activities.Argument.Direction
- uid: System.Activities.Argument.EvaluationOrder
  parent: System.Activities.Argument
  isExternal: false
  name: EvaluationOrder
  nameWithType: Argument.EvaluationOrder
  fullName: System.Activities.Argument.EvaluationOrder
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Activities.Argument.Expression
  parent: System.Activities.Argument
  isExternal: false
  name: Expression
  nameWithType: Argument.Expression
  fullName: System.Activities.Argument.Expression
- uid: System.Activities.ActivityWithResult
  parent: System.Activities
  isExternal: false
  name: ActivityWithResult
  nameWithType: ActivityWithResult
  fullName: System.Activities.ActivityWithResult
- uid: System.Activities.Argument.Get(System.Activities.ActivityContext)
  parent: System.Activities.Argument
  isExternal: false
  name: Get(ActivityContext)
  nameWithType: Argument.Get(ActivityContext)
  fullName: System.Activities.Argument.Get(ActivityContext)
- uid: System.Activities.ActivityContext
  parent: System.Activities
  isExternal: false
  name: ActivityContext
  nameWithType: ActivityContext
  fullName: System.Activities.ActivityContext
- uid: System.Activities.Argument.Get``1(System.Activities.ActivityContext)
  parent: System.Activities.Argument
  isExternal: false
  name: Get(ActivityContext)
  nameWithType: Argument.Get(ActivityContext)
  fullName: System.Activities.Argument.Get(ActivityContext)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Activities.Argument.GetLocation(System.Activities.ActivityContext)
  parent: System.Activities.Argument
  isExternal: false
  name: GetLocation(ActivityContext)
  nameWithType: Argument.GetLocation(ActivityContext)
  fullName: System.Activities.Argument.GetLocation(ActivityContext)
- uid: System.Activities.Location
  parent: System.Activities
  isExternal: false
  name: Location
  nameWithType: Location
  fullName: System.Activities.Location
- uid: System.Activities.Argument.ResultValue
  parent: System.Activities.Argument
  isExternal: false
  name: ResultValue
  nameWithType: Argument.ResultValue
  fullName: System.Activities.Argument.ResultValue
- uid: System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)
  parent: System.Activities.Argument
  isExternal: false
  name: Set(ActivityContext,Object)
  nameWithType: Argument.Set(ActivityContext,Object)
  fullName: System.Activities.Argument.Set(ActivityContext,Object)
- uid: System.Activities.Argument.UnspecifiedEvaluationOrder
  parent: System.Activities.Argument
  isExternal: false
  name: UnspecifiedEvaluationOrder
  nameWithType: Argument.UnspecifiedEvaluationOrder
  fullName: System.Activities.Argument.UnspecifiedEvaluationOrder
- uid: System.Activities.Argument.ArgumentType*
  parent: System.Activities.Argument
  isExternal: false
  name: ArgumentType
  nameWithType: Argument.ArgumentType
- uid: System.Activities.Argument.Create*
  parent: System.Activities.Argument
  isExternal: false
  name: Create
  nameWithType: Argument.Create
- uid: System.Activities.Argument.CreateReference*
  parent: System.Activities.Argument
  isExternal: false
  name: CreateReference
  nameWithType: Argument.CreateReference
- uid: System.Activities.Argument.Direction*
  parent: System.Activities.Argument
  isExternal: false
  name: Direction
  nameWithType: Argument.Direction
- uid: System.Activities.Argument.EvaluationOrder*
  parent: System.Activities.Argument
  isExternal: false
  name: EvaluationOrder
  nameWithType: Argument.EvaluationOrder
- uid: System.Activities.Argument.Expression*
  parent: System.Activities.Argument
  isExternal: false
  name: Expression
  nameWithType: Argument.Expression
- uid: System.Activities.Argument.Get*
  parent: System.Activities.Argument
  isExternal: false
  name: Get
  nameWithType: Argument.Get
- uid: System.Activities.Argument.Get<T>*
  parent: System.Activities.Argument
  isExternal: false
  name: Get<T>
  nameWithType: Argument.Get<T>
- uid: System.Activities.Argument.GetLocation*
  parent: System.Activities.Argument
  isExternal: false
  name: GetLocation
  nameWithType: Argument.GetLocation
- uid: System.Activities.Argument.Set*
  parent: System.Activities.Argument
  isExternal: false
  name: Set
  nameWithType: Argument.Set
