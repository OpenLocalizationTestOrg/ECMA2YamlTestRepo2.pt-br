### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Ajuda a implementação de <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> interface. Herdeiros do DbDataAdapter implementar um conjunto de funções para fornecer tipagem forte, mas herdam a maioria da funcionalidade necessária para implementar por completo uma **DataAdapter**."
  remarks: "A classe DbDataAdapter herda do <xref:System.Data.Common.DataAdapter>classe e ajuda a uma classe implemente um **DataAdapter** projetados para uso com um banco de dados relacional.</xref:System.Data.Common.DataAdapter>       Um aplicativo não cria uma instância da interface DbDataAdapter diretamente, mas cria uma instância de uma classe que herda <xref:System.Data.IDbDataAdapter>e DbDataAdapter.</xref:System.Data.IDbDataAdapter>       Classes que herdam DbDataAdapter devem implementar os membros herdados e geralmente definem membros adicionais para adicionar funcionalidade específica do provedor. Por exemplo, a classe DbDataAdapter define o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade e a interface DbDataAdapter define oito sobrecargas do <xref:System.Data.IDataAdapter.Fill%2A>método.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> Por sua vez, a <xref:System.Data.OleDb.OleDbDataAdapter>classe herda o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método e também define duas sobrecargas adicionais do <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>que levam a um objeto de conjunto de registros ADO como um parâmetro.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância de um **DataAdapter** classe."
  remarks: "Quando você cria uma instância de <xref:System.Data.Common.DbDataAdapter>, as seguintes propriedades de leitura/gravação são definidas para os seguintes valores iniciais.</xref:System.Data.Common.DbDataAdapter>      | Propriedades | Valor inicial |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       Você pode alterar o valor de qualquer uma dessas propriedades por meio de uma chamada separada para a propriedade.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância de um <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> classe a partir de um objeto existente do mesmo tipo."
  remarks: "Esta sobrecarga do <xref:System.Data.Common.DbDataAdapter>construtor é projetado para uso por um provedor de dados .NET Framework ao implementar um construtor semelhante para uso em uma implementação de clone.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "Um <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> objeto usado para criar o novo <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> para o lote atual."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método lança <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes que herdam de <xref:System.Data.Common.DbDataAdapter>substituir esse método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> para adicionar o lote."
    return:
      type: System.Int32
      description: "O número de comandos em lote antes de adicionar o <xref href=&quot;System.Data.IDbCommand&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não oferece suporte a lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Remove todos os <xref href=&quot;System.Data.IDbCommand&quot;> </xref> objetos do lote."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método lança <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes que herdam de <xref:System.Data.Common.DbDataAdapter>substituir esse método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não oferece suporte a lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> classe."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "O <xref href=&quot;System.Data.DataRow&quot;> </xref> usado para atualizar a fonte de dados."
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> executado durante o <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Se o comando for uma atualização, inserir, excluir ou instrução SELECT."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> classe."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> classe."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "O <xref href=&quot;System.Data.DataRow&quot;> </xref> que atualiza a fonte de dados."
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> para executar durante <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Se o comando for uma atualização, inserir, excluir ou instrução SELECT."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> classe."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "O nome padrão usado pelo <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> objeto para mapeamentos de tabela."
  remarks: "&quot;Table&quot; é o nome padrão usado pelo <xref:System.Data.Common.DataAdapter>objeto para mapeamentos de tabela.</xref:System.Data.Common.DataAdapter>       DefaultSourceTableName é quando um aplicativo adiciona um mapeamento de tabela a ser usada com <xref:System.Data.Common.DbDataAdapter.Fill%2A>, mas não especifica um <xref:System.Data.DataTable>nome.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando para excluir registros do conjunto de dados."
  remarks: "Durante a <xref:System.Data.Common.DbDataAdapter.Update%2A>, se essa propriedade não está definida e informações de chave primária estão presentes no <xref:System.Data.DataSet>, o <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>é gerado automaticamente.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> usado durante a <xref:System.Data.IDataAdapter.Update*>para excluir registros na fonte de dados para linhas excluídas no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Executa o lote atual."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método lança <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes que herdam de <xref:System.Data.Common.DbDataAdapter>substituir esse método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "O valor de retorno do último comando no lote."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Método Fill recupera os dados da fonte de dados usando uma instrução SELECT. O <xref:System.Data.IDbConnection>objeto associado com o comando select deve ser válido, mas ele não precisa ser aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes de preenchimento é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.IDbConnection> Se a conexão está aberta antes de preenchimento é chamado, ele permanecerá aberto.       Se um erro ou exceção é encontrada ao preencher as tabelas de dados, as linhas adicionadas antes da ocorrência do erro permanecem nas tabelas de dados. O restante da operação é anulado.       Se um comando não retorna nenhuma linha, não há tabelas são adicionadas ao <xref:System.Data.DataSet>, e nenhuma exceção é gerada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet>       Quando a consulta especificada retorna vários resultados, o conjunto de resultados de consulta de retorno de cada linha é colocado em uma tabela separada. Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Porque nenhuma tabela foi criada para uma consulta que não retorna linhas, se você processar uma consulta insert seguida por uma consulta select, a tabela criada para a consulta select é chamada de &quot;Tabela&quot; porque ele é a primeira tabela criada. Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       Quando a instrução SELECT é usada para preencher o <xref:System.Data.DataSet>retorna vários resultados, como instruções SQL de lote, se um dos resultados contiver um erro, todos os resultados subsequentes serão ignorados e não são adicionados a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando usar subsequentes preencher chamadas para atualizar o conteúdo do <xref:System.Data.DataSet>, duas condições devem ser atendidas: 1.</xref:System.Data.DataSet>  A instrução SQL deve corresponder àquela usada inicialmente para preencher <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  O **chave** informações de coluna devem estar presentes.       Se houver informações de chave primária, as linhas duplicadas reconciliadas e aparecem apenas uma vez em que o <xref:System.Data.DataTable>que corresponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informações de chave primária podem ser definidas por meio de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade do <xref:System.Data.DataTable>, ou definindo o <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>propriedade `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use o preenchimento com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com registros e, se necessário, esquema."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataSet&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas em um intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponder da fonte de dados usando o <xref href=&quot;System.Data.DataTable&quot;> </xref> nome."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método recupera as linhas da fonte de dados usando a instrução SELECT especificada por um associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> O objeto de conexão associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta. Se a conexão for fechada antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação, em seguida, adiciona as linhas ao destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criando o <xref:System.Data.DataTable>objetos se eles ainda não existirem.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Ao criar <xref:System.Data.DataTable>objetos, o <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação normalmente cria apenas os metadados de nome de coluna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>está definida como `AddWithKey`, restrições e chaves primárias apropriadas também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o <xref:System.Data.Common.DbDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet>       A sobrecarga do <xref:System.Data.Common.DbDataAdapter.Fill%2A>que usa `DataTable` como um parâmetro obtém somente o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Use uma sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A>que usa `DataSet` como um parâmetro para obter vários resultados.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Em tais situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Você pode usar o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são mescladas com as linhas correspondentes que já existem. Se nenhuma chave primária existe, linhas de entrada são acrescentadas ao <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.Fill%2A>e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para dados do .NET Framework provedor recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O nome do <xref href=&quot;System.Data.DataTable&quot;> </xref> a ser usado para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataSet&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponder da fonte de dados usando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomes."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método recupera os dados da fonte de dados usando uma instrução SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O <xref:System.Data.IDbConnection>objeto associado com o comando select deve ser válido, mas ele não precisa ser aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se um comando não retorna nenhuma linha, não há tabelas são adicionadas ao <xref:System.Data.DataSet>, e nenhuma exceção é gerada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele irá gerar nomes para as colunas subsequentes, usando o padrão &quot;nome_da_coluna1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet>       Quando a consulta especificada retorna vários resultados, cada conjunto de resultados é colocado em uma tabela separada. Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Já que nenhuma tabela foi criada para uma consulta que não retorna linhas, se você processar uma consulta insert seguida por uma consulta select, a tabela criada para a consulta select será chamada &quot;Table&quot;, porque ele é a primeira tabela criada. Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Em tais situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se um erro ou exceção é encontrada ao preencher as tabelas de dados, as linhas adicionadas antes da ocorrência do erro permanecem nas tabelas de dados. O restante da operação é anulado.       Quando a instrução SELECT é usada para popular o <xref:System.Data.DataSet>retornar vários resultados, como um lote de instrução SQL, esteja ciente das seguintes opções:-se um dos resultados contiver um erro, todos os resultados subsequentes serão ignorados e não adicionados ao <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Ao usar subsequentes <xref:System.Data.Common.DbDataAdapter.Fill%2A>chamadas para atualizar o conteúdo do <xref:System.Data.DataSet>, duas condições devem ser atendidas: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  A instrução SQL deve corresponder àquela usada inicialmente para preencher <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  O **chave** informações de coluna devem estar presentes. Se houver informações de chave primária, as linhas duplicadas reconciliadas e aparecem apenas uma vez em que o <xref:System.Data.DataTable>que corresponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informações de chave primária podem ser definidas por meio de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade do <xref:System.Data.DataTable>, ou definindo o <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>propriedade `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte[definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com registros e, se necessário, esquema."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a ser usado para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataSet&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "A tabela de origem é inválida."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas em uma <xref href=&quot;System.Data.DataTable&quot;> </xref> para corresponder da fonte de dados usando o especificado <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> e <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método recupera as linhas da fonte de dados usando a instrução SELECT especificada por um associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> O objeto de conexão associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta. Se a conexão for fechada antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele é aberto para recuperar dados e, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação, em seguida, adiciona as linhas para o destino especificado <xref:System.Data.DataTable>objeto o <xref:System.Data.DataSet>, criando o <xref:System.Data.DataTable>objeto se ele ainda não existir.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Ao criar um <xref:System.Data.DataTable>objeto, o <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação normalmente cria apenas os metadados de nome de coluna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>está definida como `AddWithKey`, restrições e chaves primárias apropriadas também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele irá gerar nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet>       A sobrecarga do <xref:System.Data.Common.DbDataAdapter.Fill%2A>que usa `DataTable` como um parâmetro obtém somente o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Use uma sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A>que usa `DataSet` como um parâmetro para obter vários resultados.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Você pode usar o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são mescladas com as linhas correspondentes que já existem. Se nenhuma chave primária existe, linhas de entrada são acrescentadas ao <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Um <xref href=&quot;System.Data.DataTable&quot;> </xref> para preencher com registros e, se necessário, esquema."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT usada para recuperar linhas da fonte de dados."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uma da <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataTable&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas em uma <xref href=&quot;System.Data.DataTable&quot;> </xref> para corresponder da fonte de dados a partir o registro especificado e recuperando até o número máximo especificado de registros."
  remarks: "O <xref:System.Data.Common.DataAdapter.Fill%2A>método recupera as linhas da fonte de dados usando a instrução SELECT especificada por um associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> O objeto de conexão associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta. Se a conexão for fechada antes <xref:System.Data.Common.DataAdapter.Fill%2A>é chamado, ele está sendo usado para recuperar dados e, em seguida, ele é fechado.</xref:System.Data.Common.DataAdapter.Fill%2A> Se a conexão está aberta antes de <xref:System.Data.Common.DataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DataAdapter.Fill%2A>       O <xref:System.Data.Common.DataAdapter.Fill%2A>operação, em seguida, adiciona as linhas ao destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criando o <xref:System.Data.DataTable>objetos se eles ainda não existirem.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Ao criar <xref:System.Data.DataTable>objetos, o <xref:System.Data.Common.DataAdapter.Fill%2A>operação normalmente cria apenas os metadados de nome de coluna.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>está definida como `AddWithKey`, restrições e chaves primárias apropriadas também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).       Se o adaptador de dados encontrar colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;nome_da_coluna1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e assim por diante.</xref:System.Data.DataTable> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>, cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       Quando a instrução SELECT é usada para popular o <xref:System.Data.DataSet>retornar vários resultados, como um instruções SQL de lote, se um dos resultados contiver um erro, todos os resultados subsequentes são ignorados e não adicionados ao <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Você pode usar o <xref:System.Data.Common.DataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são mescladas com as linhas correspondentes que já existem. Se nenhuma chave primária existe, linhas de entrada são acrescentadas ao <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "O número de registro com base em zero para iniciar com."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registros a serem recuperados."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos para preencher da fonte de dados."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataTable&quot;> </xref>. Esse valor não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas em um intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponder da fonte de dados usando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomes."
  remarks: "Um `maxRecords` valor 0 obtém todos os registros encontrados após o registro de início. Se `maxRecords` é maior que o número de linhas restantes, somente as linhas restantes são retornadas, e nenhum erro é emitido.       Se o comando select correspondente é uma instrução retornar vários resultados, <xref:System.Data.Common.DbDataAdapter.Fill%2A>só se aplica `maxRecords` para o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método recupera os dados da fonte de dados usando uma instrução SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O <xref:System.Data.IDbConnection>objeto associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele é aberto para recuperar dados e, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se um comando não retorna nenhuma linha, não há tabelas são adicionadas ao <xref:System.Data.DataSet>, mas nenhuma exceção é gerada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele irá gerar nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet>       Quando a consulta especificada retorna vários resultados, cada conjunto de resultados é colocado em uma tabela separada. Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Porque nenhuma tabela foi criada para uma consulta que não retorna linhas, se você processar uma consulta insert seguida por uma consulta select, a tabela criada para a consulta select é chamada de &quot;Tabela&quot;, porque ele é a primeira tabela criada. Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Em tais situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se um erro ou exceção é encontrada ao preencher as tabelas de dados, as linhas adicionadas antes da ocorrência do erro permanecem nas tabelas de dados. O restante da operação é anulado.       Quando a instrução SELECT é usada para popular o <xref:System.Data.DataSet>retorna vários resultados, tais como instruções SQL de lote, esteja ciente das seguintes opções: - durante o processamento de vários resultados de um lote de instrução SQL, `maxRecords` aplica-se somente para o primeiro resultado.</xref:System.Data.DataSet> O mesmo é verdadeiro para as linhas que contém resultados em capítulos (.NET Framework Data Provider para OLE DB apenas). O resultado de nível superior é limitado pelo `maxRecords`, mas todas as linhas filho serão adicionadas.      -Se um dos resultados contiver um erro, todos os resultados subsequentes são ignorados e não adicionados ao <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       Ao usar subsequentes <xref:System.Data.Common.DbDataAdapter.Fill%2A>chamadas para atualizar o conteúdo do <xref:System.Data.DataSet>, duas condições devem ser atendidas: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  A instrução SQL deve corresponder àquela usada inicialmente para preencher <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  O **chave** informações de coluna devem estar presentes.       Se houver informações de chave primária, quaisquer linhas duplicadas serão reciclado e aparecer apenas uma vez em que o <xref:System.Data.DataTable>que corresponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informações de chave primária podem ser definidas por meio de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade do <xref:System.Data.DataTable>, ou definindo o <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>propriedade `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > O `DataSet` não contém mais do que o número de registros indicado pelo `maxRecords`. No entanto, o conjunto de resultados inteiro gerado pela consulta ainda é retornado do servidor."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com registros e, se necessário, esquema."
    - id: startRecord
      type: System.Int32
      description: "O número de registro com base em zero para iniciar com."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registros a serem recuperados."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a ser usado para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataSet&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida.       - ou - a conexão é inválido."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Não foi possível encontrar a conexão."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> startRecord </code> parâmetro é menor que 0.       - ou - <code> maxRecords </code> parâmetro é menor que 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas em um intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponder da fonte de dados usando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomes."
  remarks: "Um `maxRecords` valor 0 obtém todos os registros encontrados após o registro de início. Se `maxRecords` é maior que o número de linhas restantes, somente as linhas restantes são retornadas e nenhum erro é emitido.       Método Fill recupera os dados da fonte de dados usando uma instrução SELECT. O <xref:System.Data.IDbConnection>objeto associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se um comando não retorna nenhuma linha, não há tabelas são adicionadas ao <xref:System.Data.DataSet>, mas nenhuma exceção é gerada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele irá gerar nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet>       Quando a consulta especificada retorna vários resultados, cada conjunto de resultados é colocado em uma tabela separada. Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Já que nenhuma tabela foi criada para uma consulta que não retorna linhas, se você processar uma consulta insert seguida por uma consulta select, a tabela criada para a consulta select será chamada &quot;Table&quot;, porque ele é a primeira tabela criada. Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       Método Fill oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> Em tais situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se um erro ou exceção é encontrada ao preencher as tabelas de dados, as linhas adicionadas antes da ocorrência do erro permanecem nas tabelas de dados. O restante da operação é anulado.       Quando a instrução SELECT é usada para popular o <xref:System.Data.DataTable>objetos retornar vários resultados, como um lote de instrução SQL, esteja ciente das seguintes opções: - durante o processamento de vários resultados de um lote de instrução SQL, `maxRecords` aplica-se somente para o primeiro resultado.</xref:System.Data.DataTable> O mesmo é verdadeiro para as linhas que contém resultados em capítulos (.NET Framework Data Provider para OLE DB apenas). O resultado de nível superior é limitado pelo `maxRecords`, mas todas as linhas filho serão adicionadas.      -Se um dos resultados contiver um erro, todos os resultados subsequentes são ignorados.      > [!NOTE] > O `DataSet` não contém mais do que o número de registros indicado pelo `maxRecords`. No entanto, todo o conjunto de resultados gerado pela consulta ainda é retornado do servidor."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos para preencher da fonte de dados."
    - id: startRecord
      type: System.Int32
      description: "O número de registro com base em zero para iniciar com."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registros a serem recuperados."
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> executado para preencher o <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uma da <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Int32
      description: "O número de linhas adicionado ao ou atualizado nas tabelas de dados."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida.       - ou - a conexão é inválido."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Não foi possível encontrar a conexão."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> startRecord </code> parâmetro é menor que 0.       - ou - <code> maxRecords </code> parâmetro é menor que 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza linhas em um intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponder da fonte de dados usando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e nomes de tabela, a cadeia de caracteres de comando e o comportamento de comando de origem."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método recupera as linhas da fonte de dados usando a instrução SELECT especificada por um associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> O objeto de conexão associado com a instrução SELECT deve ser válido, mas ele não precisa ser aberta. Se a conexão for fechada antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação, em seguida, adiciona as linhas ao destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criando o <xref:System.Data.DataTable>objetos se eles ainda não existirem.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Ao criar <xref:System.Data.DataTable>objetos, o <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação normalmente cria apenas os metadados de nome de coluna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>está definida como `AddWithKey`, restrições e chaves primárias apropriadas também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o <xref:System.Data.Common.DbDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim por diante). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Em tais situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Você pode usar o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são mescladas com as linhas correspondentes que já existem. Se nenhuma chave primária existe, linhas de entrada são acrescentadas ao <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se o `SelectCommand` retorna os resultados de uma junção externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Você deve definir explicitamente a chave primária para garantir que as linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte[definindo chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.Fill%2A>e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para dados do .NET Framework provedor recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com registros e, se necessário, esquema."
    - id: startRecord
      type: System.Int32
      description: "O número de registro com base em zero para iniciar com."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registros a serem recuperados."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a ser usado para mapeamento de tabela."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT usada para recuperar linhas da fonte de dados."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uma da <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Int32
      description: "O número de linhas com êxito adicionado ou atualizado no <xref href=&quot;System.Data.DataSet&quot;> </xref>. Isso não inclui linhas afetadas pelas instruções que não retornam linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> startRecord </code> parâmetro é menor que 0.       - ou - <code> maxRecords </code> parâmetro é menor que 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define o comportamento do comando usado para preencher o adaptador de dados."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "O <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> do comando usado para preencher o adaptador de dados."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> chamado &quot;Table&quot; especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para corresponder da fonte de dados com base em especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Esse método recupera as informações de esquema da fonte de dados usando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona um <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>propriedades se eles existirem na fonte de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Você deve definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura o <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades de acordo com as seguintes regras: - se uma ou mais colunas de chave primária são retornadas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>elas são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se não há colunas de chave primária são retornadas, mas são colunas exclusivas, as colunas exclusivas são usadas como chave primária se e somente se, todas as colunas exclusivas são não nulas. Se qualquer uma das colunas são nulas, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se colunas de chave primária e de colunas exclusivas são retornadas, colunas de chave primária são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observe que as chaves primárias e restrições exclusivas serão adicionadas para o <xref:System.Data.ConstraintCollection>acordo com as regras precedentes, mas outra restrição de tipos não são adicionados.</xref:System.Data.ConstraintCollection>       Se o cluster de um único índice é definido em uma coluna ou colunas em uma tabela do SQL Server e a restrição de chave primária é definida em um conjunto separado de colunas, em seguida, os nomes das colunas no índice clusterizado serão retornados. Para retornar o nome ou nomes de colunas de chave primária, use uma dica de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar dicas de consulta, consulte [a dica de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Informações de chave primária são usadas durante a <xref:System.Data.Common.DbDataAdapter.Fill%2A>para localizar e substituir quaisquer linhas cujas colunas de chave coincidem.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se isso não é o comportamento desejado, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>sem solicitar informações de esquema.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se o <xref:System.Data.IDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot;, etc.). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       O <xref:System.Data.IDbConnection>objeto associado com o comando select deve ser válido, mas ele não precisa abrir.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele será deixado aberto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Ao usar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para SQL Server acrescenta uma cláusula FOR BROWSE à instrução que está sendo executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O usuário deve estar ciente de que possíveis efeitos colaterais, como a interferência com o uso de instruções SET FMTONLY ON. Consulte os Manuais Online do SQL Server para obter mais informações."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para inserir o esquema."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uma da <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores que especificam como o esquema de inserção."
    return:
      type: System.Data.DataTable[]
      description: "Uma referência a uma coleção de <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos que foram adicionados para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configura o esquema especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> com base em especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "O método FillSchema recupera o esquema da fonte de dados usando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> O objeto de conexão associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>devem ser válidos, mas não precisa estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a conexão é fechada antes FillSchema é chamado, ele é aberto para recuperar dados e fechado. Se a conexão está aberta antes de FillSchema é chamado, ele permanecerá aberto.       Uma operação de FillSchema retorna <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Em seguida, adiciona colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>propriedades se eles existirem na fonte de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Você deve definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema também configura o <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades de acordo com as seguintes regras: - se um <xref:System.Data.DataTable.PrimaryKey%2A>já foi definido para o `DataTable`, ou o `DataTable` contém dados, o `PrimaryKey` propriedade não será definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se uma ou mais colunas de chave primária são retornadas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, elas são usadas como colunas de chave primária para o `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -Se não há colunas de chave primária são retornadas, mas são colunas exclusivas, as colunas exclusivas são usadas como chave primária se e somente se, todas as colunas exclusivas são não nulas. Se qualquer uma das colunas são nulas, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o `PrimaryKey` propriedade não está definida.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se colunas de chave primária e de colunas exclusivas são retornadas, colunas de chave primária são usadas como colunas de chave primária para o `DataTable`.       Observe que as chaves primárias e restrições exclusivas serão adicionadas para o <xref:System.Data.ConstraintCollection>acordo com as regras precedentes, mas outra restrição de tipos não são adicionados.</xref:System.Data.ConstraintCollection> Esse processo pode exigir várias viagens ao servidor.       Se o cluster de um único índice é definido em uma coluna ou colunas em uma tabela do SQL Server e a restrição de chave primária é definida em um conjunto separado de colunas, em seguida, os nomes das colunas no índice clusterizado serão retornados. Para retornar o nome ou nomes de colunas de chave primária, use uma dica de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar dicas de consulta, consulte [a dica de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.Common.DbDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot;, etc.). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       FillSchema não retornar linhas. Use o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método para adicionar linhas a serem <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de FillSchema para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado. Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Ao usar FillSchema, o .NET Framework Data Provider para SQL Server acrescenta uma cláusula FOR BROWSE à instrução que está sendo executada. O usuário deve estar ciente de que possíveis efeitos colaterais, como a interferência com o uso de instruções SET FMTONLY ON. Consulte os Manuais Online do SQL Server para obter mais informações."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> a ser preenchido com o esquema da fonte de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uma da <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    return:
      type: System.Data.DataTable
      description: "Um <xref href=&quot;System.Data.DataTable&quot;> </xref> que contém informações de esquema retornadas da fonte de dados."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para corresponder da fonte de dados com base em especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Esse método recupera as informações de esquema da fonte de dados usando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona um <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>propriedades se eles existirem na fonte de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Você deve definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura o <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades de acordo com as seguintes regras: - se uma ou mais colunas de chave primária são retornadas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>elas são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se não há colunas de chave primária são retornadas, mas são colunas exclusivas, as colunas exclusivas são usadas como chave primária se e somente se, todas as colunas exclusivas são não nulas. Se qualquer uma das colunas são nulas, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se colunas de chave primária e de colunas exclusivas são retornadas, colunas de chave primária são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observe que as chaves primárias e restrições exclusivas serão adicionadas para o <xref:System.Data.ConstraintCollection>acordo com as regras precedentes, mas outra restrição de tipos não são adicionados.</xref:System.Data.ConstraintCollection>       Se o cluster de um único índice é definido em uma coluna ou colunas em uma tabela do SQL Server e a restrição de chave primária é definida em um conjunto separado de colunas, em seguida, os nomes das colunas no índice clusterizado serão retornados. Para retornar o nome ou nomes de colunas de chave primária, use uma dica de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar dicas de consulta, consulte [a dica de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Informações de chave primária são usadas durante a <xref:System.Data.Common.DbDataAdapter.Fill%2A>para localizar e substituir quaisquer linhas cujas colunas de chave coincidem.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se isso não é o comportamento desejado, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>sem solicitar informações de esquema.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se o <xref:System.Data.Common.DbDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot;, etc.). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em tais situações, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```O <xref:System.Data.IDbConnection>objeto associado com o comando select deve ser válido, mas ele não precisa abrir.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele será deixado aberto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Ao usar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para SQL Server acrescenta uma cláusula FOR BROWSE à instrução que está sendo executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O usuário deve estar ciente de que possíveis efeitos colaterais, como a interferência com o uso de instruções SET FMTONLY ON. Consulte os Manuais Online do SQL Server para obter mais informações."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> para inserir o esquema."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uma da <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores que especificam como o esquema de inserção."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a ser usado para mapeamento de tabela."
    return:
      type: System.Data.DataTable[]
      description: "Uma referência a uma coleção de <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos que foram adicionados para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Não foi possível encontrar uma tabela de origem da qual obter o esquema."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configura o esquema especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> com base em especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>, cadeia de caracteres, de comando e <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método retorna o esquema da fonte de dados usando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O objeto de conexão associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>devem ser válidos, mas não precisa estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a conexão for fechada antes <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona um <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>propriedades se eles existirem na fonte de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Você deve definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura o <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades de acordo com as seguintes regras: - se uma ou mais colunas de chave primária são retornadas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>elas são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se não há colunas de chave primária são retornadas, mas são colunas exclusivas, as colunas exclusivas são usadas como chave primária se e somente se, todas as colunas exclusivas são não nulas. Se qualquer uma das colunas são nulas, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se colunas de chave primária e de colunas exclusivas são retornadas, colunas de chave primária são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observe que as chaves primárias e restrições exclusivas serão adicionadas para o <xref:System.Data.ConstraintCollection>acordo com as regras precedentes, mas outra restrição de tipos não são adicionados.</xref:System.Data.ConstraintCollection>       Se o cluster de um único índice é definido em uma coluna ou colunas em uma tabela do SQL Server e a restrição de chave primária é definida em um conjunto separado de colunas, em seguida, os nomes das colunas no índice clusterizado serão retornados. Para retornar o nome ou nomes de colunas de chave primária, use uma dica de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar dicas de consulta, consulte [a dica de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.IDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot;, etc.). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>não retorna nenhuma linha.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Use o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método para adicionar linhas a serem <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Ao usar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para SQL Server acrescenta uma cláusula FOR BROWSE à instrução que está sendo executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O usuário deve estar ciente de que possíveis efeitos colaterais, como a interferência com o uso de instruções SET FMTONLY ON. Consulte os Manuais Online do SQL Server para obter mais informações."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> a ser preenchido com o esquema da fonte de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uma da <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT usada para recuperar linhas da fonte de dados."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uma da <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Data.DataTable
      description: "Um dos <xref href=&quot;System.Data.DataTable&quot;> </xref> retornado do objeto que contém informações de esquema da fonte de dados."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para corresponder da fonte de dados com base em especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método retorna o esquema da fonte de dados usando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O objeto de conexão associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>devem ser válidos, mas não precisa estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a conexão for fechada antes <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele é aberto para recuperar dados e fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Se a conexão está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, ele permanecerá aberto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona um <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>propriedades se eles existirem na fonte de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Você deve definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura o <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades de acordo com as seguintes regras: - se uma ou mais colunas de chave primária são retornadas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>elas são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se não há colunas de chave primária são retornadas, mas são colunas exclusivas, as colunas exclusivas são usadas como chave primária se e somente se, todas as colunas exclusivas são não nulas. Se qualquer uma das colunas são nulas, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se colunas de chave primária e de colunas exclusivas são retornadas, colunas de chave primária são usadas como colunas de chave primária para <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observe que as chaves primárias e restrições exclusivas serão adicionadas para o <xref:System.Data.ConstraintCollection>acordo com as regras precedentes, mas outra restrição de tipos não são adicionados.</xref:System.Data.ConstraintCollection>       Se o cluster de um único índice é definido em uma coluna ou colunas em uma tabela do SQL Server e a restrição de chave primária é definida em um conjunto separado de colunas, em seguida, os nomes das colunas no índice clusterizado serão retornados. Para retornar o nome ou nomes de colunas de chave primária, use uma dica de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar dicas de consulta, consulte [a dica de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.IDataAdapter>encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, ele gera nomes para as colunas subsequentes, usando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, e assim por diante.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, eles são colocados no <xref:System.Data.DataSet>acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim por diante.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado em uma tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são nomeados adicionando valores inteiros para o nome da tabela especificada (por exemplo, &quot;Table&quot;, &quot;Table1&quot;, &quot;Tabela2&quot;, etc.). Aplicativos que usam nomes de coluna e tabela devem garantir que está em conflito com esses padrões de nomenclatura não ocorra.       O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em tais situações, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e cria uma nova tabela, não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>não retorna nenhuma linha.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Use o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método para adicionar linhas a serem <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Ao tratar instruções SQL em lotes que retornem vários resultados, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o provedor de dados .NET Framework para OLE DB recupera informações de esquema para apenas o primeiro resultado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para recuperar informações de esquema para vários resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Ao usar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para SQL Server acrescenta uma cláusula FOR BROWSE à instrução que está sendo executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O usuário deve estar ciente de que possíveis efeitos colaterais, como a interferência com o uso de instruções SET FMTONLY ON. Consulte os Manuais Online do SQL Server para obter mais informações."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> a ser preenchido com o esquema da fonte de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uma da <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT usada para recuperar linhas da fonte de dados."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a ser usado para mapeamento de tabela."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uma da <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Data.DataTable[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos que contêm informações de esquema retornado da fonte de dados."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Retorna um <xref href=&quot;System.Data.IDataParameter&quot;> </xref> de um dos comandos no lote atual."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método lança <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes que herdam de <xref:System.Data.Common.DbDataAdapter>substituir esse método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "O índice do comando para recuperar o parâmetro do."
    - id: parameterIndex
      type: System.Int32
      description: "O índice do parâmetro no comando."
    return:
      type: System.Data.IDataParameter
      description: "O <xref href=&quot;System.Data.IDataParameter&quot;> </xref> especificado."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não oferece suporte a lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Retorna informações sobre uma tentativa de atualização individual dentro de uma atualização em lotes maior."
  remarks: "Provedores de dados que oferecem suporte a lógica de atualização em lotes devem substituir uma série de métodos virtuais sobre a <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> `GetBatchedRecordsAffected`representa um desses métodos virtuais. O `DbDataAdapter` classe depende `GetBatchedRecordsAffected` para determinar o êxito ou falha de tentativas de atualização individual dentro de um lote, portanto, ele pode marcar cada correspondente <xref:System.Data.DataRow>adequadamente.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "O ordinal de coluna com base em zero do comando individual dentro do lote."
    - id: recordsAffected
      type: System.Int32
      description: "O número de linhas afetadas no repositório de dados, o comando especificado dentro do lote."
    - id: error
      type: System.Exception
      description: "Um <xref:System.Exception>gerada durante a execução do comando especificado.</xref:System.Exception> Retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) se nenhuma exceção for lançada."
    return:
      type: System.Boolean
      description: "Informações sobre uma tentativa de atualização individual dentro de uma atualização em lotes maior."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém os parâmetros definidos pelo usuário ao executar uma instrução SQL SELECT."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Uma matriz de <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objetos que contém os parâmetros definidos pelo usuário."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa o envio em lote para o <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método lança <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes que herdam de <xref:System.Data.Common.DbDataAdapter>substituir esse método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não oferece suporte a lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando usado para inserir novos registros na fonte de dados."
  remarks: "Durante a <xref:System.Data.Common.DbDataAdapter.Update%2A>, se essa propriedade não está definida e informações de chave primária estão presentes no <xref:System.Data.DataSet>, o <xref:System.Data.IDbDataAdapter.InsertCommand%2A>será gerado automaticamente.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> usado durante a <xref:System.Data.IDataAdapter.Update*>para inserir registros na fonte de dados para novas linhas no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gera o <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> eventos de um provedor de dados .NET Framework."
  remarks: 'Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter uma visão geral, consulte [NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Um <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gera o <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> eventos de um provedor de dados .NET Framework."
  remarks: 'Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter uma visão geral, consulte [NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Um <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando usado para selecionar registros na fonte de dados."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> que é usado durante a <xref:System.Data.IDataAdapter.Update*>para selecionar registros na fonte de dados para o posicionamento no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução SQL para excluir registros do conjunto de dados."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida em um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> usado durante a <xref:System.Data.Common.DbDataAdapter.Update*>para excluir registros na fonte de dados para linhas excluídas no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução SQL usada para inserir novos registros na fonte de dados."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida em um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> usado durante a <xref:System.Data.Common.DbDataAdapter.Update*>para inserir registros na fonte de dados para novas linhas no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução SQL usada para selecionar registros na fonte de dados."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida em um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> que é usado durante a <xref:System.Data.Common.DbDataAdapter.Update*>para selecionar registros na fonte de dados para o posicionamento no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução SQL usada para atualizar registros na fonte de dados."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida em um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> usado durante a <xref:System.Data.Common.DbDataAdapter.Update*>para atualizar registros na fonte de dados para linhas modificadas no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Cria um novo objeto que é uma cópia da instância atual."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida em um <xref:System.ICloneable>interface.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Um novo objeto que é uma cópia desta instância."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Termina o processamento em lotes para o <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método lança <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes que herdam de <xref:System.Data.Common.DbDataAdapter>substituir esse método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não oferece suporte a lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores no banco de dados executando as instruções INSERT, UPDATE ou DELETE respectivas para cada inseridas, atualizadas ou excluídas linhas na matriz especificada no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Quando um aplicativo chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iterativamente para cada linha, com base na ordem de índices configurados em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>pode executar uma instrução DELETE, seguida por uma instrução INSERT e, em seguida, outra instrução de exclusão, devido a ordenação de linhas em <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Observe que essas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Um aplicativo pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que você deve controlar a sequência de tipos de instrução (por exemplo, inserções antes de atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [Atualizar fontes de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não forem especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, você pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente instruções SQL para atualizações de tabela única se você definir o `SelectCommand` propriedade de um provedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, qualquer instrução SQL adicional que você não defina é geradas pelo **CommandBuilder**. Essa lógica de geração exige informações de coluna de chave esteja presente em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações, consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método recupera linhas da tabela listada no mapeamento primeiro antes de executar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha usando o valor de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais retornadas são ignoradas.       Depois que os dados sejam carregados para o <xref:System.Data.DataSet>, o <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado, permitindo que o usuário inspecionar o reconciliado <xref:System.Data.DataSet>retornados pelo comando de parâmetros de saída de linha e qualquer.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois que uma linha é atualizado com êxito, as alterações a essa linha são aceitas.       Ao usar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores de <xref:System.Data.DataRow>são movidos para os valores de parâmetro.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  O comando é executado.      4.  Se o comando é definido como `FirstReturnedRecord`, a primeira retornou o resultado é colocado em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se não houver parâmetros de saída, eles são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado que <xref:System.Data.Common.DbDataAdapter>geralmente tem uma coleção de parâmetros associada a.</xref:System.Data.Common.DbDataAdapter> Parâmetros são mapeados para a linha atual por meio de `SourceColumn` e `SourceVersion` propriedades de um provedor de dados do .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter valores de parâmetro para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se ao nome da coluna mapeada antes de qualquer mapeamento de tabela tiverem sido aplicado. Se `SourceColumn` refere-se a uma coluna que não existe, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação realizada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Use os nomes de coluna de origem e os nomes de tabela o <xref:System.Data.DataSet>se nenhum mapeamento estiver presente. |   | `MissingMappingAction.Ignore`| Um <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definidos, um mapeamento ausente para um parâmetro de entrada é geralmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é usada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se ela se refere a uma coluna que não existe.       O `SourceVersion` propriedade de um provedor de dados do .NET Framework `Parameter` classe determina se deve usar a versão Original, atual ou proposta do valor da coluna. Geralmente, esse recurso é usado para incluir valores originais na cláusula WHERE de uma instrução UPDATE para verificar se há violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, uma exceção será lançada e a execução da atualização será interrompida. Para continuar a operação de atualização sem gerar exceções quando um erro for encontrado, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Você também pode responder a erros em uma base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção dentro de `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos usados para atualizar a fonte de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Não <xref href=&quot;System.Data.DataRow&quot;> </xref> existe para atualizar.       - ou - não <xref href=&quot;System.Data.DataTable&quot;> </xref> existe para atualizar.       - ou - não <xref href=&quot;System.Data.DataSet&quot;> </xref> existente para usar como uma fonte."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou em zero registros afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores no banco de dados executando as instruções INSERT, UPDATE ou DELETE respectivas para cada inseridas, atualizadas ou excluídas de linha especificado na <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Quando um aplicativo chama o método de atualização, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iterativamente para cada linha, com base na ordem de índices configurados em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> Por exemplo, a atualização pode executar uma instrução DELETE, seguida por uma instrução INSERT e, em seguida, outra instrução de exclusão, devido a ordenação de linhas em <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Observe que essas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Um aplicativo pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que você deve controlar a sequência de tipos de instrução (por exemplo, inserções antes de atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [Atualizar fontes de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não forem especificados, o método de atualização gera uma exceção. No entanto, você pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente instruções SQL para atualizações de tabela única se você definir o `SelectCommand` propriedade de um provedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, qualquer instrução SQL adicional que você não defina é geradas pelo **CommandBuilder**. Essa lógica de geração exige informações de coluna de chave esteja presente em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações, consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O método de atualização recupera linhas da tabela listada no mapeamento primeiro antes de executar uma atualização. A atualização, em seguida, atualiza a linha usando o valor de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> As linhas adicionais retornadas são ignoradas.       Depois que os dados sejam carregados para o <xref:System.Data.DataSet>, o <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado, permitindo que o usuário inspecionar o reconciliado <xref:System.Data.DataSet>retornados pelo comando de parâmetros de saída de linha e qualquer.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois que uma linha é atualizado com êxito, as alterações a essa linha são aceitas.       Ao usar a atualização, a ordem de execução é o seguinte: 1.  Os valores de <xref:System.Data.DataRow>são movidos para os valores de parâmetro.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  O comando é executado.      4.  Se o comando é definido como `FirstReturnedRecord`, retornado do primeiro resultado é colocado em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se não houver parâmetros de saída, eles são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado que <xref:System.Data.Common.DbDataAdapter>geralmente tem uma coleção de parâmetros associada a.</xref:System.Data.Common.DbDataAdapter> Parâmetros são mapeados para a linha atual por meio de `SourceColumn` e `SourceVersion` propriedades de um provedor de dados do .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter valores de parâmetro para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se ao nome da coluna mapeada antes de qualquer mapeamento de tabela tiverem sido aplicado. Se `SourceColumn` refere-se a uma coluna que não existe, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação realizada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Use os nomes de coluna de origem e os nomes de tabela o <xref:System.Data.DataSet>se nenhum mapeamento estiver presente. |   | `MissingMappingAction.Ignore`| Um <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definidos, um mapeamento ausente para um parâmetro de entrada é geralmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é usada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se ela se refere a uma coluna que não existe.       O `SourceVersion` propriedade de um provedor de dados do .NET Framework `Parameter` classe determina se deve usar a versão Original, atual ou proposta do valor da coluna. Geralmente, esse recurso é usado para incluir valores originais na cláusula WHERE de uma instrução UPDATE para verificar se há violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, uma exceção será lançada e a execução da atualização será interrompida. Para continuar a operação de atualização sem gerar exceções quando um erro for encontrado, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar Update.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Você também pode responder a erros em uma base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção dentro de `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> usado para atualizar a fonte de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou em zero registros afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores no banco de dados executando as instruções INSERT, UPDATE ou DELETE respectivas para cada inseridas, atualizadas ou excluídas de linha especificado na <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Quando um aplicativo chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iterativamente para cada linha, com base na ordem de índices configurados em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>pode executar uma instrução DELETE, seguida por uma instrução INSERT e, em seguida, outra instrução de exclusão, devido a ordenação de linhas em <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Observe que essas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Um aplicativo pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que você deve controlar a sequência de tipos de instrução (por exemplo, inserções antes de atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [Atualizar fontes de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não forem especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, você pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente instruções SQL para atualizações de tabela única se você definir o `SelectCommand` propriedade de um provedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, qualquer instrução SQL adicional que você não defina é geradas pelo **CommandBuilder**. Essa lógica de geração exige informações de coluna de chave esteja presente em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações, consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método recupera linhas da tabela listada no mapeamento primeiro antes de executar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha usando o valor de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais retornadas são ignoradas.       Depois que os dados sejam carregados para o <xref:System.Data.DataSet>, o <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado, permitindo que o usuário inspecionar o reconciliado <xref:System.Data.DataSet>retornados pelo comando de parâmetros de saída de linha e qualquer.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois que uma linha é atualizado com êxito, as alterações a essa linha são aceitas.       Ao usar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores de <xref:System.Data.DataRow>são movidos para os valores de parâmetro.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  O comando é executado.      4.  Se o comando é definido como `FirstReturnedRecord`, retornado do primeiro resultado é colocado em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se não houver parâmetros de saída, eles são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado que <xref:System.Data.Common.DbDataAdapter>geralmente tem uma coleção de parâmetros associada a.</xref:System.Data.Common.DbDataAdapter> Parâmetros são mapeados para a linha atual por meio de `SourceColumn` e `SourceVersion` propriedades de um provedor de dados do .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter valores de parâmetro para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se ao nome da coluna mapeada antes de qualquer mapeamento de tabela tiverem sido aplicado. Se `SourceColumn` refere-se a uma coluna que não existe, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação realizada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Use os nomes de coluna de origem e os nomes de tabela o <xref:System.Data.DataSet>se nenhum mapeamento estiver presente. |   | `MissingMappingAction.Ignore`| Um <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definidos, um mapeamento ausente para um parâmetro de entrada é geralmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é usada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se ela se refere a uma coluna que não existe.       O `SourceVersion` propriedade de um provedor de dados do .NET Framework `Parameter` classe determina se deve usar a versão Original, atual ou proposta do valor da coluna. Geralmente, esse recurso é usado para incluir valores originais na cláusula WHERE de uma instrução UPDATE para verificar se há violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, uma exceção será lançada e a execução da atualização será interrompida. Para continuar a operação de atualização sem gerar exceções quando um erro for encontrado, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Você também pode responder a erros em uma base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção dentro de `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> usado para atualizar a fonte de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Não <xref href=&quot;System.Data.DataRow&quot;> </xref> existe para atualizar.       - ou - não <xref href=&quot;System.Data.DataTable&quot;> </xref> existe para atualizar.       - ou - não <xref href=&quot;System.Data.DataSet&quot;> </xref> existente para usar como uma fonte."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou em zero registros afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores no banco de dados executando as instruções INSERT, UPDATE ou DELETE respectivas para cada inseridas, atualizadas ou excluídas linhas na matriz especificada de <xref href=&quot;System.Data.DataSet&quot;> </xref> objetos."
  remarks: "Quando um aplicativo chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iterativamente para cada linha, com base na ordem de índices configurados em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>pode executar uma instrução DELETE, seguida por uma instrução INSERT e, em seguida, outra instrução de exclusão, devido a ordenação de linhas em <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Observe que essas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Um aplicativo pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que você deve controlar a sequência de tipos de instrução (por exemplo, inserções antes de atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [Atualizar fontes de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não forem especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, você pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente instruções SQL para atualizações de tabela única se você definir o `SelectCommand` propriedade de um provedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, qualquer instrução SQL adicional que você não defina é geradas pelo **CommandBuilder**. Essa lógica de geração exige informações de coluna de chave esteja presente em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações, consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método recupera linhas da tabela listada no mapeamento primeiro antes de executar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha usando o valor de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais retornadas são ignoradas.       Depois que os dados sejam carregados para o <xref:System.Data.DataSet>, o <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado, permitindo que o usuário inspecionar o reconciliado <xref:System.Data.DataSet>retornados pelo comando de parâmetros de saída de linha e qualquer.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois que uma linha é atualizado com êxito, as alterações a essa linha são aceitas.       Ao usar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores de <xref:System.Data.DataRow>são movidos para os valores de parâmetro.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  O comando é executado.      4.  Se o comando é definido como `FirstReturnedRecord`, retornado do primeiro resultado é colocado em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se não houver parâmetros de saída, eles são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado que <xref:System.Data.Common.DbDataAdapter>geralmente tem uma coleção de parâmetros associada a.</xref:System.Data.Common.DbDataAdapter> Parâmetros são mapeados para a linha atual por meio de `SourceColumn` e `SourceVersion` propriedades de um provedor de dados do .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter valores de parâmetro para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se ao nome da coluna mapeada antes de qualquer mapeamento de tabela tiverem sido aplicado. Se `SourceColumn` refere-se a uma coluna que não existe, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação realizada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Use os nomes de coluna de origem e os nomes de tabela o <xref:System.Data.DataSet>se nenhum mapeamento estiver presente. |   | `MissingMappingAction.Ignore`| Um <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definidos, um mapeamento ausente para um parâmetro de entrada é geralmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é usada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se ela se refere a uma coluna que não existe.       O `SourceVersion` propriedade de um provedor de dados do .NET Framework `Parameter` classe determina se deve usar a versão Original, atual ou proposta do valor da coluna. Geralmente, esse recurso é usado para incluir valores originais na cláusula WHERE de uma instrução UPDATE para verificar se há violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, uma exceção será lançada e a execução da atualização será interrompida. Para continuar a operação de atualização sem gerar exceções quando um erro for encontrado, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Você também pode responder a erros em uma base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção dentro de `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos usados para atualizar a fonte de dados."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "O <xref:System.Data.IDataAdapter.TableMappings*>coleção a ser usada.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Não <xref href=&quot;System.Data.DataRow&quot;> </xref> existe para atualizar.       - ou - não <xref href=&quot;System.Data.DataTable&quot;> </xref> existe para atualizar.       - ou - não <xref href=&quot;System.Data.DataSet&quot;> </xref> existente para usar como uma fonte."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou em zero registros afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores no banco de dados executando as instruções INSERT, UPDATE ou DELETE respectivas para cada inseridas, atualizadas ou excluídas de linha de <xref href=&quot;System.Data.DataSet&quot;> </xref> com especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> nome."
  remarks: "Quando um aplicativo chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iterativamente para cada linha, com base na ordem de índices configurados em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>pode executar uma instrução DELETE, seguida por uma instrução INSERT e, em seguida, outra instrução de exclusão, devido a ordenação de linhas em <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Observe que essas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Um aplicativo pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que você deve controlar a sequência de tipos de instrução (por exemplo, inserir antes da atualização).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [Atualizar fontes de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não forem especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, você pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente instruções SQL para atualizações de tabela única se você definir o `SelectCommand` propriedade de um provedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, qualquer instrução SQL adicional que você não defina é geradas pelo **CommandBuilder**. Essa lógica de geração exige informações de coluna de chave esteja presente em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações, consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método oferece suporte a cenários onde o <xref:System.Data.DataSet>contém várias <xref:System.Data.DataTable>objetos cujos nomes diferenciam somente maiusculas e minúsculas.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Quando várias tabelas com o mesmo nome, mas as maiusculas/minúsculas diferentes, existem em um `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>executa uma comparação diferencia maiusculas de minúsculas para localizar a tabela correspondente e gera uma exceção não se houver nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Update%2A> O código c# a seguir ilustra esse comportamento.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```Se <xref:System.Data.Common.DbDataAdapter.Update%2A>é chamado e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome difere somente no caso, que <xref:System.Data.DataTable>é atualizada.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Nesse cenário, a comparação diferencia maiusculas de minúsculas. O código c# a seguir ilustra esse comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```O <xref:System.Data.Common.DbDataAdapter.Update%2A>método recupera linhas da tabela listada no mapeamento primeiro antes de executar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha usando o valor de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais retornadas são ignoradas.       Depois que os dados sejam carregados para o <xref:System.Data.DataSet>, o <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado, permitindo que o usuário inspecionar o reconciliado <xref:System.Data.DataSet>retornados pelo comando de parâmetros de saída de linha e qualquer.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois que uma linha é atualizado com êxito, as alterações a essa linha são aceitas.       Ao usar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores de <xref:System.Data.DataRow>são movidos para os valores de parâmetro.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  O comando é executado.      4.  Se o comando é definido como `FirstReturnedRecord`, retornado do primeiro resultado é colocado em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se não houver parâmetros de saída, eles são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado que <xref:System.Data.Common.DbDataAdapter>geralmente tem uma coleção de parâmetros associada a.</xref:System.Data.Common.DbDataAdapter> Parâmetros são mapeados para a linha atual por meio de `SourceColumn` e `SourceVersion` propriedades de um provedor de dados do .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter valores de parâmetro para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se ao nome da coluna mapeada antes de qualquer mapeamento de tabela tiverem sido aplicado. Se `SourceColumn` refere-se a uma coluna que não existe, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação realizada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Use os nomes de coluna de origem e os nomes de tabela o <xref:System.Data.DataSet>se nenhum mapeamento estiver presente. |   | `MissingMappingAction.Ignore`| Um <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definidos, um mapeamento ausente para um parâmetro de entrada é geralmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é usada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se ela se refere a uma coluna que não existe.       O `SourceVersion` propriedade de um provedor de dados do .NET Framework `Parameter` classe determina se deve usar a versão Original, atual ou proposta do valor da coluna. Geralmente, esse recurso é usado para incluir valores originais na cláusula WHERE de uma instrução UPDATE para verificar se há violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, uma exceção será lançada e a execução da atualização será interrompida. Para continuar a operação de atualização sem gerar exceções quando um erro for encontrado, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Você também pode responder a erros em uma base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção dentro de `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> a ser usado para atualizar a fonte de dados."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a ser usado para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou em zero registros afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um valor que habilita ou desabilita o suporte ao processamento de lote e especifica o número de comandos que podem ser executadas em um lote."
  remarks: "Use a propriedade de UpdateBatchSize para atualizar uma fonte de dados com as alterações de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Se o provedor de dados oferece suporte a processamento em lotes, isso pode aumentar o desempenho do aplicativo, reduzindo o número de ida e volta ao servidor. No ADO.NET 2.0, essa propriedade é suportada por provedores de dados .NET para SQL Server (SqlClient) e Oracle (OracleClient).       Executar um lote muito grande pode prejudicar o desempenho. Portanto, você deve testar a configuração de tamanho de lote ideal antes de implementar seu aplicativo.       Um <xref:System.ArgumentOutOfRangeException>será lançada se o valor é definido como um número menor que zero.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "O número de linhas a serem processadas por lote.       <table><thead><tr><th> O valor é       </th><th> Efeito       </th></tr></thead><tbody><tr><td> 0       </td><td> Não há nenhum limite no tamanho do lote.       </td></tr><tr><td> 1       </td><td> Desabilita a atualização em lotes.       </td></tr><tr><td> &gt; 1       </td><td> As alterações são enviadas usando lotes de operações de UpdateBatchSize por vez.       </td></tr></tbody></table>       Ao definir isso como um valor diferente de 1, todos os comandos associados a <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> devem ter seus <> </> *> propriedade definida como * *nenhum* * ou * *OutputParameters**. Caso contrário, uma exceção será lançada."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando usado para atualizar registros na fonte de dados."
  remarks: "Durante a <xref:System.Data.Common.DbDataAdapter.Update%2A>, se essa propriedade não está definida e informações de chave primária estão presentes no <xref:System.Data.DataSet>, o <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>será gerado automaticamente.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> usado durante a <xref:System.Data.IDataAdapter.Update*>para atualizar registros na fonte de dados para linhas modificadas no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
