### YamlMime:ManagedReference
items:
- uid: System.Windows.RoutedEventHandler
  id: RoutedEventHandler
  langs:
  - csharp
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
  type: Delegate
  summary: "Representa o método que tratará os eventos roteados várias que não têm dados de evento específico além de dados que é comuns para todos os eventos roteados."
  remarks: "O delegado RoutedEventHandler é usado para qualquer evento roteado que reportam informações específicas de evento nos dados do evento. Há muitos tais eventos roteados; Destaque <xref:System.Windows.Controls.Primitives.ButtonBase.Click>e</xref:System.Windows.Controls.Primitives.ButtonBase.Click> exemplos <xref:System.Windows.FrameworkElement.Loaded>.</xref:System.Windows.FrameworkElement.Loaded>       A diferença mais importante entre escrevendo um manipulador para um evento roteado em vez de um geral [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] evento é que o `sender` do evento (o elemento onde o manipulador é anexado e invocado) não pode ser considerada necessariamente a origem do evento. A fonte é relatada como uma propriedade nos dados do evento (<xref:System.Windows.RoutedEventArgs.Source%2A>).</xref:System.Windows.RoutedEventArgs.Source%2A> Uma diferença entre `sender`e <xref:System.Windows.RoutedEventArgs.Source%2A>é o resultado do evento que está sendo roteado para diferentes elementos, durante a passagem do evento roteado por meio de uma árvore de elementos.</xref:System.Windows.RoutedEventArgs.Source%2A>       Você pode usar o `sender` ou <xref:System.Windows.RoutedEventArgs.Source%2A>para um objeto de referência se você não estiver interessado no comportamento de roteamento de um evento roteado direto ou bolha e você pretende controlar os eventos roteados nos elementos em que eles são gerados pela primeira vez.</xref:System.Windows.RoutedEventArgs.Source%2A> Neste caso, `sender` e <xref:System.Windows.RoutedEventArgs.Source%2A>são o mesmo objeto.</xref:System.Windows.RoutedEventArgs.Source%2A>       Se você pretende tirar proveito dos recursos inerentes de eventos roteados e gravar seus manipuladores adequadamente, as duas propriedades mais importantes dos dados do evento que você trabalhará com ao escrever manipuladores de eventos são <xref:System.Windows.RoutedEventArgs.Source%2A>e <xref:System.Windows.RoutedEventArgs.Handled%2A>.</xref:System.Windows.RoutedEventArgs.Handled%2A> </xref:System.Windows.RoutedEventArgs.Source%2A>       Para determinadas combinações de eventos de entrada e [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] classes de controle, o elemento que gera o evento não é o primeiro elemento que tem a oportunidade de lidar com ele. Se o evento de entrada tem uma versão de visualização do evento, em seguida, a raiz da árvore de elemento tem a primeira oportunidade, pode definir <xref:System.Windows.RoutedEventArgs.Handled%2A>para `true` nos dados de evento compartilhado e pode influenciar como o evento de entrada é reportado para elementos restantes no seu roteiro de evento.</xref:System.Windows.RoutedEventArgs.Handled%2A> A visualização do comportamento de tratamento pode dar a aparência que um determinado evento roteado não é gerado como esperado. Para obter mais informações, consulte [eventos](~/add/includes/ajax-current-ext-md.md) e [visão geral de entrada](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
