### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlMember
  id: XamlMember
  children:
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.DeclaringType
  - System.Xaml.XamlMember.DeferringLoader
  - System.Xaml.XamlMember.DependsOn
  - System.Xaml.XamlMember.Equals(System.Object)
  - System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  - System.Xaml.XamlMember.GetHashCode
  - System.Xaml.XamlMember.GetXamlNamespaces
  - System.Xaml.XamlMember.Invoker
  - System.Xaml.XamlMember.IsAmbient
  - System.Xaml.XamlMember.IsAttachable
  - System.Xaml.XamlMember.IsDirective
  - System.Xaml.XamlMember.IsEvent
  - System.Xaml.XamlMember.IsNameValid
  - System.Xaml.XamlMember.IsReadOnly
  - System.Xaml.XamlMember.IsReadPublic
  - System.Xaml.XamlMember.IsUnknown
  - System.Xaml.XamlMember.IsWriteOnly
  - System.Xaml.XamlMember.IsWritePublic
  - System.Xaml.XamlMember.LookupCustomAttributeProvider
  - System.Xaml.XamlMember.LookupDeferringLoader
  - System.Xaml.XamlMember.LookupDependsOn
  - System.Xaml.XamlMember.LookupInvoker
  - System.Xaml.XamlMember.LookupIsAmbient
  - System.Xaml.XamlMember.LookupIsEvent
  - System.Xaml.XamlMember.LookupIsReadOnly
  - System.Xaml.XamlMember.LookupIsReadPublic
  - System.Xaml.XamlMember.LookupIsUnknown
  - System.Xaml.XamlMember.LookupIsWriteOnly
  - System.Xaml.XamlMember.LookupIsWritePublic
  - System.Xaml.XamlMember.LookupTargetType
  - System.Xaml.XamlMember.LookupType
  - System.Xaml.XamlMember.LookupTypeConverter
  - System.Xaml.XamlMember.LookupUnderlyingGetter
  - System.Xaml.XamlMember.LookupUnderlyingMember
  - System.Xaml.XamlMember.LookupUnderlyingSetter
  - System.Xaml.XamlMember.LookupValueSerializer
  - System.Xaml.XamlMember.Name
  - System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.PreferredXamlNamespace
  - System.Xaml.XamlMember.SerializationVisibility
  - System.Xaml.XamlMember.TargetType
  - System.Xaml.XamlMember.ToString
  - System.Xaml.XamlMember.Type
  - System.Xaml.XamlMember.TypeConverter
  - System.Xaml.XamlMember.UnderlyingMember
  - System.Xaml.XamlMember.ValueSerializer
  langs:
  - csharp
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
  type: Class
  summary: "Fornece o identificador do sistema de tipo XAML para membros de tipos XAML. O identificador é usado por leitores XAML e autores de XAML durante o processamento de nós de membro (quando o leitor XAML está posicionado em uma <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>) e também para lógica geral do sistema de tipo XAML."
  remarks: "XamlMember pode usar as metodologias de três para retornar informações sobre um membro XAML: padrão reflexão comum de tempo de execução (CLR) do idioma; uma técnica de reflexão somente para referência interna ao chamar esse bit de otimização do uso de APIs sinalizadores; ou chamar virtual substituições do `Lookup*` API que é fornecido por subclasses de XamlMember possíveis. Para a maioria dos usos de APIs de serviços XAML do .NET Framework e a API do XamlMember, use o contexto do esquema XAML padrão. O contexto do esquema padrão XAML para serviços XAML do .NET Framework usa backup para o sistema de tipo CLR. Isso permite que os leitores XAML e gravadores XAML trabalhar com qualquer tipo ou membro que é definido em ou não disponível para, o CLR e suas técnicas de reflexão.      ## APIs de pesquisa * e XamlMember de Classes derivadas do XamlMember define vários membros virtuais que classes derivadas podem substituir. Esses membros com nomes que iniciam sempre com a cadeia de caracteres `Lookup`. O restante da API de referências, em seguida, o propriedade name que influencia o método virtual. Por exemplo, uma classe derivada de XamlMember pode substituir <xref:System.Xaml.XamlMember.LookupTargetType%2A>para influenciar a que a propriedade base <xref:System.Xaml.XamlMember.TargetType%2A>retorna na classe derivada.</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A> Você pode prever valores de retorno para essas propriedades no XamlMember ou existentes classes derivadas lendo a documentação relevante `Lookup*` métodos.       A finalidade de `Lookup*` métodos é fornecer uma técnica de extensão de sistema de tipo XAML que incorpora a classe base XamlMember. Derivando de XamlMember e substituindo o `Lookup` membros virtuais, você pode definir o conceito de um membro XAML para um esquema XAML em um sistema de tipo XAML sem ser vinculado às especificações de um sistema de tipos de backup ou uma tecnologia. Você pode também usar um contexto de esquema XAML fornecido sob esse esquema e ainda retornará os resultados desejados.       Por exemplo, considere a propriedade XamlMember <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> Essa propriedade informa os chamadores que operações como usando um <xref:System.Xaml.XamlWriter>para serialização pode gravar um valor para esse membro em um objeto de destino.</xref:System.Xaml.XamlWriter> Na implementação do padrão, a determinação se o membro é gravável é feita usando técnicas de reflexão em relação a CLR de apoio <xref:System.Type>e seus membros (o <xref:System.Reflection.MemberInfo>).</xref:System.Reflection.MemberInfo> </xref:System.Type> Portanto, por padrão, o sistema de tipo XAML depende do sistema de tipo CLR. No entanto, você pode remover essa dependência para o sistema de tipo XAML relatórios de <xref:System.Xaml.XamlMember.IsWritePublic%2A>, substituindo a API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> </xref:System.Xaml.XamlMember.IsWritePublic%2A> Dentro de sua substituição, você pode usar outras decisões, como metadados específicos para sua tecnologia, de uma tabela de pesquisa principal que é otimizada para um vocabulário XAML fixado ou uma variedade de outras estratégias para determinar se um membro XAML é gravável no seu vocabulário XAML.      ## Construindo XamlMember sem XAML esquema contexto mais construtores de XamlMember exigem um <xref:System.Xaml.XamlSchemaContext>como parte da sua inicialização.</xref:System.Xaml.XamlSchemaContext> O <xref:System.Xaml.XamlSchemaContext>também é necessária para muitos interno <xref:System.Xaml.XamlSchemaContext>operações, como obter as informações que está sendo encaminhadas do tipo de backup.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlSchemaContext> Quando você estiver trabalhando com a API do XamlMember, você normalmente tem um <xref:System.Xaml.XamlSchemaContext>disponível em uma construção ao redor como <xref:System.Xaml.XamlWriter>.</xref:System.Xaml.XamlWriter> </xref:System.Xaml.XamlSchemaContext> Nesse caso, você pode passar o <xref:System.Xaml.XamlSchemaContext>referência por meio de todas as chamadas de sistema de tipo XAML que exigem um contexto de esquema XAML.</xref:System.Xaml.XamlSchemaContext>       Um construtor específico <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, não requer um <xref:System.Xaml.XamlSchemaContext>.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> No entanto, um XamlMember que é construído com o <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>assinatura retorna `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, esse membro não pode ser gravado em um gráfico de objeto.</xref:System.Xaml.XamlObjectWriter> Com a implementação de serviços XAML do .NET Framework, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>chamar lança um <xref:System.Xaml.XamlObjectWriterException>quando relata o relevante XamlMember `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Você não deve criar um XamlMember que tem um valor de `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>, a menos que sua implementação pode manipular as exceções de <xref:System.Xaml.XamlObjectWriter>, ou você tiver outras maneiras de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> Por exemplo, um ou mais dos itens a seguir podem ser verdadeiro para sua implementação:-contexto do esquema XAML o está disponível mais tarde.      -Você usar um padrão de chamador do membro.      -Você substituir deliberadamente <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>em um gravador XAML personalizado.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XamlMember : IEquatable<System.Xaml.XamlMember>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlMember>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe usando o sistema de tipos CLR <xref:System.Reflection.EventInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.EventInfo>"
  remarks: "Use este construtor se o membro representa um evento (propriedade de ponto de conexão de manipulador de eventos)."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.EventInfo>que representa o membro de evento.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe usando o sistema de tipos CLR <xref:System.Reflection.PropertyInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.PropertyInfo>"
  remarks: "Use este construtor se o membro representa uma propriedade (e especificamente não é uma conexão de manipulador de eventos)."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.PropertyInfo>que representa o membro de propriedade.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe usando o sistema de tipos CLR <xref:System.Reflection.EventInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações.</xref:System.Reflection.EventInfo>"
  remarks: "Use este construtor se o membro representa um evento (ou uma propriedade de ponto de conexão do manipulador de eventos)."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.EventInfo>que representa o membro de evento.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que manipula a reflexão em tempo de execução chama em relação a <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe usando a reflexão <xref:System.Reflection.PropertyInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações.</xref:System.Reflection.PropertyInfo>"
  remarks: "Use este construtor somente se o membro representa uma propriedade e se não for uma conexão de manipulador de eventos."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.PropertyInfo>que representa o membro de propriedade.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que manipula a invocação de tempo de execução chama em relação a <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa um evento anexável."
  remarks: "Use este construtor se o membro representa um membro de evento anexável."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "O nome da cadeia de caracteres do evento anexável."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MethodInfo>para o manipulador <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> método do membro anexável do fazendo implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  id: '#ctor(System.String,System.Xaml.XamlType,System.Boolean)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> usando um nome de cadeia de caracteres e a declaração de classe <xref href=&quot;System.Xaml.XamlType&quot;> </xref> informações. Um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que é construído com esta assinatura apresenta limitações significativas; consulte comentários."
  remarks: "Um <xref:System.Xaml.XamlMember>que é construído com o XamlMember assinatura retorna `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, esse membro não pode ser gravado em um gráfico de objeto.</xref:System.Xaml.XamlObjectWriter> Com a implementação de serviços XAML do .NET Framework, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>chamar lança um <xref:System.Xaml.XamlObjectWriterException>quando relevante <xref:System.Xaml.XamlMember>relatórios `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Você não deve criar um <xref:System.Xaml.XamlMember>com <xref:System.Xaml.XamlMember.IsUnknown%2A> `true` , a menos que sua implementação pode manipular as exceções de <xref:System.Xaml.XamlObjectWriter>, ou você tiver outras maneiras de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> Por exemplo, um ou mais dos itens a seguir podem ser verdadeiro para sua implementação:-contexto do esquema XAML o está disponível mais tarde.      -Você usar um padrão de chamador do membro.      -Você substituir deliberadamente <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>em um gravador XAML personalizado.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);
    parameters:
    - id: name
      type: System.String
      description: "O nome da cadeia de caracteres do membro."
    - id: declaringType
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> informações para o tipo de declaração."
    - id: isAttachable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para indicar que o membro anexável; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>or <code>declaringType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa uma propriedade anexável."
  remarks: "Use este construtor se o membro representa uma propriedade anexável."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "O nome da cadeia de caracteres da propriedade anexável."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador do membro anexável do fazendo implementação.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador do membro anexável do fazendo implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa um evento anexável, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações."
  remarks: "Use este construtor se o membro representa um membro de evento anexável."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "O nome da cadeia de caracteres do evento anexável."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MethodInfo>para o manipulador <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> método do membro anexável do fazendo implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que manipula a invocação de tempo de execução chama em relação a <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa uma propriedade anexável, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações."
  remarks: "Use este construtor se o membro representa um membro de uma propriedade anexável."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "O nome da cadeia de caracteres da propriedade anexável."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador do membro anexável do fazendo implementação.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador do membro anexável do fazendo implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualifica o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que manipula a invocação de tempo de execução chama em relação a <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeclaringType
  id: DeclaringType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo que declara o membro que é associado a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Esse valor normalmente é definida durante a inicialização e não costuma ser `null`.      > [!IMPORTANT] > DeclaringType informações podem ser passadas por construtores para inicialização. Por chamar diretamente os construtores base, a inicialização para <xref:System.Xaml.XamlMember>derivadas de classes podem omitir algumas das verificações de valor que são feitas na classe base.</xref:System.Xaml.XamlMember> Portanto, a inicialização derivada pode alterar as informações de relação de membro de tipo relatado de um membro XAML para que ele não se alinha de forma esperada com as informações de sua declaração de CLR subjacente do sistema de tipo. Para verificações da declaração de tipo informações críticas de segurança, use o tipo CLR subjacente."
  syntax:
    content: public System.Xaml.XamlType DeclaringType { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo que declara o membro que é associado a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é usado para carregamento adiado dos XAML declarado objetos."
  remarks: "Chamar DeferringLoader invoca <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> Esse comportamento ocorre nos casos em que a lógica de reflexão interno inicial ainda não tiver definido as informações."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> restrição genérica."
  overload: System.Xaml.XamlMember.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DependsOn
  id: DependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos. Eles reportam os membros em que relações de dependência para ordem de inicialização existem em relação a esse <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Chamar DependsOn invoca <xref:System.Xaml.XamlMember.LookupDependsOn%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupDependsOn%2A> Esse comportamento ocorre nos casos em que a lógica de reflexão interno inicial ainda não tiver definido as informações.       O `DependsOn` padrão pode ser aplicado a casos de modelo de objeto que deliberadamente contradigam a regra XAML geral. A regra XAML geral é que os membros de um tipo que não são transmitidos como texto de inicialização (ou por um método de fábrica em XAML 2009) devem poder ser atribuídas em qualquer ordem. Aplicando um `DependsOn` padrão para um membro, você pode instruir gravadores XAML para processar sempre o membro referenciado antes desse membro. Você pode aplicar esse padrão em situações em que o valor do membro atual requer contexto ou outras informações que está disponíveis somente depois de outro membro é definido.       O `DependsOn` padrão deve ser aplicado criteriosamente e reservado para cenários de propriedade em que ele tem uma finalidade de arquitetura. Grandes números de dependências têm potencial para reduzir a velocidade de processamento de XAML. Além disso, é possível produzir dependências circulares, caso em que o comportamento de processamento de XAML é indefinido.       Exemplo `DependsOn` cenários do WPF incluem determinadas propriedades em <xref:System.Windows.Controls.ControlTemplate>e <xref:System.Windows.DataTemplate>, na <xref:System.Windows.Trigger>e em <xref:System.Windows.Setter>.</xref:System.Windows.Setter> </xref:System.Windows.Trigger> </xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlMember> DependsOn { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos."
  overload: System.Xaml.XamlMember.DependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indica se o objeto atual é igual a outro objeto."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto a ser comparado com este objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto atual é igual a <code> obj </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  id: Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indica se o objeto atual é igual a outro objeto do mesmo tipo."
  syntax:
    content: public bool Equals (System.Xaml.XamlMember other);
    parameters:
    - id: other
      type: System.Xaml.XamlMember
      description: "Um objeto a ser comparado com este objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto atual é igual a <code> other </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o código hash para este objeto."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código de hash de número inteiro."
  overload: System.Xaml.XamlMember.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma lista de namespaces XAML onde esse membro XAML pode existir."
  remarks: "A implementação padrão retorna a <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>chamar resultado a partir do <xref:System.Xaml.XamlMember.DeclaringType%2A>que está associado esta <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.DeclaringType%2A> </xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "Uma lista de identificadores de namespace XAML como cadeias de caracteres."
  overload: System.Xaml.XamlMember.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Invoker
  id: Invoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que está associada a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "O `Invoker` padrão é uma técnica de extensão do sistema de tipo XAML avançada. O `Invoker` padrão fornece uma maneira de inserir o comportamento de mapeamento de tipo de esquema diferente, enquanto estiver usando definições de sistema de tipo XAML de serviços XAML do .NET Framework.       Se um <xref:System.Xaml.XamlMember.LookupInvoker%2A>Substituir retorna `null`, ou se a implementação padrão retorna `null` porque ele não tem a <xref:System.Xaml.XamlMember.UnderlyingMember%2A>para este <xref:System.Xaml.XamlMember>a propriedade do chamador retorna <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupInvoker%2A>       <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>é o padrão.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> Isso é verdadeiro para a maioria das operações que usam serviços XAML do .NET Framework e o contexto do esquema XAML padrão e em nenhum específicos substituir `Invoker` padrões são passados para a construção de entidades do sistema de tipo XAML.       Chamar um chamador chama <xref:System.Xaml.XamlMember.LookupInvoker%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que está associada a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> será relatado como uma propriedade de ambiente."
  remarks: "Chamar IsAmbient invoca <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsAmbient%2A> Esse comportamento ocorre em implementações onde a lógica de reflexão interno inicial ainda não tiver definido as informações.       Verificando para propriedades de ambiente é geralmente fazem parte da lógica de processamento de XAML para certificar-se de que os objetos e os valores que se baseiam no uso de ambiente para a qualificação do tipo podem funcionar corretamente. APIs de serviços XAML do .NET Framework e o contexto do esquema padrão XAML preenche esse valor com base na atribuição com <xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute> A implementação padrão de <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>usa esse existente <xref:System.Windows.Markup.AmbientAttribute>técnica e retornará `true` se <xref:System.Windows.Markup.AmbientAttribute>existe em uma declaração de membro.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute> </xref:System.Xaml.XamlMember.LookupIsAmbient%2A>       <xref:System.Windows.Markup.AmbientAttribute>foi encontrado em membros de vários tipos WPF, que incluem <xref:System.Windows.Application>, <xref:System.Windows.Setter>e <xref:System.Windows.Style>.</xref:System.Windows.Style> </xref:System.Windows.Setter> </xref:System.Windows.Application></xref:System.Windows.Markup.AmbientAttribute> Ele também é encontrado na <xref:System.Windows.ResourceDictionary>tipo, que dá a ideia de que qualquer membro que usa <xref:System.Windows.ResourceDictionary>como seu tipo deve ser considerado ambiente mesmo se o membro não é especificamente atribuído.</xref:System.Windows.ResourceDictionary> </xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> relatados como uma propriedade de ambiente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAttachable
  id: IsAttachable
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é um membro anexável."
  remarks: "O valor de IsAttachable é inicializado com base em qual construtor foi usado para construir um <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>"
  syntax:
    content: public bool IsAttachable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é um membro anexável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsAttachable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsDirective
  id: IsDirective
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é uma diretiva XAML."
  remarks: "O valor de IsDirective é inicializado com base em qual construtor foi usado para construir um <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> A base <xref:System.Xaml.XamlMember>construtores inicializar para que seja IsDirective `false`.</xref:System.Xaml.XamlMember> No entanto, a <xref:System.Xaml.XamlDirective>classe (um <xref:System.Xaml.XamlMember>classe derivada) inicializa para que seja IsDirective `true`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlDirective>       Se você deseja relatar IsDirective como `true` para chamadores de uma classe personalizada de esquema XAML para membros XAML, verifique se você derivar da <xref:System.Xaml.XamlDirective>porque é a única maneira de habilitar esse comportamento.</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public bool IsDirective { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é uma XAML diretiva; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsDirective*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsEvent
  id: IsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro de evento."
  remarks: "Chamar IsEvent invoca <xref:System.Xaml.XamlMember.LookupIsEvent%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsEvent%2A>"
  syntax:
    content: public bool IsEvent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um evento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é inicializada com uma validade <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> cadeia de caracteres como seu <xref:System.Xaml.XamlMember.Name*>.</xref:System.Xaml.XamlMember.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é inicializada com uma validade <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> de cadeia de caracteres; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadOnly
  id: IsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro somente leitura."
  remarks: "Chamar IsReadOnly invoca <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro somente leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadPublic
  id: IsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro com um público que pode ser chamado <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador."
  remarks: "O IsReadPublic valor verifica se o <xref:System.Xaml.XamlMember.DeclaringType%2A>é público.</xref:System.Xaml.XamlMember.DeclaringType%2A> Se <xref:System.Xaml.XamlMember.DeclaringType%2A>é não público, o `get` acessador não é chamado em uma forma prática e retorna IsReadPublic `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       Chamar IsReadPublic invoca <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>      > [!IMPORTANT] > O <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>método é virtual e, portanto, pode ser substituído.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> A substituição tem o potencial de mudar (maliciosamente ou não) as informações de acesso reportadas de um membro XAML para que ele não alinhe de forma esperada com as informações de acesso de sua declaração de CLR subjacente do tipo system. Para qualquer verificação de segurança crítica dos níveis de acesso, use o tipo CLR subjacente."
  syntax:
    content: public bool IsReadPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um público que pode ser chamado <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se o membro não é resolvido pelo sistema de backup que é usado para resolução de tipo e membro."
  remarks: "Um <xref:System.Xaml.XamlMember>que é construído com o <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>assinatura retorna `true` para IsUnknown.</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> </xref:System.Xaml.XamlMember>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, um <xref:System.Xaml.XamlMember>com `true` para IsUnknown não pode ser gravado em um gráfico de objeto.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriter> Sob as implementações padrão de APIs de serviços de XAML do .NET Framework, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>chamar lança um <xref:System.Xaml.XamlObjectWriterException>quando relevante <xref:System.Xaml.XamlMember>relatórios `true` para IsUnknown.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Você não deve criar um <xref:System.Xaml.XamlMember>que tem um valor de `true` para IsUnknown, a menos que sua implementação pode manipular as exceções de <xref:System.Xaml.XamlObjectWriter>, ou você tiver outras maneiras de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember>       Chamar IsUnknown invoca <xref:System.Xaml.XamlMember.LookupIsUnknown%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsUnknown%2A>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o membro não pode ser resolvido; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o membro puder ser resolvido."
  overload: System.Xaml.XamlMember.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWriteOnly
  id: IsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro de somente gravação."
  remarks: "Chamar IsWriteOnly invoca <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>"
  syntax:
    content: public bool IsWriteOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro somente gravação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWritePublic
  id: IsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que tem um público que pode ser chamado <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador."
  remarks: "O valor de IsWritePublic considera se o <xref:System.Xaml.XamlMember.DeclaringType%2A>é público como parte da determinação.</xref:System.Xaml.XamlMember.DeclaringType%2A> Se <xref:System.Xaml.XamlMember.DeclaringType%2A>é não público, o `set` acessador não é chamado em uma forma prática e retorna IsWritePublic `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       Chamar IsWritePublic invoca <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>      > [!IMPORTANT] > O <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>método é virtual e, portanto, pode ser substituído.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> A substituição tem o potencial de mudar (maliciosamente ou não) as informações de acesso reportadas de um membro XAML para que ele não alinhe de forma esperada com as informações de acesso de sua declaração de CLR subjacente do tipo system. Para qualquer verificação de segurança crítica dos níveis de acesso, use o tipo CLR subjacente."
  syntax:
    content: public bool IsWritePublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um público que pode ser chamado <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada em uma classe derivada, retorna um <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> implementação."
  remarks: "Substitua este método para fornecer a reflexão interna com uma maneira alternativa para obter valores de atributo do CLR. Na ausência de uma substituição, o reflector interno usa a lógica de reflexão típica do CLR como chamadas ao <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>       A implementação padrão retorna `null`."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "Um <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> implementação."
  overload: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é usado para carregamento adiado dos XAML declarado objetos."
  remarks: "Esse método é chamado quando um chamador obtém um valor da <xref:System.Xaml.XamlMember.DeferringLoader%2A>propriedade.</xref:System.Xaml.XamlMember.DeferringLoader%2A> Substitua este método se desejar <xref:System.Xaml.XamlMember.DeferringLoader%2A>para retornar um valor diferente do valor que é habilitado por reflexão interno do padrão, e se você estiver fornecendo também personalizado <xref:System.Xaml.Schema.XamlMemberInvoker>informações.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DeferringLoader%2A>       A implementação padrão retorna um objeto lendo <xref:System.Windows.Markup.XamlDeferLoadAttribute>ou usando um <xref:System.Xaml.XamlDeferringLoader>do tipo declarativo.</xref:System.Xaml.XamlDeferringLoader> </xref:System.Windows.Markup.XamlDeferLoadAttribute> Se nenhum objeto estiver disponível, esse método pode retornar `null`."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; que tem um <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> restrição genérica."
  overload: System.Xaml.XamlMember.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDependsOn
  id: LookupDependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos. Relatam de itens na lista os membros em que relações de dependência para ordem de inicialização existem em relação a esse <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Esse método é chamado quando um chamador obtém um valor da <xref:System.Xaml.XamlMember.DependsOn%2A>propriedade.</xref:System.Xaml.XamlMember.DependsOn%2A> Substitua este método se desejar <xref:System.Xaml.XamlMember.DependsOn%2A>para retornar um valor diferente do valor que é habilitado por reflexão interno do padrão, e se você estiver fornecendo também personalizado <xref:System.Xaml.Schema.XamlMemberInvoker>informações.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DependsOn%2A>       As implementações de leitor e gravador do WPF XAML atributo nesse caso com <xref:System.Windows.Markup.DependsOnAttribute>.</xref:System.Windows.Markup.DependsOnAttribute> A implementação padrão usa esse existente <xref:System.Windows.Markup.DependsOnAttribute>técnica.</xref:System.Windows.Markup.DependsOnAttribute>       Substitua este método se você não estiver usando <xref:System.Windows.Markup.DependsOnAttribute>para essa finalidade e a intenção de substituir essa técnica para indicar a ordem de processamento de propriedade com sua própria técnica.</xref:System.Windows.Markup.DependsOnAttribute> Se você não pretende dar suporte a uma ordem de processamento de propriedade, você pode usar a implementação padrão porque ele não retorna nenhum resultado, que é apropriado.       A lista é somente leitura."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos."
  overload: System.Xaml.XamlMember.LookupDependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> que é associada a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Esse método é invocado por chamadas para <xref:System.Xaml.XamlMember.Invoker%2A>.</xref:System.Xaml.XamlMember.Invoker%2A>       A implementação padrão não requer que um <xref:System.Xaml.XamlMember>ser construídas usando um dos construtores que passam um inicial <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember> No entanto, um <xref:System.Xaml.XamlMember.UnderlyingMember%2A>valor deve existir para o <xref:System.Xaml.XamlMember>; caso contrário, retorna a implementação padrão `null`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Substitua este método se você também deriva <xref:System.Xaml.Schema.XamlMemberInvoker>e pretendia retornar classe derivada.</xref:System.Xaml.Schema.XamlMemberInvoker> Se você retornar `null`, <xref:System.Xaml.XamlMember.Invoker%2A>retorna <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>para chamadores.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlMember&quot;></xref>; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlMember.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> será relatado como uma propriedade de ambiente."
  remarks: "Esse método é invocado por chamadas internas que verificar se há informações de propriedade do ambiente XAML. Comportamento de propriedade de ambiente é contabilizado no comportamento de API público de leitores XAML e gravadores XAML. As chamadas internas que fazem referência a LookupIsAmbient geralmente fazem parte da lógica de processamento de XAML para certificar-se de que os objetos e os valores que se baseiam no uso de ambiente para a qualificação do tipo podem funcionar corretamente. A implementação de serviços XAML do .NET Framework padrão usa a atribuição para obter essas informações de reflexão fazendo tipos CLR. Especificamente, a implementação padrão procura <xref:System.Windows.Markup.AmbientAttribute>e retorna `true` para LookupIsAmbient se <xref:System.Windows.Markup.AmbientAttribute>existe em uma definição de membro.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute>       Substitua este método se você não estiver usando <xref:System.Windows.Markup.AmbientAttribute>para essa finalidade e a intenção de substituir essa técnica para propriedades de ambiente XAML com sua própria técnica, indicando.</xref:System.Windows.Markup.AmbientAttribute>       APIs de exemplo de atributo com <xref:System.Windows.Markup.AmbientAttribute>são <xref:System.Windows.Trigger.Property%2A?displayProperty=fullName>e <xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>.</xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName> </xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> </xref:System.Windows.Markup.AmbientAttribute> do WPF"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>relate isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> como uma propriedade de ambiente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsEvent
  id: LookupIsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um evento."
  remarks: "As verificações de implementação padrão se <xref:System.Xaml.XamlMember.UnderlyingMember%2A>é do tipo <xref:System.Reflection.EventInfo>e se for, retorna `true`.</xref:System.Reflection.EventInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsEvent%2A>.</xref:System.Xaml.XamlMember.IsEvent%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis que podem ser interpretados para determinar o XAML tipo representações de sistema em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsEvent ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para relatórios que este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um evento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  id: LookupIsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa uma propriedade somente leitura pretendida."
  remarks: "A implementação padrão retorna `true` se <xref:System.Xaml.XamlMember.UnderlyingMember%2A>existe, mas um público `set` acessador não existe para ele, conforme determinado pela reflexão interno.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</xref:System.Xaml.XamlMember.IsReadOnly%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis que podem ser interpretados para determinar o XAML tipo representações de sistema em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>relate isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> como uma propriedade somente leitura pretendida; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  id: LookupIsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa uma propriedade que tem um público <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador."
  remarks: "A implementação padrão retorna resultados com base em reflexão interno ou a negação de <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, o processamento nessa ordem.</xref:System.Xaml.XamlMember.IsWriteOnly%2A>       LookupIsReadPublic retorna se o próprio membro é público; ele retorna `true` para um membro público em um confidenciais tipo declarativo. Use <xref:System.Xaml.XamlMember.IsReadPublic%2A>em vez disso, se você também queira considerar a visibilidade do tipo declarativo.</xref:System.Xaml.XamlMember.IsReadPublic%2A>       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</xref:System.Xaml.XamlMember.IsReadPublic%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > LookupIsReadPublic o método é virtual e, portanto, pode ser substituído. A substituição tem o potencial de mudar (maliciosamente ou não) as informações de acesso reportadas de um membro XAML para que ele não alinhe de forma esperada com as informações de acesso de sua declaração de CLR subjacente do tipo system. Para qualquer verificação de segurança crítica dos níveis de acesso, use o tipo CLR subjacente."
  syntax:
    content: protected virtual bool LookupIsReadPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa uma propriedade que tem um público <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que não pode ser resolvido pelo sistema de backup que é usado para resolução de tipo e membro."
  remarks: "Esse método pode ser chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> A implementação padrão retorna resultados com base em qualquer reflexão interno ou verificando um `null` valor <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, o processamento nessa ordem.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro não pode ser resolvido; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  id: LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que tem um público <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador mas não um público <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador."
  remarks: "A implementação padrão retorna `true` se um <xref:System.Xaml.XamlMember.UnderlyingMember%2A>existe que tem um público `set` acessador e um confidenciais `get` acessador, conforme determinado pela reflexão interno.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</xref:System.Xaml.XamlMember.IsWriteOnly%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsWriteOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro somente gravação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  id: LookupIsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna se isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que tem um público <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador."
  remarks: "A implementação padrão retorna resultados com base em reflexão interno ou a negação de <xref:System.Xaml.XamlMember.IsReadOnly%2A>, o processamento nessa ordem.</xref:System.Xaml.XamlMember.IsReadOnly%2A>       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > LookupIsWritePublic o método é virtual e, portanto, pode ser substituído. A substituição tem o potencial de mudar (maliciosamente ou não) as informações de acesso reportadas de um membro XAML para que ele não alinhe de forma esperada com as informações de acesso de sua declaração de CLR subjacente do tipo system. Para qualquer verificação de segurança crítica dos níveis de acesso, use o tipo CLR subjacente."
  syntax:
    content: protected virtual bool LookupIsWritePublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro gravável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTargetType
  id: LookupTargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir."
  remarks: "A implementação padrão faz distinção entre os membros anexáveis e não anexável. Para membros não anexável, LookupTargetType sempre retorna <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> Para membros anexáveis, LookupTargetType retorna um resultado com base em examinar o <xref:System.Xaml.XamlMember.UnderlyingMember%2A>tipo de parâmetro do acessador e interpreta que tipo com base no contexto do esquema XAML.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.TargetType%2A>.</xref:System.Xaml.XamlMember.TargetType%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupTargetType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "O tipo de onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir. Consulte comentários."
  overload: System.Xaml.XamlMember.LookupTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupType
  id: LookupType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que é usado pelo membro. Consulte comentários."
  remarks: "Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> Substitua este método se desejar <xref:System.Xaml.XamlMember.Type%2A>para retornar um valor diferente do valor que é habilitado por reflexão interno do padrão, e se você estiver fornecendo também personalizado <xref:System.Xaml.Schema.XamlMemberInvoker>informações.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.Type%2A>       A implementação padrão usa caminhos de código diferentes e significados conceituais para retornado <xref:System.Xaml.XamlType>que baseia-se isso <xref:System.Xaml.XamlMember>representa uma propriedade, método ou evento.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>      -Para uma propriedade, retornada <xref:System.Xaml.XamlType>é o tipo que define a propriedade ou é retornado pela propriedade.</xref:System.Xaml.XamlType>      -Para um evento, retornado <xref:System.Xaml.XamlType>é o tipo de manipulador de eventos necessários (um delegado em uma implementação de CLR).</xref:System.Xaml.XamlType>      -Para um método, <xref:System.Xaml.XamlType>é o tipo de retorno.</xref:System.Xaml.XamlType>       Em cada caso, o contexto do esquema XML é usado para avaliar o tipo XAML do tipo de sistema subjacente.       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que é usado pelo membro. Consulte comentários."
  overload: System.Xaml.XamlMember.LookupType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma implementação de conversor de tipo que é associada a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação padrão usa a seguinte lógica e a ordem de processamento: - se a atribuição existe no nível de membro (<xref:System.ComponentModel.TypeConverterAttribute>), as informações de atributo são usadas para chamar <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>em relação ao contexto de esquema XAML.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.ComponentModel.TypeConverterAttribute>      -Se <xref:System.Xaml.XamlMember.Type%2A>for válido, um conversor de tipo que está associado com o tipo será retornado.</xref:System.Xaml.XamlMember.Type%2A>      -Se o membro é um evento, será retornado um conversor de tipo de evento específico.       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.TypeConverter%2A>.</xref:System.Xaml.XamlMember.TypeConverter%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; instância com <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> restrição; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  id: LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador que está associado a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação padrão interpreta o <xref:System.Xaml.XamlMember.UnderlyingMember%2A>a propriedade como <xref:System.Reflection.PropertyInfo>e retorna o valor de <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName>(com o parâmetro definido `true`), que significa que o método retornado pode ser confidenciais.</xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> Esse comportamento pode resultar em `null` para determinados casos. incluindo casos em que nenhum acessador associado existe ou o membro não é uma propriedade.       Esse método é chamado quando um chamador obtém um valor da <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>propriedade em um associado <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember> Certifique-se de implementar LookupUnderlyingGetter, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, e <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>para que retornem resultados correlacionados.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "O <xref:System.Reflection.MethodInfo>associado <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessador; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingGetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  id: LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um sistema de tipos CLR <xref:System.Reflection.MemberInfo>que é associada a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  remarks: "A implementação padrão retorna as informações de membro subjacente, que se baseia em construção. Se o <xref:System.Reflection.MemberInfo>objeto for construído com uma assinatura que não fornece informações suficientes para definir o membro base, esse método retorna `null`.</xref:System.Reflection.MemberInfo>       Se um membro subjacente foi definido durante a construção, você não precisará chamar esse método.       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</xref:System.Xaml.XamlMember.UnderlyingMember%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember> Certifique-se de implementar <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, LookupUnderlyingMember para que todos eles retornem resultados correlacionados.</xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "Um sistema de tipos CLR <xref:System.Reflection.MemberInfo>objeto que está associado com esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  id: LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna um <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador que está associado a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação padrão interpreta <xref:System.Xaml.XamlMember.UnderlyingMember%2A>como <xref:System.Reflection.PropertyInfo>e retorna o valor de <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName>(com o parâmetro definido `true`), que significa que o método retornado pode ser confidenciais.</xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> Isso pode resultar em `null` para certos casos, inclusive os casos em que não há nenhum tal acessador ou o membro não é uma propriedade.       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>em um <xref:System.Xaml.Schema.XamlMemberInvoker>associado. Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember> </xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> Certifique-se de implementar <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, LookupUnderlyingSetter, e <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>para que retornem resultados correlacionados.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "O <xref:System.Reflection.MethodInfo>associado <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessador; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingSetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma implementação de serializador de valor que é associada a essa <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação padrão usa a seguinte lógica e a ordem de processamento: - se a atribuição existe no nível de membro (<xref:System.Windows.Markup.ValueSerializerAttribute>), as informações de atributo são usadas para chamar <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>em relação ao contexto de esquema XAML.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.Windows.Markup.ValueSerializerAttribute>      -Se <xref:System.Xaml.XamlMember.Type%2A>for válido, um conversor de valor que está associado com o tipo será retornado.</xref:System.Xaml.XamlMember.Type%2A>      -Se não se aplicam as condições anteriores, `null` será retornado.       Esse método é chamado quando um chamador obtém um valor de <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</xref:System.Xaml.XamlMember.ValueSerializer%2A> Substitua este método se você deseja relatar resultados uniforme para toda uma <xref:System.Xaml.XamlMember>derivado da classe, ou se você tiver um especializado metadados disponíveis para determinar isso em uma base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; instância com <xref:System.Windows.Markup.ValueSerializer>restrição, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Name
  id: Name
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> nome de cadeia de caracteres que declara isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Esse valor é sempre definido durante a construção. Os construtores que são implementados por <xref:System.Xaml.XamlMember>normalmente lançar uma exceção se não for especificado um nome inicial; portanto, não espere essa propriedade para ser `null` ou uma cadeia de caracteres vazia, se você estiver usando as implementações padrão de serviços XAML do .NET Framework.</xref:System.Xaml.XamlMember>       [Gramática XamlName](~/add/includes/ajax-current-ext-md.md) e as regras de nomenclatura para o tipo CLR e os membros não são uma interseção exata. É possível declarar um nome de membro que é válido em CLR, mas não é válido em XAML de nomenclatura. Você deve evitar essa situação, se possível."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "O <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> nome de cadeia de caracteres que declara isso <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determina se duas especificadas <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos têm o mesmo valor."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor de <code> xamlMember1 </code> é o mesmo que o valor de <code> xamlMember2 </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determina se duas especificadas <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos têm valores diferentes."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor de <code> xamlMember1 </code> difere do valor de <code> xamlMember2 </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o namespace XAML URI que identifica o namespace XAML primário para esse único <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A propriedade PreferredXamlNamespace fornece o mesmo valor que a chamada <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>e, em seguida, obter a primeira cadeia de caracteres do valor da lista retornada.</xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> O namespace XAML preferencial deve ser usado ao gravar o membro de volta para o texto ou outras representações que preservam as informações de namespace XAML."
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "O identificador do namespace XAML primário para este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>, como uma cadeia de caracteres."
  overload: System.Xaml.XamlMember.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.SerializationVisibility
  id: SerializationVisibility
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> valor que indica como um designer visual deve processar o membro."
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "Um valor de <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> enumeração. O padrão é <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>."
  overload: System.Xaml.XamlMember.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TargetType
  id: TargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir."
  remarks: "O valor retornado é diferente para membros anexáveis e não anexável. Para membros não anexável, TargetType retorna <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> Para membros anexáveis, <xref:System.Xaml.XamlMember.LookupTargetType%2A>retorna um resultado com base em lógica: - se de reflexão não é possível resolver um backup (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`), esse método retorna uma constante interna que representa um tipo de objeto genérico.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A>      -Se a condição anterior não se aplica, <xref:System.Xaml.XamlMember.LookupTargetType%2A>é chamado.</xref:System.Xaml.XamlMember.LookupTargetType%2A> A implementação padrão retorna um <xref:System.Xaml.XamlType>que se baseia no examinando os métodos que implementam o `get` e `set` acessadores.</xref:System.Xaml.XamlType> Uma classe pode substituir <xref:System.Xaml.XamlMember.LookupTargetType%2A>usar um comportamento diferente, como outros metadados de formulários que poderá reportar os tipos de destino para membros anexáveis.</xref:System.Xaml.XamlMember.LookupTargetType%2A>"
  syntax:
    content: public System.Xaml.XamlType TargetType { get; }
    return:
      type: System.Xaml.XamlType
      description: "O tipo de onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir. Consulte comentários."
  overload: System.Xaml.XamlMember.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ToString
  id: ToString
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Retorna uma representação de cadeia de caracteres deste <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Essa implementação retorna <xref:System.Xaml.XamlMember.Name%2A>.</xref:System.Xaml.XamlMember.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma representação de cadeia de caracteres deste <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Type
  id: Type
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que é usado pelo membro."
  remarks: "Tipo de chamada invoca <xref:System.Xaml.XamlMember.LookupType%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupType%2A> Isso ocorre quando a lógica de reflexão interno inicial ainda não tiver definido as informações.       No comportamento padrão (nenhuma <xref:System.Xaml.XamlMember.LookupType%2A>Substituir), retornado <xref:System.Xaml.XamlType>pode ter diferentes significados conceituais.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember.LookupType%2A> Aplica-se qual significado depende se isso <xref:System.Xaml.XamlMember>representa uma propriedade, método ou evento, como mostra a lista a seguir: - para uma propriedade, retornada <xref:System.Xaml.XamlType>é o tipo que define a propriedade ou é retornado pela propriedade.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember>      -Para um evento, retornado <xref:System.Xaml.XamlType>é o tipo de manipulador de eventos necessários (um delegado em uma implementação de CLR).</xref:System.Xaml.XamlType>      -Para um método, <xref:System.Xaml.XamlType>é o tipo de retorno desse método, o que pode ser `null`.</xref:System.Xaml.XamlType>       Em cada caso, o contexto do esquema XAML é usado para avaliar o tipo XAML do tipo de backup."
  syntax:
    content: public System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que é usado pelo membro. Consulte comentários."
  overload: System.Xaml.XamlMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que pode ser usado para a construção de conversão de tipo de XAML declarado objetos."
  remarks: "Chamar TypeConverter invoca <xref:System.Xaml.XamlMember.LookupTypeConverter%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupTypeConverter%2A> Esse comportamento ocorre quando a lógica de reflexão interno inicial ainda não tiver definido as informações.       Implementações que retornam um valor de propriedade nulos para TypeConverter não são necessariamente um trabalho <xref:System.ComponentModel.TypeConverter>.</xref:System.ComponentModel.TypeConverter> A seguir está uma lista de possíveis valores de retorno não nulo para TypeConverter e esses valores representam:-o valor de retorno relata um conversor de tipo é atribuído especificamente para esse membro ou de forma geral para o tipo de destino do conversor. Normalmente, esse comportamento é que a maioria dos sistemas de tipo XAML e procure processadores XAML para instanciar um conversor de tipo e chamar seus métodos.      -O valor de retorno relata um conversor de valor interno. Esses conversores existem para determinadas operações internas que são executadas por um autor XAML. Em particular, esses conversores de valor interno converter os valores de cadeia de caracteres bruta de atributo para os primitivos de nível de linguagem XAML. Para a implementação de serviços XAML do .NET Framework, essas conversões de tipo interno geralmente encaminham para um conversor de tipo é definido no assembly System. Por exemplo, uma conversão para um <xref:System.Int32>valor tem interno encaminhado conversão e, portanto, as <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>referências de valor <xref:System.ComponentModel.Int32Converter>.</xref:System.ComponentModel.Int32Converter> </xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> </xref:System.Int32>      -O valor de retorno relatórios caso especial de um modelo de objeto irrestrita; ou seja, o <xref:System.Xaml.XamlMember>tem um <xref:System.Xaml.XamlMember.Type%2A>valor de <xref:System.Object>.</xref:System.Object> </xref:System.Xaml.XamlMember.Type%2A> </xref:System.Xaml.XamlMember> Nesse caso, a <xref:System.Xaml.Schema.XamlValueConverter%601>relata que o <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName>é {`Object}`.</xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> </xref:System.Xaml.Schema.XamlValueConverter%601> No entanto, <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>é `null` porque nenhum tipo real ou a instância está disponível para realizar essa conversão.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> Em vez disso, o comportamento do modelo de objeto não pode ser determinado até o tempo de execução, quando o tempo de execução da tecnologia específica determina a manipulação de seu gráfico de objeto.       Se você puder acessar um trabalho <xref:System.ComponentModel.TypeConverter>de <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, você pode chamar seus métodos de conversão.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> </xref:System.ComponentModel.TypeConverter> No entanto, vários métodos de conversão confiam no contexto do serviço. Se você não tem o mesmo contexto de serviço disponível que o conversor de tipo de espera para sua função típica de gravação de objetos para gráficos de objeto, os métodos de conversor podem gerar exceções."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; valor, com um <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> restrição genérica. Consulte comentários."
  overload: System.Xaml.XamlMember.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.UnderlyingMember
  id: UnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o sistema de tipos CLR <xref:System.Reflection.MemberInfo>que está disponível para um membro que é criado por <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.MethodInfo>, ou <xref:System.Reflection.EventInfo>.</xref:System.Reflection.EventInfo> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.PropertyInfo> </xref:System.Reflection.MemberInfo>"
  remarks: "Chamar UnderlyingMember invoca <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>"
  syntax:
    content: public System.Reflection.MemberInfo UnderlyingMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "Sistema de tipos CLR <xref:System.Reflection.MemberInfo>informações, como conversão de parâmetros de construtor inicial.</xref:System.Reflection.MemberInfo> Um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que é construído com a &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; assinatura retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.UnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é usado para serialização de valor de XAML declarado objetos."
  remarks: "Chamar ValueSerializer invoca <xref:System.Xaml.XamlMember.LookupValueSerializer%2A>ou uma substituição específica desse método.</xref:System.Xaml.XamlMember.LookupValueSerializer%2A> Esse comportamento ocorre quando a lógica de reflexão interno inicial ainda não tiver definido as informações.       Nem todos os casos que retornam um valor de propriedade nulos para ValueSerializer são necessariamente um trabalho <xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer> Consulte comentários em <xref:System.Xaml.XamlMember.TypeConverter%2A>; as mesmas considerações se aplicam a ValueSerializer.</xref:System.Xaml.XamlMember.TypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "Um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref:System.Windows.Markup.ValueSerializer>restrição genérica.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.Schema.XamlMemberInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlMemberInvoker
  nameWithType: XamlMemberInvoker
  fullName: System.Xaml.Schema.XamlMemberInvoker
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.DeclaringType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.DependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
- uid: System.Collections.Generic.IList{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlMember>
  nameWithType: IList<XamlMember>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Equals(System.Object)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlMember.GetHashCode
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Invoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
- uid: System.Xaml.XamlMember.LookupDependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
- uid: System.Xaml.XamlMember.LookupInvoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
- uid: System.Xaml.XamlMember.LookupIsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
- uid: System.Xaml.XamlMember.LookupIsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
- uid: System.Xaml.XamlMember.LookupIsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
- uid: System.Xaml.XamlMember.LookupTargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
- uid: System.Xaml.XamlMember.LookupType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
- uid: System.Xaml.XamlMember.LookupTypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
- uid: System.Xaml.XamlMember.LookupValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Name
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.Xaml.XamlMember.TargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
- uid: System.Xaml.XamlMember.Type
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
- uid: System.Xaml.XamlMember.#ctor*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember.XamlMember
- uid: System.Xaml.XamlMember.DeclaringType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
- uid: System.Xaml.XamlMember.DependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
- uid: System.Xaml.XamlMember.Equals*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals
  nameWithType: XamlMember.Equals
- uid: System.Xaml.XamlMember.GetHashCode*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode
  nameWithType: XamlMember.GetHashCode
- uid: System.Xaml.XamlMember.GetXamlNamespaces*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlMember.GetXamlNamespaces
- uid: System.Xaml.XamlMember.Invoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlMember.LookupCustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlMember.LookupDeferringLoader
- uid: System.Xaml.XamlMember.LookupDependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn
  nameWithType: XamlMember.LookupDependsOn
- uid: System.Xaml.XamlMember.LookupInvoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlMember.LookupInvoker
- uid: System.Xaml.XamlMember.LookupIsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlMember.LookupIsAmbient
- uid: System.Xaml.XamlMember.LookupIsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent
  nameWithType: XamlMember.LookupIsEvent
- uid: System.Xaml.XamlMember.LookupIsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly
  nameWithType: XamlMember.LookupIsReadOnly
- uid: System.Xaml.XamlMember.LookupIsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic
  nameWithType: XamlMember.LookupIsReadPublic
- uid: System.Xaml.XamlMember.LookupIsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlMember.LookupIsUnknown
- uid: System.Xaml.XamlMember.LookupIsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly
  nameWithType: XamlMember.LookupIsWriteOnly
- uid: System.Xaml.XamlMember.LookupIsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic
  nameWithType: XamlMember.LookupIsWritePublic
- uid: System.Xaml.XamlMember.LookupTargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType
  nameWithType: XamlMember.LookupTargetType
- uid: System.Xaml.XamlMember.LookupType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType
  nameWithType: XamlMember.LookupType
- uid: System.Xaml.XamlMember.LookupTypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlMember.LookupTypeConverter
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter
  nameWithType: XamlMember.LookupUnderlyingGetter
- uid: System.Xaml.XamlMember.LookupUnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember
  nameWithType: XamlMember.LookupUnderlyingMember
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter
  nameWithType: XamlMember.LookupUnderlyingSetter
- uid: System.Xaml.XamlMember.LookupValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlMember.LookupValueSerializer
- uid: System.Xaml.XamlMember.Name*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality
  nameWithType: XamlMember.op_Equality
- uid: System.Xaml.XamlMember.op_Inequality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality
  nameWithType: XamlMember.op_Inequality
- uid: System.Xaml.XamlMember.PreferredXamlNamespace*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
- uid: System.Xaml.XamlMember.TargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString
  nameWithType: XamlMember.ToString
- uid: System.Xaml.XamlMember.Type*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
