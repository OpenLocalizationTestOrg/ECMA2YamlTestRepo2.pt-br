### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.MACTripleDES
  id: MACTripleDES
  children:
  - System.Security.Cryptography.MACTripleDES.#ctor
  - System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])
  - System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)
  - System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.MACTripleDES.HashFinal
  - System.Security.Cryptography.MACTripleDES.Initialize
  - System.Security.Cryptography.MACTripleDES.Padding
  langs:
  - csharp
  name: MACTripleDES
  nameWithType: MACTripleDES
  fullName: System.Security.Cryptography.MACTripleDES
  type: Class
  summary: "Calcula um código de autenticação de mensagem (MAC) usando <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> para os dados de entrada <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "Um MAC pode ser usado para determinar se uma mensagem enviada por um canal inseguro foi violada, desde que o remetente e o destinatário compartilham uma chave secreta. O remetente calcula o MAC para os dados originais e envia como uma única mensagem. O receptor calcula novamente o MAC na mensagem recebida e verifica se o MAC computado corresponde Mac transmitido.       Qualquer alteração de dados ou os resultados de MAC em uma incompatibilidade, porque é necessário conhecimento da chave secreta para alterar a mensagem e reproduzir Mac correto. Portanto, se os códigos de corresponderem, a mensagem é autenticada.       MACTripleDES usa uma chave que é 16 ou 24 bytes longo e produz uma sequência de hash que é de 8 bytes de comprimento."
  example:
  - "The following example creates a MAC for a file named `input.txt`, which is located in the folder that contains the example executable. The MAC and the original text are written to a file named `encrypted.hsh` in the same folder. The signed file is then read, and the MAC is calculated for the text portion of the file and compared to the MAC that is included with the text.  \n  \n [!code-vb[MAC3DES#1](~/add/codesnippet/visualbasic/t-system.security.crypto_8_1.vb)]\n [!code-cs[MAC3DES#1](~/add/codesnippet/csharp/t-system.security.crypto_8_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MACTripleDES : System.Security.Cryptography.KeyedHashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.KeyedHashAlgorithm.Create
  - System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  - System.Security.Cryptography.KeyedHashAlgorithm.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: MACTripleDES()
  nameWithType: MACTripleDES.MACTripleDES()
  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref> classe."
  remarks: "Este construtor usa a implementação padrão de <xref:System.Security.Cryptography.TripleDES>.</xref:System.Security.Cryptography.TripleDES>"
  syntax:
    content: public MACTripleDES ();
    parameters: []
  overload: System.Security.Cryptography.MACTripleDES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: MACTripleDES(Byte[])
  nameWithType: MACTripleDES.MACTripleDES(Byte[])
  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref> classe com os dados de chave especificados."
  remarks: "Este construtor usa a implementação padrão de <xref:System.Security.Cryptography.TripleDES>.</xref:System.Security.Cryptography.TripleDES> O `rgbKey` parâmetro deve ser de 16 ou 24 bytes de comprimento."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.MACTripleDES> class.
  syntax:
    content: public MACTripleDES (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "A chave secreta para <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref> criptografia."
  overload: System.Security.Cryptography.MACTripleDES.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbKey</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: MACTripleDES(String,Byte[])
  nameWithType: MACTripleDES.MACTripleDES(String,Byte[])
  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(String,Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref> classe com os dados de chave especificados e com a implementação especificada de <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref>."
  remarks: "O `strTripleDES` parâmetro é o nome amigável do <xref:System.Security.Cryptography.TripleDES>tipo de implementação.</xref:System.Security.Cryptography.TripleDES> A implementação padrão é System.Security.Cryptography.TripleDES.       O `rgbKey` parâmetro deve ser de 16 ou 24 bytes de comprimento."
  syntax:
    content: public MACTripleDES (string strTripleDES, byte[] rgbKey);
    parameters:
    - id: strTripleDES
      type: System.String
      description: "O nome do <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> implementação para usar."
    - id: rgbKey
      type: System.Byte[]
      description: "A chave secreta para <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref> criptografia."
  overload: System.Security.Cryptography.MACTripleDES.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbKey</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "O <code> strTripleDES </code> parâmetro não é um nome válido de uma <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> implementação."
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MACTripleDES.Dispose(Boolean)
  fullName: System.Security.Cryptography.MACTripleDES.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Libera os recursos usados pelo <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref> instância."
  remarks: "Este método é chamado pelo público `Dispose()` método e o `Finalize` método. `Dispose()`invoca o protegido `Dispose(Boolean)` método com o parâmetro descartando definido como `true`. `Finalize`invoca `Dispose` com disposing definido como `false`.       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Security.Cryptography.MACTripleDES>referências.</xref:System.Security.Cryptography.MACTripleDES> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o método é chamado de um &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; implementação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.MACTripleDES.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: MACTripleDES.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.MACTripleDES.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Encaminha os dados gravados para o objeto de <xref href=&quot;System.Security.Cryptography.TripleDES&quot;> </xref> Criptografador para computar o código de autenticação de mensagem (MAC)."
  syntax:
    content: protected override void HashCore (byte[] rgbData, int ibStart, int cbSize);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "Os dados de entrada."
    - id: ibStart
      type: System.Int32
      description: "O deslocamento para a matriz de bytes da qual começar a usar os dados."
    - id: cbSize
      type: System.Int32
      description: "O número de bytes na matriz para usar como dados."
  overload: System.Security.Cryptography.MACTripleDES.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: HashFinal()
  nameWithType: MACTripleDES.HashFinal()
  fullName: System.Security.Cryptography.MACTripleDES.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Retorna o computada Message Authentication Code (MAC) depois de todos os dados são gravados o objeto."
  remarks: "Você pode ler esse valor somente depois que todos os dados são gravados, e você não pode gravar mais dados posteriormente. Criar uma nova instância de <xref:System.Security.Cryptography.MACTripleDES>para cada segmento separado de dados para calcular o MAC para que os dados.</xref:System.Security.Cryptography.MACTripleDES>"
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Mac computada."
  overload: System.Security.Cryptography.MACTripleDES.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.Initialize
  id: Initialize
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: Initialize()
  nameWithType: MACTripleDES.Initialize()
  fullName: System.Security.Cryptography.MACTripleDES.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma instância de <xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;> </xref>."
  remarks: "Este método chama o construtor padrão para a classe."
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.MACTripleDES.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.MACTripleDES.Padding
  id: Padding
  parent: System.Security.Cryptography.MACTripleDES
  langs:
  - csharp
  name: Padding
  nameWithType: MACTripleDES.Padding
  fullName: System.Security.Cryptography.MACTripleDES.Padding
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define o modo de preenchimento usado no algoritmo de hash."
  remarks: "A maioria das mensagens de texto sem formatação não consistem em um número de bytes que preencher completamente blocos. Geralmente, não há bytes suficientes para preencher o último bloco. Quando isso acontece, uma cadeia de caracteres de preenchimento é adicionada ao texto. Por exemplo, se o tamanho do bloco é de 64 bits e o último bloco contém apenas 40 bits, 24 bits de preenchimento serão adicionados. Consulte <xref:System.Security.Cryptography.PaddingMode>para obter uma descrição dos modos específicos.</xref:System.Security.Cryptography.PaddingMode>       Este campo é acessado por meio de <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>propriedade.</xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>"
  syntax:
    content: public System.Security.Cryptography.PaddingMode Padding { get; set; }
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "O modo de preenchimento usado no algoritmo de hash."
  overload: System.Security.Cryptography.MACTripleDES.Padding*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "A propriedade não pode ser definida porque o modo de preenchimento é inválido."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.MACTripleDES.#ctor
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: MACTripleDES()
  nameWithType: MACTripleDES.MACTripleDES()
  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES()
- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: MACTripleDES(Byte[])
  nameWithType: MACTripleDES.MACTripleDES(Byte[])
  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: MACTripleDES(String,Byte[])
  nameWithType: MACTripleDES.MACTripleDES(String,Byte[])
  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MACTripleDES.Dispose(Boolean)
  fullName: System.Security.Cryptography.MACTripleDES.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: MACTripleDES.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.MACTripleDES.HashCore(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.MACTripleDES.HashFinal
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: HashFinal()
  nameWithType: MACTripleDES.HashFinal()
  fullName: System.Security.Cryptography.MACTripleDES.HashFinal()
- uid: System.Security.Cryptography.MACTripleDES.Initialize
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: Initialize()
  nameWithType: MACTripleDES.Initialize()
  fullName: System.Security.Cryptography.MACTripleDES.Initialize()
- uid: System.Security.Cryptography.MACTripleDES.Padding
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: Padding
  nameWithType: MACTripleDES.Padding
  fullName: System.Security.Cryptography.MACTripleDES.Padding
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  nameWithType: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.MACTripleDES.#ctor*
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: MACTripleDES
  nameWithType: MACTripleDES.MACTripleDES
- uid: System.Security.Cryptography.MACTripleDES.Dispose*
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: Dispose
  nameWithType: MACTripleDES.Dispose
- uid: System.Security.Cryptography.MACTripleDES.HashCore*
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: HashCore
  nameWithType: MACTripleDES.HashCore
- uid: System.Security.Cryptography.MACTripleDES.HashFinal*
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: HashFinal
  nameWithType: MACTripleDES.HashFinal
- uid: System.Security.Cryptography.MACTripleDES.Initialize*
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: Initialize
  nameWithType: MACTripleDES.Initialize
- uid: System.Security.Cryptography.MACTripleDES.Padding*
  parent: System.Security.Cryptography.MACTripleDES
  isExternal: false
  name: Padding
  nameWithType: MACTripleDES.Padding
