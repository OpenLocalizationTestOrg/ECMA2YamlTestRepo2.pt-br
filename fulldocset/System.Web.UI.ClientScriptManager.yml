### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ClientScriptManager
  id: ClientScriptManager
  children:
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  langs:
  - csharp
  name: ClientScriptManager
  nameWithType: ClientScriptManager
  fullName: System.Web.UI.ClientScriptManager
  type: Class
  summary: "Define métodos para gerenciar scripts de cliente em aplicativos da Web."
  remarks: "A classe ClientScriptManager é usada para gerenciar scripts de cliente e adicioná-las aos aplicativos da Web. Você pode obter uma referência à classe do ClientScriptManager o <xref:System.Web.UI.Page.ClientScript%2A>propriedade o <xref:System.Web.UI.Page>objeto.</xref:System.Web.UI.Page> </xref:System.Web.UI.Page.ClientScript%2A>       Você pode adicionar um script de cliente para uma página da Web declarativamente, incluindo o script na marcação HTML da página. No entanto, há situações quando adicionar o script de cliente dinamicamente é necessária. Para adicionar um script dinamicamente, use o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método, o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>método, o <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método, ou o <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>método, dependendo de quando e como você deseja adicionar o script.</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> </xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> </xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Para obter mais informações, consulte [como: Adicionar cliente Script dinamicamente para páginas da Web do ASP.NET](~/add/includes/ajax-current-ext-md.md).       A classe ClientScriptManager scripts identifica exclusivamente por uma chave <xref:System.String>e <xref:System.Type>.</xref:System.Type> </xref:System.String> Scripts com a mesma chave e tipo são considerados duplicatas. Usar o tipo de script ajuda a evitar confusos scripts semelhantes de controles de usuário diferentes que podem estar em uso na página.       A classe ClientScriptManager pode ser usada para invocar retornos de chamada de cliente em situações, é necessário para executar o código do servidor do cliente sem executar um postback. Isso é conhecido como executar um retorno de chamada fora de banda para o servidor. Em um retorno de chamada do cliente, uma função de script de cliente envia uma solicitação assíncrona para uma página da Web do ASP.NET. A página da Web executa uma versão modificada do seu ciclo de vida normal para processar o retorno de chamada. Use o <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método para obter uma referência a uma função de cliente que, quando chamado, inicia um retorno de chamada do cliente para um evento de servidor.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Para obter mais informações, consulte [implementando retornos de chamada de cliente sem Postbacks](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Retornos de chamada de script não funcionará em navegadores mais antigos que não oferecem suporte para o modelo de objeto de documento (DOM), e eles requerem que ECMAScript está habilitado no cliente. Para verificar se o navegador oferece suporte a retornos de chamada, use o <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>propriedade, o que pode ser acessada por meio de <xref:System.Web.HttpRequest.Browser%2A>propriedade do ASP.NET intrínseco <xref:System.Web.HttpContext.Request%2A>objeto.</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A> </xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>       Use o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método e o <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>método para definir um evento de postback do cliente.</xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Esses métodos permitem que as funções de script de cliente, quando chamado, para fazer com que o servidor de volta para a página. Um evento de postback do cliente é diferente de um retorno de chamada do cliente em que a página da Web concluir um ciclo de vida normal para processar o evento de postback do cliente.      > [!NOTE] > Se você estiver usando um <xref:System.Web.UI.WebControls.Button>controle e o <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>está definida como `false`, em seguida, você pode usar o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>evento de postback de método para retornar o cliente o <xref:System.Web.UI.WebControls.Button>controle.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> </xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button>       O <xref:System.Web.UI.WebControls.Button.OnClientClick%2A>propriedade o <xref:System.Web.UI.WebControls.Button>controle, <xref:System.Web.UI.WebControls.ImageButton>controle, e <xref:System.Web.UI.WebControls.LinkButton>controle pode ser usado para executar o cliente script</xref:System.Web.UI.WebControls.LinkButton> </xref:System.Web.UI.WebControls.ImageButton> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.WebControls.Button.OnClientClick%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the ClientScriptManager class. Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/t-system.web.ui.clientsc_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/t-system.web.ui.clientsc_1.aspx)]"
  syntax:
    content: public sealed class ClientScriptManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência a uma função de cliente que, quando chamado, inicia um cliente retorno de chamada para um evento de servidor. A função de cliente para esse método sobrecarregado inclui um controle especificado, o argumento, o script de cliente e o contexto."
  remarks: "O método GetCallbackEventReference executa um retorno de chamada fora de banda para o servidor que é uma versão modificada do ciclo de vida normal de uma página. Para obter mais informações, consulte [implementando retornos de chamada de cliente sem Postbacks](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o navegador é o Microsoft Internet Explorer (versão 5.0 ou posterior), o mecanismo de retorno de chamada de script é implementado por meio do objeto Microsoft.XmlHttp COM e requer que o navegador ser definida para executar controles ActiveX. Para outros navegadores, uma XMLHttpRequest usando local DOM do navegador Document Object Model () é usada. Para verificar se um navegador oferece suporte a retornos de chamada de cliente, use o <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>propriedade.</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> Para verificar se um navegador oferece suporte a XML sobre HTTP, use o <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>propriedade.</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> Ambas as propriedades são acessíveis por meio de <xref:System.Web.HttpRequest.Browser%2A>propriedade do ASP.NET intrínseco <xref:System.Web.HttpContext.Request%2A>objeto.</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A>       A sobrecarga de GetCallbackEventReference do <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método executa um retorno de chamada de maneira síncrona usando XML sobre HTTP.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Ao enviar dados de forma síncrona em um cenário de retorno de chamada, retornos de chamada síncronos retornam imediatamente e não bloqueiam o navegador. Nenhum retorno de chamada de dois retornos de chamada síncrona pode executar ao mesmo tempo no navegador. Se um retorno de chamada síncrono segundo for acionado enquanto um está pendente no momento, o retorno de chamada síncrono segundo cancela a primeira e retornará apenas o retorno de chamada segundo.       Para enviar dados de forma assíncrona, use uma das sobrecargas que usa o `useAsync` parâmetro, que é um valor booleano valor controlar esse comportamento. No cenário assíncrono, você pode ter vários retornos de chamada pendentes; No entanto, a ordem em que elas retornam não é garantida para corresponder à ordem na qual elas foram iniciadas.       Além disso, essa sobrecarga do <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método não especifica nenhuma função de cliente para lidar com o caso de uma condição de erro gerado pelo <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> </xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Para especificar um manipulador de retorno de chamada de erro do cliente, use uma das sobrecargas que usa o `clientErrorCallback` parâmetro.       O método de GetCallbackEventReference usa uma cadeia de caracteres opcional `argument` parâmetro e retorna uma cadeia de caracteres. Para passar ou receber vários valores, concatenar os valores na entrada ou retornar a cadeia de caracteres, respectivamente.      > [!NOTE] > Evite usar o estado de exibição na implementação de controle ou página de propriedades que precisam ser atualizados durante operações de retorno de chamada de script. Se as propriedades são sobreviver a solicitações de página, você pode usar o estado da sessão."
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/0153bfa5-9a40-4257-b817-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/0153bfa5-9a40-4257-b817-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O servidor <xref href=&quot;System.Web.UI.Control&quot;> </xref> que manipula o retorno de chamada do cliente. O controle deve implementar o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> de interface e fornecer um <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Um argumento transmitido do script de cliente para o servidor <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "O nome do manipulador de eventos do cliente que recebe o resultado do evento com êxito do servidor."
    - id: context
      type: System.String
      description: "O script de cliente que é avaliado no cliente antes de iniciar o retorno de chamada. O resultado do script é passado para o manipulador de eventos do cliente."
    return:
      type: System.String
      description: "O nome de uma função de cliente que invoca o retorno de chamada do cliente."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Web.UI.Control&quot;> </xref> especificado não implementa o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> interface."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência a uma função de cliente que, quando chamado, inicia um cliente retorno de chamada de eventos do servidor. A função de cliente para esse método sobrecarregado inclui um controle especificado argumento, o script de cliente, contexto e valor booliano."
  remarks: "Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método exige um `useAsync` parâmetro, que permite que você executar o retorno de chamada do cliente de forma assíncrona, definindo o valor como `true`.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> As versões de sobrecarga desse método que não exigem o `useAsync` parâmetro defina o valor como `false` por padrão.       Para obter mais informações sobre esse método, consulte os comentários para a sobrecarga <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O servidor <xref href=&quot;System.Web.UI.Control&quot;> </xref> que manipula o retorno de chamada do cliente. O controle deve implementar o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> de interface e fornecer um <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Um argumento transmitido do script de cliente para o servidor <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "O nome do manipulador de eventos do cliente que recebe o resultado do evento com êxito do servidor."
    - id: context
      type: System.String
      description: "O script de cliente que é avaliado no cliente antes de iniciar o retorno de chamada. O resultado do script é passado para o manipulador de eventos do cliente."
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para executar o retorno de chamada assíncrona. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para executar o retorno de chamada de forma síncrona."
    return:
      type: System.String
      description: "O nome de uma função de cliente que invoca o retorno de chamada do cliente."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Web.UI.Control&quot;> </xref> especificado não implementa o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> interface."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência a uma função de cliente que, quando chamado, inicia um cliente retorno de chamada de eventos do servidor. A função de cliente para esse método sobrecarregado inclui um destino especificado, argumento, script de cliente, contexto, o manipulador de erro e valor booliano."
  remarks: "Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>leva um `target` parâmetro em vez de cadeia de caracteres um <xref:System.Web.UI.Control>parâmetro.</xref:System.Web.UI.Control> </xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Use essa sobrecarga quando desejar que o retorno de chamada para voltar para algo diferente de uma cadeia de caracteres que contém o <xref:System.Web.UI.Control.UniqueID%2A>do controle.</xref:System.Web.UI.Control.UniqueID%2A>       Além disso, essa sobrecarga do <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método exige um `useAsync` e um `clientErrorCallback` parâmetro.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> O `useAsync` parâmetro permite que você executar o retorno de chamada do cliente de forma assíncrona, definindo o valor como `true`. As versões de sobrecarga desse método que não exigem o `useAsync` parâmetro defina o valor como `false` por padrão. O `clientErrorCallback` parâmetro permite que você defina o nome da função de cliente que será chamado se o manipulador de servidor, o <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>método, retornará um erro.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> As versões de sobrecarga desse método que não exigem o `clientErrorCallback` parâmetro definir o valor como nulo.       Para obter mais informações sobre esse método, consulte os comentários para a sobrecarga <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/b09113ee-01c3-4887-82a1-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/b09113ee-01c3-4887-82a1-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: target
      type: System.String
      description: "O nome de um servidor <xref href=&quot;System.Web.UI.Control&quot;> </xref> que manipula o retorno de chamada do cliente. O controle deve implementar o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> de interface e fornecer um <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Um argumento transmitido do script de cliente para o servidor <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "O nome do manipulador de eventos do cliente que recebe o resultado do evento com êxito do servidor."
    - id: context
      type: System.String
      description: "O script de cliente que é avaliado no cliente antes de iniciar o retorno de chamada. O resultado do script é passado para o manipulador de eventos do cliente."
    - id: clientErrorCallback
      type: System.String
      description: "O nome do manipulador de eventos do cliente que recebe o resultado quando ocorre um erro no manipulador de eventos de servidor."
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>para executar o retorno de chamada assíncrona. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para executar o retorno de chamada de forma síncrona."
    return:
      type: System.String
      description: "O nome de uma função de cliente que invoca o retorno de chamada do cliente."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência a uma função de cliente que, quando chamado, inicia um cliente retorno de chamada de eventos do servidor. A função de cliente para esse método sobrecarregado inclui um controle especificado, argumento, script de cliente, contexto, o manipulador de erro e valor booliano."
  remarks: "Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método exige um `useAsync` e um `clientErrorCallback` parâmetro.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> O `useAsync` parâmetro permite que você executar o retorno de chamada do cliente de forma assíncrona, definindo o valor como `true`. As versões de sobrecarga desse método que não exigem o `useAsync` parâmetro defina o valor como `false` por padrão. O `clientErrorCallback` parâmetro permite que você defina o nome da função de cliente que será chamado se o manipulador de servidor (o <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>método) retornará um erro.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> As versões de sobrecarga desse método que não exigem o `clientErrorCallback` parâmetro definir o valor como nulo.       Para obter mais informações sobre esse método, consulte os comentários para a sobrecarga <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>método.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O servidor <xref href=&quot;System.Web.UI.Control&quot;> </xref> que manipula o retorno de chamada do cliente. O controle deve implementar o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> de interface e fornecer um <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Um argumento transmitido do script de cliente para o servidor <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>método.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "O nome do manipulador de eventos do cliente que recebe o resultado do evento com êxito do servidor."
    - id: context
      type: System.String
      description: "O script de cliente que é avaliado no cliente antes de iniciar o retorno de chamada. O resultado do script é passado para o manipulador de eventos do cliente."
    - id: clientErrorCallback
      type: System.String
      description: "O nome do manipulador de eventos do cliente que recebe o resultado quando ocorre um erro no manipulador de eventos de servidor."
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>para executar o retorno de chamada assíncrona. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para executar o retorno de chamada de forma síncrona."
    return:
      type: System.String
      description: "O nome de uma função de cliente que invoca o retorno de chamada do cliente."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Web.UI.Control&quot;> </xref> especificado não implementa o <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> interface."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência com <xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;> </xref> anexado ao início do mesmo, que pode ser usado em um evento de cliente volta para o servidor para o controle especificado e com os argumentos do evento especificado."
  remarks: "Usando o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método requer que o controle que manipula a postagem para implementar o <xref:System.Web.UI.IPostBackEventHandler>interface.</xref:System.Web.UI.IPostBackEventHandler> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Para implementar o <xref:System.Web.UI.IPostBackEventHandler>a interface para um <xref:System.Web.UI.Page>, use a diretiva.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>"
  example:
  - "The following code example demonstrates the use of the GetPostBackClientHyperlink method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_2.aspx)]"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controle de servidor para processar o postback."
    - id: argument
      type: System.String
      description: "O parâmetro passado para o controle de servidor."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa uma chamada de JavaScript para a função de postback que inclui os argumentos de evento e de ID do controle de destino."
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência com <xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;> </xref> anexado ao início do mesmo, que pode ser usado em um evento de cliente para enviar para o servidor para especificado controle com os argumentos de evento especificado e Boolean indicação se deve registrar a postagem de volta para eventos de validação."
  remarks: "Usando o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método requer que o controle que manipula a postagem para implementar o <xref:System.Web.UI.IPostBackEventHandler>interface.</xref:System.Web.UI.IPostBackEventHandler> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Para implementar o <xref:System.Web.UI.IPostBackEventHandler>a interface para um <xref:System.Web.UI.Page>, use a diretiva.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controle de servidor para processar o postback."
    - id: argument
      type: System.String
      description: "O parâmetro passado para o controle de servidor."
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para registrar o evento de postback para validação; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para não registrar o evento de postback para validação."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa uma chamada de JavaScript para a função de postback que inclui os argumentos de evento e de ID do controle de destino."
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Retorna uma cadeia de caracteres que pode ser usada em um evento de cliente para causar um postback para o servidor. A cadeia de caracteres de referência é definida por especificado <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> instância."
  remarks: "Para implementar o <xref:System.Web.UI.IPostBackEventHandler>a interface para um <xref:System.Web.UI.Page>, use a diretiva.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       O <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método pode ser usado com o <xref:System.Web.UI.WebControls.Button>controlar quando o <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>é de propriedade `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Nesse cenário, o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método retorna o cliente executa postback eventos para o <xref:System.Web.UI.WebControls.Button>controle.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "Um <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> que define o postback."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que, quando tratado como um script no cliente, que inicia o cliente de postback."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> parâmetro é<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Retorna uma cadeia de caracteres que pode ser usada em um evento de cliente para causar um postback para o servidor. A cadeia de caracteres de referência é definida pelo controle especificado que manipula a postagem e um argumento de cadeia de caracteres de informações de evento adicionais."
  remarks: "Para implementar o <xref:System.Web.UI.IPostBackEventHandler>a interface para um <xref:System.Web.UI.Page>, use a diretiva.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       O <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método pode ser usado com o <xref:System.Web.UI.WebControls.Button>controlar quando o <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>é de propriedade `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Nesse cenário, o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método retorna o cliente executa postback eventos para o <xref:System.Web.UI.WebControls.Button>controle.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>"
  example:
  - "The following code example demonstrates the use of the GetPostBackEventReference method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_2.aspx)]"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O servidor <xref href=&quot;System.Web.UI.Control&quot;> </xref> que processa a postagem no servidor."
    - id: argument
      type: System.String
      description: "Uma cadeia de caracteres de argumentos opcionais para passar para o controle que processa o postback."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que, quando tratado como um script no cliente, inicia o postback."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Retorna uma cadeia de caracteres que pode ser usada em um evento de cliente para causar um postback para o servidor. A cadeia de caracteres de referência é definida por especificado <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> objeto. Opcionalmente, registra a referência de evento para validação."
  remarks: "Para implementar o <xref:System.Web.UI.IPostBackEventHandler>a interface para um <xref:System.Web.UI.Page>de objeto, use a diretiva.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       O <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método pode ser usado com o <xref:System.Web.UI.WebControls.Button>controlar quando o <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>é de propriedade `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Nesse cenário, o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método retorna o cliente executa postback eventos para o <xref:System.Web.UI.WebControls.Button>controle.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>       Se `registerForEventValidation` é `true`, as chamadas de método GetPostBackEventReference o <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>método para registrar a referência de evento de validação com uma ID exclusiva do controle que representa o controle de cliente que está gerando o evento.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "Um <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> que define o postback."
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para registrar a referência de evento para validação; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que, quando tratado como um script no cliente, que inicia o cliente de postback."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Retorna uma cadeia de caracteres a ser usado em um evento de cliente para causar um postback para o servidor. A cadeia de caracteres de referência é definida pelo controle especificado que manipula a postagem e um argumento de cadeia de caracteres de informações de evento adicionais. Opcionalmente, registra a referência de evento para validação."
  remarks: "Para implementar o <xref:System.Web.UI.IPostBackEventHandler>a interface para um <xref:System.Web.UI.Page>, use a diretiva.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       O <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método pode ser usado com o <xref:System.Web.UI.WebControls.Button>controlar quando o <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>é de propriedade `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Nesse cenário, o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>método retorna o cliente executa postback eventos para o <xref:System.Web.UI.WebControls.Button>controle.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>       Se `registerForEventValidation` for true, o <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>chamadas de método de <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>método para registrar a referência de evento de validação com uma ID exclusiva do controle que representa o controle de cliente que está gerando o evento.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O servidor <xref href=&quot;System.Web.UI.Control&quot;> </xref> que processa a postagem no servidor."
    - id: argument
      type: System.String
      description: "Uma cadeia de caracteres de argumentos opcionais para passar para `control`."
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para registrar a referência de evento para validação; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Uma cadeia de caracteres que, quando tratado como um script no cliente, inicia o postback."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  id: GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Obtém uma referência de URL para um recurso em um assembly."
  remarks: "O método GetWebResourceUrl retorna uma referência de URL para um recurso inserido em um assembly. A referência fornecida não é codificada de URL. Recursos podem ser qualquer arquivo estático, imagens ou arquivos de script. Você especificar o tipo com base no objeto que estarão acessando o recurso.       Um recurso da Web registrado com a página é identificado exclusivamente por seu tipo e nome. Somente um recurso com um par de nome e tipo fornecido pode ser registrado com a página. Tentativa de registrar um recurso que já está registrado não cria uma cópia do recurso registrado.       O método GetWebResourceUrl é usado em conjunto com o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>método para acessar recursos incorporados em assemblies.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> Para obter mais informações sobre o uso de recursos em aplicativos, consulte [visão geral de recursos de página da Web do ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the GetWebResourceUrl method. The *type* parameter in this example is set to the type of class in the assembly containing the resource. The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served. Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`. The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object. If you are using [!INCLUDE[vs_current_short](~/add/includes/ajax-current-ext-md.md)], in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected. If you are compiling the library at the command line, use the  switch to embed the resource.  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```"
  syntax:
    content: public string GetWebResourceUrl (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo do recurso."
    - id: resourceName
      type: System.String
      description: "O nome totalmente qualificado do recurso no assembly."
    return:
      type: System.String
      description: "A referência de URL para o recurso."
  overload: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The web resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The web resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  id: IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se o bloco de script de cliente está registrado com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando a chave especificada do objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método para evitar o registro de scripts duplicados.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Isso é particularmente importante se o script requer uma grande quantidade de recursos de servidor para criar.       Um script de cliente é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas.       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>método chama a sobrecarga que usa tanto uma `key` e um `type` parâmetro com o tipo é definido como um <xref:System.Web.UI.Page>objeto</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>"
  example:
  - >-
    [!code-cs[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_0_1.aspx)]
     [!code-vb[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_0_1.aspx)]
  syntax:
    content: public bool IsClientScriptBlockRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "A chave do bloco de script de cliente para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o bloco de script de cliente está registrado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  id: IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se o bloco de script de cliente está registrado com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando uma chave e o tipo de objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método para evitar o registro de scripts duplicados.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Isso é particularmente importante se o script requer uma grande quantidade de recursos de servidor para criar.       Um script de cliente é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Você especificar o tipo com base no objeto que estarão acessando o recurso. Por exemplo, ao usar um `Page` instância para acessar o recurso, você especificar o `Page` tipo."
  example:
  - "The following code example demonstrates the use of the IsClientScriptBlockRegistered method. Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/b20ef5ac-aa44-4132-8ad3-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/b20ef5ac-aa44-4132-8ad3-_1.aspx)]"
  syntax:
    content: public bool IsClientScriptBlockRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de bloco de script de cliente para pesquisar."
    - id: key
      type: System.String
      description: "A chave do bloco de script de cliente para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o bloco de script de cliente está registrado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O tipo de script de cliente é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  id: IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se o script de cliente incluem está registrado com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando a chave especificada do objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>método para evitar o registro de scripts duplicados.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> Isso é particularmente importante se o script requer uma grande quantidade de recursos de servidor para criar.       Incluir um script de cliente é identificada exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas.       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>método chama a sobrecarga que usa tanto uma `key` e um `type` parâmetro com o tipo é definido como um <xref:System.Web.UI.Page>objeto.</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "A chave do script de cliente incluem para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o script de cliente incluem está registrada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  id: IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se o script de cliente incluem está registrado com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando uma chave e o tipo de objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>inclui o método para evitar o registro de script de cliente duplicados.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> Isso é particularmente importante se o script requer uma grande quantidade de recursos de servidor para criar.       Incluir um script de cliente é identificada exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Você especificar o tipo com base no objeto que estarão acessando o recurso. Por exemplo, ao usar uma instância de página para acessar o recurso, especifique o `Page` tipo."
  example:
  - "The following code example demonstrates the use of the IsClientScriptIncludeRegistered method. Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/1a97f23b-4196-4af6-89d9-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/1a97f23b-4196-4af6-89d9-_1.aspx)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de script de cliente incluem para pesquisar."
    - id: key
      type: System.String
      description: "A chave do script de cliente incluem para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o script de cliente incluem está registrada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O script de cliente incluem o tipo é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  id: IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se a instrução OnSubmit está registrada com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando a chave especificada do objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>método para evitar o registro duplicadas instruções de OnSubmit.</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> Isso é particularmente importante se a instrução exige uma grande quantidade de recursos de servidor para criar.       Uma instrução é identificada exclusivamente por sua chave e seu tipo. Instruções com a mesma chave e tipo são consideradas duplicatas.       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>método chama a sobrecarga que usa tanto uma `key` e um `type` parâmetro com o tipo é definido como um <xref:System.Web.UI.Page>objeto</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "A chave da instrução OnSubmit para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instrução OnSubmit estiver registrada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  id: IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se a instrução OnSubmit está registrada com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando a chave especificada e o tipo de objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>método para evitar o registro duplicadas instruções.</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> Isso é particularmente importante se a instrução exige uma grande quantidade de recursos de servidor para criar.       Uma instrução é identificada exclusivamente por sua chave e seu tipo. Instruções com a mesma chave e tipo são consideradas duplicatas. Você especificar o tipo com base no objeto que estarão acessando o recurso. Por exemplo, ao usar um `Page` instância para acessar o recurso, você especificar o `Page` tipo."
  example:
  - "The following code example demonstrates the use of the IsOnSubmitStatementRegistered method. A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/081fc7d2-9213-49e8-ad42-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/081fc7d2-9213-49e8-ad42-_1.aspx)]"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo da instrução OnSubmit para pesquisar."
    - id: key
      type: System.String
      description: "A chave da instrução OnSubmit para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instrução OnSubmit estiver registrada; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "É o tipo de instrução OnSubmit <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  id: IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se o script de inicialização está registrado com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando a chave especificada do objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método para evitar o registro de scripts duplicados.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Isso é particularmente importante se o script requer uma grande quantidade de recursos de servidor para criar.       Um script de inicialização é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas.       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>método chama a sobrecarga que utiliza uma cadeia de caracteres `key` e um `type` parâmetro com o tipo é definido como um <xref:System.Web.UI.Page>objeto</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsStartupScriptRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "A chave do script de inicialização para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o script de inicialização estiver registrado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  id: IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determina se o script de inicialização está registrado com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando a chave especificada e o tipo de objeto."
  remarks: "Chamar esse método antes de chamar o <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método para evitar o registro de scripts duplicados.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Isso é particularmente importante se o script requer uma grande quantidade de recursos de servidor para criar.       Um script de inicialização do cliente é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas."
  example:
  - "The following code example demonstrates the use of the IsStartupScriptRegistered method. Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/31c56db0-942d-4a34-be1e-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/31c56db0-942d-4a34-be1e-_1.aspx)]"
  syntax:
    content: public bool IsStartupScriptRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de script de inicialização para pesquisar."
    - id: key
      type: System.String
      description: "A chave do script de inicialização para pesquisar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o script de inicialização estiver registrado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O tipo de script de inicialização é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  id: RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra uma declaração de matriz de JavaScript com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um nome de matriz e um valor de matriz do objeto."
  remarks: "The RegisterArrayDeclaration checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter. Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed. If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.  \n  \n If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\\\\") in the `arrayValue` parameter. The value of the `arrayValue` parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the RegisterArrayDeclaration method."
  example:
  - "The following code example demonstrates the use of the RegisterArrayDeclaration and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/fb15aead-cb5d-4924-8be4-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/fb15aead-cb5d-4924-8be4-_1.aspx)]"
  syntax:
    content: public void RegisterArrayDeclaration (string arrayName, string arrayValue);
    parameters:
    - id: arrayName
      type: System.String
      description: "O nome de matriz para registrar."
    - id: arrayValue
      type: System.String
      description: "O valor de matriz ou valores para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>arrayName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o script de cliente com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um script literal, chave e tipo de objeto."
  remarks: "Um script de cliente é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Somente um script com um determinado tipo e o par de chaves pode ser registrado com a página. Tentativa de registrar um script que já está registrado não cria uma duplicata do script.       Chamar o <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>método para determinar se um script de cliente com um par de tipo e a chave especificada já está registrado e evitar desnecessariamente tentando adicionar o script.</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método, você deve garantir que o script fornecido no `script` parâmetro é encapsulado em um `<script>` bloco de elemento.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>       O <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método adiciona um bloco de script na parte superior da página renderizada.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Não há garantia de blocos de script para a saída na ordem em que eles são registrados. Se a ordem dos blocos de script é importante, use um <xref:System.Text.StringBuilder>para reunir os scripts em uma única cadeia de caracteres do objeto e, em seguida, registrá-los em um bloco de script do cliente individual.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/csharp/41f57bff-a479-4a3c-91bb-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/visualbasic/41f57bff-a479-4a3c-91bb-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de script de cliente para registrar."
    - id: key
      type: System.String
      description: "A chave do script de cliente para registrar."
    - id: script
      type: System.String
      description: "O script de cliente literal para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o script de cliente com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um tipo, a chave, o valor literal e Boolean script que indica se é para adicionar marcas de script do objeto."
  remarks: "Um script de cliente é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Somente um script com um determinado tipo e o par de chaves pode ser registrado com a página. Tentativa de registrar um script que já está registrado não cria uma duplicata do script.       Chamar o <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>método para determinar se um script de cliente com um determinado par de chave e tipo já está registrado.</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> Isso permite que você evite desnecessariamente tentando adicionar o script.       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método, você pode indicar se o script fornecido no `script` parâmetro é empacotado com um `<script>` bloco de elemento usando o `addScriptTags` parâmetro.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Configuração `addScriptTags` para `true` indica que as marcas de script serão adicionadas automaticamente.       O <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>método adiciona um bloco de script na parte superior da página renderizada.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Não há garantia de blocos de script para a saída na ordem em que eles são registrados. Se a ordem dos blocos de script é importante, use um <xref:System.Text.StringBuilder>para reunir os scripts em uma única cadeia de caracteres do objeto e, em seguida, registrá-los em um bloco de script do cliente individual.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method. Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/e4221441-a348-44c8-8a15-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/e4221441-a348-44c8-8a15-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de script de cliente para registrar."
    - id: key
      type: System.String
      description: "A chave do script de cliente para registrar."
    - id: script
      type: System.String
      description: "O script de cliente literal para registrar."
    - id: addScriptTags
      type: System.Boolean
      description: "Um valor booliano que indica se é para adicionar marcas de script."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O tipo de bloco de script de cliente é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  id: RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o script de cliente com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> objeto usando uma chave e uma URL, que permite que o script seja chamado a partir do cliente."
  remarks: "Incluir um script de cliente é identificada exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Somente um script com um determinado tipo e o par de chaves pode ser registrado com a página. Tentativa de registrar um script que já está registrado não cria uma duplicata do script.       Chame o <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>método para determinar se um script de cliente incluem com uma determinada chave e par de tipo já está registrado e evitar desnecessariamente tentando adicionar o script.</xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>      > [!NOTE] > Para resolver a URL de cliente, use o <xref:System.Web.UI.Control.ResolveClientUrl%2A>método.</xref:System.Web.UI.Control.ResolveClientUrl%2A> Esse método usa o contexto da URL na qual ele é chamado para resolver o caminho.       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>método chama a sobrecarga que utiliza um `key`, um `URL`e um `type` parâmetro.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>       O método adiciona um bloco de script na parte superior da página renderizada."
  example:
  - For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.
  syntax:
    content: public void RegisterClientScriptInclude (string key, string url);
    parameters:
    - id: key
      type: System.String
      description: "A chave do script de cliente incluem para registrar."
    - id: url
      type: System.String
      description: "A URL do script de cliente incluem para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  id: RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o script de cliente incluem com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando uma URL, uma chave e um tipo de objeto."
  remarks: "Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>leva *chave* e *url* parâmetros para identificar o script, bem como um `type` parâmetro para especificar a identificação do script de cliente incluem.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> Você especificar o tipo com base no objeto que estarão acessando o recurso. Por exemplo, ao usar um `Page` instância para acessar o recurso, você especificar o `Page` tipo.      > [!NOTE] > Para resolver a URL de cliente, use o <xref:System.Web.UI.Control.ResolveClientUrl%2A>método.</xref:System.Web.UI.Control.ResolveClientUrl%2A> Esse método usa o contexto da URL na qual ele é chamado para resolver o caminho.       Este método adiciona um bloco de script na parte superior da página renderizada."
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptInclude method. Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/cbae2904-30a8-438b-9fac-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/cbae2904-30a8-438b-9fac-_1.aspx)]  \n  \n This example requires a JavaScript file named Script_include.js with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public void RegisterClientScriptInclude (Type type, string key, string url);
    parameters:
    - id: type
      type: System.Type
      description: "Incluir o tipo de script de cliente para registrar."
    - id: key
      type: System.String
      description: "A chave do script de cliente incluem para registrar."
    - id: url
      type: System.String
      description: "A URL do script de cliente incluem para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O script de cliente incluem o tipo é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The URL is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The URL is empty."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  id: RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o recurso de script de cliente com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um tipo e um nome de recurso do objeto."
  remarks: "O método RegisterClientScriptResource é usado ao acessar recursos compilados em assemblies por meio do manipulador HTTP WebResource. O método RegisterClientScriptResource registra o script com o <xref:System.Web.UI.Page>de objeto e impede que scripts duplicados.</xref:System.Web.UI.Page> Este método envolve o conteúdo da URL de recurso com um `<script>` bloco de elemento."
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptResource method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```  \n  \n Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class."
  syntax:
    content: public void RegisterClientScriptResource (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo do recurso de script de cliente para registrar."
    - id: resourceName
      type: System.String
      description: "O nome do recurso de script de cliente para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The client resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The client resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  id: RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra um par nome/valor como um atributo personalizado (expando) do controle especificado recebe uma ID de controle, o nome do atributo e o valor de atributo."
  remarks: "O método RegisterExpandoAttribute registra um par nome/valor como um atributo personalizado (expando) em <xref:System.Web.UI.Control>.</xref:System.Web.UI.Control> especificado O atributo expando é definido dinamicamente de JavaScript para preservar a compatibilidade XHTML para marcação do controle processado. As aspas e barras invertidas nos valores do atributo personalizado (expando) são ignoradas. Se você não quiser aspas e barras invertidas de escape, chame o <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>sobrecarregar o método e definir o `encode` parâmetro para `false`.</xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>       Se o atributo expando não foi encontrado ou o controle para adicionar o atributo expando não for encontrado, o script de cliente ainda é emitido, mas isso não afetará o controle."
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);
    parameters:
    - id: controlId
      type: System.String
      description: "O <xref href=&quot;System.Web.UI.Control&quot;> </xref> na página que contém o atributo personalizado."
    - id: attributeName
      type: System.String
      description: "O nome do atributo personalizado para registrar."
    - id: attributeValue
      type: System.String
      description: "O valor do atributo personalizado."
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  id: RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra um par nome/valor como um atributo personalizado (expando) do controle especificado recebe uma ID de controle, um nome de atributo, um valor de atributo e um valor booliano que indica se deve codificar o valor do atributo."
  remarks: "O método RegisterExpandoAttribute registra um par nome/valor como um atributo personalizado (expando) em <xref:System.Web.UI.Control>.</xref:System.Web.UI.Control> especificado O atributo expando é definido dinamicamente de JavaScript para preservar a compatibilidade XHTML para marcação do controle processado. Definir o `encode` parâmetro `true` se você precisa de escape aspas e barras invertidas no valor do seu atributo expando.       Se o atributo expando não foi encontrado ou o controle para adicionar o atributo expando não for encontrado, o script de cliente ainda é emitido, mas isso não afetará o controle."
  example:
  - "The following code example demonstrates how to use the RegisterExpandoAttribute method of the <xref:System.Web.UI.ClientScriptManager> class. The client script in the rendered page sets the `title` attribute of a `<span>` element.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/visualbasic/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/csharp/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]"
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);
    parameters:
    - id: controlId
      type: System.String
      description: "O <xref href=&quot;System.Web.UI.Control&quot;> </xref> na página que contém o atributo personalizado."
    - id: attributeName
      type: System.String
      description: "O nome do atributo personalizado para registrar."
    - id: attributeValue
      type: System.String
      description: "O valor do atributo personalizado."
    - id: encode
      type: System.Boolean
      description: "Um valor booliano que indica se deve codificar o atributo personalizado para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  id: RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra uma referência de evento de validação com uma ID exclusiva do controle que representa o controle de cliente que está gerando o evento."
  remarks: "Para obter mais informações e exemplos, consulte o <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>método.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>"
  example:
  - "The following example shows how to use the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_1_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_1_1.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Uma ID exclusiva que representa o controle de cliente que está gerando o evento."
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  id: RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra uma referência de evento para a validação com <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>."
  remarks: "Para obter mais informações e exemplos, consulte o <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>método.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>"
  syntax:
    content: public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "Um <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> objeto que especifica como o cliente JavaScript é gerado para iniciar um evento de postback."
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  id: RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra uma referência de evento de validação com um argumentos de ID e o evento de controle exclusivo que representa o controle de cliente que está gerando o evento."
  remarks: ''
  example:
  - "The following code example demonstrates using the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]  \n  \n The following code example demonstrates using the RegisterForEventValidation method to register a callback for validation.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Uma ID exclusiva que representa o controle de cliente que está gerando o evento."
    - id: argument
      type: System.String
      description: "Argumentos de eventos passados com o evento de cliente."
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O método é chamado antes do <xref:System.Web.UI.Page.Render*>método.</xref:System.Web.UI.Page.Render*>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  id: RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra um valor oculto com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> objeto."
  remarks: "O método RegisterHiddenField cria oculto `<input>` elemento na página HTML renderizada."
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and RegisterHiddenField methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/0defa6d5-d8c8-43f1-af03-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/0defa6d5-d8c8-43f1-af03-_1.aspx)]"
  syntax:
    content: public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);
    parameters:
    - id: hiddenFieldName
      type: System.String
      description: "O nome do campo oculto para registrar."
    - id: hiddenFieldInitialValue
      type: System.String
      description: "O valor inicial do campo para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hiddenFieldName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  id: RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra uma instrução OnSubmit com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um script literal, uma chave e um tipo de objeto. A instrução é executada quando o <xref href=&quot;System.Web.UI.HtmlControls.HtmlForm&quot;> </xref> é enviada."
  remarks: "Uma instrução OnSubmit é identificada exclusivamente por sua chave e seu tipo. Instruções com a mesma chave e tipo são consideradas duplicatas. Apenas uma declaração com um tipo fornecido e o par de chaves pode ser registrada com a página. Tentativa de registrar uma instrução que já está registrada não criará uma duplicata da instrução.       Chame o <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>método para determinar se uma instrução OnSubmit já está registrada com um determinado par de chave e tipo e evitar desnecessariamente tentando adicionar o script.</xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>       O `script` parâmetro do método RegisterOnSubmitStatement pode conter vários comandos de script, como eles são delimitados corretamente com um ponto e vírgula (;).       O RegisterOnSubmitStatement adiciona um script que é executado antes da página é enviada e lhe dá a oportunidade de cancelar o envio.       Para obter mais informações sobre os formulários HTML e o `OnSubmit` de atributo, consulte o [World Wide Web Consortium (W3C) Web site](http://go.microsoft.com/fwlink/?linkid=37125)."
  example:
  - "The following code example demonstrates the use of the RegisterOnSubmitStatement method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/597b1063-1251-4d00-82f9-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/597b1063-1251-4d00-82f9-_1.aspx)]"
  syntax:
    content: public void RegisterOnSubmitStatement (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo da instrução OnSubmit para registrar."
    - id: key
      type: System.String
      description: "A chave da instrução OnSubmit para registrar."
    - id: script
      type: System.String
      description: "O literal de script da instrução OnSubmit para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  id: RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o script de inicialização com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um script literal, uma chave e um tipo de objeto."
  remarks: "Um script de cliente é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Somente um script com um determinado tipo e o par de chaves pode ser registrado com a página. Tentativa de registrar um script que já está registrado não cria uma duplicata do script.       Chamar o <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>método para determinar se um script de inicialização com um par de tipo e a chave especificada já está registrado e evitar desnecessariamente tentando adicionar o script.</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método, você deve garantir que o script fornecido no `script` parâmetro é empacotado com um `<script>` bloco de elemento.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>       O bloco de script adicionado pelo <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método é executado quando a página termina de ser carregada, mas antes da página <xref:System.Web.UI.Control.OnLoad%2A>é gerado.</xref:System.Web.UI.Control.OnLoad%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Não há garantia de blocos de script para a saída na ordem em que eles são registrados. Se a ordem dos blocos de script é importante, use um <xref:System.Text.StringBuilder>para reunir os scripts em uma única cadeia de caracteres do objeto e, em seguida, registrá-los em um bloco de script do cliente individual.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the beginning and closing script tags are included within the `script` parameter. To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/csharp/77e56a73-ddd0-4c6d-99c5-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/visualbasic/77e56a73-ddd0-4c6d-99c5-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de script de inicialização para registrar."
    - id: key
      type: System.String
      description: "A chave do script de inicialização para registrar."
    - id: script
      type: System.String
      description: "O script de inicialização literal para registrar."
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  id: RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Registra o script de inicialização com o <xref href=&quot;System.Web.UI.Page&quot;> </xref> usando um tipo, uma chave, um literal de script e um valor booliano que indica se é para adicionar marcas de script do objeto."
  remarks: "Um script de inicialização é identificado exclusivamente por sua chave e seu tipo. Scripts com a mesma chave e tipo são considerados duplicatas. Somente um script com um determinado tipo e o par de chaves pode ser registrado com a página. Tentativa de registrar um script que já está registrado não cria uma duplicata do script.       Chamar o <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>método para determinar se um script de inicialização com um par de tipo e a chave especificada já está registrado e evitar desnecessariamente tentando adicionar o script.</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       Esta sobrecarga do <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método, você pode indicar se o script fornecido no `script` parâmetro é empacotado com um `<script>` bloco de elemento usando o `addScriptTags` parâmetro.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Configuração `addScriptTags` para `true` indica que as marcas de script serão adicionadas automaticamente.       O bloco de script adicionado pelo <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>método é executado quando a página termina de ser carregada, mas antes da página <xref:System.Web.UI.Control.OnLoad%2A>é gerado.</xref:System.Web.UI.Control.OnLoad%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Não há garantia de blocos de script para a saída na ordem em que eles são registrados. Se a ordem dos blocos de script é importante, use um <xref:System.Text.StringBuilder>para reunir os scripts em uma única cadeia de caracteres do objeto e, em seguida, registrá-los em um bloco de script do cliente individual.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de script de inicialização para registrar."
    - id: key
      type: System.String
      description: "A chave do script de inicialização para registrar."
    - id: script
      type: System.String
      description: "O script de inicialização literal para registrar."
    - id: addScriptTags
      type: System.Boolean
      description: "Um valor booliano que indica se é para adicionar marcas de script."
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  id: ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Valida um evento de cliente que foi registrado para o evento de validação usando o <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>método.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>"
  syntax:
    content: public void ValidateEvent (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Uma ID exclusiva que representa o controle de cliente que está gerando o evento."
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  id: ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Valida um evento de cliente que foi registrado para o evento de validação usando o <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>método.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>"
  remarks: ''
  example:
  - "The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the ValidateEvent method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_3_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_3_1.aspx)]"
  syntax:
    content: public void ValidateEvent (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Uma ID exclusiva que representa o controle de cliente que está gerando o evento."
    - id: argument
      type: System.String
      description: "Os argumentos de eventos passados com o evento de cliente."
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>uniqueId</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;)."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
- uid: System.Web.UI.PostBackOptions
  parent: System.Web.UI
  isExternal: false
  name: PostBackOptions
  nameWithType: PostBackOptions
  fullName: System.Web.UI.PostBackOptions
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference
  nameWithType: ClientScriptManager.GetCallbackEventReference
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference
  nameWithType: ClientScriptManager.GetPostBackEventReference
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl
  nameWithType: ClientScriptManager.GetWebResourceUrl
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered
  nameWithType: ClientScriptManager.IsStartupScriptRegistered
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration
  nameWithType: ClientScriptManager.RegisterArrayDeclaration
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock
  nameWithType: ClientScriptManager.RegisterClientScriptBlock
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude
  nameWithType: ClientScriptManager.RegisterClientScriptInclude
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource
  nameWithType: ClientScriptManager.RegisterClientScriptResource
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute
  nameWithType: ClientScriptManager.RegisterExpandoAttribute
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation
  nameWithType: ClientScriptManager.RegisterForEventValidation
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField
  nameWithType: ClientScriptManager.RegisterHiddenField
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript
  nameWithType: ClientScriptManager.RegisterStartupScript
- uid: System.Web.UI.ClientScriptManager.ValidateEvent*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent
  nameWithType: ClientScriptManager.ValidateEvent
