### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  id: FileLogTraceListener
  children:
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
  type: Class
  summary: "Fornece um ouvinte simples que direciona a saída de log para o arquivo."
  remarks: "A classe FileLogTraceListener fornece recursos de manutenção automatizada para arquivar os arquivos de log conforme a necessidade, em uma base diária ou por aplicativo. Essa funcionalidade de arquivamento automático ajuda a reduzir as responsabilidades de manutenção de desenvolvedores e administradores.       Uma instância de FileLogTraceListener pode ser adicionada para o <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>ou <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>coleções para redirecionar a saída de log para um arquivo de texto.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> As instâncias dessa classe também podem ser adicionadas a `My.Application.Log` ou `My.Log` (para aplicativos da Web) em [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] aplicativos. Para obter mais informações, consulte [passo a passo: alterando onde My.Application.Log grava informações](~/add/includes/ajax-current-ext-md.md) `.` os principais recursos dessa classe são: 1.  *Funcionalidade de arquivamento*. Os arquivos de log gerados por esta classe são nomeados de acordo com o nome de base e a data, junto com um número para distinguir o arquivo de log de versões sucessivas do log. Novos arquivos de log são criados em uma base conforme necessário.           A forma explícita do nome do arquivo é `baseName`[-`dateStamp`] [-`version`]. log, em que: - o `baseName` parte é o nome do log fundamentais, especificado pelo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>          -A `dateStamp` parte tem o formato &quot;Aaaa-MM-DD&quot; e é mostrada quando <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>for <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>ou <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>          -Se mais de um arquivo de log é necessário com o mesmo `baseName` e `dateStamp`, o `version` parte um positivo `Integer`, é adicionado ao nome do arquivo.      2.  *Várias instâncias da classe*. Se uma instância da classe FileLogTraceListener grava em um arquivo que está em uso:-a classe compartilha o arquivo se ele estiver sendo usado por outra instância da classe FileLogTraceListener no mesmo processo.          -A classe cria um novo arquivo de log usando o nome do próximo disponível se o arquivo está sendo usado por outro processo.      3.  *Acesso thread-safe*. A classe FileLogTraceListener é thread-safe. Isso permite que você com segurança escrever mensagens no log de vários threads sem usar bloqueios.       **Local do arquivo de log** - o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>propriedade usa um <xref:Microsoft.VisualBasic.Logging.LogFileLocation>enumeração para especificar um dos diretórios típicos para gravar o arquivo de log.</xref:Microsoft.VisualBasic.Logging.LogFileLocation> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>      -Para gravar o log para outro local, defina o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>propriedade nesse local.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>       **Nome do arquivo de log** -o nome de base para o arquivo de log for especificado o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>      -O nome do arquivo de log atual pode ser lido o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Ela é derivada de várias outras propriedades e o estado atual dos logs no sistema de arquivos.       **Manutenção de log** -a frequência mínima para a criação de novos arquivos de log é determinada pelo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> Quando o valor é <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>ou <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>, um novo arquivo de log é criado pelo menos uma vez, cada dia ou semana e um carimbo de data é incorporado a <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>nome.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>      -O tamanho máximo (em bytes) do arquivo de log é determinado pelo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> Se o tamanho do arquivo de log exceder esse tamanho, gravadas no log de mensagens adicionais são descartados e, dependendo do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>propriedade, uma exceção será lançada.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>      -A <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>propriedade determina como a quantidade de espaço livre (em bytes) deve estar disponível.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> Isso ajuda a garantir que a classe FileLogTraceListener não consumirá todo o espaço em disco disponível. Use o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>propriedade para especificar o comportamento do log de gravações quando houver menos de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>bytes livres.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>       **Configurações de saída do arquivo de log** - o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>propriedade especifica se o fluxo subjacente deve ser liberado automaticamente depois de cada gravação para o arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>      -A <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>propriedade especifica se deseja acrescentar mensagens para o arquivo de log atual, se permitido ou gravá-las em um novo arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>      -A <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>propriedade especifica a cadeia de caracteres a ser usado para os campos dentro de uma mensagem de log de delimitação.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      -A <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>propriedade especifica a codificação a ser usado ao criar um novo arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>       **Saída de arquivo de log** - o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>e <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>métodos gravam mensagens para o arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> Verifique esses métodos de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>propriedade, junto com todos os logs existentes com o mesmo nome de base para determinar se um novo log deve ser criado.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>      -O <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>método libera quaisquer mensagens atualmente no buffer de saída para o arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>      -O <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>método fecha o arquivo de log para que ele pode ser usado por outros processos.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>       **Habilitar saída** você deve habilitar o rastreamento ou a depuração para usar um ouvinte de rastreamento. A sintaxe a seguir é específico do compilador. Se você usar compiladores diferente de c# ou [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], consulte a documentação para o compilador.      -Para habilitar a depuração em c#, adicione o `/d:DEBUG` sinalizador para a linha de comando do compilador quando você compila o código, ou você pode adicionar `#define DEBUG` à parte superior do seu arquivo. Em [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], adicione o `/d:DEBUG=True` sinalizador para a linha de comando do compilador.      -Para habilitar o rastreamento em c#, adicione o `/d:TRACE` sinalizador para a linha de comando do compilador quando você compila o código ou adiciona `#define TRACE` à parte superior do seu arquivo. Em [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], adicione o `/d:TRACE=True` sinalizador para a linha de comando do compilador.       Para definir o nível de seu ouvinte, edite o arquivo de configuração para seu aplicativo. Nesse arquivo, você pode adicionar um ouvinte, defina seu tipo e definir seus parâmetros, remover um ouvinte ou limpar todos os ouvintes anteriormente definidos pelo aplicativo. O arquivo de configuração deve ser formatado como o exemplo a seguir.       Para executar este exemplo, você deve fornecer o nome totalmente qualificado do assembly. Para obter informações sobre como obter o nome totalmente qualificado do assembly, consulte [nomes de Assembly](~/add/includes/ajax-current-ext-md.md).      ```   <configuration>       <system.diagnostics>           <sharedListeners>               <add name=&quot;FileLog&quot;                   type=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener,                          Microsoft.VisualBasic, Version=8.0.0.0,                          Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,                          processorArchitecture=MSIL&quot;                    initializeData=&quot;FileLogWriter&quot;/>           </sharedListeners>       </system.diagnostics>   </configuration>   ```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class FileLogTraceListener : System.Diagnostics.TraceListener
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FileLogTraceListener()
  nameWithType: FileLogTraceListener.FileLogTraceListener()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Inicializa uma nova instância do <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> classe com o nome padrão."
  remarks: "Esse método define o nome da instância de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>classe FileLogTraceListener.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       Você pode acessar o nome de instância por meio de <xref:System.Diagnostics.TraceListener.Name%2A>propriedade.</xref:System.Diagnostics.TraceListener.Name%2A>"
  syntax:
    content: public FileLogTraceListener ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FileLogTraceListener(String)
  nameWithType: FileLogTraceListener.FileLogTraceListener(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Inicializa uma nova instância do <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> classe com o nome fornecido."
  remarks: "Esse método define o nome da instância de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>classe para `name`.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       Você pode acessar o nome da instância considerado o <xref:System.Diagnostics.TraceListener.Name%2A>propriedade.</xref:System.Diagnostics.TraceListener.Name%2A>"
  syntax:
    content: public FileLogTraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. O nome do objeto de instância."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  id: Append
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Append
  nameWithType: FileLogTraceListener.Append
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Determina se deve acrescentar a saída para o arquivo atual ou gravá-la para um novo arquivo."
  remarks: "Quando a propriedade de acréscimo é `False`, a saída é gravada em um novo arquivo. Quando a propriedade for `True`, a saída será anexada ao arquivo atual, a menos que:-o arquivo de saída está bloqueado por outro processo. Nessa situação, um novo arquivo de log é criado com um número de versão é incorporado a <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>nome.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>      -O tamanho do arquivo atual é maior do que o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>propriedade permite.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> Nessa situação, as mensagens adicionais são descartados e, dependendo do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>propriedade, uma exceção será lançada.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>      -O nome de arquivo existente é atualizado de acordo com a agenda de criação de log especificada pelo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> Nessa situação, um novo arquivo de log é criado e o carimbo de data é incorporado a <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>nome.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>"
  syntax:
    content: public bool Append { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>, com <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> indicando que a saída será anexada ao arquivo atual, e <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> indicando que a saída é gravada em um novo arquivo. A configuração padrão para essa propriedade é <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  id: AutoFlush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Indica se a gravação para o fluxo de arquivos de log libera o buffer."
  remarks: "O `False` configuração para a propriedade AutoFlush fornece o melhor desempenho para a maioria dos aplicativos, porque é mais eficiente para gravar várias mensagens para o arquivo de log ao mesmo tempo. Você pode usar o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>buffer de saída do método para liberar quaisquer mensagens atualmente no arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> Você também pode usar o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>método, o que libera implicitamente o fluxo antes de fechar o arquivo de log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>"
  syntax:
    content: public bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>, com <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> indicando que o fluxo é liberado após cada gravação; caso contrário, as entradas de log são armazenados em buffer e gravadas com mais eficiência. A configuração padrão para essa propriedade é <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  id: BaseFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define o nome de base para os arquivos de log, que é usado para criar o nome completo do arquivo de log."
  remarks: "The BaseFileName property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.  \n  \n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the BaseFileName property.  \n  \n-   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."
  syntax:
    content: public string BaseFileName { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. O nome de base para os arquivos de log. O padrão é o nome do produto do aplicativo."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  id: Close
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: FileLogTraceListener.Close()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Fecha o fluxo subjacente para o arquivo de log atual e libera todos os recursos associados com o fluxo atual."
  remarks: "Você não precisa chamar o método fechar explicitamente, porque o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>classe gerencia o fluxo subjacente.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  id: CustomLocation
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define o diretório de arquivo de log quando o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*>estiver definida como <xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;> </xref>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*>"
  remarks: "Quando a propriedade CustomLocation é definida, ele também define a <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>propriedade <xref:Microsoft.VisualBasic.Logging.LogFileLocation>.</xref:Microsoft.VisualBasic.Logging.LogFileLocation> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>       A propriedade CustomLocation lançará uma exceção se o diretório não pode ser resolvido."
  syntax:
    content: public string CustomLocation { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, que é o nome do diretório do arquivo de log. A configuração padrão para essa propriedade é o diretório do usuário para dados de aplicativos."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  id: Delimiter
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define o delimitador usado para delimitar campos dentro de uma mensagem de log."
  remarks: "A propriedade delimitador permite que você altere o delimitador padrão."
  syntax:
    content: public string Delimiter { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, que é o delimitador usado para campos dentro de uma mensagem de log. A configuração padrão para essa propriedade é o caractere de tabulação."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  id: DiskSpaceExhaustedBehavior
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Determina o que fazer ao gravar o arquivo de log e não há menos espaço livre em disco que o especificado pelo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*>"
  remarks: "Quando a propriedade DiskSpaceExhaustedBehavior é definida como <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>, as mensagens de log são descartadas silenciosamente se não houver espaço em disco reservado.</xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption> Esse é o comportamento padrão e impede que aplicativos simples falhe se o disco fique muito cheio.       Aplicativos mais robustos podem definir a propriedade DiskSpaceExhaustedBehavior <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>e adicione `Try...Catch` blocos ao redor de todo o código que grava no log.</xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>"
  syntax:
    content: public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&quot;></xref>. Determina o que fazer quando a tentativa de gravar no log de arquivo e há menos espaço livre em disco que o especificado pelo <> </> *> propriedade, ou se o tamanho do arquivo de log é maior do que o <> </> *> propriedade permite. O valor padrão é <xref href=&quot;Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileLogTraceListener.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Fecha o fluxo subjacente e, opcionalmente, libera os recursos gerenciados."
  remarks: "Quando o `disposing` parâmetro é `True`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>referências.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Este método chama o `Dispose` método de cada objeto referenciado."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>libera os recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> versões apenas recursos não gerenciados."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  id: Encoding
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define a codificação a ser usado ao criar um novo arquivo de log."
  remarks: "Ao anexar o texto para um arquivo de log, a codificação do arquivo é usada em vez da codificação especificada pela propriedade de codificação."
  syntax:
    content: public System.Text.Encoding Encoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>, que é a codificação a ser usado ao criar um novo arquivo de log.</xref:System.Text.Encoding> O valor padrão dessa propriedade é <xref:System.Text.UTF8Encoding>.</xref:System.Text.UTF8Encoding>"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  id: Flush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: FileLogTraceListener.Flush()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Libera o fluxo subjacente que grava o arquivo de log atual."
  remarks: "Use o método de liberação para gravar dados em buffer todos os arquivo de log atual."
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  id: FullLogFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém o nome completo do arquivo de log atual."
  remarks: "The FullLogFileName property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log-file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n-   The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."
  syntax:
    content: public string FullLogFileName { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, que é o nome completo do arquivo de log atual."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: FileLogTraceListener.GetSupportedAttributes()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém os atributos personalizados de configuração XML com suporte pelo ouvinte de rastreamento."
  remarks: "Os atributos personalizados para o que <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>pode ser usado no arquivo de configuração XML para controlar o comportamento de uma instância de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>classe.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Usar qualquer outro atributo faz com que uma exceção de configuração."
  syntax:
    content: protected override string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>matriz que contém os atributos de configuração XML reconhecidos por este ouvinte."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  id: IncludeHostName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Indica se ou não o nome do host da máquina de log deve ser incluído na saída."
  remarks: "Use a propriedade para configurar o comportamento do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>e <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>métodos.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>"
  syntax:
    content: public bool IncludeHostName { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Use <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> se o identificador de host deve ser incluído; caso contrário, use <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  id: Location
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Location
  nameWithType: FileLogTraceListener.Location
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define o local dos arquivos de log."
  remarks: "Use the Location property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.  \n  \n|**Location value**|**Path**|  \n|------------------------|--------------|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\All Users\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the executable file that started the application.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\\\`username`\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path of the current system's temporary folder.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.|"
  syntax:
    content: public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.LogFileLocation
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;></xref>, que é o local do arquivo de log. O valor padrão é <xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  id: LogFileCreationSchedule
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Determina a data para incluir nos nomes dos arquivos de log."
  remarks: "Atribuir um do <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>valores de enumeração para a propriedade LogFileCreationSchedule para especificar a data para incluir nos nomes dos arquivos de log.</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>       O formato da data é AAAA-MM-DD. Para obter mais informações sobre o formato do nome de arquivo de log, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>      | **LogFileCreationSchedule valor**|**data no nome do arquivo de log**|   |---------------------------------------|-----------------------------------|   | <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>| Incluir a data atual no nome do arquivo de log. |   | <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>| Não inclua a data no nome do arquivo de log. |   | <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>| Incluir o primeiro dia da semana atual no nome do arquivo de log.</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption><br /><br /> A semana começa no sábado. |"
  syntax:
    content: public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&quot;></xref>. Isso indica a data para incluir nos nomes de arquivo de log. O valor padrão é <xref href=&quot;Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  id: MaxFileSize
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define o tamanho máximo permitido do arquivo de log, em bytes."
  remarks: "Use essa propriedade para certificar-se de que os arquivos de log não ficar muito grandes.       Se o tamanho do arquivo de log (em bytes) é maior que o valor dessa propriedade, em seguida, quando o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>tentativas de classe para gravar uma mensagem no log, a mensagem será descartada e a falha é silenciosa ou uma exceção é gerada, dependendo do valor da <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Caso contrário, a mensagem é gravada no log, se a quantidade de espaço livre em disco (em bytes) é menor do que <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>"
  syntax:
    content: public long MaxFileSize { get; set; }
    return:
      type: System.Int64
      description: "<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Este é o tamanho máximo permitido para arquivo de log, em bytes. O valor padrão é 5000000."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Quando essa propriedade é definida como um valor inferior a 1000."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  id: ReserveDiskSpace
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Obtém ou define a quantidade de espaço livre em disco, em bytes, necessário antes que as mensagens podem ser gravadas para o arquivo de log."
  remarks: "Use essa propriedade para certificar-se de que os arquivos de log não preencham completamente o disco.       Se a quantidade de espaço livre de espaço (em bytes) é menor que o valor dessa propriedade, em seguida, quando o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>tentativas de classe para gravar uma mensagem no log, a mensagem será descartada e a falha é silenciosa ou uma exceção é gerada, dependendo do valor da <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>propriedade.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Caso contrário, a mensagem é gravada no log, se o tamanho do arquivo de log (em bytes) é maior do que <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>"
  syntax:
    content: public long ReserveDiskSpace { get; set; }
    return:
      type: System.Int64
      description: "<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Essa é a quantidade de espaço livre em disco necessário. O valor padrão é 10000000."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Quando essa propriedade é definida como um valor menor que 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Grava informações de rastreamento, um objeto de dados e informações de evento para o arquivo de saída ou o fluxo."
  remarks: "Este método: 1.  Formata as informações de contexto e dados de saída.      2.  Cria um novo arquivo de log, se necessário.      3.  Grava as informações para o arquivo de log.       Para obter mais informações sobre a criação de novos arquivos de log, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       A tabela a seguir lista os campos de saída na ordem em que aparecem. Os campos são delimitados pela cadeia de caracteres que o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>propriedade especifica e são seguidas por um terminador de linha.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      | **Campo**|**condição de saída**|**descrição**|   |---------------|--------------------------|---------------------|   | `source`| Sempre | O valor de `name`. |   | `severity`| Sempre | O nome do valor de enumeração de `eventType`. |   | `id`| Sempre | A representação de cadeia de caracteres de `id`. |   | `message`| Sempre | A representação de cadeia de caracteres de `data`. |   | `callStack`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.Callstack%2A>do `eventCache`. |   | `CorrelationID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `DateTime`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.DateTime%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.DateTime%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.Callstack%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ProcessID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.ProcessId%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.ProcessId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ThreadID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `Timestamp`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.Timestamp%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.Timestamp%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `HostName`| Quando a propriedade <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>for `True`. | O nome do computador. |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome da fonte de rastreamento que invocou esse método."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores de enumeração."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: data
      type: System.Object
      description: "Os dados de rastreamento para emitir."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Grava informações de rastreamento, uma matriz de objetos de dados e informações de evento para o arquivo de saída ou o fluxo."
  remarks: "Este método: 1.  Formata as informações de contexto e dados de saída, 2.  Cria um novo log de arquivo, se necessário, 3.  Grava as informações para o arquivo de log.       Para obter mais informações sobre a criação de novos arquivos de log, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       Esta tabela lista os campos de saída na ordem em que aparecem. Os campos são delimitados pela cadeia de caracteres que o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>propriedade especifica e são seguidas por um terminador de linha.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      | **Campo**|**condição de saída**|**descrição**|   |---------------|--------------------------|---------------------|   | `source`| Sempre | O valor de `name`. |   | `severity`| Sempre | O nome do valor de enumeração de `eventType`. |   | `id`| Sempre | A representação de cadeia de caracteres de `id`. |   | `message`| Sempre | A cadeia de caracteres que consiste a representação de cadeia de caracteres de cada elemento na `data`, cada um separado por <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>. |   | `callStack`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.Callstack%2A>do `eventCache`. |   | `CorrelationID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `DateTime`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.DateTime%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.DateTime%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.Callstack%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ProcessID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.ProcessId%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.ProcessId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ThreadID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `Timestamp`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.Timestamp%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.Timestamp%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `HostName`| Quando a propriedade <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>for `True`. | O nome do computador. |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "O nome da fonte de rastreamento que invocou esse método."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores de enumeração."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: data
      type: System.Object[]
      description: "Uma matriz de objetos para a emissão de dados."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Grava informações de rastreamento, uma mensagem eventos de informações e para o arquivo de saída ou o fluxo."
  remarks: "Este método: 1.  Formata as informações de contexto e dados de saída.      2.  Cria um novo arquivo de log, se necessário.      3.  Grava as informações para o arquivo de log.       Para obter mais informações sobre a criação de novos arquivos de log, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       Esta tabela lista os campos de saída na ordem em que aparecem. Os campos são delimitados pela cadeia de caracteres que o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>propriedade especifica e são seguidas por um terminador de linha.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      | **Campo**|**condição de saída**|**descrição**|   |---------------|--------------------------|---------------------|   | `source`| Sempre. | O valor de `name`. |   | `severity`| Sempre. | O nome do valor de enumeração de `eventType`. |   | `id`| Sempre. | A representação de cadeia de caracteres de `id`. |   | `message`| Sempre. | O valor de `message`. |   | `callStack`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.Callstack%2A>do `eventCache`. |   | `CorrelationID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `DateTime`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.DateTime%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.DateTime%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.Callstack%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ProcessID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.ProcessId%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.ProcessId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ThreadID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `Timestamp`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.Timestamp%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.Timestamp%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `HostName`| Quando a propriedade <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>for `True`. | O nome do computador. |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome da fonte de rastreamento que invocou esse método."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores de enumeração."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: message
      type: System.String
      description: "Uma mensagem a ser gravada."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Grava informações de rastreamento, uma matriz formatada de objetos e informações de evento para o arquivo de saída ou o fluxo."
  remarks: "Este método: 1.  Formata as informações de contexto e dados de saída.      2.  Cria um novo o novo arquivo de log, se necessário.      3.  Grava as informações para o arquivo de log.       Para obter mais informações sobre como criar um novo arquivo de log, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       Esta tabela lista os campos de saída na ordem em que aparecem. Os campos são delimitados pela cadeia de caracteres que o <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>propriedade especifica e seguido por um terminador de linha.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      | **Campo**|**condição de saída**|**descrição**|   |---------------|--------------------------|---------------------|   | `source`| Sempre | O valor de `name`. |   | `severity`| Sempre | O nome do valor de enumeração de `eventType`. |   | `id`| Sempre | A representação de cadeia de caracteres de `id`. |   | `message`| Sempre | Os dados em `args` formatado com o `format` cadeia de caracteres e usando a cultura invariável para conversões de cadeia de caracteres. |   | `callStack`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.Callstack%2A>do `eventCache`. |   | `CorrelationID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `DateTime`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.DateTime%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.DateTime%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.Callstack%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ProcessID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.ProcessId%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.ProcessId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `ThreadID`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A propriedade <xref:System.Diagnostics.TraceEventCache.ThreadId%2A>do `eventCache`. |   | `Timestamp`| Quando o sinalizador <xref:System.Diagnostics.TraceOptions>é definido na propriedade <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>. | A representação de cadeia de caracteres da <xref:System.Diagnostics.TraceEventCache.Timestamp%2A>propriedade `eventCache`.</xref:System.Diagnostics.TraceEventCache.Timestamp%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A> </xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceOptions> A cultura invariável é usada para a conversão de cadeia de caracteres. |   | `HostName`| Quando a propriedade <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>for `True`. | O nome do computador. |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Um <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> objeto que contém o atual ID do processo, ID do thread e informações de rastreamento de pilha."
    - id: source
      type: System.String
      description: "Um nome da fonte de rastreamento que invocou esse método."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Uma da <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valores de enumeração."
    - id: id
      type: System.Int32
      description: "Um identificador numérico para o evento."
    - id: format
      type: System.String
      description: "Uma cadeia de caracteres de formato que contém zero ou mais itens de formato, que correspondem aos objetos na `args` matriz."
    - id: args
      type: System.Object[]
      description: "Um <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> matriz que contém zero ou mais objetos a serem formatados."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: FileLogTraceListener.Write(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Grava uma mensagem textual para o disco, sem qualquer informação de contexto adicional."
  remarks: "O método Write grava uma mensagem específica para o arquivo de log, sem qualquer informação de contexto adicional.       Use um do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>métodos para incluir as informações de contexto na saída do log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>"
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. A mensagem personalizada a gravação."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: FileLogTraceListener.WriteLine(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Grava uma mensagem textual para o disco, seguido por um terminador de linha atual, sem qualquer informação de contexto adicional."
  remarks: "O método WriteLine grava uma mensagem específica para o arquivo de log, sem qualquer informação de contexto adicional.       Use um do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>métodos para incluir as informações de contexto na saída do log.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>"
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. A mensagem personalizada a gravação."
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener()
  nameWithType: FileLogTraceListener.FileLogTraceListener()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener(String)
  nameWithType: FileLogTraceListener.FileLogTraceListener(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Append
  nameWithType: FileLogTraceListener.Append
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: FileLogTraceListener.Close()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
- uid: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: DiskSpaceExhaustedOption
  nameWithType: DiskSpaceExhaustedOption
  fullName: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileLogTraceListener.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Flush()
  nameWithType: FileLogTraceListener.Flush()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: FileLogTraceListener.GetSupportedAttributes()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Location
  nameWithType: FileLogTraceListener.Location
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
- uid: Microsoft.VisualBasic.Logging.LogFileLocation
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: LogFileLocation
  nameWithType: LogFileLocation
  fullName: Microsoft.VisualBasic.Logging.LogFileLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
- uid: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: LogFileCreationScheduleOption
  nameWithType: LogFileCreationScheduleOption
  fullName: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: FileLogTraceListener.Write(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: FileLogTraceListener.WriteLine(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Append
  nameWithType: FileLogTraceListener.Append
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Close
  nameWithType: FileLogTraceListener.Close
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: FileLogTraceListener.Dispose
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Flush
  nameWithType: FileLogTraceListener.Flush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: FileLogTraceListener.GetSupportedAttributes
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Location
  nameWithType: FileLogTraceListener.Location
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: FileLogTraceListener.TraceData
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: FileLogTraceListener.TraceEvent
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Write
  nameWithType: FileLogTraceListener.Write
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: FileLogTraceListener.WriteLine
