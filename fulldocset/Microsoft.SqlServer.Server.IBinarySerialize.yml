### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlServer.Server.IBinarySerialize
  id: IBinarySerialize
  children:
  - Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  - Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  langs:
  - csharp
  name: IBinarySerialize
  nameWithType: IBinarySerialize
  fullName: Microsoft.SqlServer.Server.IBinarySerialize
  type: Interface
  summary: "Fornece uma implementação personalizada de tipo definido pelo usuário (UDT) e desserialização e serialização de agregação definida pelo usuário."
  remarks: "Tipos definidos pelo usuário (UDTs) e agregações definidas pelo usuário são necessárias para definir um formato de armazenamento, que pode ser <xref:Microsoft.SqlServer.Server.Format>.`Native` </xref:Microsoft.SqlServer.Server.Format> or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</xref:Microsoft.SqlServer.Server.Format>       <xref:Microsoft.SqlServer.Server.Format>.`Native`</xref:Microsoft.SqlServer.Server.Format> permite que o SQL Server para lidar com a serialização e desserialização automaticamente, mas o formato tem restrições no tipo de tipos pode manipular. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</xref:Microsoft.SqlServer.Server.Format> permite que os tipos definidos pelo usuário e agregações lidar com sua própria serialização. Tipos definidos pelo usuário e agregações devem ser marcadas com <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` </xref:Microsoft.SqlServer.Server.Format> no `SqlUserDefinedType` ou `SqlUserDefinedAggregate` de atributos e deve implementar a interface IBinarySerialize.       Observe que, mesmo com a serialização personalizada, o tamanho total de cada instância deve estar sob o limite máximo permitido, no momento de 8000 bytes."
  syntax:
    content: public interface IBinarySerialize
  implements: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  id: Read(System.IO.BinaryReader)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  langs:
  - csharp
  name: Read(BinaryReader)
  nameWithType: IBinarySerialize.Read(BinaryReader)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)
  type: Method
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "Gera um tipo definido pelo usuário (UDT) ou a agregação definida pelo usuário de seu formato binário."
  remarks: "O método de leitura deve reconstituir o objeto usando as informações gravadas pelo <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>método.</xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>"
  example:
  - "The following example shows the implementation of the Read method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT. This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.  \n  \n [!code-cs[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_1_1.cs)]\n [!code-vb[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_1_1.vb)]"
  syntax:
    content: public void Read (System.IO.BinaryReader r);
    parameters:
    - id: r
      type: System.IO.BinaryReader
      description: "O <xref:System.IO.BinaryReader>fluxo do qual o objeto é desserializado.</xref:System.IO.BinaryReader>"
  overload: Microsoft.SqlServer.Server.IBinarySerialize.Read*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  id: Write(System.IO.BinaryWriter)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  langs:
  - csharp
  name: Write(BinaryWriter)
  nameWithType: IBinarySerialize.Write(BinaryWriter)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "Converte um tipo definido pelo usuário (UDT) ou uma agregação definida pelo usuário em seu formato binário para que ela pode ser persistente."
  remarks: "Gravar informações suficientes para o fluxo binário para permitir que o <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>método para reconstituir o UDT ou agregação definida pelo usuário.</xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>"
  example:
  - "The following example shows the implementation of the Writemethod of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format. The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.  \n  \n [!code-cs[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_0_1.cs)]\n [!code-vb[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_0_1.vb)]"
  syntax:
    content: public void Write (System.IO.BinaryWriter w);
    parameters:
    - id: w
      type: System.IO.BinaryWriter
      description: "O <xref:System.IO.BinaryWriter>fluxo ao qual a agregação definida pelo usuário ou UDT é serializada.</xref:System.IO.BinaryWriter>"
  overload: Microsoft.SqlServer.Server.IBinarySerialize.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Read(BinaryReader)
  nameWithType: IBinarySerialize.Read(BinaryReader)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Write(BinaryWriter)
  nameWithType: IBinarySerialize.Write(BinaryWriter)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read*
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Read
  nameWithType: IBinarySerialize.Read
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write*
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Write
  nameWithType: IBinarySerialize.Write
