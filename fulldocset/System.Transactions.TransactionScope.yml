### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "Torna um bloco de código transacional. Essa classe não pode ser herdada."
  remarks: "O <xref:System.Transactions>infraestrutura fornece dois um modelo de programação explícito com base no <xref:System.Transactions.Transaction>classe, bem como um modelo de programação implícito através da classe TransactionScope, na qual as transações são automaticamente gerenciadas pela infraestrutura.</xref:System.Transactions.Transaction> </xref:System.Transactions>      > [!IMPORTANT] > É recomendável que você crie transações implícitas através da classe TransactionScope, para que o contexto de transação de ambiente é gerenciado automaticamente para você. Você também deve usar o TransactionScope e <xref:System.Transactions.DependentTransaction>classe para aplicativos que exigem o uso da mesma transação em várias chamadas de função ou várias chamadas de thread.</xref:System.Transactions.DependentTransaction> Para obter mais informações sobre esse modelo, consulte o [implementando um implícita transação usando o escopo da transação](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tópico. Para obter mais informações sobre como escrever um aplicativo transacional, consulte [escrevendo um aplicativo transacional](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).       Ao instanciar um TransactionScope pelo `new` instrução, o Gerenciador de transações determina qual transação participar. Uma vez determinado, o escopo sempre participa da transação. A decisão se baseia em dois fatores: se houver uma transação de ambiente e o valor da `TransactionScopeOption` parâmetro no construtor.  A transação de ambiente é a transação que é executado em seu código. Você pode obter uma referência para a transação de ambiente chamando a <xref:System.Transactions.Transaction.Current%2A>propriedade de <xref:System.Transactions.Transaction>classe</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> estática Para obter mais informações sobre como esse parâmetro é usado, consulte a seção &quot;Gerenciamento de fluxo de transação&quot; do [implementando um implícita transação usando o escopo da transação](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tópico.       Se nenhuma exceção ocorrer dentro do escopo da transação (ou seja, entre a inicialização do TransactionScope do objeto e a chamada de seu <xref:System.Transactions.TransactionScope.Dispose%2A>método), em seguida, a transação do qual participa o escopo pode continuar.</xref:System.Transactions.TransactionScope.Dispose%2A> Se uma exceção ocorrer dentro do escopo de transação, as transações nas quais ela participa serão revertida.       Quando seu aplicativo conclui todo o trabalho que deseja executar em uma transação, você deve chamar o <xref:System.Transactions.TransactionScope.Complete%2A>método apenas uma vez para informar que o Gerenciador de transação que é aceitável para confirmar a transação.</xref:System.Transactions.TransactionScope.Complete%2A> Falha ao chamar este método anula a transação.       Uma chamada para o <xref:System.Transactions.TransactionScope.Dispose%2A>método marca o fim do escopo de transação.</xref:System.Transactions.TransactionScope.Dispose%2A> Exceções que ocorrem depois de chamar esse método podem não afetar a transação.       Se você modificar o valor de <xref:System.Transactions.Transaction.Current%2A>dentro de um escopo, uma exceção é lançada quando <xref:System.Transactions.TransactionScope.Dispose%2A>é chamado.</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.Transactions.Transaction.Current%2A> No entanto, no final do escopo, o valor anterior é restaurado. Além disso, se você chamar <xref:System.Transactions.TransactionScope.Dispose%2A>em <xref:System.Transactions.Transaction.Current%2A>dentro de um escopo de transação que criou a transação, a transação é anulada no final do escopo.</xref:System.Transactions.Transaction.Current%2A> </xref:System.Transactions.TransactionScope.Dispose%2A>"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe."
  remarks: "Este construtor cria um novo escopo de transação com a opção de escopo de transação igual a <xref:System.Transactions.TransactionScopeOption>.</xref:System.Transactions.TransactionScopeOption> Isso significa que uma transação é necessária para o novo escopo e a transação de ambiente será usada se já existir uma. Caso contrário, ele cria uma nova transação antes de inserir o escopo."
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe e define a transação especificada como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "A transação a ser definido como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Com suporte no .NET Framework 4.5.1 e versões posteriores]       Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com a opção de fluxo assíncrono especificado."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> enumeração que descreve se a transação de ambiente associada ao escopo de transação será flua por continuações de thread, ao usar a tarefa ou async/await .NET programação assíncrona padrões."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com requisitos especificados."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com o valor de tempo limite especificado e define a transação especificada como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "A transação a ser definido como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>depois que o escopo da transação atingir o tempo limite e anula a transação.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Com suporte no .NET Framework 4.5.1 e versões posteriores]       Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe e define a transação especificada como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "A transação a ser definido como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> enumeração que descreve se a transação de ambiente associada ao escopo de transação será flua por continuações de thread, ao usar a tarefa ou async/await .NET programação assíncrona padrões."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com os requisitos e o valor de tempo limite especificado."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>depois que o escopo da transação atingir o tempo limite e anula a transação.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com requisitos especificados."
  remarks: "Quando você usa o `transactionOptions` parâmetro para especificar um <xref:System.Transactions.IsolationLevel>e o escopo cria uma transação posteriormente, a nova transação está associada com o nível de isolamento especificado.</xref:System.Transactions.IsolationLevel> Se um nível de isolamento é passado junto com uma transação, a transação deve ter um nível de isolamento idênticos ou uma exceção será lançada."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "Um <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> estrutura que descreve as opções de transação a ser usado se uma nova transação é criada. Se uma transação existente for usada, o valor de tempo limite nesse parâmetro se aplica ao escopo de transação. Se esse tempo expirar antes que o escopo é descartado, a transação será anulada."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Com suporte no .NET Framework 4.5.1 e versões posteriores]       Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com a opção de fluxo assíncrono e requisitos especificados."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> enumeração que descreve se a transação de ambiente associada ao escopo de transação será flua por continuações de thread, ao usar a tarefa ou async/await .NET programação assíncrona padrões."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com o valor de tempo limite especificado e o COM+ requisitos de interoperabilidade e define a transação especificada como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
  remarks: '**Observação** esse método usa <xref:System.Security.Permissions.SecurityAction>impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "A transação a ser definido como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>depois que o escopo da transação atingir o tempo limite e anula a transação.</xref:System.TimeSpan>"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "Uma instância do <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> enumeração que descreve como a transação associada interage com transações COM+."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Com suporte no .NET Framework 4.5.1 e versões posteriores]       Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com o valor de tempo limite especificado e define a transação especificada como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "A transação a ser definido como a transação de ambiente, para que use o trabalho transacional dentro do escopo desta transação."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>depois que o escopo da transação atingir o tempo limite e anula a transação.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> enumeração que descreve se a transação de ambiente associada ao escopo de transação será flua por continuações de thread, ao usar a tarefa ou async/await .NET programação assíncrona padrões."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Com suporte no .NET Framework 4.5.1 e versões posteriores]       Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com o valor de tempo limite especificado, requisitos e opção de fluxo assíncrono."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
    - id: scopeTimeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>depois que o escopo da transação atingir o tempo limite e anula a transação.</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> enumeração que descreve se a transação de ambiente associada ao escopo de transação será flua por continuações de thread, ao usar a tarefa ou async/await .NET programação assíncrona padrões."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com o escopo especificado e os requisitos de interoperabilidade COM+ e opções de transação."
  remarks: "Quando você usa o `transactionOptions` parâmetro para especificar um <xref:System.Transactions.IsolationLevel>e o escopo cria uma transação posteriormente, a nova transação está associada com o nível de isolamento especificado.</xref:System.Transactions.IsolationLevel> Se um nível de isolamento é passado junto com uma transação, a transação deve ter um nível de isolamento idênticos ou uma exceção será lançada.       **Observação** esse método usa <xref:System.Security.Permissions.SecurityAction>impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "Um <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> estrutura que descreve as opções de transação a ser usado se uma nova transação é criada. Se uma transação existente for usada, o valor de tempo limite nesse parâmetro se aplica ao escopo de transação. Se esse tempo expirar antes que o escopo é descartado, a transação será anulada."
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "Uma instância do <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref> enumeração que descreve como a transação associada interage com transações COM+."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[Com suporte no .NET Framework 4.5.1 e versões posteriores]       Inicializa uma nova instância do <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref> classe com a opção de fluxo assíncrono e requisitos especificados."
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref> enumeração que descreve os requisitos de transação associados a este escopo de transação."
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "Um <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> estrutura que descreve as opções de transação a ser usado se uma nova transação é criada. Se uma transação existente for usada, o valor de tempo limite nesse parâmetro se aplica ao escopo de transação. Se esse tempo expirar antes que o escopo é descartado, a transação será anulada."
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "Uma instância do <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref> enumeração que descreve se a transação de ambiente associada ao escopo de transação será flua por continuações de thread, ao usar a tarefa ou async/await .NET programação assíncrona padrões."
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Indica que todas as operações dentro do escopo são concluídas com êxito."
  remarks: "Quando estiver satisfeito que todas as operações dentro do escopo são concluídas com êxito, você deve chamar esse método apenas uma vez para informar o Gerenciador de transações que o estado em todos os recursos seja consistente e a transação pode ser confirmada. É muito bom colocar a chamada como a última instrução no `using` bloco.       Para obter mais informações sobre como esse método é usado, consulte o [implementando um implícita transação usando o escopo da transação](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tópico.       Falha ao chamar este método anula a transação, porque o Gerenciador de transações interpreta como uma falha do sistema ou exceções lançadas dentro do escopo da transação. No entanto, observe também que a chamar esse método não garante uma confirmação da transação. É simplesmente uma maneira de informar o Gerenciador de transações do seu status. Depois de chamar esse método, você não pode mais acessar a transação de ambiente por meio de <xref:System.Transactions.Transaction.Current%2A>propriedade e tentar fazer isso resulta em uma exceção sendo lançada.</xref:System.Transactions.Transaction.Current%2A>       O trabalho real de confirmação entre o Gerenciador de recursos ocorre durante o `End Using` instrução se a <xref:System.Transactions.TransactionScope>objeto criou a transação.</xref:System.Transactions.TransactionScope> Se ele não criou a transação, a confirmação ocorre sempre que <xref:System.Transactions.CommittableTransaction.Commit%2A>é chamada pelo proprietário do <xref:System.Transactions.CommittableTransaction>objeto.</xref:System.Transactions.CommittableTransaction> </xref:System.Transactions.CommittableTransaction.Commit%2A> Nesse ponto o Gerenciador de transações chama o recurso de gerentes e informa a confirmação ou reversão, com base em se esse método foi chamado no <xref:System.Transactions.TransactionScope>objeto.</xref:System.Transactions.TransactionScope>"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Este método já foi chamado uma vez."
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Termina o escopo da transação."
  remarks: "Chamar esse método marca o fim do escopo de transação. Se o <xref:System.Transactions.TransactionScope>objeto criou a transação e <xref:System.Transactions.TransactionScope.Complete%2A>foi chamado no escopo, o <xref:System.Transactions.TransactionScope>objeto tenta confirmar a transação quando este método é chamado.</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope>       O uso de c# `using` construção garante que esse método é chamado, mesmo que ocorra uma exceção. Exceções que ocorrem depois de chamar esse método podem não afetar a transação. Esse método também restaura a transação de ambiente para ele estado original. Um <xref:System.Transactions.TransactionAbortedException>é gerada se a transação não é realmente confirmada.</xref:System.Transactions.TransactionAbortedException>       Esse método é síncrono e bloqueia até que a transação foi confirmada ou anulada. Por isso, você deve ser extremamente cuidadoso ao usar esse método em um aplicativo Windows Form (WinForm) ou pode ocorrer um deadlock. Se você chamar esse método dentro de um evento de controle do WinForm (por exemplo, clicar em um botão) e usar o síncrona <xref:System.Windows.Forms.Control.Invoke%2A>método para direcionar o controle para executar algumas tarefas de interface do usuário (por exemplo, altera cores) no meio de processamento de transação, ocorrerá um deadlock.</xref:System.Windows.Forms.Control.Invoke%2A> Isso ocorre porque o <xref:System.Windows.Forms.Control.Invoke%2A>método é síncrono e bloqueia o thread de trabalho até que o thread de interface do usuário de seu trabalho seja concluído.</xref:System.Windows.Forms.Control.Invoke%2A> No entanto, em nosso cenário, o thread de interface do usuário também está esperando para o thread de trabalho confirmar a transação. O resultado é que nenhum é capaz de continuar e o escopo aguardará indefinidamente para conclusão da confirmação. Você deve usar <xref:System.Windows.Forms.Control.BeginInvoke%2A>em vez de <xref:System.Windows.Forms.Control.Invoke%2A>sempre que possível, porque ele é assíncrona e, portanto, menos propenso a deadlocks.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>       Para obter mais informações sobre como esse método é usado, consulte o [implementando um implícita transação usando o escopo da transação](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) tópico."
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
