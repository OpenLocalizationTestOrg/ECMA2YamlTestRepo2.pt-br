### YamlMime:ManagedReference
items:
- uid: System.Messaging.Cursor
  id: Cursor
  children:
  - System.Messaging.Cursor.Close
  - System.Messaging.Cursor.Dispose
  langs:
  - csharp
  name: Cursor
  nameWithType: Cursor
  fullName: System.Messaging.Cursor
  type: Class
  summary: "Um Cursor é usado para manter um local específico em um <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> ao ler as mensagens da fila."
  remarks: "Para obter um cursor para um <xref:System.Messaging.MessageQueue>, chame o <xref:System.Messaging.MessageQueue.CreateCursor%2A>método para essa fila.</xref:System.Messaging.MessageQueue.CreateCursor%2A> </xref:System.Messaging.MessageQueue>       Um Cursor é usado com esses métodos como <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29>e <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29>quando você precisa ler as mensagens que não estão na frente da fila.</xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> </xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> Isso inclui ler mensagens de forma síncrona ou assíncrona. Cursores não precisa ser usado para ler a primeira mensagem em uma fila.       Ao ler mensagens em uma transação, enfileiramento de mensagens não reverte movimento do cursor se a transação foi anulada. Por exemplo, suponha que há uma fila com duas mensagens, A1 e A2. Se você remover a mensagem A1 enquanto estiver em uma transação, enfileiramento de mensagens move o cursor para a mensagem A2. No entanto, se a transação foi anulada por qualquer motivo, mensagem que a1 será inserida novamente na fila, mas o cursor permanecerá apontando para mensagens A2.       Para fechar o cursor, chame <xref:System.Messaging.Cursor.Close%2A>.</xref:System.Messaging.Cursor.Close%2A>"
  syntax:
    content: 'public sealed class Cursor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Close
  id: Close
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fecha o cursor, permitindo que o enfileiramento de mensagens liberar os recursos associados."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.Cursor.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Dispose
  id: Dispose
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.Messaging.Cursor&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.Cursor.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.Cursor.Close
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
- uid: System.Messaging.Cursor.Dispose
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
- uid: System.Messaging.Cursor.Close*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close
  nameWithType: Cursor.Close
- uid: System.Messaging.Cursor.Dispose*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose
  nameWithType: Cursor.Dispose
