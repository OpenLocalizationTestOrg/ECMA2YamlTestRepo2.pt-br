### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventSourceCreationData
  id: EventSourceCreationData
  children:
  - System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  - System.Diagnostics.EventSourceCreationData.CategoryCount
  - System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  - System.Diagnostics.EventSourceCreationData.LogName
  - System.Diagnostics.EventSourceCreationData.MachineName
  - System.Diagnostics.EventSourceCreationData.MessageResourceFile
  - System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  - System.Diagnostics.EventSourceCreationData.Source
  langs:
  - csharp
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
  type: Class
  summary: "Representa as configurações usadas para criar uma fonte de log de eventos no computador local ou um computador remoto."
  remarks: "Use a classe EventSourceCreationData para configurar uma nova origem para gravar entradas localizadas em um log de eventos. Não é necessário usar essa classe para ler de um log de eventos.       Essa classe define os parâmetros de configuração para uma nova fonte de evento e seu log de eventos associado. O log de eventos associado pode ser no computador local ou um computador remoto. Para criar uma nova origem para um log de eventos de novo ou existente no computador local, defina o <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>e <xref:System.Diagnostics.EventSourceCreationData.Source%2A>Propriedades de um EventSourceCreationData e chamar o <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>método.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> Esse método cria a fonte de evento que você especificar na <xref:System.Diagnostics.EventSourceCreationData.Source%2A>propriedade e registra-o para o log de eventos especificado em <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>.</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> Esse comportamento é semelhante a usar a <xref:System.Diagnostics.EventLogInstaller>classe para registrar uma fonte de evento para um log de eventos.</xref:System.Diagnostics.EventLogInstaller>       Use os <xref:System.Diagnostics.EventLog.WriteEvent%2A> <xref:System.Diagnostics.EventLog.WriteEntry%2A>métodos</xref:System.Diagnostics.EventLog.WriteEntry%2A> e para gravar eventos em um log de eventos.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Você deve especificar uma fonte de evento para gravar eventos; Você deve criar e configurar a origem do evento antes de gravar a primeira entrada com a origem.       Crie a nova fonte de evento durante a instalação do seu aplicativo. Isso permite que o tempo para o sistema operacional atualizar sua lista de fontes de eventos registrados e suas configurações. Se o sistema operacional não foi atualizado para a sua lista de fontes de eventos, e você tentar gravar um evento com a nova fonte, que haverá falha na operação de gravação. Você pode configurar uma nova fonte usando um <xref:System.Diagnostics.EventLogInstaller>, ou usando o <xref:System.Diagnostics.EventLog.CreateEventSource%2A>método.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Você deve ter direitos administrativos no computador para criar uma nova fonte de evento.       Você pode criar uma fonte de evento para um log de eventos existente ou um novo log de eventos. Quando você cria uma nova origem para um novo log de eventos, o sistema registra a fonte para que o log, mas o log não é criado até que a primeira entrada é gravada nele.       Cada fonte pode gravar apenas em um log de eventos ao mesmo tempo; No entanto, seu aplicativo pode usar várias fontes para gravar em vários logs de eventos. Por exemplo, seu aplicativo talvez seja necessário várias fontes configuradas para logs de eventos diferentes ou arquivos de recurso diferente.       Para alterar os detalhes de configuração de uma fonte existente, você deve excluir a fonte e, em seguida, criá-lo com a nova configuração. Se outros aplicativos ou componentes de usam a fonte existente, crie uma nova fonte com a configuração atualizada em vez de excluir a fonte existente.       Você pode registrar a origem do evento com os recursos localizados para suas cadeias de caracteres de categoria e a mensagem de evento. Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recursos, em vez de especificar a cadeia de caracteres real. O Visualizador de eventos usa o identificador do recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso localizada com base nas configurações de idioma atual. Você pode registrar um arquivo separado para categorias de evento, mensagens e cadeias de caracteres de inserção de parâmetro, ou você pode registrar o mesmo arquivo de recurso para todos os três tipos de cadeias de caracteres. Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>e as <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>Propriedades para configurar a origem para gravar entradas localizadas para o log de eventos.</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Se seu aplicativo grava os valores de cadeia de caracteres diretamente para o log de eventos, você não precisa definir essas propriedades.       A origem deve ser configurada para gravar entradas localizadas ou para a gravação de cadeias de caracteres diretas. O <xref:System.Diagnostics.EventLog.WriteEntry%2A>método grava a cadeia de caracteres fornecida diretamente para o log de eventos; ele não usa um arquivo de recurso de mensagem localizável.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método gravar eventos usando um arquivo de recurso de mensagem localizada.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se seu aplicativo grava entradas usando identificadores de recursos e os valores de cadeia de caracteres, você deve registrar duas fontes separadas. Por exemplo, configure uma fonte com arquivos de recurso e, em seguida, usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEvent%2A>método grave entradas usando identificadores de recursos para o log de eventos.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Em seguida, criar uma fonte diferente sem arquivos de recurso e usam essa fonte do <xref:System.Diagnostics.EventLog.WriteEntry%2A>método grave cadeias de caracteres diretamente para o log de eventos usando essa fonte.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. The code example verifies that the source does not conflict with an existing event source, and then creates the new event source for the specified event log.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_7_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_7_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_7_1.cs)]"
  syntax:
    content: public class EventSourceCreationData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventSourceCreationData&quot;> </xref> classe com um nome de origem e de log de eventos do evento especificado."
  remarks: "Para gravar entradas para um log de eventos, que você deve primeiro criar uma fonte de evento para o log de eventos. Para registrar uma nova fonte, inicializar um <xref:System.Diagnostics.EventSourceCreationData>da instância, configure as propriedades de instância para o aplicativo e a chamada a <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>método.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData> Depois que a fonte está registrada, você pode gravar entradas do código-fonte usando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>ou <xref:System.Diagnostics.EventLog.WriteEntry%2A>métodos.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A>       Você pode registrar a origem do evento com os recursos localizados para suas cadeias de caracteres de categoria e a mensagem de evento. Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recursos, em vez de especificar a cadeia de caracteres real. O Visualizador de eventos usa o identificador do recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso localizada com base nas configurações de idioma atual. Você pode registrar um arquivo separado para categorias de evento, mensagens e cadeias de caracteres de inserção de parâmetro, ou você pode registrar o mesmo arquivo de recurso para todos os três tipos de cadeias de caracteres. Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>e as <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>Propriedades para configurar a origem para gravar entradas localizadas para o log de eventos.</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Se seu aplicativo grava os valores de cadeia de caracteres diretamente para o log de eventos, você não precisa definir essas propriedades.       A origem deve ser configurada para gravar entradas localizadas ou para a gravação de cadeias de caracteres diretas. Se seu aplicativo grava entradas usando identificadores de recursos e os valores de cadeia de caracteres, você deve registrar duas fontes separadas. Por exemplo, configure uma fonte com arquivos de recurso e, em seguida, usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEvent%2A>método grave entradas usando identificadores de recursos para o log de eventos.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Em seguida, criar uma fonte diferente sem arquivos de recurso e usar essa fonte no <xref:System.Diagnostics.EventLog.WriteEntry%2A>método de gravação de cadeias de caracteres diretamente para o log de eventos.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       A tabela a seguir mostra os valores de propriedade inicial para <xref:System.Diagnostics.EventSourceCreationData>.</xref:System.Diagnostics.EventSourceCreationData>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Diagnostics.EventSourceCreationData.Source%2A>| O `source` parâmetro. |   | <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>| O `logName` parâmetro. |   | <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>| O computador local (&quot;.&quot;). |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>| Zero |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>| `null` (`Nothing` no Visual Basic). |   | <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>| `null` (`Nothing` no Visual Basic). |   | <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>| `null` (`Nothing` in Visual Basic).|</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A></xref:System.Diagnostics.EventSourceCreationData.MachineName%2A></xref:System.Diagnostics.EventSourceCreationData.LogName%2A></xref:System.Diagnostics.EventSourceCreationData.Source%2A>"
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/80a35863-8201-4059-9f79-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/80a35863-8201-4059-9f79-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/80a35863-8201-4059-9f79-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventSourceCreationData (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "O nome para registrar com o log de eventos como uma fonte de entradas."
    - id: logName
      type: System.String
      description: "O nome do log no qual as entradas da origem são gravadas."
  overload: System.Diagnostics.EventSourceCreationData.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o número de categorias no arquivo de recurso de categoria."
  remarks: "Use o CategoryCount e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>Propriedades para gravar eventos com localizadas cadeias de caracteres da categoria.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> O Visualizador de eventos exibe a categoria de uma entrada de evento, se você fornecer uma categoria ao gravar o evento. Categorias de log de eventos são cadeias de caracteres definida pelo aplicativo que ajuda a filtrar eventos, ou fornecem informações adicionais sobre o evento. Por exemplo, seu aplicativo pode definir categorias separadas para diferentes componentes ou operações diferentes.       Categorias de evento são opcionais. Se seu aplicativo não usar categorias, não defina o CategoryCount e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>Propriedades.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       Para obter detalhes sobre a definição de mensagens de eventos e criando arquivos de recursos de evento, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK da plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "O número de categorias no arquivo de recurso de categoria. O valor padrão é zero."
  overload: System.Diagnostics.EventSourceCreationData.CategoryCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A propriedade é definida como um valor negativo ou um valor maior do que &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o caminho do arquivo de recurso que contém cadeias de caracteres de categoria para a fonte."
  remarks: "Use o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>e propriedades de CategoryResourceFile para gravar eventos com localizadas cadeias de caracteres da categoria.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> O Visualizador de eventos exibe a categoria de uma entrada de evento, se você fornecer uma categoria ao gravar o evento. Categorias de log de eventos são cadeias de caracteres definida pelo aplicativo que ajuda a filtrar eventos, ou fornecem informações adicionais sobre o evento. Por exemplo, seu aplicativo pode definir categorias separadas para diferentes componentes ou operações diferentes.       Categorias de evento são opcionais. Se seu aplicativo não usar categorias, não defina o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>e propriedades CategoryResourceFile.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       Para obter detalhes sobre a definição de mensagens de eventos e criando arquivos de recursos de evento, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK da plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_10_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_10_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_10_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "O caminho do arquivo de recurso de categoria. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.LogName
  id: LogName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome do log de eventos para o qual a origem grava entradas."
  remarks: "Use the LogName property to identify the event log that your application writes entries to using the new source. The event log can be a new log or an existing log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not explicitly set the LogName property, the event log defaults to the Application log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n To target an existing log for the new source, set the LogName property to the existing event log name. To create a new event log for the source, you must set the LogName property. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'. The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the LogName property with the \".evt\" file name extension."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_19_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_19_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_19_1.cs)]"
  syntax:
    content: public string LogName { get; set; }
    return:
      type: System.String
      description: "O nome do log de eventos. Isso pode ser um nome de log personalizado, sistema ou aplicativo. O valor padrão é &quot;Application&quot;."
  overload: System.Diagnostics.EventSourceCreationData.LogName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  id: MachineName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome do computador no qual registrar a origem do evento."
  remarks: "O valor do nome do computador não pode ser uma cadeia de caracteres vazia. Se o nome do computador não for definido explicitamente, o padrão é o computador local (&quot;.&quot;).       Ao registrar uma fonte em um computador remoto, você deve ter direitos administrativos no computador para gravar os valores do registro com permissões suficientes."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_21_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_21_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_21_1.cs)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "O nome do sistema no qual registrar a origem do evento. O padrão é o computador local (&quot;.&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome do computador é inválido."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o caminho do arquivo de recurso de mensagem que contém formatação de cadeias de caracteres para a origem da mensagem."
  remarks: "Use a propriedade MessageResourceFile para configurar uma fonte de log de eventos para gravar mensagens de evento localizada. Mensagens de evento são cadeias de caracteres definida pelo aplicativo que descrevem o evento para o usuário.       Seu aplicativo pode gravar entradas de log de eventos usando identificadores de recursos. Um identificador de recurso indexa uma mensagem localizada no MessageResourceFile. O Visualizador de eventos usa o identificador do recurso para localizar e exibir a cadeia de caracteres correspondente do arquivo de recurso de mensagem localizada com base nas configurações de idioma atual.       A origem do evento deve ser configurada para gravar entradas localizadas ou para a gravação de cadeias de caracteres diretas. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método para gravar entradas localizadas para uma fonte configurado com um arquivo de recurso de mensagem.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se seu aplicativo grava cadeias de caracteres de mensagem de evento diretamente, em vez de usar um identificador de recurso em um arquivo de recurso localizado, não defina a propriedade MessageResourceFile.       Para obter detalhes sobre a definição de mensagens de eventos e criando arquivos de recursos de evento, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK da plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_3_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_3_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_3_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "O caminho do arquivo de recurso de mensagem. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o caminho do arquivo de recurso que contém cadeias de caracteres de parâmetro de mensagem para a fonte."
  remarks: "Use a propriedade ParameterResourceFile para configurar uma fonte de log de eventos para gravar mensagens de evento localizada com cadeias de caracteres do parâmetro inserido. Cada mensagem de evento localizada especificada no <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>propriedade pode conter espaços reservados para cadeias de caracteres de inserção.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> Esses espaços reservados são usados para especificar a posição e o identificador de recurso para uma cadeia de caracteres dentro da mensagem de evento independente de linguagem. O Visualizador de eventos preenche os espaços reservados usando as cadeias de caracteres correspondentes do ParameterResourceFile e formata a mensagem de log de eventos para a entrada de evento localizada.       Por exemplo, a seção de um arquivo de texto de mensagem a seguir define uma cadeia de caracteres com um espaço reservado de parâmetro: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` dentro do arquivo de recurso do parâmetro, a cadeia de caracteres de inserção deve ser definida com o identificador de recurso correspondente para o espaço reservado, conforme mostrado abaixo: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` a origem do evento deve ser configurada para gravar entradas localizadas ou para a gravação de cadeias de caracteres diretas. Use o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método para gravar entradas localizadas para uma fonte configurado com um arquivo de recurso de mensagem.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se seu aplicativo grava cadeias de caracteres de mensagem de evento diretamente para o log de eventos, ou se seu <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>propriedade não contém mensagens com espaços reservados de inserção de parâmetro, não defina a propriedade ParameterResourceFile.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>       Para obter detalhes sobre a definição de mensagens de eventos e criando arquivos de recursos de evento, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK da plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_31_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_31_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_31_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "O caminho do arquivo de recurso de parâmetro. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.Source
  id: Source
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome ao registrar com o log de eventos como uma fonte de evento."
  remarks: "O nome de origem é geralmente o nome do aplicativo ou o nome do componente de um aplicativo grande. O <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>método usa a fonte, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>e <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>as propriedades para criar valores do registro no computador de destino para a nova fonte e seu log de eventos associados.</xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> Um novo nome de origem não pode coincidir com o nome de uma fonte existente ou um nome de log de eventos existentes no computador de destino.       Depois que os valores do registro para a fonte são criados, seu aplicativo pode usar a fonte para gravar entradas no log de evento configurado.       Cada fonte pode gravar apenas em um log de eventos ao mesmo tempo; No entanto, seu aplicativo pode usar várias fontes para gravar em vários logs de eventos. Por exemplo, o aplicativo pode exigir várias fontes configuradas para logs de eventos diferentes ou arquivos de recurso diferente."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_13_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_13_1.cs)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "O nome para registrar com o log de eventos como uma fonte de entradas. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
- uid: System.Diagnostics.EventSourceCreationData.#ctor*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData.EventSourceCreationData
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
