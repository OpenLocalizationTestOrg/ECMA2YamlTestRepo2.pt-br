### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellman
  id: ECDiffieHellman
  children:
  - System.Security.Cryptography.ECDiffieHellman.#ctor
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.PublicKey
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  langs:
  - csharp
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
  type: Class
  summary: "Fornece uma classe base abstrata que Diffie-Hellman de curva elíptica (ECDH) podem derivar implementações de algoritmo. Essa classe fornece o conjunto básico de operações que todas as implementações de ECDH devem dar suporte."
  remarks: "Esta classe serve como a classe base abstrata para implementações ECDH."
  syntax:
    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;> </xref> classe."
  remarks: "Este construtor é chamado por classes que derivam de <xref:System.Security.Cryptography.ECDiffieHellman>classe.</xref:System.Security.Cryptography.ECDiffieHellman> O <xref:System.Security.Cryptography.ECDiffieHellmanCng>classe é a única implementação que está atualmente incluída no [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].</xref:System.Security.Cryptography.ECDiffieHellmanCng> Para obter informações sobre como criar uma nova implementação do algoritmo Diffie-Hellman de curva elíptica (ECDH), consulte o <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A>método.</xref:System.Security.Cryptography.ECDiffieHellman.Create%2A>"
  syntax:
    content: protected ECDiffieHellman ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellman.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  id: Create
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Cria uma nova instância da implementação padrão do algoritmo Diffie-Hellman de curva elíptica (ECDH)."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: "Uma nova instância da implementação padrão dessa classe."
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Cria uma nova instância da implementação do algoritmo Diffie-Hellman de curva elíptica (ECDH) especificada."
  remarks: "Se você desenvolver sua própria implementação de um <xref:System.Security.Cryptography.ECDiffieHellman>do objeto, você pode usar a sobrecarga do método de criação para criar um personalizado `algorithm` cadeia de caracteres que especifica sua implementação.</xref:System.Security.Cryptography.ECDiffieHellman>       O `algorithm` parâmetro especifica o nome de uma implementação do algoritmo ECDH. As seguintes cadeias de caracteres todos referir a mesma implementação, o que é a única implementação atualmente com suporte no [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]: - &quot;ECDH&quot; - &quot;ECDiffieHellman&quot; - &quot;ECDiffieHellmanCng&quot; - &quot;System.Security.Cryptography.ECDiffieHellmanCng&quot; Você também pode fornecer o nome de uma implementação ECDH personalizada para o `algorithm` parâmetro. Se você fizer isso, o <xref:System.Security.Cryptography.CryptoConfig>objeto usará para determinar se um objeto ECDH pode ser criado.</xref:System.Security.Cryptography.CryptoConfig>"
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O nome de uma implementação do algoritmo ECDH."
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: "Uma nova instância da implementação desta classe especificada. Se o nome do algoritmo especificado não é mapeado para uma implementação ECDH, este método retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Bytes que podem ser usados como uma chave usando uma função de hash, considerando o nome de público chave e hash do algoritmo do outra parte é derivado."
  remarks: "Essa sobrecarga chama o <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A>método passando `null` como o coloque e acrescentar valores.</xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A>"
  syntax:
    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Chave pública da outra parte."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "O algoritmo de hash a ser usado para derivar o material da chave."
    return:
      type: System.Byte[]
      description: "O material da chave de troca de chaves com a chave pública da outra parte."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Quando implementado em uma classe derivada, deriva bytes que podem ser usados como uma chave usando uma função de hash, dada a chave pública de terceiros, nome do algoritmo de hash, um valor de colocar e um valor de acréscimo."
  syntax:
    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Chave pública da outra parte."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "O algoritmo de hash a ser usado para derivar o material da chave."
    - id: secretPrepend
      type: System.Byte[]
      description: "Um valor precede o segredo derivado antes de hash."
    - id: secretAppend
      type: System.Byte[]
      description: "Um valor para acrescentar ao segredo do derivada antes de hash."
    return:
      type: System.Byte[]
      description: "O material da chave de troca de chaves com a chave pública da outra parte."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Uma classe derivada deve substituir esse método."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Deriva de bytes que podem ser usados como uma chave usando um Hash-based HMAC Message Authentication Code ()."
  remarks: "Essa sobrecarga chama o <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A>método passando `null` como o coloque e acrescentar valores.</xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A>"
  syntax:
    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Chave pública da outra parte."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "O algoritmo de hash a ser usado para derivar o material da chave."
    - id: hmacKey
      type: System.Byte[]
      description: "A chave para o HMAC."
    return:
      type: System.Byte[]
      description: "O material da chave de troca de chaves com a chave pública da outra parte."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Quando implementado em uma classe derivada, deriva bytes que podem ser usados como uma chave usando um Hash-based HMAC Message Authentication Code ()."
  syntax:
    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Chave pública da outra parte."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "O algoritmo de hash a ser usado para derivar o material da chave."
    - id: hmacKey
      type: System.Byte[]
      description: "A chave para o HMAC."
    - id: secretPrepend
      type: System.Byte[]
      description: "Um valor precede o segredo derivado antes de hash."
    - id: secretAppend
      type: System.Byte[]
      description: "Um valor para acrescentar ao segredo do derivada antes de hash."
    return:
      type: System.Byte[]
      description: "O material da chave de troca de chaves com a chave pública da outra parte."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Uma classe derivada deve substituir esse método."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Deriva bytes que podem ser usados como uma chave, dada a chave pública de terceiros."
  remarks: "Para obter mais informações sobre chaves públicas, consulte a <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey>classe.</xref:System.Security.Cryptography.ECDiffieHellmanPublicKey>"
  syntax:
    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Chave pública da outra parte."
    return:
      type: System.Byte[]
      description: "O material da chave de troca de chaves com a chave pública da outra parte."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Quando implementado em uma classe derivada, deriva bytes que podem ser usados como uma chave usando um algoritmo de derivação de segurança de camada de transporte (TLS) Pseudo-Random função (PRF)."
  syntax:
    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Chave pública da outra parte."
    - id: prfLabel
      type: System.Byte[]
      description: "O rótulo codificado em ASCII PRF."
    - id: prfSeed
      type: System.Byte[]
      description: "A semente de PRF 64 bytes."
    return:
      type: System.Byte[]
      description: "O material da chave de troca de chaves com a chave pública da outra parte."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Uma classe derivada deve substituir esse método."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Obtém o nome do algoritmo de troca de chaves."
  remarks: "A implementação do padrão (não substituído), essa propriedade retorna a cadeia de caracteres &quot;ECDiffieHellman&quot;.       Essa propriedade é herdada da <xref:System.Security.Cryptography.AsymmetricAlgorithm>classe base</xref:System.Security.Cryptography.AsymmetricAlgorithm> de"
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "O nome do algoritmo de troca de chaves."
  overload: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Obtém a chave pública que está sendo usada pela instância atual do Diffie-Hellman de curva elíptica (ECDH)."
  syntax:
    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "A parte pública do par de chaves ECDH que está sendo usado por este <xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;> </xref> instância."
  overload: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Obtém o nome do algoritmo de assinatura."
  remarks: "Essa propriedade é herdada da <xref:System.Security.Cryptography.AsymmetricAlgorithm>classe base</xref:System.Security.Cryptography.AsymmetricAlgorithm> de       O algoritmo Diffie-Hellman de curva elíptica (ECDH) é usado para derivação de chaves, geração de assinatura digital não. Portanto, essa propriedade retornará `null`."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create
  nameWithType: ECDiffieHellman.Create
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellman.DeriveKeyFromHash
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellman.DeriveKeyMaterial
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellman.DeriveKeyTls
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
