### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ObjectCache
  id: ObjectCache
  children:
  - System.Runtime.Caching.ObjectCache.#ctor
  - System.Runtime.Caching.ObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  - System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)
  - System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  - System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  - System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  - System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  - System.Runtime.Caching.ObjectCache.Contains(System.String,System.String)
  - System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  - System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities
  - System.Runtime.Caching.ObjectCache.Get(System.String,System.String)
  - System.Runtime.Caching.ObjectCache.GetCacheItem(System.String,System.String)
  - System.Runtime.Caching.ObjectCache.GetCount(System.String)
  - System.Runtime.Caching.ObjectCache.GetEnumerator
  - System.Runtime.Caching.ObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  - System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])
  - System.Runtime.Caching.ObjectCache.Host
  - System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration
  - System.Runtime.Caching.ObjectCache.Item(System.String)
  - System.Runtime.Caching.ObjectCache.Name
  - System.Runtime.Caching.ObjectCache.NoSlidingExpiration
  - System.Runtime.Caching.ObjectCache.Remove(System.String,System.String)
  - System.Runtime.Caching.ObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  - System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)
  - System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  - System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  - System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ObjectCache
  nameWithType: ObjectCache
  fullName: System.Runtime.Caching.ObjectCache
  type: Class
  summary: "Representa um objeto cache e fornece as propriedades e métodos de base para acessar o cache de objetos."
  remarks: "O tipo de ObjectCache é o tipo de principal para o cache de objetos na memória. Para desenvolver uma implementação personalizada de cache, você deriva da classe ObjectCache.      > [!NOTE] > ObjectCache a classe é novo desde a [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)].       Internos <xref:System.Runtime.Caching.MemoryCache>classe deriva da classe ObjectCache.</xref:System.Runtime.Caching.MemoryCache> O <xref:System.Runtime.Caching.MemoryCache>classe é a implementação de cache do objeto concreto apenas no [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] que deriva da classe ObjectCache de</xref:System.Runtime.Caching.MemoryCache>"
  syntax:
    content: 'public abstract class ObjectCache : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>'
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: ObjectCache()
  nameWithType: ObjectCache.ObjectCache()
  fullName: System.Runtime.Caching.ObjectCache.ObjectCache()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Chamado a partir de construtores em classes derivadas para inicializar o <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> classe."
  syntax:
    content: protected ObjectCache ();
    parameters: []
  overload: System.Runtime.Caching.ObjectCache.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  id: Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Add(CacheItem,CacheItemPolicy)
  nameWithType: ObjectCache.Add(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.ObjectCache.Add(CacheItem,CacheItemPolicy)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, tenta inserir uma entrada de cache no cache como um <xref href=&quot;System.Runtime.Caching.CacheItem&quot;> </xref> instância e adiciona os detalhes sobre como a entrada deve ser removida."
  remarks: "O <xref:System.Runtime.Caching.ObjectCache.Add%2A>sobrecargas de método são virtuais (não como abstract) no <xref:System.Runtime.Caching.ObjectCache>de classe, porque o <xref:System.Runtime.Caching.ObjectCache.Add%2A>método chama internamente <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>.</xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> </xref:System.Runtime.Caching.ObjectCache.Add%2A> </xref:System.Runtime.Caching.ObjectCache> </xref:System.Runtime.Caching.ObjectCache.Add%2A> Isso reduz o número das sobrecargas do método que tem um implementador de cache para fornecer. Se uma implementação de cache não requer qualquer comportamento especial para o <xref:System.Runtime.Caching.ObjectCache.Add%2A>método, ela pode implementar apenas a <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>sobrecargas de método.</xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> </xref:System.Runtime.Caching.ObjectCache.Add%2A>"
  syntax:
    content: public virtual bool Add (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);
    parameters:
    - id: item
      type: System.Runtime.Caching.CacheItem
      description: "O objeto a ser adicionado."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "Um objeto que contém detalhes de remoção para a entrada de cache. Esse objeto fornece mais opções para remoção de uma simple expiração absoluta."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a inserção tiver êxito, ou <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não houver um já uma entrada no cache de que tem a mesma chave <code> item </code>."
  overload: System.Runtime.Caching.ObjectCache.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)
  id: Add(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Add(String,Object,DateTimeOffset,String)
  nameWithType: ObjectCache.Add(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.ObjectCache.Add(String,Object,DateTimeOffset,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere uma entrada de cache no cache sem substituir qualquer entrada de cache existente."
  remarks: "O <xref:System.Runtime.Caching.ObjectCache.Add%2A>sobrecargas de método são virtuais (não como abstract) no <xref:System.Runtime.Caching.ObjectCache>de classe, porque o <xref:System.Runtime.Caching.ObjectCache.Add%2A>método chama internamente <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>.</xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> </xref:System.Runtime.Caching.ObjectCache.Add%2A> </xref:System.Runtime.Caching.ObjectCache> </xref:System.Runtime.Caching.ObjectCache.Add%2A> Isso reduz o número das sobrecargas do método que tem um implementador de cache para fornecer. Se uma implementação de cache não requer qualquer comportamento especial para o <xref:System.Runtime.Caching.ObjectCache.Add%2A>método, ela pode implementar apenas a <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>sobrecargas de método.</xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> </xref:System.Runtime.Caching.ObjectCache.Add%2A>"
  syntax:
    content: public virtual bool Add (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: value
      type: System.Object
      description: "O objeto a ser inserido."
    - id: absoluteExpiration
      type: System.DateTimeOffset
      description: "A data fixa e a hora em que a entrada de cache expirará. Este parâmetro é obrigatório quando o <xref:System.Runtime.Caching.ObjectCache.Add*>método é chamado.</xref:System.Runtime.Caching.ObjectCache.Add*>"
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache pode ser adicionada, se as regiões são implementadas. Porque regiões não estão implementadas no [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], o valor padrão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a inserção tiver êxito, ou <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não houver um já uma entrada no cache de que tem a mesma chave <code> key </code>."
  overload: System.Runtime.Caching.ObjectCache.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  id: Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Add(String,Object,CacheItemPolicy,String)
  nameWithType: ObjectCache.Add(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.ObjectCache.Add(String,Object,CacheItemPolicy,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere uma entrada de cache no cache, especificando informações sobre como a entrada será removida."
  remarks: "O <xref:System.Runtime.Caching.ObjectCache.Add%2A>sobrecargas de método são virtuais (não como abstract) no <xref:System.Runtime.Caching.ObjectCache>de classe, porque o <xref:System.Runtime.Caching.ObjectCache.Add%2A>método chama internamente <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>.</xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> </xref:System.Runtime.Caching.ObjectCache.Add%2A> </xref:System.Runtime.Caching.ObjectCache> </xref:System.Runtime.Caching.ObjectCache.Add%2A> Isso reduz o número das sobrecargas do método que tem um implementador de cache para fornecer. Se uma implementação de cache não requer qualquer comportamento especial para o <xref:System.Runtime.Caching.ObjectCache.Add%2A>método, ela pode implementar apenas a <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>sobrecargas de método.</xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> </xref:System.Runtime.Caching.ObjectCache.Add%2A>"
  syntax:
    content: public virtual bool Add (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: value
      type: System.Object
      description: "O objeto a ser inserido."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "Um objeto que contém detalhes de remoção para a entrada de cache. Esse objeto fornece mais opções para remoção de uma simple expiração absoluta."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache pode ser adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a tentativa de inserção tiver êxito, ou <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não houver um já uma entrada no cache com a mesma chave <code> key </code>."
  overload: System.Runtime.Caching.ObjectCache.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  id: AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: AddOrGetExisting(CacheItem,CacheItemPolicy)
  nameWithType: ObjectCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.ObjectCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere especificado <xref href=&quot;System.Runtime.Caching.CacheItem&quot;> </xref> objeto no cache, que especifica informações sobre como a entrada será removida."
  syntax:
    content: public abstract System.Runtime.Caching.CacheItem AddOrGetExisting (System.Runtime.Caching.CacheItem value, System.Runtime.Caching.CacheItemPolicy policy);
    parameters:
    - id: value
      type: System.Runtime.Caching.CacheItem
      description: "O objeto a ser inserido."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "Um objeto que contém detalhes de remoção para a entrada de cache. Esse objeto fornece mais opções para remoção de uma simple expiração absoluta."
    return:
      type: System.Runtime.Caching.CacheItem
      description: "Se uma entrada de cache com a mesma chave existe, a entrada de cache especificado; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ObjectCache.AddOrGetExisting*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  id: AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: AddOrGetExisting(String,Object,DateTimeOffset,String)
  nameWithType: ObjectCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.ObjectCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere uma entrada de cache no cache, usando uma chave, um objeto para a entrada de cache, um valor de expiração absoluta e uma região opcional para adicionar o cache."
  remarks: "Essa sobrecarga de método AddOrGetExisting retorna um valor de objeto, não um <xref:System.Runtime.Caching.CacheItem>objeto.</xref:System.Runtime.Caching.CacheItem>"
  syntax:
    content: public abstract object AddOrGetExisting (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: value
      type: System.Object
      description: "O objeto a ser inserido."
    - id: absoluteExpiration
      type: System.DateTimeOffset
      description: "A data fixa e a hora em que a entrada de cache expirará."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache pode ser adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Se houver uma entrada de cache com a mesma chave, o valor da entrada de cache especificado; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ObjectCache.AddOrGetExisting*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  id: AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: AddOrGetExisting(String,Object,CacheItemPolicy,String)
  nameWithType: ObjectCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.ObjectCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere uma entrada de cache no cache, especificando uma chave e um valor para a entrada de cache e informações sobre como a entrada será removida."
  remarks: "O método AddOrGetExisting retorna um valor de objeto, não um <xref:System.Runtime.Caching.CacheItem>objeto.</xref:System.Runtime.Caching.CacheItem>"
  syntax:
    content: public abstract object AddOrGetExisting (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: value
      type: System.Object
      description: "O objeto a ser inserido."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "Um objeto que contém detalhes de remoção para a entrada de cache. Esse objeto fornece mais opções para remoção de uma simple expiração absoluta."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache pode ser adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Se houver uma entrada de cache com a mesma chave, o valor da entrada de cache especificado; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ObjectCache.AddOrGetExisting*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Contains(System.String,System.String)
  id: Contains(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Contains(String,String)
  nameWithType: ObjectCache.Contains(String,String)
  fullName: System.Runtime.Caching.ObjectCache.Contains(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, verifica se a entrada de cache já existe no cache."
  syntax:
    content: public abstract bool Contains (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache em que o cache pode ser encontrado, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cache contém uma entrada de cache com o mesmo valor de chave como <code> key </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ObjectCache.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  id: CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  nameWithType: ObjectCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, cria um <xref href=&quot;System.Runtime.Caching.CacheEntryChangeMonitor&quot;> </xref> objeto que pode disparar eventos em resposta às alterações em especificado de entradas de cache."
  remarks: "Quando um derivado <xref:System.Runtime.Caching.ObjectCache>classe substitui o método CreateCacheEntryChangeMonitor base, a implementação de cache deve criar um <xref:System.Runtime.Caching.CacheEntryChangeMonitor>objeto.</xref:System.Runtime.Caching.CacheEntryChangeMonitor> </xref:System.Runtime.Caching.ObjectCache> Esse monitor de alteração especializado notifica os chamadores quando há alterações para as entradas de cache que são especificadas no `keys` parâmetro. Por exemplo, se um item monitorado no `keys` parâmetro seja atualizado ou removido do cache, o monitor de alteração criado por este método dispara um evento.       Se uma implementação de cache dá suporte a regiões de cache nomeado, um valor de cadeia de caracteres pode ser especificado como o `regionName` parâmetro. Caso contrário, o parâmetro padrão `null`.      > [!NOTE] > Suporte em implementações de cache nem todos os monitores de alteração de entrada de cache. Para determinar se sua implementação de cache suporta <xref:System.Runtime.Caching.CacheEntryChangeMonitor>objetos, consulte a documentação para a implementação de cache específico.</xref:System.Runtime.Caching.CacheEntryChangeMonitor>"
  syntax:
    content: public abstract System.Runtime.Caching.CacheEntryChangeMonitor CreateCacheEntryChangeMonitor (System.Collections.Generic.IEnumerable<string> keys, string regionName = null);
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Os identificadores exclusivos para entradas de cache monitorar."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache de onde as chaves em cache o `keys` parâmetro existe, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Runtime.Caching.CacheEntryChangeMonitor
      description: "Um monitor de alteração que monitora as entradas de cache no cache."
  overload: System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities
  id: DefaultCacheCapabilities
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: DefaultCacheCapabilities
  nameWithType: ObjectCache.DefaultCacheCapabilities
  fullName: System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, obtém uma descrição dos recursos que fornece uma implementação de cache."
  syntax:
    content: public abstract System.Runtime.Caching.DefaultCacheCapabilities DefaultCacheCapabilities { get; }
    return:
      type: System.Runtime.Caching.DefaultCacheCapabilities
      description: "Uma combinação bit a bit dos sinalizadores que indicam os recursos padrão de uma implementação de cache."
  overload: System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Get(System.String,System.String)
  id: Get(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Get(String,String)
  nameWithType: ObjectCache.Get(String,String)
  fullName: System.Runtime.Caching.ObjectCache.Get(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, obtém a entrada de cache especificado do cache como um objeto."
  syntax:
    content: public abstract object Get (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache obter."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache foi adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "A entrada de cache que é identificada pelo <code> key </code>."
  overload: System.Runtime.Caching.ObjectCache.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.GetCacheItem(System.String,System.String)
  id: GetCacheItem(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: GetCacheItem(String,String)
  nameWithType: ObjectCache.GetCacheItem(String,String)
  fullName: System.Runtime.Caching.ObjectCache.GetCacheItem(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, obtém a entrada de cache especificado do cache como um <xref href=&quot;System.Runtime.Caching.CacheItem&quot;> </xref> instância."
  remarks: "Essa sobrecarga de método existe porque algumas implementações de cache podem estender a <xref:System.Runtime.Caching.CacheItem>classe.</xref:System.Runtime.Caching.CacheItem> Nesse caso, o <xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29>sobrecarga do método necessariamente não retornará todas as informações sobre os dados armazenados em cache.</xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29> No entanto, a sobrecarga do método GetCacheItem permite que os caches personalizados retornar mais do que apenas o valor de cache.       O método GetCacheItem é como o <xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29>método, exceto que o método GetCacheItem retorna a entrada de cache como um <xref:System.Runtime.Caching.CacheItem>instância.</xref:System.Runtime.Caching.CacheItem> </xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29>"
  syntax:
    content: public abstract System.Runtime.Caching.CacheItem GetCacheItem (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache obter."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para que o cache foi adicionado, se as regiões são implementadas. Porque regiões não estão implementadas no [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], o padrão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Runtime.Caching.CacheItem
      description: "A entrada de cache que é identificada pelo <code> key </code>."
  overload: System.Runtime.Caching.ObjectCache.GetCacheItem*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.GetCount(System.String)
  id: GetCount(System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: GetCount(String)
  nameWithType: ObjectCache.GetCount(String)
  fullName: System.Runtime.Caching.ObjectCache.GetCount(String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, obtém o número total de entradas de cache no cache."
  syntax:
    content: public abstract long GetCount (string regionName = null);
    parameters:
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a contagem de entrada de cache deve computada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int64
      description: "O número de entradas de cache no cache. Se <code> regionName </code> não é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, a contagem indica o número de entradas que estão na região de cache especificado."
  overload: System.Runtime.Caching.ObjectCache.GetCount*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.GetEnumerator
  id: GetEnumerator
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ObjectCache.GetEnumerator()
  fullName: System.Runtime.Caching.ObjectCache.GetEnumerator()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, cria um enumerador que pode ser usado para iterar por meio de uma coleção de entradas de cache."
  remarks: "Implementadores de cache podem substituir e estender esse método para fornecer um meio personalizado de iteração em uma coleção de entradas de cache.      > [!NOTE] > Retorna um enumerador é normalmente uma operação mais cara do que retornar a entrada de cache inteiro.       Este método é chamado pelas implementações de interface explícita que o <xref:System.Runtime.Caching.ObjectCache>classe tem para o <xref:System.Collections.IEnumerable.GetEnumerator%2A>e <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>métodos.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.Collections.IEnumerable.GetEnumerator%2A> </xref:System.Runtime.Caching.ObjectCache>"
  syntax:
    content: protected abstract System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "O objeto de enumerador que fornece acesso às entradas de cache no cache."
  overload: System.Runtime.Caching.ObjectCache.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  id: GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: GetValues(IEnumerable<String>,String)
  nameWithType: ObjectCache.GetValues(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.ObjectCache.GetValues(IEnumerable<String>,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, obtém um conjunto de entradas de cache que correspondem às chaves especificadas."
  remarks: "A sobrecarga do método GetValues é uma otimização de desempenho para os caches distribuídos que oferecem suporte à busca várias entradas de cache do cache durante uma chamada de rede único.       Embora um chamador pode passar uma ou mais chaves para o método, não há nenhuma garantia de que todas as chaves representam entradas no cache. Portanto, o dicionário retornado pode conter menos itens do que o número de chaves que foram passados para o método."
  syntax:
    content: public abstract System.Collections.Generic.IDictionary<string,object> GetValues (System.Collections.Generic.IEnumerable<string> keys, string regionName = null);
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção de identificadores exclusivos para as entradas de cache obter."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache ou as entradas foram adicionadas, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário de pares chave/valor que representam as entradas de cache."
  overload: System.Runtime.Caching.ObjectCache.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])
  id: GetValues(System.String,System.String[])
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: GetValues(String,String[])
  nameWithType: ObjectCache.GetValues(String,String[])
  fullName: System.Runtime.Caching.ObjectCache.GetValues(String,String[])
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um conjunto de entradas de cache que correspondem às chaves especificadas."
  remarks: "A sobrecarga do método GetValues é como o <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29>sobrecarga de método, mas permite que você passa a região nomeada usando a sintaxe do parâmetro opcional que é compatível com linguagens gerenciadas, como c#.</xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29>       Esse método é um método virtual porque o <xref:System.Runtime.Caching.ObjectCache>classe fornece uma implementação padrão que passa o `params` de matriz para o <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29>sobrecarga de método.</xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29> </xref:System.Runtime.Caching.ObjectCache>"
  syntax:
    content: public virtual System.Collections.Generic.IDictionary<string,object> GetValues (string regionName, string[] keys);
    parameters:
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache ou as entradas foram adicionadas, se as regiões são implementadas. Porque regiões não estão implementadas no [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], o padrão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: keys
      type: System.String[]
      description: "Uma coleção de identificadores exclusivos para as entradas de cache obter."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um dicionário de pares chave/valor que representam as entradas de cache."
  overload: System.Runtime.Caching.ObjectCache.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Host
  id: Host
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Host
  nameWithType: ObjectCache.Host
  fullName: System.Runtime.Caching.ObjectCache.Host
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém ou define uma referência a um ambiente de hospedagem gerenciado que está disponível para <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> implementações e que pode fornecer serviços de host específicos para <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> implementações."
  remarks: "A propriedade de Host é destinada ao uso por [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] ambientes de host e ambiente de host por implementações de cache que implementam o comportamento depende do .NET Framework.       A tabela a seguir lista o conjunto de serviços de ambiente de host que podem estar disponíveis de um ambiente de hospedagem gerenciado e que estão disponíveis para <xref:System.Runtime.Caching.ObjectCache>implementações por meio da propriedade de Host: | Serviço | Descrição |   |-------------|-----------------|   | <xref:System.Runtime.Caching.Hosting.IApplicationIdentifier>| Permite que os ambientes de hospedagem fornecer identificadores de domínio de aplicativo que podem ser necessários para uma implementação de cache para recursos como identificar os contadores de desempenho. |   | <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>| Permite que os ambientes de hospedagem fornecer um sistema de notificação de alteração de arquivo personalizado, em vez de usar um fornecido no [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. |   | <xref:System.Runtime.Caching.Hosting.IMemoryCacheManager>| Permite que o consumo de memória de cache de relatório de implementações de cache para o ambiente de host.</xref:System.Runtime.Caching.Hosting.IMemoryCacheManager> </xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> </xref:System.Runtime.Caching.Hosting.IApplicationIdentifier> </xref:System.Runtime.Caching.ObjectCache> Isso permite que os ambientes de host gerenciar centralmente o consumo de memória em várias implementações de cache. |      > [!NOTE] > Chamadores do valor dessa propriedade exigem permissões de segurança de acesso do código irrestrito."
  syntax:
    content: public static IServiceProvider Host { get; set; }
    return:
      type: System.IServiceProvider
      description: "Uma referência a um ambiente de hospedagem gerenciado com reconhecimento de cache."
  overload: System.Runtime.Caching.ObjectCache.Host*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "É o valor que está sendo atribuído à propriedade <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Foi feita uma tentativa para definir o valor da propriedade mais de uma vez."
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration
  id: InfiniteAbsoluteExpiration
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: InfiniteAbsoluteExpiration
  nameWithType: ObjectCache.InfiniteAbsoluteExpiration
  fullName: System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration
  type: Field
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um valor que indica que uma entrada de cache não tem nenhum expiração absoluta."
  remarks: "Uma entrada de cache que é inserida no cache com o valor de campo InfiniteAbsoluteExpiration definido como o valor de expiração nunca expirará baseado em um ponto absoluto na hora. No entanto, uma entrada de cache com essa configuração pode ser removida do cache por outros motivos que são determinados por uma implementação de cache específica, como uma remoção do evento monitor de alteração devida à pressão de memória."
  syntax:
    content: public static readonly DateTimeOffset InfiniteAbsoluteExpiration;
    return:
      type: System.DateTimeOffset
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Item(System.String)
  id: Item(System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Item(String)
  nameWithType: ObjectCache.Item(String)
  fullName: System.Runtime.Caching.ObjectCache.Item(String)
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém ou define o indexador padrão para o <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> classe."
  remarks: "O comportamento do acessador set dessa propriedade é como o <xref:System.Runtime.Caching.MemoryCache.Set%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29>método.</xref:System.Runtime.Caching.MemoryCache.Set%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29> Internamente, uma implementação de cache foi possível definir a expiração absoluta do valor especificado para o <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration>método.</xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration> No entanto esse comportamento é, basicamente, até a implementação de cache.       O comportamento do acessador get é como chamar o <xref:System.Collections.Specialized.NameValueCollection.Get%28System.String%29>método e usar `null` para o nome da região.</xref:System.Collections.Specialized.NameValueCollection.Get%28System.String%29>"
  syntax:
    content: public abstract object this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para uma entrada de cache no cache."
    return:
      type: System.Object
      description: "Uma chave que serve como um indexador para a instância de cache."
  overload: System.Runtime.Caching.ObjectCache.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Name
  id: Name
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Name
  nameWithType: ObjectCache.Name
  fullName: System.Runtime.Caching.ObjectCache.Name
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém o nome de um determinado <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> instância."
  remarks: "Algumas implementações de cache podem oferecer suporte a várias instâncias do cache que está em execução em um único aplicativo. Essa propriedade permite que os implementadores de cache retorna um nome que identifica uma instância específica do cache."
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "O nome de uma instância específica do cache."
  overload: System.Runtime.Caching.ObjectCache.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.NoSlidingExpiration
  id: NoSlidingExpiration
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: NoSlidingExpiration
  nameWithType: ObjectCache.NoSlidingExpiration
  fullName: System.Runtime.Caching.ObjectCache.NoSlidingExpiration
  type: Field
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Indica que uma entrada de cache não tem nenhum tempo de expiração deslizante."
  remarks: "Expiração se baseia em uma janela definida de tempo ou duração também é chamada como a expiração deslizante. Normalmente, uma implementação de cache que remove itens com base em se a expiração deslizante removerá um item que não tiver sido acessado na janela de tempo especificada.       Uma entrada de cache que é inserida no cache com o valor do campo NoSlidingExpiration definido como o valor de expiração nunca deve ser removida devido à atividade não em uma janela deslizante do tempo. No entanto, um item de cache pode ser removido se ele tem uma expiração absoluta, ou se algum outro evento de remoção ocorrer, tal uma alteração monitor ou memória pressão."
  syntax:
    content: public static readonly TimeSpan NoSlidingExpiration;
    return:
      type: System.TimeSpan
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Remove(System.String,System.String)
  id: Remove(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Remove(String,String)
  nameWithType: ObjectCache.Remove(String,String)
  fullName: System.Runtime.Caching.ObjectCache.Remove(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, remove a entrada de cache do cache."
  remarks: "Se você substituir esse método em uma implementação personalizada de cache, se houver uma entrada de cache no cache que corresponde à `key`, o valor do item removido deve ser retornado. Se nada foi removido do cache, o método deve retornar `null`.      > [!NOTE] > Algumas implementações de cache distribuído podem não oferecer suporte a habilidade de retornar o valor que foi removido do cache. Isso pode ser porque a implementação de cache não oferece suporte para retornar o valor de um item removido do cache. Ele também pode ser porque o marshaling do objeto como um valor de retorno é muito caro. Nesses casos, as implementações de cache podem retornar `null`."
  syntax:
    content: public abstract object Remove (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache foi adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Um objeto que representa o valor da entrada de cache removido que foi especificado pela chave, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a entrada especificada não foi encontrada."
  overload: System.Runtime.Caching.ObjectCache.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  id: Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Set(CacheItem,CacheItemPolicy)
  nameWithType: ObjectCache.Set(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.ObjectCache.Set(CacheItem,CacheItemPolicy)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere a entrada de cache no cache como um <xref href=&quot;System.Runtime.Caching.CacheItem&quot;> </xref> instância, especificando informações sobre como a entrada será removida."
  remarks: "Se a chave para `item` não existir, `item` será inserido como uma nova entrada de cache. Se um item com uma chave que corresponda `item` existir, o valor de `item` é usado para atualizar ou substituir o valor da entrada de cache existente."
  syntax:
    content: public abstract void Set (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);
    parameters:
    - id: item
      type: System.Runtime.Caching.CacheItem
      description: "O item de cache para adicionar."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "Um objeto que contém detalhes de remoção para a entrada de cache. Esse objeto fornece mais opções para remoção de uma simple expiração absoluta."
  overload: System.Runtime.Caching.ObjectCache.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)
  id: Set(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Set(String,Object,DateTimeOffset,String)
  nameWithType: ObjectCache.Set(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.ObjectCache.Set(String,Object,DateTimeOffset,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere uma entrada de cache no cache, especificando detalhes com base em tempo de expiração."
  remarks: "Se um item que corresponda `key` não existe no cache, `value` e `key` são usados para inserir como uma nova entrada de cache. Se um item com uma chave que corresponda `item` existir, a entrada de cache é atualizada ou substituída usando `value`."
  syntax:
    content: public abstract void Set (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: value
      type: System.Object
      description: "O objeto a ser inserido."
    - id: absoluteExpiration
      type: System.DateTimeOffset
      description: "A data fixa e a hora em que a entrada de cache expirará."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache pode ser adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ObjectCache.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  id: Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: Set(String,Object,CacheItemPolicy,String)
  nameWithType: ObjectCache.Set(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.ObjectCache.Set(String,Object,CacheItemPolicy,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Quando substituído em uma classe derivada, insere uma entrada de cache no cache."
  remarks: "Essa sobrecarga de método permite que você fornecer mais detalhes de remoção ou expiração daqueles que estão disponíveis em tempo de expiração absoluta.       Se um item que corresponda `key` não existe no cache, `value` e `key` são usados para inserir como uma nova entrada de cache. Se um item com uma chave que corresponda `item` existir, a entrada de cache é atualizada ou substituída usando `value`."
  syntax:
    content: public abstract void Set (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "Um identificador exclusivo para a entrada de cache."
    - id: value
      type: System.Object
      description: "O objeto a ser inserido."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "Um objeto que contém detalhes de remoção para a entrada de cache. Esse objeto fornece mais opções para remoção de uma simple expiração absoluta."
    - id: regionName
      type: System.String
      description: "Opcional. Uma região nomeada no cache para o qual a entrada de cache pode ser adicionada, se as regiões são implementadas. O valor padrão para o parâmetro opcional é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ObjectCache.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  isEii: true
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: ObjectCache.System.Collections.Generic.IEnumerable()
  fullName: System.Runtime.Caching.ObjectCache.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  syntax:
    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> IEnumerable<KeyValuePair<string,object>>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "A ser adicionado."
  overload: System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Object>>#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Runtime.Caching.ObjectCache
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ObjectCache.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Runtime.Caching.ObjectCache.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Oferece suporte à iteração em uma coleção genérica."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando um derivado <xref:System.Runtime.Caching.ObjectCache>instância é convertida em um <xref:System.Collections.IEnumerable>interface.</xref:System.Collections.IEnumerable> </xref:System.Runtime.Caching.ObjectCache>       Os desenvolvedores podem usar esse método para iterar por meio de uma coleção genérica de entradas de cache.       Esse é o padrão <xref:System.Collections.IEnumerable.GetEnumerator%2A>implementação chama internamente o <xref:System.Runtime.Caching.ObjectCache.GetEnumerator%2A>método.</xref:System.Runtime.Caching.ObjectCache.GetEnumerator%2A> </xref:System.Collections.IEnumerable.GetEnumerator%2A>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "O objeto de enumerador que fornece acesso aos itens no cache."
  overload: System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Caching.ObjectCache.#ctor
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: ObjectCache()
  nameWithType: ObjectCache.ObjectCache()
  fullName: System.Runtime.Caching.ObjectCache.ObjectCache()
- uid: System.Runtime.Caching.ObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Add(CacheItem,CacheItemPolicy)
  nameWithType: ObjectCache.Add(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.ObjectCache.Add(CacheItem,CacheItemPolicy)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.CacheItem
  parent: System.Runtime.Caching
  isExternal: false
  name: CacheItem
  nameWithType: CacheItem
  fullName: System.Runtime.Caching.CacheItem
- uid: System.Runtime.Caching.CacheItemPolicy
  parent: System.Runtime.Caching
  isExternal: false
  name: CacheItemPolicy
  nameWithType: CacheItemPolicy
  fullName: System.Runtime.Caching.CacheItemPolicy
- uid: System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Add(String,Object,DateTimeOffset,String)
  nameWithType: ObjectCache.Add(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.ObjectCache.Add(String,Object,DateTimeOffset,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Add(String,Object,CacheItemPolicy,String)
  nameWithType: ObjectCache.Add(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.ObjectCache.Add(String,Object,CacheItemPolicy,String)
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: AddOrGetExisting(CacheItem,CacheItemPolicy)
  nameWithType: ObjectCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.ObjectCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: AddOrGetExisting(String,Object,DateTimeOffset,String)
  nameWithType: ObjectCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.ObjectCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: AddOrGetExisting(String,Object,CacheItemPolicy,String)
  nameWithType: ObjectCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.ObjectCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
- uid: System.Runtime.Caching.ObjectCache.Contains(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Contains(String,String)
  nameWithType: ObjectCache.Contains(String,String)
  fullName: System.Runtime.Caching.ObjectCache.Contains(String,String)
- uid: System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  nameWithType: ObjectCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
- uid: System.Runtime.Caching.CacheEntryChangeMonitor
  parent: System.Runtime.Caching
  isExternal: false
  name: CacheEntryChangeMonitor
  nameWithType: CacheEntryChangeMonitor
  fullName: System.Runtime.Caching.CacheEntryChangeMonitor
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: DefaultCacheCapabilities
  nameWithType: ObjectCache.DefaultCacheCapabilities
  fullName: System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities
- uid: System.Runtime.Caching.DefaultCacheCapabilities
  parent: System.Runtime.Caching
  isExternal: false
  name: DefaultCacheCapabilities
  nameWithType: DefaultCacheCapabilities
  fullName: System.Runtime.Caching.DefaultCacheCapabilities
- uid: System.Runtime.Caching.ObjectCache.Get(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Get(String,String)
  nameWithType: ObjectCache.Get(String,String)
  fullName: System.Runtime.Caching.ObjectCache.Get(String,String)
- uid: System.Runtime.Caching.ObjectCache.GetCacheItem(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetCacheItem(String,String)
  nameWithType: ObjectCache.GetCacheItem(String,String)
  fullName: System.Runtime.Caching.ObjectCache.GetCacheItem(String,String)
- uid: System.Runtime.Caching.ObjectCache.GetCount(System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetCount(String)
  nameWithType: ObjectCache.GetCount(String)
  fullName: System.Runtime.Caching.ObjectCache.GetCount(String)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Runtime.Caching.ObjectCache.GetEnumerator
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetEnumerator()
  nameWithType: ObjectCache.GetEnumerator()
  fullName: System.Runtime.Caching.ObjectCache.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<KeyValuePair<String,Object>>
  nameWithType: IEnumerator<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.ObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetValues(IEnumerable<String>,String)
  nameWithType: ObjectCache.GetValues(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.ObjectCache.GetValues(IEnumerable<String>,String)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetValues(String,String[])
  nameWithType: ObjectCache.GetValues(String,String[])
  fullName: System.Runtime.Caching.ObjectCache.GetValues(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Caching.ObjectCache.Host
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Host
  nameWithType: ObjectCache.Host
  fullName: System.Runtime.Caching.ObjectCache.Host
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: InfiniteAbsoluteExpiration
  nameWithType: ObjectCache.InfiniteAbsoluteExpiration
  fullName: System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration
- uid: System.Runtime.Caching.ObjectCache.Item(System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Item(String)
  nameWithType: ObjectCache.Item(String)
  fullName: System.Runtime.Caching.ObjectCache.Item(String)
- uid: System.Runtime.Caching.ObjectCache.Name
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Name
  nameWithType: ObjectCache.Name
  fullName: System.Runtime.Caching.ObjectCache.Name
- uid: System.Runtime.Caching.ObjectCache.NoSlidingExpiration
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: NoSlidingExpiration
  nameWithType: ObjectCache.NoSlidingExpiration
  fullName: System.Runtime.Caching.ObjectCache.NoSlidingExpiration
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Caching.ObjectCache.Remove(System.String,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Remove(String,String)
  nameWithType: ObjectCache.Remove(String,String)
  fullName: System.Runtime.Caching.ObjectCache.Remove(String,String)
- uid: System.Runtime.Caching.ObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Set(CacheItem,CacheItemPolicy)
  nameWithType: ObjectCache.Set(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.ObjectCache.Set(CacheItem,CacheItemPolicy)
- uid: System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Set(String,Object,DateTimeOffset,String)
  nameWithType: ObjectCache.Set(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.ObjectCache.Set(String,Object,DateTimeOffset,String)
- uid: System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Set(String,Object,CacheItemPolicy,String)
  nameWithType: ObjectCache.Set(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.ObjectCache.Set(String,Object,CacheItemPolicy,String)
- uid: System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: ObjectCache.System.Collections.Generic.IEnumerable()
  fullName: System.Runtime.Caching.ObjectCache.System.Collections.Generic.IEnumerable()
- uid: System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ObjectCache.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Runtime.Caching.ObjectCache.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Runtime.Caching.ObjectCache.#ctor*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: ObjectCache
  nameWithType: ObjectCache.ObjectCache
- uid: System.Runtime.Caching.ObjectCache.Add*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Add
  nameWithType: ObjectCache.Add
- uid: System.Runtime.Caching.ObjectCache.AddOrGetExisting*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: AddOrGetExisting
  nameWithType: ObjectCache.AddOrGetExisting
- uid: System.Runtime.Caching.ObjectCache.Contains*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Contains
  nameWithType: ObjectCache.Contains
- uid: System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: CreateCacheEntryChangeMonitor
  nameWithType: ObjectCache.CreateCacheEntryChangeMonitor
- uid: System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: DefaultCacheCapabilities
  nameWithType: ObjectCache.DefaultCacheCapabilities
- uid: System.Runtime.Caching.ObjectCache.Get*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Get
  nameWithType: ObjectCache.Get
- uid: System.Runtime.Caching.ObjectCache.GetCacheItem*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetCacheItem
  nameWithType: ObjectCache.GetCacheItem
- uid: System.Runtime.Caching.ObjectCache.GetCount*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetCount
  nameWithType: ObjectCache.GetCount
- uid: System.Runtime.Caching.ObjectCache.GetEnumerator*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetEnumerator
  nameWithType: ObjectCache.GetEnumerator
- uid: System.Runtime.Caching.ObjectCache.GetValues*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: GetValues
  nameWithType: ObjectCache.GetValues
- uid: System.Runtime.Caching.ObjectCache.Host*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Host
  nameWithType: ObjectCache.Host
- uid: System.Runtime.Caching.ObjectCache.Item*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Item
  nameWithType: ObjectCache.Item
- uid: System.Runtime.Caching.ObjectCache.Name*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Name
  nameWithType: ObjectCache.Name
- uid: System.Runtime.Caching.ObjectCache.Remove*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Remove
  nameWithType: ObjectCache.Remove
- uid: System.Runtime.Caching.ObjectCache.Set*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: Set
  nameWithType: ObjectCache.Set
- uid: System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Object>>#GetEnumerator*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
  nameWithType: ObjectCache.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
- uid: System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ObjectCache.System.Collections.IEnumerable.GetEnumerator
