### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.Choices
  id: Choices
  children:
  - System.Speech.Recognition.Choices.#ctor
  - System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.Choices.#ctor(System.String[])
  - System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.Choices.Add(System.String[])
  - System.Speech.Recognition.Choices.ToGrammarBuilder
  langs:
  - csharp
  name: Choices
  nameWithType: Choices
  fullName: System.Speech.Recognition.Choices
  type: Class
  summary: "Representa um conjunto de alternativas em restrições de uma gramática de reconhecimento de fala."
  remarks: "Um objeto de opções representa um componente de uma frase que pode ter um dos vários valores. Use essa classe ao criar uma gramática de reconhecimento de fala de um <xref:System.Speech.Recognition.GrammarBuilder>objeto.</xref:System.Speech.Recognition.GrammarBuilder>       Por exemplo, um objeto de opções pode representar o componente *colorChoice* da frase &quot;alterar a cor a ser *colorChoice*&quot;, onde os valores aceitáveis para *colorChoice* &quot;vermelho&quot; ou &quot;green&quot; ou &quot;blue&quot;.      > [!NOTE] > Para usar um objeto de opções como um componente opcional em uma frase, crie o objeto de opções e adicioná-lo para um <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>do objeto com `minRepeat` e `maxRepeat` definido como 0 e 1, respectivamente.</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> Frases que contém os componentes opcionais podem ser reconhecidas ou não o componente opcional é falado.       A classe de opções serve a mesma função que o `one-of` elemento XML definido pelo [especificação de gramática de reconhecimento de fala (SRGS) versão 1.0](http://www.w3.org/TR/speech-grammar/) e é semelhante de <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>classe no <xref:System.Speech.Recognition.SrgsGrammar>namespace.</xref:System.Speech.Recognition.SrgsGrammar> </xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>       Para obter mais informações sobre como definir uma gramática de reconhecimento de fala, consulte [o reconhecimento de fala](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [criando GrammarBuilder gramáticas](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)."
  example:
  - "The following example creates a speech recognition grammar for the phrase, \"Set background to *colorChoice*\", where *colorChoice* can be one of the defined colors. The <xref:System.Speech.Recognition.GrammarBuilder> is used to define the constraints for the grammar.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a Choices object that contains a set of alternative colors.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  colorChoice.Add(new string[] {\"cyan\", \"yellow\", \"magenta\"});  \n  \n  // Construct the phrase.  \n  GrammarBuilder builder = new GrammarBuilder(\"Set background to\");  \n  builder.Append(colorChoice);  \n  \n  // Create a grammar for the phrase.  \n  Grammar colorGrammar = new Grammar(builder);  \n  colorGrammar.Name = \"SetBackground\";  \n  \n  return colorGrammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")]

      public class Choices
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Choices()
  nameWithType: Choices.Choices()
  fullName: System.Speech.Recognition.Choices.Choices()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> classe que contém um conjunto vazio de alternativas."
  remarks: "Este construtor retorna um conjunto vazio válido, de alternativas. Você pode adicionar alternativas usando qualquer um do <xref:System.Speech.Recognition.Choices.Add%2A>métodos.</xref:System.Speech.Recognition.Choices.Add%2A>"
  example:
  - "The following example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder>objects to create a phrase that can be used to recognize speech input such as \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses implicit casts from <xref:System.Speech.Recognition.Choices> and <xref:System.String> to <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public Choices ();
    parameters: []
  overload: System.Speech.Recognition.Choices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Choices(GrammarBuilder[])
  nameWithType: Choices.Choices(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Choices(GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> classe a partir de uma matriz que contém um ou mais <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objetos."
  remarks: "Cada <xref:System.Speech.Recognition.GrammarBuilder>em `alternateChoices` define uma alternativa.</xref:System.Speech.Recognition.GrammarBuilder> Se `alternateChoices` é uma matriz vazia, o construtor retorna um conjunto vazio de alternativas. Você pode adicionar alternativas usando qualquer um do <xref:System.Speech.Recognition.Choices.Add%2A>métodos.</xref:System.Speech.Recognition.Choices.Add%2A>       O construtor lançará um <xref:System.ArgumentNullException>quando `alternateChoices` é `null` ou quando qualquer um dos elementos da matriz são `null`.</xref:System.ArgumentNullException>       Porque o <xref:System.Speech.Recognition.GrammarBuilder>classe oferece suporte para conversão implícita de <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, e <xref:System.Speech.Recognition.SemanticResultKey>objetos <xref:System.Speech.Recognition.GrammarBuilder>instâncias, usando corretamente conversões, este construtor pode ser usado para criar um <xref:System.Speech.Recognition.Choices>objeto em uma lista de qualquer combinação desses objetos.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example uses `Choices` and <xref:System.Speech.Recognition.GrammarBuilder> objects to create a <xref:System.Speech.Recognition.Grammar> for phrases such as, \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses implicit casts from `Choices` and <xref:System.String> to <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public Choices (System.Speech.Recognition.GrammarBuilder[] alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "Uma matriz que contém o conjunto de alternativas."
  overload: System.Speech.Recognition.Choices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Choices(String[])
  nameWithType: Choices.Choices(String[])
  fullName: System.Speech.Recognition.Choices.Choices(String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> classe a partir de uma matriz que contém um ou mais <xref:System.String>objetos.</xref:System.String>"
  remarks: "Cada <xref:System.String>em `phrases` define uma alternativa.</xref:System.String> O mecanismo de reconhecimento de fala pode usar qualquer um dos itens na matriz de cadeia de caracteres para corresponder à entrada de fala. Se `phrases` é uma matriz vazia, o construtor retorna um conjunto vazio de alternativas. Você pode adicionar alternativas usando qualquer um do <xref:System.Speech.Recognition.Choices.Add%2A>métodos.</xref:System.Speech.Recognition.Choices.Add%2A>       O construtor lançará um <xref:System.ArgumentNullException>quando `phrases` é `null` ou qualquer um dos elementos da matriz são `null`.</xref:System.ArgumentNullException> O construtor lança um <xref:System.ArgumentException>se qualquer elemento da matriz será uma cadeia de caracteres vazia (&quot;&quot;).</xref:System.ArgumentException>"
  example:
  - "The following example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create a <xref:System.Speech.Recognition.Grammar> for the phrases such as, \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses implicit casts from `Choices` and <xref:System.String> to <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public Choices (string[] phrases);
    parameters:
    - id: phrases
      type: System.String[]
      description: "Uma matriz que contém o conjunto de alternativas."
  overload: System.Speech.Recognition.Choices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])
  id: Add(System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Add(GrammarBuilder[])
  nameWithType: Choices.Add(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Add(GrammarBuilder[])
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Adiciona uma matriz que contém um ou mais <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objetos ao conjunto de alternativas."
  remarks: "Because of support for implicit conversion from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects to <xref:System.Speech.Recognition.GrammarBuilder>, these three classes may be added to a <xref:System.Speech.Recognition.Choices> instance as well.  \n  \n If `alternateChoices` is an empty array, this method does not update the set of alternatives.  \n  \n Applications can use both [Add(String\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.String[])?qualifyHint=False&autoUpgrade=False) and Add to add alternatives to a <xref:System.Speech.Recognition.Choices> object.  \n  \n This method throws an <xref:System.ArgumentNullException> when `alternateChoices` is `null` or any of the array elements are `null`."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses both overloads of the <xref:System.Speech.Recognition.Choices.Add%2A> method to build the grammar.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public void Add (System.Speech.Recognition.GrammarBuilder[] alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "O <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objetos para adicionar a esta <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> objeto."
  overload: System.Speech.Recognition.Choices.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.Add(System.String[])
  id: Add(System.String[])
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: Add(String[])
  nameWithType: Choices.Add(String[])
  fullName: System.Speech.Recognition.Choices.Add(String[])
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Adiciona uma matriz que contém um ou mais <xref:System.String>objetos ao conjunto de alternativas.</xref:System.String>"
  remarks: "Applications can use both Add and [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) to add alternatives to a <xref:System.Speech.Recognition.Choices> object.  \n  \n If `phrases` is an empty array, this method does not update the set of alternates.  \n  \n This method throws an <xref:System.ArgumentNullException> when `phrases` is `null` or any of the array elements are `null`. This method throws an <xref:System.ArgumentException> if any element in the array is the empty string (\"\")."
  example:
  - "The following example creates a speech recognition grammar for phrases similar to \"Call Anne on her cell\" and \"Call James on his work phone\". The example uses both overloads of the <xref:System.Speech.Recognition.Choices.Add%2A> method to build the grammar.  \n  \n```c#  \npublic Grammar CreatePhonePhrase()  \n{  \n  \n  // Create alternatives for female names and add a phrase.  \n  GrammarBuilder females = new Choices(new string[] { \"Anne\", \"Mary\" });  \n  females.Append(\"on her\");  \n  \n  // Create alternatives for male names and add a phrase.  \n  GrammarBuilder males = new Choices(new string[] { \"James\", \"Sam\" });  \n  males.Append(\"on his\");  \n  \n  // Create a Choices object that contains an array of alternative  \n  // GrammarBuilder objects.  \n  Choices people = new Choices();  \n  people.Add(new Choices(new GrammarBuilder[] {females, males}));  \n  \n  // Create a Choices object that contains a set of alternative phone types.  \n  Choices phoneType = new Choices();  \n  phoneType.Add(new string[] { \"cell\", \"home\", \"work\" });  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(\"call\");  \n  gb.Append(people);  \n  gb.Append(phoneType);  \n  gb.Append(new GrammarBuilder(\"phone\"), 0, 1);  \n  \n  return new Grammar(gb);  \n}  \n```"
  syntax:
    content: public void Add (string[] phrases);
    parameters:
    - id: phrases
      type: System.String[]
      description: "As cadeias de caracteres para adicionar a esta <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> objeto."
  overload: System.Speech.Recognition.Choices.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Choices.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.Choices
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: Choices.ToGrammarBuilder()
  fullName: System.Speech.Recognition.Choices.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Retorna um <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objeto neste <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> objeto."
  remarks: "O <xref:System.Speech.Recognition.GrammarBuilder>retornado por esse método é equivalente a uma retornado por um dos seguintes.</xref:System.Speech.Recognition.GrammarBuilder>      -Chamando o <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>construtor com este objeto como o parâmetro.</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>      -Usando a conversão implícita ou explícita deste objeto para <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates a speech recognition grammar for changing the background color.  \n  \n```c#  \n  \nprivate Grammar CreateColorChoice()  \n{  \n  \n  // Create a Choices object that contains a set of alternative colors.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder();  \n  gb.Append(new Choices(new string[] {\"Set\", \"Change\"}));  \n  gb.Append(\"background to\");  \n  gb.Append(colorChoice.ToGrammarBuilder());  \n  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"modify background color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Um <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> que corresponde a este <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> objeto."
  overload: System.Speech.Recognition.Choices.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.Choices.#ctor
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices()
  nameWithType: Choices.Choices()
  fullName: System.Speech.Recognition.Choices.Choices()
- uid: System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices(GrammarBuilder[])
  nameWithType: Choices.Choices(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Choices(GrammarBuilder[])
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.Choices.#ctor(System.String[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices(String[])
  nameWithType: Choices.Choices(String[])
  fullName: System.Speech.Recognition.Choices.Choices(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Add(GrammarBuilder[])
  nameWithType: Choices.Add(GrammarBuilder[])
  fullName: System.Speech.Recognition.Choices.Add(GrammarBuilder[])
- uid: System.Speech.Recognition.Choices.Add(System.String[])
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Add(String[])
  nameWithType: Choices.Add(String[])
  fullName: System.Speech.Recognition.Choices.Add(String[])
- uid: System.Speech.Recognition.Choices.ToGrammarBuilder
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: Choices.ToGrammarBuilder()
  fullName: System.Speech.Recognition.Choices.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.Choices.#ctor*
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Choices
  nameWithType: Choices.Choices
- uid: System.Speech.Recognition.Choices.Add*
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: Add
  nameWithType: Choices.Add
- uid: System.Speech.Recognition.Choices.ToGrammarBuilder*
  parent: System.Speech.Recognition.Choices
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: Choices.ToGrammarBuilder
