### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  id: WorkflowPersistenceService
  children:
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  langs:
  - csharp
  name: WorkflowPersistenceService
  nameWithType: WorkflowPersistenceService
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  type: Class
  summary: "A classe base abstrata da qual persistência de todos os serviços são derivados."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Quando certas condições ocorrem enquanto o fluxo de trabalho está em execução, o mecanismo de tempo de execução do fluxo de trabalho mantém informações de estado sobre a instância de fluxo de trabalho. Persistência pode ocorrer, por exemplo, quando concluído uma transação atômica, quando a instância de fluxo de trabalho ficar ociosa, quando o host chama <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName>na instância do fluxo de trabalho, ou quando uma instância de fluxo de trabalho é encerrada ou termina.</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> Quando a semântica de mecanismo de tempo de execução do fluxo de trabalho determinarem que persistência deve ocorrer, o mecanismo de tempo de execução do fluxo de trabalho chama métodos que são fornecidos por um serviço de persistência para salvar as informações de estado sobre a instância de fluxo de trabalho. Da mesma forma, quando o mecanismo de tempo de execução do fluxo de trabalho precisa restaurar uma instância de fluxo de trabalho persistentes anteriormente, ele chama os métodos que são fornecidos pelo serviço de persistência para carregar essas informações de estado. O mecanismo de tempo de execução do fluxo de trabalho manipula toda a semântica sobre quando a persistência será executada. O serviço de persistência trata realmente salvar e carregar as informações de estado de fluxo de trabalho para ou de um repositório de dados.       Você pode criar um serviço de persistência derivando uma classe da classe WorkflowPersistenceService.  Você pode adicionar o serviço de persistência para o mecanismo de tempo de execução do fluxo de trabalho chamando <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>ou fazendo uma entrada apropriada no arquivo de configuração do aplicativo.</xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> O <xref:System.Workflow.Runtime.WorkflowRuntime>deve conter apenas um serviço de persistência.</xref:System.Workflow.Runtime.WorkflowRuntime> O Windows Workflow Foundation fornece o <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>classe, um serviço de persistência de fora da caixa, que pode ser usado como está ou estender.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>       O mecanismo de tempo de execução do fluxo de trabalho tem semântica de bloqueio de informações de estado de fluxo de trabalho para uso em ambientes onde os serviços de persistência que são executados em diferentes processos podem ter acesso a um único repositório de dados. A classe WorkflowPersistenceService fornece a capacidade de oferecer suporte essa funcionalidade do mecanismo de tempo de execução do fluxo de trabalho, fornecendo um parâmetro para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>que especifica se as informações de estado de uma instância de fluxo de trabalho devem ser desbloqueadas no repositório de dados e fornecendo um método <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>Desbloquear anteriormente bloqueada informações de estado de fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> Em um serviço de persistência que implementa o bloqueio, uma chamada para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>deve bloquear as informações de estado para uma instância de fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>       O serviço de persistência deve lançar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>se ele falhar ao salvar as informações de estado para seu repositório de dados ou carregar informações de estado do seu repositório de dados.</xref:System.Workflow.Runtime.Hosting.PersistenceException> O mecanismo de tempo de execução do fluxo de trabalho espera que esse comportamento.       Um mecanismo de envio em lote é fornecido para serviços que usam um armazenamento durável para salvar as informações de estado de fluxo de trabalho. É importante para manter a consistência entre o armazenamento durável que é usado pelo serviço de persistência e o estado interno do mecanismo de tempo de execução do fluxo de trabalho nesses casos. Você pode adicionar a funcionalidade definida pela <xref:System.Workflow.Runtime.IPendingWork>interface para seu serviço e, em seguida, participar em lotes de transações de fluxo de trabalho fornecida pela <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>adicionando as alterações para o repositório de dados como itens de trabalho às <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> </xref:System.Workflow.Runtime.IPendingWork> O armazenamento durável em si deve implementar a <xref:System.Transactions.IEnlistmentNotification>de interface, para que as informações de fluxo de trabalho não são mantidas incorretamente no caso de uma reversão de transação.</xref:System.Transactions.IEnlistmentNotification> Para obter mais informações, consulte <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>ou <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  inheritance:
  - System.Object
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  implements: []
  inheritedMembers:
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor
  id: '#ctor'
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: WorkflowPersistenceService()
  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService()
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.WorkflowPersistenceService()
  type: Constructor
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada em uma classe derivada, inicializa uma nova instância do <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowPersistenceService&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following example demonstrates creating an instance of the `SqlWorkflowPersistenceService` class (derived from `WorkflowPersistenceService`). This example is from the Nested Exception Handlers SDK sample, from the Program.cs class.  For more information, see the [Nested Exception Handlers Sample](http://msdn.microsoft.com/en-us/d1da0209-842b-41c8-9b7c-0cbaa1034265).  \n  \n [!code-cs[WF_Samples#161](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#161)]\n [!code-vb[WF_Samples#161](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#161)]"
  syntax:
    content: protected WorkflowPersistenceService ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  id: GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetDefaultSerializedForm(Activity)
  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Recupera a forma padrão serializado do <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
  syntax:
    content: protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "O <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> cujo formato serializado é solicitado."
    return:
      type: System.Byte[]
      description: "Formato serializado padrão a <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)
  id: GetIsBlocked(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetIsBlocked(Activity)
  nameWithType: WorkflowPersistenceService.GetIsBlocked(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Indica se a atividade especificada está bloqueada."
  syntax:
    content: protected static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade de raiz da instância do fluxo de trabalho."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a atividade especificada é bloqueada. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  id: GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetSuspendOrTerminateInfo(Activity)
  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Recupera o encerramento ou suspender as informações de cada atividade."
  syntax:
    content: protected static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade de raiz da instância do fluxo de trabalho."
    return:
      type: System.String
      description: "Um <xref:System.String>que contém o encerramento ou suspender informações.</xref:System.String>"
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  id: GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetWorkflowStatus(Activity)
  nameWithType: WorkflowPersistenceService.GetWorkflowStatus(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Recupera o status do fluxo de trabalho."
  syntax:
    content: protected static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade de raiz da instância do fluxo de trabalho."
    return:
      type: System.Workflow.Runtime.WorkflowStatus
      description: "Um <xref href=&quot;System.Workflow.Runtime.WorkflowStatus&quot;> </xref> valor de enumeração que indica o status do fluxo de trabalho."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  id: LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: LoadCompletedContextActivity(Guid,Activity)
  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada em uma classe derivada, carrega o escopo concluído especificado novamente na memória."
  remarks: "O mecanismo de tempo de execução do fluxo de trabalho usa LoadCompletedContextActivity para implementar a compensação. Você deve restaurar uma cópia idêntica do escopo concluído. Para fazer isso, você deve restaurar válido <xref:System.IO.Stream>em sua representação do escopo completo dos dados de armazenamento.</xref:System.IO.Stream> Em seguida, você deve passar esse <xref:System.IO.Stream>para um dos métodos sobrecarregados do <xref:System.Workflow.ComponentModel.Activity.Load%2A>para executar a desserialização do escopo.</xref:System.Workflow.ComponentModel.Activity.Load%2A> </xref:System.IO.Stream>       Se o serviço de persistência não pode carregar o escopo concluído do seu repositório de dados, ela deve gerar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem apropriada.</xref:System.Workflow.Runtime.Hosting.PersistenceException>"
  example:
  - "The following example demonstrates an implementation of the `LoadCompletedContextActivity` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#269](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#269)]\n [!code-vb[WF_Samples#269](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#269)]"
  syntax:
    content: protected abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);
    parameters:
    - id: scopeId
      type: System.Guid
      description: "O <xref:System.Guid>do escopo concluído.</xref:System.Guid>"
    - id: outerActivity
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa a atividade que inclui o escopo concluído."
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa o escopo concluído."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)
  id: LoadWorkflowInstanceState(System.Guid)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: LoadWorkflowInstanceState(Guid)
  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada em uma classe derivada, carrega o estado especificado da instância de fluxo de trabalho de volta na memória."
  remarks: "Você deve restaurar uma cópia idêntica da atividade. Para fazer isso, você deve restaurar válido <xref:System.IO.Stream>de sua representação da instância do fluxo de trabalho no repositório de dados; em seguida, você deve passar isso <xref:System.IO.Stream>a um dos sobrecarregados <xref:System.Workflow.ComponentModel.Activity.Load%2A>estado da instância de métodos para desserializar o fluxo de trabalho.</xref:System.Workflow.ComponentModel.Activity.Load%2A> </xref:System.IO.Stream> </xref:System.IO.Stream> Se o serviço de persistência não pode carregar o estado da instância de fluxo de trabalho do seu repositório de dados, ela deve gerar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem apropriada.</xref:System.Workflow.Runtime.Hosting.PersistenceException>       O mecanismo de tempo de execução do fluxo de trabalho implementa a semântica de bloqueio para restringir o acesso a um estado de instância de fluxo de trabalho é salvo em um repositório de dados. Isso pode ser acessado por serviços de persistência que são executados em vários processos. A semântica de bloqueio é projetada para impedir que os serviços de persistência que são executados em dois processos diferentes de carregar a mesma instância de fluxo de trabalho na memória ao mesmo tempo. Dependendo do tipo de ambiente que o serviço de persistência é projetado para oferecer suporte, você pode optar por suportam esta funcionalidade. Se você escolher para dar suporte a semântica de bloqueio de tempo de execução, e se esse estado de instância de fluxo de trabalho foi bloqueado anteriormente por outro processo, em seguida, você deve lançar <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</xref:System.Workflow.Runtime.WorkflowOwnershipException> Caso contrário, você deve bloquear o acesso para o estado da instância de fluxo de trabalho no seu repositório de dados. O estado da instância de fluxo de trabalho pode ser desbloqueado por uma chamada para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>ou uma chamada para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>com o parâmetro de desbloqueio definido como `true`.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>"
  example:
  - "The following example demonstrates an implementation of the `LoadWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#266](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#266)]\n [!code-vb[WF_Samples#266](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#266)]"
  syntax:
    content: protected abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);
    parameters:
    - id: instanceId
      type: System.Guid
      description: "O <xref:System.Guid>da atividade raiz da instância do fluxo de trabalho.</xref:System.Guid>"
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa a atividade de raiz da instância do fluxo de trabalho."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  id: RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: RestoreFromDefaultSerializedForm(Byte[],Activity)
  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Restaura o <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> de sua forma serializada."
  remarks: ''
  example:
  - "The following example demonstrates an implementation of the `RestoreFromDefaultSerializedForm` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#269](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#269)]\n [!code-vb[WF_Samples#269](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#269)]"
  syntax:
    content: protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);
    parameters:
    - id: activityBytes
      type: System.Byte[]
      description: "O formato serializado do <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
    - id: outerActivity
      type: System.Workflow.ComponentModel.Activity
      description: "Externa <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>, que contém o <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> para restaurar."
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "Restaurado <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  id: SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: SaveCompletedContextActivity(Activity)
  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada em uma classe derivada, salva o escopo concluído especificado em um repositório de dados."
  remarks: "O mecanismo de tempo de execução do fluxo de trabalho salva o estado de atividades de escopo concluído para implementar a compensação. Você deve chamar um dos sobrecarregados <xref:System.Workflow.ComponentModel.Activity.Save%2A>métodos para serializar `activity` em um <xref:System.IO.Stream>; você pode optar por processar além do <xref:System.IO.Stream>antes de gravá-la em seu armazenamento de dados.</xref:System.IO.Stream> </xref:System.IO.Stream> </xref:System.Workflow.ComponentModel.Activity.Save%2A> No entanto, quando o mecanismo de tempo de execução do fluxo de trabalho chama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, você deve restaurar uma cópia idêntica da atividade.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>       Você deve ser capaz de associar o escopo concluído com a instância de fluxo de trabalho delimitador para marcar o escopo como desnecessários em seu armazenamento de dados quando a instância de fluxo de trabalho for concluída ou terminada. Portanto, você também deve salvar o <xref:System.Guid>da instância de fluxo de trabalho que está associada com o escopo concluído; isso pode ser obtido o <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>propriedade do <xref:System.Workflow.Runtime.WorkflowInstance>associado `activity`.</xref:System.Workflow.Runtime.WorkflowInstance> </xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> </xref:System.Guid>       <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>usa o <xref:System.Guid>do escopo concluído como um parâmetro.</xref:System.Guid></xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> Portanto, você também deve salvar o <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A>propriedade associada `activity`.</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> Essa propriedade pode ser referenciada por meio de <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty>campo de `activity`.</xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty>       Se você estiver implementando um serviço de persistência que usa um armazenamento durável, para manter a consistência com o estado interno do mecanismo de tempo de execução de fluxo de trabalho, você deve participar de transações de fluxo de trabalho em lotes para adiar a gravação real para o repositório durável até o ponto de uma confirmação do fluxo de trabalho. Para participar do processamento em lotes, adicionar um item de trabalho para o <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>propriedade que representa as alterações pendentes no banco de dados e implementa o <xref:System.Workflow.Runtime.IPendingWork>interface em seu serviço de persistência.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>       Se você não pode salvar o escopo concluído para o repositório de dados, você deve lançar uma <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem de erro apropriado.</xref:System.Workflow.Runtime.Hosting.PersistenceException>"
  example:
  - "The following example demonstrates an implementation of the `SaveCompletedContextActivity` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#268](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#268)]\n [!code-vb[WF_Samples#268](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#268)]"
  syntax:
    content: protected abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa o escopo concluído."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  id: SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: SaveWorkflowInstanceState(Activity,Boolean)
  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada em uma classe derivada, salva o estado da instância de fluxo de trabalho em um repositório de dados."
  remarks: "Você deve chamar um dos sobrecarregados <xref:System.Workflow.ComponentModel.Activity.Save%2A>métodos para serializar `rootActivity` em <xref:System.IO.Stream>.</xref:System.IO.Stream> </xref:System.Workflow.ComponentModel.Activity.Save%2A> Você pode optar por processar adicionalmente a <xref:System.IO.Stream>antes de gravá-la em seu armazenamento de dados.</xref:System.IO.Stream> No entanto, quando o mecanismo de tempo de execução do fluxo de trabalho chama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, você deve restaurar uma cópia idêntica de atividade raiz.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> Se você não pode salvar o estado da instância de fluxo de trabalho para o repositório de dados, você deve lançar uma <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem de erro apropriado.</xref:System.Workflow.Runtime.Hosting.PersistenceException>       O mecanismo de tempo de execução do fluxo de trabalho fornece a semântica de bloqueio para restringir o acesso a um estado de instância de fluxo de trabalho é salvo no repositório de dados. Isso pode ser acessado pelos serviços de persistência em execução em vários hosts e apontando para o mesmo armazenamento de dados. A semântica de bloqueio é projetada para impedir que os serviços de persistência que são executados em dois tempos de execução do fluxo de trabalho diferentes de carregar a mesma instância de fluxo de trabalho na memória ao mesmo tempo. Dependendo do tipo de ambiente de que seu serviço de persistência é projetado para oferecer suporte, você pode optar por suportam esta funcionalidade. Se você escolher dar suporte a semântica de bloqueio de tempo de execução, em seguida, se um serviço de persistência tenta salvar um estado de instância de fluxo de trabalho que foi anteriormente foi bloqueado por outro serviço de persistência, você deve lançar <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</xref:System.Workflow.Runtime.WorkflowOwnershipException> Se `unlock` é `true`, você deve desbloquear o acesso para o estado da instância de fluxo de trabalho depois que você salvá-lo.       <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>usa o <xref:System.Guid>da instância do fluxo de trabalho como um parâmetro.</xref:System.Guid></xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> Portanto, você deve salvar este <xref:System.Guid>.</xref:System.Guid> Você também pode usar isso <xref:System.Guid>para associar a instância de fluxo de trabalho com os estados salvos dos escopos concluídos.</xref:System.Guid> Você deve fazer isso porque você deve ser capaz de marcar os escopos concluídos como desnecessários quando a instância de fluxo de trabalho seja concluída.       O mecanismo de tempo de execução do fluxo de trabalho chama SaveWorkflowInstanceState uma última vez em que a instância de fluxo de trabalho é concluída ou terminada. Portanto, se <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A>é igual a <xref:System.Workflow.Runtime.WorkflowStatus>ou <xref:System.Workflow.Runtime.WorkflowStatus>, você pode excluir com segurança a instância de fluxo de trabalho e todos os seus escopos concluídos associados de seu repositório de dados.</xref:System.Workflow.Runtime.WorkflowStatus> </xref:System.Workflow.Runtime.WorkflowStatus> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> Como alternativa, você pode assinar o <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>ou <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>eventos para determinar quando ele é seguro excluir registros associados à instância de fluxo de trabalho.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> Se você realmente excluir os registros de seu repositório de dados depende de sua implementação.       Se você implementar um serviço de persistência que usa um armazenamento durável, em seguida, para manter a consistência com o estado interno do mecanismo de tempo de execução de fluxo de trabalho, você deve participar de transações de fluxo de trabalho em lotes para adiar a gravação real para o repositório durável até o ponto de uma confirmação do fluxo de trabalho. Para participar do processamento em lotes, adicionar um item de trabalho que representa as alterações pendentes para o armazenamento durável para o <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>propriedade e implementar o <xref:System.Workflow.Runtime.IPendingWork>interface em seu serviço de persistência.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>"
  example:
  - "The following example demonstrates an implementation of the `SaveWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#264](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#264)]\n [!code-vb[WF_Samples#264](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#264)]"
  syntax:
    content: protected abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade de raiz da instância do fluxo de trabalho."
    - id: unlock
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instância de fluxo de trabalho não deve ser bloqueada; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se a instância de fluxo de trabalho deve ser bloqueada."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  id: UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: UnloadOnIdle(Activity)
  nameWithType: WorkflowPersistenceService.UnloadOnIdle(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Determina se um fluxo de trabalho deve ser descarregado quando ocioso."
  remarks: ''
  example:
  - "The following example demonstrates an implementation of the `UnloadOnIdle` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#270](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#270)]\n [!code-vb[WF_Samples#270](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#270)]"
  syntax:
    content: protected abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa o escopo concluído."
    return:
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, o mecanismo de tempo de execução do fluxo de trabalho descarrega o fluxo de trabalho especificado quando ele estiver ocioso."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  id: UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: UnlockWorkflowInstanceState(Activity)
  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando substituído em uma classe derivada, desbloqueia o estado da instância de fluxo de trabalho."
  remarks: "Esse método é abstrato, portanto ele não contém uma implementação padrão no bloqueio e desbloqueio.       Ao implementar um serviço de persistência personalizado, se você quiser implementar um esquema de bloqueio você precisará substituir este método e fornecem um mecanismo de bloqueio de desbloqueio no <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>método com base no valor do parâmetro unlock.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>"
  example:
  - "The following example demonstrates an implementation of the `UnlockWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#267](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#267)]\n [!code-vb[WF_Samples#267](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#267)]"
  syntax:
    content: protected abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade de raiz da instância do fluxo de trabalho."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: WorkflowPersistenceService()
  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService()
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.WorkflowPersistenceService()
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetDefaultSerializedForm(Activity)
  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetIsBlocked(Activity)
  nameWithType: WorkflowPersistenceService.GetIsBlocked(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(Activity)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetSuspendOrTerminateInfo(Activity)
  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetWorkflowStatus(Activity)
  nameWithType: WorkflowPersistenceService.GetWorkflowStatus(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(Activity)
- uid: System.Workflow.Runtime.WorkflowStatus
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowStatus
  nameWithType: WorkflowStatus
  fullName: System.Workflow.Runtime.WorkflowStatus
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadCompletedContextActivity(Guid,Activity)
  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadWorkflowInstanceState(Guid)
  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: RestoreFromDefaultSerializedForm(Byte[],Activity)
  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveCompletedContextActivity(Activity)
  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveWorkflowInstanceState(Activity,Boolean)
  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnloadOnIdle(Activity)
  nameWithType: WorkflowPersistenceService.UnloadOnIdle(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnlockWorkflowInstanceState(Activity)
  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: WorkflowPersistenceService
  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetDefaultSerializedForm
  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetIsBlocked
  nameWithType: WorkflowPersistenceService.GetIsBlocked
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetSuspendOrTerminateInfo
  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetWorkflowStatus
  nameWithType: WorkflowPersistenceService.GetWorkflowStatus
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadCompletedContextActivity
  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadWorkflowInstanceState
  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: RestoreFromDefaultSerializedForm
  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveCompletedContextActivity
  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveWorkflowInstanceState
  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnloadOnIdle
  nameWithType: WorkflowPersistenceService.UnloadOnIdle
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnlockWorkflowInstanceState
  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState
