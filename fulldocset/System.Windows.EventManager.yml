### YamlMime:ManagedReference
items:
- uid: System.Windows.EventManager
  id: EventManager
  children:
  - System.Windows.EventManager.GetRoutedEvents
  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  langs:
  - csharp
  name: EventManager
  nameWithType: EventManager
  fullName: System.Windows.EventManager
  type: Class
  summary: "Fornece métodos de utilitário relacionado ao evento que registrar eventos roteados para proprietários de classe e adicionar manipuladores de classe."
  remarks: "Essa classe é mais comumente usada para registrar um novo evento roteado, com <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>       O segundo mais comuns [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] uso é <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A> Você pode usar esse método para habilitar a manipulação de classe de um evento roteado na classe ou um evento. Para obter detalhes, consulte [marcar eventos roteados como Handled e tratamento de classe](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example show how to use this class to register a new routed event as a class member, along with the routed event \"wrapper\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event.  \n  \n [!code-cs[DPCustom#EventManagerClass](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#eventmanagerclass)]\n [!code-vb[DPCustom#EventManagerClass](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#eventmanagerclass)]"
  syntax:
    content: public static class EventManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEvents
  id: GetRoutedEvents
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Retorna identificadores para eventos roteados que foram registrados para o sistema de eventos."
  remarks: "Mais <xref:System.Windows.RoutedEvent>objetos podem ser registrados mais tarde.</xref:System.Windows.RoutedEvent> Esse método obtém um instantâneo e a coleção de eventos roteados é gravável ao longo do tempo de vida do aplicativo. A coleção retornada pode ser muito grande. Até mesmo contar os eventos que fazem parte do [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], a contagem de coleta for alta centenas."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();
    parameters: []
    return:
      type: System.Windows.RoutedEvent[]
      description: "Uma matriz do tipo <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> que contém os objetos registrados."
  overload: System.Windows.EventManager.GetRoutedEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  id: GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Localiza todos os identificadores de eventos roteados para eventos que são registrados com o tipo de proprietário fornecidos."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "O tipo para iniciar a pesquisa. Classes base são incluídos na pesquisa."
    return:
      type: System.Windows.RoutedEvent[]
      description: "Uma matriz de identificadores de evento roteado de correspondência se nenhuma correspondência for encontrada; Caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.EventManager.GetRoutedEventsForOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Registra um manipulador de classe para um determinado evento roteado."
  remarks: "Tratamento de classe é um recurso que está disponível para eventos roteados, incluindo eventos anexados que são implementados com eventos roteados fazendo. Um manipulador de classe é como um manipulador estático que existe para todas as instâncias da classe. Porque o manipulador é estático, você não pode alterar as propriedades de instância diretamente com um manipulador de classe, mas você pode acessar instâncias por meio de `sender` parâmetro e/ou os dados do evento.       Manipuladores de classe são chamados antes de manipuladores de instância. Você pode implementar um manipulador de classe que tem o comportamento de marcar o evento como manipulado. Portanto, manipuladores de instância para um evento de classe tratado não serão chamados a menos que os manipuladores de instância registrarem especificamente para eventos manipulados.       Muitas do [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] eventos do elemento base fornecem métodos virtuais de manipulação de classe. Substituindo esses métodos em classes que herdam as classes base, você pode implementar o tratamento sem chamar RegisterClassHandler em construtores estáticos de classe. Esses métodos de manipulação de classe normalmente existem para eventos de entrada e têm nomes que começam com &quot;On&quot; e termina com o nome do evento que está sendo tratado de classe.       Para obter mais informações sobre tratamento de classe, consulte [marcar eventos roteados como Handled e tratamento de classe](~/add/includes/ajax-current-ext-md.md).       Usando essa assinatura, manipuladores de classe serão registrados para invocar apenas em resposta a eventos sem tratamento. Você também pode registrar manipuladores de classe para chamar, mesmo que os argumentos de evento são marcados como manipulados, usando o <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>assinatura, com `handledEventsToo` definido como `true`.</xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>"
  example:
  - "The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling RegisterClassHandler.  \n  \n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#staticandregisterclasshandler)]\n [!code-cs[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: classType
      type: System.Type
      description: "O tipo da classe que está declarando o tratamento de classe."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "O identificador de eventos roteados do evento para manipular."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação de manipulador de classe."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Registra um manipulador de classe para um determinado evento roteado, com a opção para tratar eventos manipulados onde os dados de evento já estão marcados."
  remarks: "Tratamento de classe é um recurso que está disponível para eventos roteados, incluindo eventos anexados que são implementados com eventos roteados fazendo. Um manipulador de classe é como um manipulador estático que existe para todas as instâncias da classe. Porque o manipulador é estático, você não pode alterar as propriedades de instância diretamente com um manipulador de classe, mas você pode acessar instâncias por meio de `sender` parâmetro e/ou os dados do evento.       Manipuladores de classe são chamados antes de manipuladores de instância. Você pode implementar um manipulador de classe que tem o comportamento de marcar o evento como manipulado. Portanto, manipuladores de instância para um evento de classe tratado não serão chamados a menos que os manipuladores de instância registrarem especificamente para eventos manipulados.       Muitas do [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] eventos do elemento base fornecem métodos virtuais de manipulação de classe. Substituindo esses métodos em classes que herdam as classes base, você pode implementar classe tratamento sem chamar <xref:System.Windows.EventManager.RegisterClassHandler%2A>em construtores estáticos.</xref:System.Windows.EventManager.RegisterClassHandler%2A> Esses métodos de manipulação de classe normalmente existem para eventos de entrada e têm nomes que começam com &quot;On&quot; e termina com o nome do evento que está sendo tratado de classe.       Para obter mais informações sobre tratamento de classe, consulte [marcar eventos roteados como Handled e tratamento de classe](~/add/includes/ajax-current-ext-md.md).       Usando essa assinatura, manipuladores de classe podem ser registrados para invocar após eventos manipulados, definindo `handledEventsToo` definido como `true`. Em geral, você deve fazer isso somente se houver um problema de tratamento conhecidos que você está tentando solucionar o problema, como o sistema de entrada de tratamento de eventos de mouse ou teclado."
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: classType
      type: System.Type
      description: "O tipo da classe que está declarando o tratamento de classe."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "O identificador de eventos roteados do evento para manipular."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação de manipulador de classe."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para invocar esse manipulador da classe, mesmo se os argumentos do evento roteado foram marcados como tratada; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> reter o comportamento padrão de não chamar o manipulador de qualquer evento tratado marcado."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Registra um novo evento roteado com o [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] sistema de eventos."
  remarks: "Use o valor de retorno desse método para criar a declaração estática para uma única <xref:System.Windows.RoutedEvent>campo identificador.</xref:System.Windows.RoutedEvent> Este campo deve ser armazenado no tipo do proprietário.       Há um número considerável de convenções e práticas recomendadas associadas a eventos roteados como devem ser chamadas, registradas e expostas em uma classe. Para obter mais informações, consulte [visão geral sobre eventos roteados](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "O nome do evento roteado. O nome deve ser exclusivo dentro do tipo de proprietário e não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia."
    - id: routingStrategy
      type: System.Windows.RoutingStrategy
      description: "A estratégia de roteamento do evento como um valor da enumeração."
    - id: handlerType
      type: System.Type
      description: "O tipo do manipulador de eventos. Isso deve ser um tipo delegate e não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: ownerType
      type: System.Type
      description: "O tipo de classe do proprietário do evento roteado. Isso não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Windows.RoutedEvent
      description: "O identificador para o evento roteado registrado recentemente. Esse objeto de identificador agora pode ser armazenado como um campo estático em uma classe e, em seguida, usado como um parâmetro para métodos que anexam manipuladores de evento. O identificador de eventos roteados também é usado para outro sistema de evento [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]."
  overload: System.Windows.EventManager.RegisterRoutedEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.EventManager.GetRoutedEvents
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
- uid: System.Windows.RoutedEvent[]
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent[]
  spec.csharp:
  - uid: System.Windows.RoutedEvent
    name: RoutedEvent
    nameWithType: RoutedEvent
    fullName: RoutedEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.EventManager.GetRoutedEvents*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents
  nameWithType: EventManager.GetRoutedEvents
- uid: System.Windows.EventManager.GetRoutedEventsForOwner*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner
  nameWithType: EventManager.GetRoutedEventsForOwner
- uid: System.Windows.EventManager.RegisterClassHandler*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler
  nameWithType: EventManager.RegisterClassHandler
- uid: System.Windows.EventManager.RegisterRoutedEvent*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent
  nameWithType: EventManager.RegisterRoutedEvent
