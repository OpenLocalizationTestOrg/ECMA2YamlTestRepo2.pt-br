### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "Objetos que permitem o controle de consumidor e o provedor em uma conexão de Web Parts para compartilhar dados de ponto de serve como a classe base para definir a conexão."
  remarks: "Cada conexão de Web Parts consiste em dois controles de servidor, compartilhamento de dados: um controle é o consumidor e o outro é o provedor. Para uma discussão sobre os componentes essenciais de uma conexão de Web Parts e o próprio objeto de conexão, consulte o <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>Visão geral da classe.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Cada conexão de Web Parts requer que os pontos de conexão. O provedor e o controle de consumidor devem ter pelo menos um definido ConnectionPoint objeto (opcionalmente, cada um deles pode ter vários pontos de conexão) que contém os detalhes de como um controle pode se conectar a outro controle e o tipo de dados pode compartilhar. Em uma conexão real, o provedor tem seu próprio tipo de objeto de ponto de conexão (derivado da classe base ConnectionPoint), um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>de instância e o consumidor tem seu próprio objeto, um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>instância.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Para criar um ponto de conexão do provedor, os desenvolvedores devem adicionar um método de retorno de chamada para o provedor retornará uma instância da interface implementada com um consumidor. Eles devem marcar o método de retorno de chamada no código-fonte com uma `ConnectionProvider` atributo de código (consulte a <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Da mesma forma, para criar um ponto de conexão do consumidor, os desenvolvedores devem adicionar um método para o consumidor que recebe uma instância da interface, e eles devem marcar esse método com um `ConnectionConsumer` atributo (consulte a <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       Quando os desenvolvedores criam conexões em uma página da Web, eles podem ser criados como conexões estáticas ou dinâmicas. Conexões estáticas são declarados na marcação de uma página da Web. Quando uma conexão estática é declarado, os desenvolvedores podem designar quais pontos de conexão são usados para o consumidor e o provedor ao atribuir valores para o `ProviderConnectionPointID` e `ConsumerConnectionPointID` atributos dentro de `<asp:webpartconnection>` a marca do elemento. Essa abordagem é especialmente útil se houver vários pontos de conexão definidos nos controles do consumidor e provedor, porque ela permite que a conexão estática identificar quais pontos de conexão para usar para a conexão.       Conexões dinâmicas são criadas por meio de programação, pelo código do desenvolvedor ou pelos usuários por meio da interface do usuário (IU), fornecidos pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Para criar uma conexão no código, os desenvolvedores devem obter uma instância de um <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto chamando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Antes de eles podem chamar este método, os desenvolvedores devem ter referências para o consumidor e controles de servidor do provedor e seus objetos de ponto de conexão do respectivos. Para obter referências para os pontos de conexão para um provedor e um controle de consumidor, os desenvolvedores primeiro chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>métodos no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Esses métodos retornam a conexão apropriada objetos de ponto, que por sua vez, podem ser passados para o método para criar uma conexão.       Quando o provedor e do consumidor conexão ponto objetos que ambos funcionam com o mesmo tipo de interface, eles são compatíveis e podem formar uma conexão direta para compartilhar dados. Se eles não funcionam com o mesmo tipo de interface, um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto deve ser usado para converter a instância da interface do provedor em um tipo que o consumidor pode trabalhar com.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       A classe abstrata de ConnectionPoint fornece os detalhes de base de pontos de conexão que são compartilhados por todos os controles de consumidor e provedor. Várias propriedades contêm esses detalhes. O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>propriedade indica se um ponto de conexão pode participar de mais de uma conexão por vez.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Por padrão, pontos de conexão do provedor podem participar de várias conexões e não é possível de pontos de conexão do consumidor. O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>propriedade indica o tipo do controle de servidor associado a um ponto de conexão.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Observe que não só <xref:System.Web.UI.WebControls.WebParts.WebPart>controles podem formar conexões; qualquer controle de servidor, se um controle do ASP.NET, um controle personalizado ou um controle de usuário, pode ser habilitado para participar de conexões se colocado em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>propriedade fornece um nome amigável para o ponto de conexão que pode ser exibido na interface de usuário para ajudar os usuários que estão criando conexões.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>propriedade serve como um identificador de cadeia de caracteres para o próprio objeto de ponto de conexão.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>propriedade indica o tipo de instância da interface entende que o ponto de conexão.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se um ponto de conexão fornecido fornece ou consome uma instância da interface é determinado pelo fato de ser um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>ou um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       A classe ConnectionPoint tem um método. O <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>método retorna um valor booliano que indica se um ponto de conexão é atualmente podem participar de conexões.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       A classe ConnectionPoint também tem um campo público <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Este campo contém um valor usado para identificar o ponto de conexão padrão em uma conexão.      > [!NOTE] > Os atributos para especificar o ponto de conexão métodos têm apenas um parâmetro obrigatório, `displayName`, portanto, é possível criar o atributo de ponto de conexão padrão sem especificar uma ID. Nesses casos, o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo fornece um valor base a ser usado.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se um ponto de conexão dá suporte a várias conexões simultâneas."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objetos têm seu conjunto de valor de propriedade AllowsMultipleConnections para `true` (pela <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe), porque o controle de Web Parts definido por padrão permite que os pontos de conexão de provedor para conexões de forma para vários consumidores.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Por outro lado, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objetos ter seu valor da propriedade AllowsMultipleConnections definida como `false` (pela <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe) porque o controle de Web Parts definido por padrão permite a conexão do consumidor pontos para estabelecer uma conexão para somente um provedor de cada vez.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Você pode alterar o comportamento padrão sobre várias conexões atribuindo valores diferentes para o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>propriedade (para provedores) ou o <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>propriedade (consumidores) nos dois <xref:System.Attribute>classes usadas para atributos de conexão.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> Se você habilitar pontos de conexão do consumidor para se conectar a vários provedores ao mesmo tempo, seu código precisa lidar com problemas de sincronização resultante."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponto de conexão dá suporte a várias conexões. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o <xref:System.Type>do controle do servidor ao qual um ponto de conexão está associado.</xref:System.Type>"
  remarks: "O valor da propriedade ControlType é geralmente o <xref:System.Web.UI.WebControls.WebParts.WebPart>tipo.</xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, como qualquer tipo de controle de usuário ou controle de servidor pode participar de conexões se estiver habilitado corretamente e colocado em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, a propriedade ControlType pode retornar um desses outros controle tipos de servidor também.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Quando controles de servidor que não são <xref:System.Web.UI.WebControls.WebParts.WebPart>controles são colocados em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, eles são encapsulados com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objeto em tempo de execução para que podem funcionar como <xref:System.Web.UI.WebControls.WebParts.WebPart>controla e participar de conexões.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Mas quando esses controles estão envolvidas em conexões, o valor da propriedade ControlType não retorna o <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>Digite; ele retorna o tipo do <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controle filho do objeto, o que é o tipo do controle de servidor ou usuário.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "Um <xref:System.Type>que representa o tipo de controle.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Representa uma cadeia de caracteres usada para identificar o ponto de conexão padrão dentro de uma coleção de pontos de conexão associado a um controle de servidor."
  remarks: "Quando um ponto de conexão é criado, é possível especificar uma ID para o ponto de conexão no código-fonte de um provedor ou consumidor <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar, usando um <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>ou um <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atributo.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> No entanto, quando um atributo é adicionado a um ponto de conexão no código-fonte, o `ID` parâmetro é opcional. Se a ID não é especificada no atributo, o campo DefaultID fornece uma cadeia de caracteres que é usada para identificar o ponto de conexão padrão.       Se vários pontos de conexão são definidos em um controle de consumidor ou provedor, é necessário especificar uma ID para cada ponto de conexão, para que os pontos de conexão podem ser distinguidos durante a criação de conexões."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma cadeia de caracteres que serve como um nome para exibição amigável para representar um ponto de conexão na interface do usuário (IU)."
  remarks: "Para criar uma conexão de Web Parts, cada os controles de provedor e consumidor para a conexão devem especificar pelo menos uma conexão ponto, um método que permite que eles se comuniquem e compartilhem dados. Para identificar esses métodos de ponto de conexão, um desenvolvedor Especifica um atributo sobre os métodos selecionados. No provedor, uma `ConnectionProvider` atributo está definido no método de retorno de chamada selecionada e no consumidor, um `ConnectionConsumer` atributo é definido no método que recebe uma instância de uma interface que contém dados do provedor. Para ambos os atributos, um parâmetro que é sempre necessário, independentemente de qual sobrecarga é declarada para criar o atributo é o `displayName` parâmetro. O desenvolvedor deve atribuir uma cadeia de caracteres a ser usado como um nome para exibição amigável para o ponto de conexão e essa cadeia de caracteres se torna o valor da propriedade DisplayName.       O valor da propriedade DisplayName é exibido na interface de usuário de uma página da Web quando os usuários criam conexões. Por exemplo, quando o <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle é adicionado à página, ele cria uma interface do usuário para que os usuários criem conexões entre os controles.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Depois que um usuário alterna uma página em modo de exibição de conectar-se e clica em um verbo de conexão em um <xref:System.Web.UI.WebControls.WebParts.WebPart>de controle, a conexão de interface do usuário é exibida.</xref:System.Web.UI.WebControls.WebParts.WebPart> Cada controle que pode participar de uma conexão está listada na interface do usuário e ao lado de cada controle é um controle de lista suspensa que exibe os nomes amigáveis dos seus pontos de conexão disponíveis. Os usuários devem selecionar o ponto de pelo menos uma conexão para estabelecer uma conexão. Os valores que aparecem na lista de pontos de conexão são obtidos da propriedade DisplayName. Se eles criarem uma interface de usuário personalizada para a criação de conexões, eles podem usar a propriedade DisplayName de maneira semelhante, para fornecer um nome amigável que representa um ponto de conexão."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém um nome para exibição amigável um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> objeto."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retorna um valor que indica se um ponto de conexão pode participar de conexões."
  remarks: "O método GetEnabled na base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe sempre retorna `true`, mas as classes derivadas podem substituir o método para retornar `true` ou `false` em momentos diferentes, com base no estado de `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> ou outro controle de servidor que está associado um ponto de conexão."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o controle pode criar um ponto de conexão para participar de uma conexão; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma cadeia de caracteres que contém o identificador para um ponto de conexão."
  remarks: "Quando um desenvolvedor declara um <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>ou um <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atributo em um método no código-fonte de um controle, para que o método pode ser usado como um ponto de conexão, ele não é necessário declarar a `ID` parâmetro para o atributo de ponto de conexão.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> O único atributo exigido é o `displayName` parâmetro. Uma ID padrão é atribuída ao ponto de conexão, usando o valor da <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Se houver apenas um método em um controle que está sendo usado como um ponto de conexão, é necessário especificar uma ID para o ponto de conexão. Se houver vários métodos especificados como pontos de conexão, você deve especificar uma ID para cada um; Caso contrário, uma exceção será lançada. Atribuindo uma ID para cada ponto de conexão, você também o tornam possível especificar qual ponto de conexão a ser usada ao declarar conexões em páginas da Web ou criá-los no código."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o identificador para um ponto de conexão."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o tipo da interface usada por um ponto de conexão."
  remarks: "A propriedade InterfaceType indica o tipo de interface de um ponto de conexão usa. Isso pode ajudar a determinar se os dois controles são compatíveis e formar uma conexão. Se InterfaceType do ponto de conexão de provedor é diferente da InterfaceType do ponto de conexão de consumidor, os dois controles são incompatíveis (que significa que eles não podem ser conectados diretamente sem um transformador) e um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto deve ser usado para estabelecer uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "Um <xref:System.Type>que corresponde ao tipo de interface fornecida ou consumida por um controle.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
