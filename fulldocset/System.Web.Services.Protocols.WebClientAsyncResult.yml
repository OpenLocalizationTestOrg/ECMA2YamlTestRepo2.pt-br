### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.WebClientAsyncResult
  id: WebClientAsyncResult
  children:
  - System.Web.Services.Protocols.WebClientAsyncResult.Abort
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  - System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  - System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  langs:
  - csharp
  name: WebClientAsyncResult
  nameWithType: WebClientAsyncResult
  fullName: System.Web.Services.Protocols.WebClientAsyncResult
  type: Class
  summary: "Fornece uma implementação de <xref:System.IAsyncResult>para uso pelos proxies de serviço da Web em XML para implementar o padrão de método assíncrono padrão.</xref:System.IAsyncResult>"
  remarks: "When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the WebClientAsyncResult is returned. Following the standard asynchronous design pattern, that instance of WebClientAsyncResult must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \n  \n For details on calling XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  syntax:
    content: 'public class WebClientAsyncResult : IAsyncResult'
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  id: Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Cancela uma solicitação de serviço Web XML assíncrona."
  remarks: ''
  example:
  - The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=fullName> method. If the corresponding `End` method is subsequently called after the Abort method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus>.
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  id: AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Obtém o objeto fornecido no último parâmetro para o <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref> chamada de método assíncrono."
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: "O <xref:System.Object>fornecido no último parâmetro para o <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref> chamada de método.</xref:System.Object>"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Obtém um <xref:System.Threading.WaitHandle>que é usado para aguardar uma operação assíncrona concluir.</xref:System.Threading.WaitHandle>"
  remarks: "O <xref:System.Threading.WaitHandle>pode ser usado para executar um <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A>de espera para concluir a chamada assíncrona.</xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.WaitHandle>       Para obter mais detalhes, consulte <xref:System.IAsyncResult.AsyncWaitHandle%2A>.</xref:System.IAsyncResult.AsyncWaitHandle%2A>"
  syntax:
    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "Um <xref:System.Threading.WaitHandle>que é usado para aguardar uma operação assíncrona concluir.</xref:System.Threading.WaitHandle>"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Obtém um valor que indica se a chamada Begin concluído simultaneamente."
  remarks: "Se CompletedSynchronously for definido como `true` dentro de <xref:System.AsyncCallback>representante, é provável que o thread de chamada <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>é o thread atual.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> </xref:System.AsyncCallback> Nesse caso, você deve ter cuidado ao fazer Begin assíncrono outra chamada do método de retorno de chamada, pois isso poderá causar a pilha cresça sem associados se as chamadas continuam concluído de forma síncrona. Em vez disso, a chamada deve ser concluída no site de chamada, fora do método de retorno de chamada."
  syntax:
    content: public bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a chamada de Begin concluída de forma síncrona; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Obtém um valor que indica se a solicitação de serviço Web XML assíncrona foi concluída."
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a solicitação de serviço Web XML assíncrona foi concluída; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort
  nameWithType: WebClientAsyncResult.Abort
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
