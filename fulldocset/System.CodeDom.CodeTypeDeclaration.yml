### YamlMime:ManagedReference
items:
- uid: System.CodeDom.CodeTypeDeclaration
  id: CodeTypeDeclaration
  children:
  - System.CodeDom.CodeTypeDeclaration.#ctor
  - System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  - System.CodeDom.CodeTypeDeclaration.BaseTypes
  - System.CodeDom.CodeTypeDeclaration.IsClass
  - System.CodeDom.CodeTypeDeclaration.IsEnum
  - System.CodeDom.CodeTypeDeclaration.IsInterface
  - System.CodeDom.CodeTypeDeclaration.IsPartial
  - System.CodeDom.CodeTypeDeclaration.IsStruct
  - System.CodeDom.CodeTypeDeclaration.Members
  - System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  - System.CodeDom.CodeTypeDeclaration.PopulateMembers
  - System.CodeDom.CodeTypeDeclaration.TypeAttributes
  - System.CodeDom.CodeTypeDeclaration.TypeParameters
  langs:
  - csharp
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
  type: Class
  summary: "Representa uma declaração de tipo de classe, estrutura, interface ou enumeração."
  remarks: "CodeTypeDeclaration pode ser usado para representar o código declara uma classe, estrutura, interface ou enumeração. CodeTypeDeclaration pode ser usado para declarar um tipo aninhado dentro de outro tipo.       O <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>propriedade especifica o tipo base ou tipos de base do tipo que está sendo declarado.</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> O <xref:System.CodeDom.CodeTypeDeclaration.Members%2A>propriedade contém os membros de tipo, que podem incluir métodos, campos, propriedades, comentários e outros tipos.</xref:System.CodeDom.CodeTypeDeclaration.Members%2A> O <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>propriedade indica a <xref:System.Reflection.TypeAttributes>valores para o tipo de declaração, que indicam a categoria de tipo do tipo.</xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> O <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, e <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A>métodos indicam se o tipo é uma classe, estrutura, enumeração ou tipo de interface, respectivamente.</xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>      > [!NOTE] > Algumas linguagens de programação suportem somente à declaração de tipos de referência, ou classes. Para verificar um gerador de código específico do idioma CodeDOM para obter suporte para declarar interfaces, enumerações ou tipos de valor, chame o <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>método de teste para apropriada <xref:System.CodeDom.Compiler.GeneratorSupport>sinalizadores.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport>indica suporte para interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport>indica suporte para enumerações, e <xref:System.CodeDom.Compiler.GeneratorSupport>indica suporte para tipos de valor como estruturas.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.GeneratorSupport></xref:System.CodeDom.Compiler.GeneratorSupport>       Você pode criar uma classe ou uma implementação de estrutura em uma declaração completa ou abrange a implementação de várias declarações. O <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>propriedade indica se o tipo de declaração completa ou parcial.</xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> Nem todos os geradores de código oferecem suporte a declarações de tipo parcial, assim, você deve testar esse suporte chamando o <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>método com o sinalizador <xref:System.CodeDom.Compiler.GeneratorSupport>.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>"
  example:
  - "This example demonstrates using a CodeTypeDeclaration to declare a type.  \n  \n [!code-cs[CodeTypeDeclarationExample#2](~/add/codesnippet/csharp/t-system.codedom.codetyp_7_1.cs)]\n [!code-vb[CodeTypeDeclarationExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_7_1.vb)]\n [!code-cpp[CodeTypeDeclarationExample#2](~/add/codesnippet/cpp/t-system.codedom.codetyp_7_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember
  inheritance:
  - System.Object
  - System.CodeDom.CodeObject
  - System.CodeDom.CodeTypeMember
  implements: []
  inheritedMembers:
  - System.CodeDom.CodeObject.UserData
  - System.CodeDom.CodeTypeMember.Attributes
  - System.CodeDom.CodeTypeMember.Comments
  - System.CodeDom.CodeTypeMember.CustomAttributes
  - System.CodeDom.CodeTypeMember.EndDirectives
  - System.CodeDom.CodeTypeMember.LinePragma
  - System.CodeDom.CodeTypeMember.Name
  - System.CodeDom.CodeTypeMember.StartDirectives
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  id: '#ctor'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Inicializa uma nova instância do <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> classe."
  syntax:
    content: public CodeTypeDeclaration ();
    parameters: []
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Inicializa uma nova instância do <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> classe com o nome especificado."
  syntax:
    content: public CodeTypeDeclaration (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome para o novo tipo."
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  id: BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém os tipos base do tipo."
  remarks: "Para gerar uma classe no Visual Basic que não herda de um tipo base, mas que implementa uma ou mais interfaces, você deve incluir <xref:System.Object>como o primeiro item na coleção BaseTypes.</xref:System.Object>      > [!NOTE] > No .NET Framework versão 2.0 não é necessário o <xref:System.CodeDom.CodeTypeReference>para <xref:System.Object>se a interface que você estiver implementando já existe e se está fazendo referência a ele por tipo.</xref:System.Object> </xref:System.CodeDom.CodeTypeReference> Por exemplo, se você estiver implementando o <xref:System.Collections.ICollection>interface e adicioná-lo à coleção com esta instrução `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, você não precisa anterior `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` instrução.</xref:System.Collections.ICollection>       O código a seguir ilustra a adição de um <xref:System.CodeDom.CodeTypeReference>à coleção que se refere a <xref:System.Object>.</xref:System.Object> </xref:System.CodeDom.CodeTypeReference>       [Visual Basic]      ```   Dim ctd As New CodeTypeDeclaration(&quot;Class1&quot;)   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(&quot;Interface1&quot;))   ``` [C#] ```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(&quot;Class1&quot;);   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(&quot;Interface1&quot;));   ``` o código anterior gera o equivalente do seguinte código do Visual Basic.      ```   Public Class Class1   Implements Interface1   ```No entanto, o código do Visual Basic, na verdade, gerado é o seguinte.      ```   Public Class Class1   Inherits Object   Implements Interface1   ```"
  syntax:
    content: public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }
    return:
      type: System.CodeDom.CodeTypeReferenceCollection
      description: "Um <xref href=&quot;System.CodeDom.CodeTypeReferenceCollection&quot;> </xref> que indica os tipos de base do tipo de objeto."
  overload: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  id: IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém ou define um valor que indica se o tipo é um tipo de classe ou referência."
  syntax:
    content: public bool IsClass { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tipo for um tipo de classe ou de referência; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsClass*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  id: IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém ou define um valor que indica se o tipo é uma enumeração."
  syntax:
    content: public bool IsEnum { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tipo é uma enumeração; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsEnum*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  id: IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém ou define um valor que indica se o tipo é uma interface."
  syntax:
    content: public bool IsInterface { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tipo é uma interface. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsInterface*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  id: IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém ou define um valor que indica se o tipo de declaração é completa ou parcial."
  remarks: "Você pode criar uma implementação de classe ou estrutura em uma declaração completa ou abrange a implementação de várias declarações. Implementações geralmente são fornecidas na declaração de um tipo de conclusão. Nesse caso, defina a propriedade de IsPartial de declaração de tipo como `false`, que indica o tipo de declaração representa todos os detalhes para a implementação de classe ou estrutura.       Uma declaração de tipo parcial torna mais fácil criar diferentes partes de uma implementação de classe ou estrutura em diferentes módulos do seu aplicativo. As declarações de tipo parcial podem ser armazenadas em um arquivo de origem, ou distribuídas em vários arquivos de origem que eventualmente são compilados juntos para formar a implementação do tipo combinado.       A linguagem c# dá suporte a declarações de tipo parcial de classes e estruturas por meio de `partial` palavra-chave. Visual Basic oferece suporte a declarações de tipo parcial de classes e estruturas com o `Partial` palavra-chave. Nem todos os geradores de código oferecem suporte a declarações de tipo parcial, assim, você deve testar esse suporte chamando o <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>método com o sinalizador <xref:System.CodeDom.Compiler.GeneratorSupport>.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>      > [!NOTE] > Declarações de tipo parcial têm suporte para classes e estruturas. Se você especificar uma declaração de tipo parcial para uma interface ou enumeração, o código gerado gera erros de compilador.       Ao fornecer uma implementação de classe ou estrutura em várias declarações, defina a propriedade de IsPartial para `true` para a declaração inicial e todas as declarações complementares. A declaração inicial totalmente deve especificar o tipo de assinatura, incluindo os modificadores de acesso, herdadas de tipos e interfaces implementadas. As declarações suplementares não precisa especificar novamente a assinatura de tipo. Normalmente, um erro do compilador resulta se você redefinir a assinatura de tipo em uma declaração suplementar.       Visual Studio 2005 usa tipos parciais para separar o código gerado pelo usuário de código de designer. Em projetos de aplicativo do Windows Visual Basic, o código de usuário é colocado em uma classe parcial não está qualificada pelo `Partial` palavra-chave; o designer fornecida pelo código aparece na classe parcial que tem o `Partial` palavra-chave. No c#, o código do usuário e o código de designer aparecem em classes parciais identificadas pelo `partial` palavra-chave."
  example:
  - "This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations. The example builds the initial class declaration statement and sets the IsPartial property to `true`.  \n  \n [!code-cpp[CodeDomPartialTypeExample#3](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_1.cpp)]\n [!code-cs[CodeDomPartialTypeExample#3](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_1.cs)]\n [!code-vb[CodeDomPartialTypeExample#3](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_1.vb)]  \n  \n A different method in the example extends the class implementation. This method builds a new type declaration statement for the existing class and sets the IsPartial property to `true`. The compiler combines the two partial type declarations together for the complete class implementation.  \n  \n [!code-cpp[CodeDomPartialTypeExample#7](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_2.cpp)]\n [!code-cs[CodeDomPartialTypeExample#7](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_2.cs)]\n [!code-vb[CodeDomPartialTypeExample#7](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_2.vb)]"
  syntax:
    content: public bool IsPartial { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a declaração de classe ou estrutura é uma representação parcial da implementação; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se a declaração é uma implementação completa da classe ou estrutura. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsPartial*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  id: IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém ou define um valor que indica se o tipo é um tipo de valor (struct)."
  syntax:
    content: public bool IsStruct { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tipo for um tipo de valor. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsStruct*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.Members
  id: Members
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém a coleção de membros de classe para o tipo representado."
  syntax:
    content: public System.CodeDom.CodeTypeMemberCollection Members { get; }
    return:
      type: System.CodeDom.CodeTypeMemberCollection
      description: "Um <xref href=&quot;System.CodeDom.CodeTypeMemberCollection&quot;> </xref> objeto que indica os membros de classe."
  overload: System.CodeDom.CodeTypeDeclaration.Members*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  id: PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ocorre quando o <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>coleção é acessada pela primeira vez.</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>"
  syntax:
    content: public event EventHandler PopulateBaseTypes;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  id: PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ocorre quando o <xref:System.CodeDom.CodeTypeDeclaration.Members*>coleção é acessada pela primeira vez.</xref:System.CodeDom.CodeTypeDeclaration.Members*>"
  syntax:
    content: public event EventHandler PopulateMembers;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  id: TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém ou define os atributos do tipo."
  remarks: "O <xref:System.Reflection.TypeAttributes>propriedade contém os mesmos tipos de valores usados pelo <xref:System.Reflection>ao investigar um tipo em tempo de execução.</xref:System.Reflection> </xref:System.Reflection.TypeAttributes> Muitos desses sinalizadores não correspondem a sintaxe de declaração de tipo para alguns idiomas. Como resultado, apenas os seguintes sinalizadores são significativos para <xref:System.CodeDom.CodeTypeDeclaration>: <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>e <xref:System.Reflection.TypeAttributes>.</xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration>      > [!NOTE] > Alguns dos sinalizadores como <xref:System.Reflection.TypeAttributes>sobrepõe o significado de sinalizadores na <xref:System.CodeDom.CodeTypeMember.Attributes%2A>propriedade <xref:System.CodeDom.CodeTypeDeclaration>que é herdada do <xref:System.CodeDom.CodeTypeMember>.</xref:System.CodeDom.CodeTypeMember> </xref:System.CodeDom.CodeTypeDeclaration> </xref:System.CodeDom.CodeTypeMember.Attributes%2A> </xref:System.Reflection.TypeAttributes> O <xref:System.CodeDom.CodeTypeMember.Attributes%2A>propriedade é um efeito colateral de <xref:System.CodeDom.CodeTypeDeclaration>classe herdada de <xref:System.CodeDom.CodeTypeMember>para que as classes podem ser aninhadas.</xref:System.CodeDom.CodeTypeMember> </xref:System.CodeDom.CodeTypeDeclaration> </xref:System.CodeDom.CodeTypeMember.Attributes%2A> Os sinalizadores na propriedade TypeAttributes devem ser usados em vez de sinalizadores no <xref:System.CodeDom.CodeTypeMember.Attributes%2A>propriedade.</xref:System.CodeDom.CodeTypeMember.Attributes%2A>      > [!NOTE] > O padrão para definir os sinalizadores de visibilidade (sinalizadores que contêm as palavras `Public` ou `Nested`) é para mascarar a visibilidade de todos os sinalizadores usando o <xref:System.Reflection.TypeAttributes>e, em seguida, defina o sinalizador de visibilidade desejada.</xref:System.Reflection.TypeAttributes> Por exemplo, a c# declaração de código para identificar o <xref:System.CodeDom.CodeTypeDeclaration>(denominado `cd`) como uma classe interna é `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</xref:System.CodeDom.CodeTypeDeclaration>  O código para definir o mesmo valor no Visual Basic é `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`. Definindo a propriedade TypeAttributes diretamente a um sinalizador de visibilidade (`cd.TypeAttributes = TypeAttributes.NotPublic;`) apaga todos os outros sinalizadores que podem ser definidos."
  syntax:
    content: public System.Reflection.TypeAttributes TypeAttributes { get; set; }
    return:
      type: System.Reflection.TypeAttributes
      description: "Um <xref:System.Reflection.TypeAttributes>que indica os atributos do tipo de objeto.</xref:System.Reflection.TypeAttributes>"
  overload: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  id: TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Obtém os parâmetros de tipo para o tipo de declaração."
  remarks: "Uma declaração de tipo genérico contém um ou mais tipos conhecidos como parâmetros de tipo não for especificado. Representa um nome de parâmetro de tipo para o tipo de dentro do corpo da declaração genérico. Por exemplo, a declaração de genérica para o <xref:System.Collections.Generic.List%601>classe contém o parâmetro de tipo `T`.</xref:System.Collections.Generic.List%601>       Para obter mais informações sobre genéricos, consulte [genéricos na biblioteca de classes .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }
    return:
      type: System.CodeDom.CodeTypeParameterCollection
      description: "Um <xref href=&quot;System.CodeDom.CodeTypeParameterCollection&quot;> </xref> que contém os parâmetros de tipo para o tipo de declaração."
  overload: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.CodeDom.CodeTypeMember
  isExternal: false
  name: System.CodeDom.CodeTypeMember
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeReferenceCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReferenceCollection
  nameWithType: CodeTypeReferenceCollection
  fullName: System.CodeDom.CodeTypeReferenceCollection
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeMemberCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeMemberCollection
  nameWithType: CodeTypeMemberCollection
  fullName: System.CodeDom.CodeTypeMemberCollection
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
- uid: System.CodeDom.CodeTypeParameterCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeParameterCollection
  nameWithType: CodeTypeParameterCollection
  fullName: System.CodeDom.CodeTypeParameterCollection
- uid: System.CodeDom.CodeTypeDeclaration.#ctor*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeDeclaration.IsClass*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
