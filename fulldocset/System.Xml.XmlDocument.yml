### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDocument
  id: XmlDocument
  children:
  - System.Xml.XmlDocument.#ctor
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementById(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.Load(System.IO.Stream)
  - System.Xml.XmlDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDocument.Load(System.String)
  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  langs:
  - csharp
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
  type: Class
  summary: "Representa um documento XML. Você pode usar essa classe para carregar, validar, editar, adicionar e posicionar o XML em um documento."
  remarks: "<a name=\"Remarks\"></a> The XmlDocument class is an in-memory representation of an XML document. It implements the W3C [XML Document Object Model (DOM)](~/add/includes/ajax-current-ext-md.md) Level 1 Core and the Core DOM Level 2.  \n  \n *DOM* stands for *document object model*. To read more about it, see [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\\(DOM\\).md).  \n  \n You can load XML into the DOM by using the XmlDocument class, and then programmatically read, modify, and remove XML in the document.  \n  \n If you want to pry open the XmlDocument class and see how it’s implemented, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12).  \n  \n<a name=\"Common\"></a>   \n## Tasks  \n  \n-   [Load XML into the document object model](#Load)  \n  \n-   [Validate it against a schema](#Validation)  \n  \n-   [Navigate the document tree](#Navigate)  \n  \n-   [Find nodes](#Find)  \n  \n-   [Edit nodes](#Edit)  \n  \n-   [Add nodes](#Add)  \n  \n-   [Remove nodes](#Remove)  \n  \n-   [Position nodes](#Position)  \n  \n<a name=\"Load\"></a>   \n## Load XML into the document object model  \n Start with an XML document like this one. It’s just a few books in a collection. But it does contain the basic things that you’d find in any XML document; a namespace, elements that represent data and attributes that describe the data.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<books xmlns=\"http://www.contoso.com/books\">  \n  <book genre=\"novel\" ISBN=\"1-861001-57-8\" publicationdate=\"1823-01-28\">  \n    <title>Pride And Prejudice</title>  \n    <price>24.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861002-30-1\" publicationdate=\"1985-01-01\">  \n    <title>The Handmaid's Tale</title>  \n    <price>29.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861001-45-3\" publicationdate=\"1811-01-01\">  \n    <title>Sense and Sensibility</title>  \n    <price>19.95</price>  \n  </book>  \n</books>  \n```  \n  \n Next, load this data into the DOM so that you can work with it in memory. The most popular way to do this is refer to a file on your local computer or on a network.  \n  \n This example loads XML from a file. If the file doesn’t exist, it just generates some XML and loads that.  \n  \n [!code-cpp[XMLProcessingApp#1](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#1)]\n [!code-cs[XMLProcessingApp#1](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#1)]\n [!code-vb[XMLProcessingApp#1](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#1)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Reading an XML Document into the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Validation\"></a>   \n## Validate it against a schema  \n Start with an XML schema like this one. This schema defines the data types in the XML and which attributes are required.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \n  attributeFormDefault=\"unqualified\"   \n  elementFormDefault=\"qualified\"  \n  targetNamespace=\"http://www.contoso.com/books\">   \n  <xs:element name=\"books\">  \n    <xs:complexType>  \n      <xs:sequence>  \n        <xs:element maxOccurs=\"unbounded\" name=\"book\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"title\" type=\"xs:string\" />  \n              <xs:element name=\"price\" type=\"xs:decimal\" />  \n            </xs:sequence>  \n            <xs:attribute name=\"genre\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"ISBN\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"publicationdate\" type=\"xs:date\" use=\"required\" />  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:sequence>  \n    </xs:complexType>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n Create an <xref:System.Xml.XmlReader> object by using your schema, and then load that object into the DOM. Create an event handler that executes when code attempts to modify your XML file in ways that violate the rules of the schema.  \n  \n These blocks of code show helper methods that do all of this.  \n  \n [!code-cpp[XMLProcessingApp#2](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#2)]\n [!code-cs[XMLProcessingApp#2](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#2)]\n [!code-vb[XMLProcessingApp#2](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#2)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Validating an XML Document in the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Navigate\"></a>   \n## Navigate the document tree  \n You can use properties to navigate around an XML document. But before you use any of them, let’s quickly review a few terms. Your document is composed of nodes. Each node has as single *parent* node directly above it. The only node that does not have a parent node is the document root, as it is the top-level node. Most nodes can have *child* nodes, which are nodes directly below them. Nodes that are at the same level are *siblings*.  \n  \n The following examples, show you how to obtain the root node, jump to the first child node of the root node, access any of its child nodes, get back out to the parent node, and then navigate across sibling nodes.  \n  \n **Start with the root node**  \n  \n This example gets the root node and then uses that node to output the contents of the document to the console.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_3.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_3.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_3.vb)]  \n  \n **Get child nodes**  \n  \n This example jumps to the first child node of the root node and then iterates through the child nodes of that node if any exist.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_4.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_4.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_4.vb)]  \n  \n **Get back to the parent node**  \n  \n Use the <xref:System.Xml.XmlDocument.ParentNode%2A> property.  \n  \n **Refer to the last child node**  \n  \n This example writes the price of a book to the console (which is the last child node of a book node).  \n  \n [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_5.cpp)]\n [!code-cs[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_5.cs)]\n [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_5.vb)]  \n  \n **Navigate forward across siblings**  \n  \n This example moves forward from book to book. Book nodes are siblings to one another.  \n  \n [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_6.vb)]\n [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_6.cpp)]\n [!code-cs[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_6.cs)]  \n  \n **Navigate backwards across siblings**  \n  \n This example moves backwards from book to book.  \n  \n [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_7.cs)]\n [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_7.cpp)]\n [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_7.vb)]  \n  \n<a name=\"Find\"></a>   \n## Find nodes  \n The most popular way to find one or more nodes of data is to use an XPath query string, but there are also methods that don’t require one.  \n  \n **Get a single node**  \n  \n This example locates a book by using the ISBN number.  \n  \n [!code-cpp[XMLProcessingApp#3](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#3)]\n [!code-cs[XMLProcessingApp#3](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#3)]\n [!code-vb[XMLProcessingApp#3](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#3)]  \n  \n The string used in this example is an Xpath query. You can find more examples of them here:   [XPath examples](https://msdn.microsoft.com/en-us/library/ms256086.aspx).  \n  \n You can also use the <xref:System.Xml.XmlDocument.GetElementById%2A> to retrieve nodes. To use this approach, you’ll have to define ID’s in the document type definition declarations of your XML file.  \n  \n After you get a node, you get the value of attributes or child nodes. This example does that with a book node.  \n  \n [!code-cpp[XMLProcessingApp#4](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#4)]\n [!code-cs[XMLProcessingApp#4](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#4)]\n [!code-vb[XMLProcessingApp#4](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#4)]  \n  \n **Get a collection of nodes**  \n  \n This example selects all books where the author's last name is **Austen**, and then changes the price of those books.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_10.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_10.cs)]\n [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_10.vb)]  \n  \n You can also get a collection of nodes by using the name of the node. For example, this example gets a collection of all book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_11.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_11.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_11.vb)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Select Nodes Using XPath Navigation](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Edit\"></a>   \n## Edit nodes  \n This example edits a book node and its attributes.  \n  \n [!code-cpp[XMLProcessingApp#7](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#7)]\n [!code-cs[XMLProcessingApp#7](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#7)]\n [!code-vb[XMLProcessingApp#7](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#7)]  \n  \n **Learn more:** [Modifying Nodes, Content, and Values in an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n<a name=\"Add\"></a>   \n## Add nodes  \n To add a node, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method or the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n To add a data node such as a book, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method.  \n  \n For any other type of node such as a comment, whitespace node, or CDATA node, use the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n This example creates a book node, adds attrubutes to that node, and then adds that node to the document.  \n  \n [!code-cpp[XMLProcessingApp#5](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#5)]\n [!code-cs[XMLProcessingApp#5](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#5)]\n [!code-vb[XMLProcessingApp#5](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#5)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Inserting Nodes into an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Remove\"></a>   \n## Remove nodes  \n To remove a node, use the <xref:System.Xml.XmlNode.RemoveChild%2A> method.  \n  \n This example removes a book from the document and any whitespace that appears just before the book node.  \n  \n [!code-cpp[XMLProcessingApp#6](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#6)]\n [!code-cs[XMLProcessingApp#6](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#6)]\n [!code-vb[XMLProcessingApp#6](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#6)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Removing Nodes, Content, and Values from an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Position\"></a>   \n## Position nodes  \n You can choose where you want a node to appear in your document by using the <xref:System.Xml.XmlNode.InsertBefore%2A> and <xref:System.Xml.XmlNode.InsertAfter%2A> methods.  \n  \n This example shows two helper methods. One of them moves a node higher in a list. The other one moves a node lower.  \n  \n These methods could be used in an application that enables users to move books up and down in a list of books. When a user chooses a book and presses an up or down button, your code could call methods like these to position the corresponding book node before or after other book nodes.  \n  \n [!code-cpp[XMLProcessingApp#8](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#8)]\n [!code-cs[XMLProcessingApp#8](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#8)]\n [!code-vb[XMLProcessingApp#8](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#8)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)"
  syntax:
    content: 'public class XmlDocument : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following is an example of load-time validation. A document type definition (DTD) validating <xref:System.Xml.XmlReader> is passed to the <xref:System.Xml.XmlDocument.Load%2A> method and a <xref:System.Xml.Schema.ValidationEventHandler> is provided to notify users of any validation errors. In this example a validation error is found, but the document is still loaded. Alternatively, you can define a validating <xref:System.Xml.XmlReader> to throw an exception and stop the load process when a validation error is found by not specifying the <xref:System.Xml.Schema.ValidationEventHandler>. For more information about validating XML data, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  \n  \n [!code-vb[XmlDocument.cctor#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_11_1.vb)]\n [!code-cs[XmlDocument.cctor#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[XmlDocument.cctor#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_11_1.cpp)]  \n  \n The example uses the `bookDTD.xml` file as input.  \n  \n [!code-xml[XmlDocument.cctor#2](~/add/codesnippet/xml/m-system.xml.xmldocument_11_2.xml)]"
  syntax:
    content: public XmlDocument ();
    parameters: []
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  id: '#ctor(System.Xml.XmlImplementation)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inicializa uma nova instância do <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> classe com especificado <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>."
  syntax:
    content: protected XmlDocument (System.Xml.XmlImplementation imp);
    parameters:
    - id: imp
      type: System.Xml.XmlImplementation
      description: "The <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Inicializa uma nova instância do <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> classe com o <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> especificado"
  syntax:
    content: public XmlDocument (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.BaseURI
  id: BaseURI
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o URI de base do nó atual."
  remarks: "Um documento XML em rede é composto de partes de dados agregados usando vários mecanismos de inclusão padrão do W3C e, portanto, contém nós que vêm de diferentes locais. O `BaseURI` informa onde veio esses nós.       Para nós do documento, `BaseURI` retorna o local do documento XML. Por exemplo, se o `XmlDocument` foi carregada usando o seguinte documento de chamada. Carga (&quot;http://server/mydata.xml&quot;), o `BaseURI` para o documento de nó é http://server/mydata.xml. No entanto, se o <xref:System.Xml.XmlDocument.Load%2A>método é redirecionado pelo servidor para um URI diferente, `BaseURI` retorna o URI original passado para o `Load` método.</xref:System.Xml.XmlDocument.Load%2A>       Esta propriedade é uma extensão da Microsoft para modelo de objeto de documento (DOM). Para obter informações adicionais sobre `BaseURI` e como ele se comporta com outros tipos de nó, consulte <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "O local do qual o nó foi carregado."
  overload: System.Xml.XmlDocument.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria uma cópia deste nó."
  remarks: "Esse método funciona como um construtor de cópia para nós. O nó clonado não tem nenhum pai (<xref:System.Xml.XmlNode.ParentNode%2A> retorna `null`).</xref:System.Xml.XmlNode.ParentNode%2A>       Se `deep` é `true`, o nó clonado inclui todos os nós filho, caso contrário, somente o `XmlDocument` nó for clonado. Consulte o <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>método para ver como esse método se comporta em outros tipos de nó.</xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>"
  example:
  - "The following example shows the difference between a deep and shallow clone.  \n  \n [!code-cpp[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_13_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_13_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_13_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>recursivamente clonar a subárvore abaixo do nó especificado; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> clonar apenas o próprio nó."
    return:
      type: System.Xml.XmlNode
      description: "O clonado <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nó."
  overload: System.Xml.XmlDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  id: CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> com <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> especificado"
  remarks: "O `XmlAttribute` podem ser adicionados a um <xref:System.Xml.XmlElement>usando o <xref:System.Xml.XmlElement.SetAttributeNode%2A>método.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  example:
  - "The following creates an attribute and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_1_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_1_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome qualificado do atributo. Se o nome contém dois-pontos, o <> </> *> propriedade reflete a parte do nome do anterior o vírgula primeiro e o <> </> *> propriedade reflete a parte do nome após o primeiro dois-pontos. O <xref:System.Xml.XmlNode.NamespaceURI*>permanece vazia, a menos que o prefixo é um prefixo interno reconhecido como xmlns.</xref:System.Xml.XmlNode.NamespaceURI*> Nesse caso <xref uid=&quot;langword_csharp_NamespaceURI&quot; name=&quot;NamespaceURI&quot; href=&quot;&quot;> </xref> tem um valor de http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  id: CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> com especificado qualificado nome e <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "O `XmlAttribute` podem ser adicionados a um <xref:System.Xml.XmlElement>usando o <xref:System.Xml.XmlElement.SetAttributeNode%2A>método.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "O nome qualificado do atributo. Se o nome contém dois-pontos, o <> </> *> propriedade refletirá a parte do nome do anterior o vírgula e o <> </> *> propriedade refletirão a parte do nome após os dois-pontos."
    - id: namespaceURI
      type: System.String
      description: "O namespaceURI do atributo. Se o nome qualificado inclui um prefixo xmlns, esse parâmetro deve ser http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> com especificado <> </> *>, <> </> *> e <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "O `XmlAttribute` podem ser adicionados a um <xref:System.Xml.XmlElement>usando o <xref:System.Xml.XmlElement.SetAttributeNode%2A>método.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  syntax:
    content: public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "O prefixo do atributo (se houver). Empty e <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> são equivalentes."
    - id: localName
      type: System.String
      description: "O nome local do atributo."
    - id: namespaceURI
      type: System.String
      description: "O namespace URI do atributo (se houver). Empty e <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> são equivalentes. Se `prefix` for xmlns, esse parâmetro deve ser http://www.w3.org/2000/xmlns/; caso contrário, uma exceção será lançada."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  id: CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlCDataSection&quot;> </xref> que contém os dados especificados."
  remarks: "Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós CDataSection são permitidos em nós de elemento e nós EntityReference quando o nó EntityReference não é um filho de um nó de atributo."
  example:
  - "The following example creates a CDATA node and adds it to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_9_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_9_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);
    parameters:
    - id: data
      type: System.String
      description: "O conteúdo do novo <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlCDataSection
      description: "The new <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateCDataSection*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  id: CreateComment(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlComment&quot;> </xref> que contém os dados especificados."
  remarks: "Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), os nós de comentário só são permitidos em nós do documento, elemento e EntityReference, quando o nó EntityReference não é um filho de um nó de atributo."
  example:
  - "The following example creates a comment and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_12_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_12_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_12_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlComment CreateComment (string data);
    parameters:
    - id: data
      type: System.String
      description: "O conteúdo do novo <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlComment
      description: "The new <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateComment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  id: CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um atributo padrão com o prefixo especificado, o nome local e o URI de namespace."
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  syntax:
    content: protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "O prefixo do atributo (se houver)."
    - id: localName
      type: System.String
      description: "O nome local do atributo."
    - id: namespaceURI
      type: System.String
      description: "O namespace URI do atributo (se houver)."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  id: CreateDocumentFragment
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>."
  remarks: "Nós DocumentFragment não podem ser inseridos em um documento. No entanto, você pode inserir os filhos do nó de DocumentFragment em um documento."
  example:
  - "The following example adds new nodes to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_14_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_14_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_14_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();
    parameters: []
    return:
      type: System.Xml.XmlDocumentFragment
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentFragment&quot; name=&quot;XmlDocumentFragment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  id: CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retorna um novo <xref href=&quot;System.Xml.XmlDocumentType&quot;> </xref> objeto."
  remarks: "O nó retornado será ter analisado <xref:System.Xml.XmlDocumentType.Entities%2A>e <xref:System.Xml.XmlDocumentType.Notations%2A>coleções.</xref:System.Xml.XmlDocumentType.Notations%2A> </xref:System.Xml.XmlDocumentType.Entities%2A>       Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós DocumentType só são permitidas em nós do documento. Cada <xref:System.Xml.XmlDocument>pode ter apenas um nó de DocumentType.</xref:System.Xml.XmlDocument> O nó de DocumentType também deve ser inserido antes do elemento raiz da `XmlDocument` (se o documento já contém um elemento raiz, você não pode adicionar um nó de DocumentType).       Se os parâmetros passados não combinar para criar um arquivo `XmlDocumentType`, uma exceção será lançada."
  example:
  - "The following example creates a DocumentType node and adds it to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/cpp/8d2758e1-ca32-4a6b-b7e7-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/csharp/8d2758e1-ca32-4a6b-b7e7-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/visualbasic/8d2758e1-ca32-4a6b-b7e7-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);
    parameters:
    - id: name
      type: System.String
      description: "Nome do tipo de documento."
    - id: publicId
      type: System.String
      description: "O identificador público do tipo de documento ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Você pode especificar um URI público e também um identificador de sistema para identificar o local do subconjunto DTD externo."
    - id: systemId
      type: System.String
      description: "O identificador do sistema do tipo de documento ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Especifica a URL do local do arquivo para o subconjunto DTD externo."
    - id: internalSubset
      type: System.String
      description: "O subconjunto DTD interno do tipo de documento ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlDocumentType
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentType&quot; name=&quot;XmlDocumentType&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um elemento com o nome especificado."
  remarks: "Observe que a instância retornada implementa o `XmlElement` interface, portanto os atributos padrão pode ser criados diretamente no objeto retornado.       Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós de elemento são permitidos dentro do documento e nós de elemento e nós EntityReference quando o nó EntityReference não é um filho de um nó de atributo."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_17_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_17_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_17_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement CreateElement (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome qualificado do elemento. Se o nome contém dois-pontos, o <> </> *> propriedade reflete a parte do nome do anterior o vírgula e o <> </> *> propriedade reflete a parte do nome após os dois-pontos. O nome qualificado não pode incluir um prefixo of&quot;xmlns &quot;."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  id: CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlElement&quot;> </xref> com o nome qualificado e <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "O código c# a seguir ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy:item&quot;, &quot;urn:abc&quot;);   ``` resulta em um elemento que é equivalente à seguinte texto XML.      ```   <xy:item          xmlns:xy=&quot;urn:abc&quot;/>   ```Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós de elemento são permitidos dentro do documento e nós de elemento e nós EntityReference quando o nó EntityReference não é um filho de um nó de atributo."
  syntax:
    content: public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "O nome qualificado do elemento. Se o nome contém dois-pontos, o <> </> *> propriedade refletirá a parte do nome do anterior o vírgula e o <> </> *> propriedade refletirão a parte do nome após os dois-pontos. O nome qualificado não pode incluir um prefixo of&quot;xmlns &quot;."
    - id: namespaceURI
      type: System.String
      description: "O URI do namespace do elemento."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um elemento com especificado <> </> *>, <> </> *> e <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "O código c# a seguir ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy&quot;, &quot;item&quot;, &quot;urn:abc&quot;);   ``` cria um elemento equivalente para o seguinte texto XML: ```   <xy:item xmlns:xy=&quot;urn:abc&quot;/>   ``` Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós de elemento são permitidos dentro do documento e nós de elemento e nós EntityReference quando EntityReference está fora de um nó de atributo.       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example adds a new element to the existing XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/9cc675fc-f986-4de5-bce9-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/9cc675fc-f986-4de5-bce9-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/9cc675fc-f986-4de5-bce9-_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "O prefixo do novo elemento (se houver). Empty e <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> são equivalentes."
    - id: localName
      type: System.String
      description: "O nome local do novo elemento."
    - id: namespaceURI
      type: System.String
      description: "O namespace URI do novo elemento (se houver). Empty e <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> são equivalentes."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> com o nome especificado."
  remarks: "Se a entidade referenciada é conhecido, lista de filhos a `XmlEntityReference` nó torna-se o mesmo que o correspondente <xref:System.Xml.XmlEntity>nó.</xref:System.Xml.XmlEntity>       Os namespaces usados no texto de substituição para a referência de entidade são associados ao tempo que o pai do nó de referência de entidade é definido pela primeira vez (por exemplo, quando o nó de referência de entidade é inserido no documento). Por exemplo, dada a entidade a seguir: ```   <!ENTITY a &quot;<b>test</b>&quot;>   ``` se você chamar `CreateEntityReference(&quot;a&quot;)` você obtém um único nó do tipo EntityReference sem filhos. Se você adicionar este nó como um filho do nó seguinte, ```   <item xmlns=&quot;urn:1&quot;/>   ``` , em seguida, no momento da chamada <xref:System.Xml.XmlNode.AppendChild%2A>, o pai do nó de referência de entidade criado recentemente é definido e os filhos são expandidos neste contexto de namespace.</xref:System.Xml.XmlNode.AppendChild%2A> O nó de elemento filho `b` terá NamespaceURI igual a `urn:1`. Os nós filho da referência de entidade permanecem os mesmos, mesmo se você mover a referência de entidade para um local no documento que tem um contexto de namespace padrão diferente. Isso não acontecer para nós de referência de entidade existentes quando você remove e inseri-los ou para referências de entidade que você clonar com <xref:System.Xml.XmlDocument.CloneNode%2A>.</xref:System.Xml.XmlDocument.CloneNode%2A> Isso acontece apenas para referências de entidade criado recentemente.       Se a entidade correspondente não está definida no DocumentType quando o nó de referência de entidade é adicionado, porque a referência de entidade não está definida, o único nó filho será um nó de texto vazio.       O amp entidades internas, lt, gt, apos; quot também são permitidos, e eles terão um nó de texto filho com o valor do caractere expandido apropriado.       Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós EntityReference só são permitidas em nós de elemento, atributo e EntityReference."
  example:
  - "The following example creates two entity reference nodes and inserts them into an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_7_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_7_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome da referência de entidade."
    return:
      type: System.Xml.XmlEntityReference
      description: "The new <xref uid=&quot;langword_csharp_XmlEntityReference&quot; name=&quot;XmlEntityReference&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateEntityReference*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome é inválido (por exemplo, nomes que começam com &quot;#&quot; são inválidos.)"
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um novo <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objeto para navegar neste documento."
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public override System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "Um <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objeto."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objeto para navegar neste documento posicionado no <xref href=&quot;System.Xml.XmlNode&quot;> </xref> especificado."
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "O <xref href=&quot;System.Xml.XmlNode&quot;> </xref> você deseja inicialmente posicionado no navegador."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "Um <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> objeto."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  id: CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlNode&quot;> </xref> com o tipo de nó especificado, <> </> *>, e <> </> *>."
  remarks: "The `nodeTypeString` parameter is case sensitive and must be one of the values in the following table.  \n  \n|nodeTypeString|XmlNodeType|  \n|--------------------|-----------------|  \n|attribute|Attribute|  \n|cdatasection|CDATA|  \n|comment|Comment|  \n|document|Document|  \n|documentfragment|DocumentFragment|  \n|documenttype|DocumentType|  \n|element|Element|  \n|entityreference|EntityReference|  \n|processinginstruction|ProcessingInstruction|  \n|significantwhitespace|SignificantWhitespace|  \n|text|Text|  \n|whitespace|Whitespace|  \n  \n Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_15_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_15_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_15_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);
    parameters:
    - id: nodeTypeString
      type: System.String
      description: "Versão de cadeia de caracteres do <xref:System.Xml.XmlNodeType>do novo nó.</xref:System.Xml.XmlNodeType> Esse parâmetro deve ser um dos valores listados na tabela a seguir."
    - id: name
      type: System.String
      description: "O nome qualificado do novo nó. Se o nome contém dois-pontos, ela é analisada em <> </> *> e <> </> *> componentes."
    - id: namespaceURI
      type: System.String
      description: "O namespace URI do novo nó."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome não foi fornecido e o <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> requer um nome; ou <code> nodeTypeString </code> não é uma das cadeias de caracteres listadas abaixo."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlNode&quot;> </xref> com especificado <xref:System.Xml.XmlNodeType>, <> </> *>, e <> </> *>.</xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/csharp/5e223793-7104-464b-b797-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/cpp/5e223793-7104-464b-b797-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/visualbasic/5e223793-7104-464b-b797-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "O <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> do novo nó."
    - id: name
      type: System.String
      description: "O nome qualificado do novo nó. Se o nome contém dois-pontos, ela é analisada em <> </> *> e <> </> *> componentes."
    - id: namespaceURI
      type: System.String
      description: "O namespace URI do novo nó."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome não foi fornecido e o <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> requer um nome."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a <xref href=&quot;System.Xml.XmlNode&quot;></xref> with the specified <xref:System.Xml.XmlNodeType>, <>*>, <>*>, and <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*></xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/visualbasic/9b485b37-d267-4da7-a8ac-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/cpp/9b485b37-d267-4da7-a8ac-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/csharp/9b485b37-d267-4da7-a8ac-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "O <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> do novo nó."
    - id: prefix
      type: System.String
      description: "O prefixo do novo nó."
    - id: name
      type: System.String
      description: "O nome local do novo nó."
    - id: namespaceURI
      type: System.String
      description: "O namespace URI do novo nó."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome não foi fornecido e o <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> requer um nome."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  id: CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlProcessingInstruction&quot;> </xref> com o nome especificado e dados."
  remarks: "Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós de instrução de processamento só são permitidas em nós do documento, elemento e EntityReference, quando o nó EntityReference não é um filho de um nó de atributo."
  example:
  - "The following example creates a ProcessingInstruction node and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/cpp/b628e59c-914d-4083-89f5-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/visualbasic/b628e59c-914d-4083-89f5-_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/csharp/b628e59c-914d-4083-89f5-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);
    parameters:
    - id: target
      type: System.String
      description: "O nome da instrução de processamento."
    - id: data
      type: System.String
      description: "Os dados para a instrução de processamento."
    return:
      type: System.Xml.XmlProcessingInstruction
      description: "The new <xref uid=&quot;langword_csharp_XmlProcessingInstruction&quot; name=&quot;XmlProcessingInstruction&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateProcessingInstruction*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  id: CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlSignificantWhitespace&quot;> </xref> nó."
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM). Ele é usado quando você deseja formatar manualmente seu documento.       Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó."
  example:
  - "The following example adds significant white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_24_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_24_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_24_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "A cadeia de caracteres deve conter somente os seguintes caracteres &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlSignificantWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlSignificantWhitespace&quot; name=&quot;XmlSignificantWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateSignificantWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  id: CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlText&quot;> </xref> com o texto especificado."
  remarks: "Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nós de texto só são permitidos em nós de elemento, atributo e EntityReference."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_3_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_3_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_3_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlText CreateTextNode (string text);
    parameters:
    - id: text
      type: System.String
      description: "O texto para o nó de texto."
    return:
      type: System.Xml.XmlText
      description: "O novo <xref uid=&quot;langword_csharp_XmlText&quot; name=&quot;XmlText&quot; href=&quot;&quot;> </xref> nó."
  overload: System.Xml.XmlDocument.CreateTextNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  id: CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlWhitespace&quot;> </xref> nó."
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM). Ele é usado quando você deseja formatar manualmente seu documento.       Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó."
  example:
  - "The following example adds white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_4_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_4_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_4_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "A cadeia de caracteres deve conter somente os seguintes caracteres &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlWhitespace&quot; name=&quot;XmlWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  id: CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlDeclaration&quot;> </xref> nó com os valores especificados."
  remarks: "Os atributos são expostos como propriedades especiais sobre a `XmlDeclaration` nó e não como <xref:System.Xml.XmlAttribute>nós.</xref:System.Xml.XmlAttribute>       Embora esse método cria um novo objeto no contexto do documento, ele não adiciona automaticamente o novo objeto a árvore do documento. Para adicionar o novo objeto, você deve chamar explicitamente um dos métodos de inserção de nó.       De acordo com a recomendação do W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), o `XmlDeclaration` nó deve ser o primeiro nó no documento.       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example creates an XML declaration and adds it to the document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/csharp/89cf6f87-55c5-4c7d-9c11-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/cpp/89cf6f87-55c5-4c7d-9c11-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/visualbasic/89cf6f87-55c5-4c7d-9c11-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);
    parameters:
    - id: version
      type: System.String
      description: "A versão deve ser &quot;1.0&quot;."
    - id: encoding
      type: System.String
      description: "O valor do atributo de codificação. Isso é a codificação usada quando você salvar o <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> para um arquivo ou um fluxo; portanto, ele deve ser definido como uma cadeia de caracteres com suporte a <xref:System.Text.Encoding>classe, caso contrário <xref:System.Xml.XmlDocument.Save*>falhar.</xref:System.Xml.XmlDocument.Save*> </xref:System.Text.Encoding> Se isso for <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou Empty, o <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> método não grava um atributo de codificação na declaração XML e, portanto, o padrão de codificação UTF-8, é usado.       Observação: Se o <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> é salvo como um <xref:System.IO.TextWriter>ou um <xref:System.Xml.XmlTextWriter>, esse valor de codificação é descartado.</xref:System.Xml.XmlTextWriter> </xref:System.IO.TextWriter> Em vez disso, a codificação do <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_XmlTextWriter&quot; name=&quot;XmlTextWriter&quot; href=&quot;&quot;> </xref> é usado. Isso garante que leia o XML é gravado usando a codificação correta."
    - id: standalone
      type: System.String
      description: "O valor deve ser &quot;Sim&quot; ou &quot;não&quot;. Se isso for <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou Empty, o <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> método não grava um atributo autônomo na declaração XML."
    return:
      type: System.Xml.XmlDeclaration
      description: "O novo <xref uid=&quot;langword_csharp_XmlDeclaration&quot; name=&quot;XmlDeclaration&quot; href=&quot;&quot;> </xref> nó."
  overload: System.Xml.XmlDocument.CreateXmlDeclaration*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Os valores de <code> version </code> ou <code> standalone </code> são algo que não estão especificada acima."
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentElement
  id: DocumentElement
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém a raiz <xref href=&quot;System.Xml.XmlElement&quot;> </xref> para o documento."
  remarks: ''
  example:
  - "The following example displays the root element of the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_8_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_8_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_8_1.vb)]  \n  \n **Output:**  \n  \n```  \n<book genre=\"novel\" ISBN=\"1-861001-57-5\"><title>Pride And Prejudice</title></book>   \n```"
  syntax:
    content: public System.Xml.XmlElement DocumentElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "O <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> que representa a raiz da árvore do documento XML. Se nenhuma raiz existe, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> é retornado."
  overload: System.Xml.XmlDocument.DocumentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentType
  id: DocumentType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o nó que contém a declaração de DOCTYPE."
  remarks: "Um `XmlDocument` pode ter apenas um filho com <xref:System.Xml.XmlNodeType>igual a DocumentType.</xref:System.Xml.XmlNodeType>      > [!NOTE] > Esta propriedade é somente leitura. Para alterar o nó de DocumentType, excluir o nó existente, crie um novo usando um o <xref:System.Xml.XmlDocument.CreateDocumentType%2A>método e adicionar o novo nó ao documento.</xref:System.Xml.XmlDocument.CreateDocumentType%2A>"
  example:
  - "The following example gets and displays the DOCTYPE declaration for the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_4_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_4_1.cs)]\n [!code-vb[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_4_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType DocumentType { get; }
    return:
      type: System.Xml.XmlDocumentType
      description: "O <xref href=&quot;System.Xml.XmlNode&quot;> </xref> que contém o DocumentType (declaração de DOCTYPE)."
  overload: System.Xml.XmlDocument.DocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o <xref href=&quot;System.Xml.XmlElement&quot;> </xref> com a ID especificada."
  remarks: "Se o documento possui vários elementos com a ID de correspondência, esse método retorna o primeiro elemento correspondente no documento.      > [!NOTE] > Implementação o DOM deve ter informações que define os atributos que são do tipo ID. Embora os atributos do tipo ID podem ser definidos em esquemas XSD ou DTDs, esta versão do produto suporta apenas aquelas definidas em DTDs. Atributos com o nome &quot;ID&quot; não é do tipo ID, a menos que então definido no DTD. Implementações em que é desconhecido se os atributos são do tipo ID devem retornar `null`."
  example:
  - "The following example uses the `GetElementById` method.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_20_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_20_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_20_1.vb)]  \n  \n The example uses the file, `ids.xml`, as input.  \n  \n```xml  \n<!DOCTYPE root [  \n  <!ELEMENT root ANY>   \n  <!ELEMENT Person ANY>   \n  <!ELEMENT Customer EMPTY>  \n  <!ELEMENT Team EMPTY>  \n  <!ATTLIST Person SSN ID #REQUIRED>  \n  <!ATTLIST Customer id IDREF #REQUIRED >  \n  <!ATTLIST Team members IDREFS #REQUIRED>]>  \n<root>  \n  <Person SSN='A111' Name='Fred'/>  \n  <Person SSN='A222' Name='Tom'/>  \n  <Customer id='A222334444'/>  \n  <Team members='A222334444 A333445555'/>  \n</root>  \n```"
  syntax:
    content: public virtual System.Xml.XmlElement GetElementById (string elementId);
    parameters:
    - id: elementId
      type: System.String
      description: "A ID de atributo para corresponder."
    return:
      type: System.Xml.XmlElement
      description: "O <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> com a ID de correspondência ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum elemento correspondente foi encontrado."
  overload: System.Xml.XmlDocument.GetElementById*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retorna um <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> contendo uma lista de todos os elementos descendentes que correspondem a <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> especificado"
  remarks: "Os nós são colocados na ordem em que eles seriam encontrados no documento.      > [!NOTE] > É recomendável que você use o <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>ou <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>método em vez do método GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  example:
  - "The following example creates a `XmlDocument` object and uses the `GetElementsByTagName` method and the resulting <xref:System.Xml.XmlNodeList> object to display all the book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_10_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_10_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_10_1.vb)]  \n  \n The example uses the `books.xml` file as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_10_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome qualificado para fazer a correspondência. Ele é comparado com o <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> propriedade do nó correspondente. O valor especial &quot;*&quot; corresponde a todas as marcas."
    return:
      type: System.Xml.XmlNodeList
      description: "Um <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> contendo uma lista de todos os nós correspondentes. Se nenhum nó corresponde <code> name </code>, a coleção retornada estará vazia."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retorna um <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> contendo uma lista de todos os elementos descendentes que correspondem à cadeia <> </> *> e <> </> *>."
  remarks: "Os nós são colocados na ordem em que eles seriam encontrados na árvore do documento.      > [!NOTE] > É recomendável que você use o <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>ou <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>método em vez do método GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "LocalName para corresponder. O valor especial &quot;*&quot; corresponde a todas as marcas."
    - id: namespaceURI
      type: System.String
      description: "NamespaceURI para corresponder."
    return:
      type: System.Xml.XmlNodeList
      description: "Um <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> contendo uma lista de todos os nós correspondentes. Se nenhum nó corresponde especificado <code> localName </code> e <code> namespaceURI </code>, a coleção retornada estará vazia."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Implementation
  id: Implementation
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref> objeto para o documento atual."
  remarks: "`XmlDocument`objetos criados da mesma `XmlImplementation` compartilham o mesmo <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> Isso permite que os usuários comparar nomes de elementos e atributos como objetos em vez de cadeias de caracteres.       Embora o `XmlDocument` objetos compartilham a mesma implementação, mover os nós de um documento para outro, você deve usar o <xref:System.Xml.XmlDocument.ImportNode%2A>método.</xref:System.Xml.XmlDocument.ImportNode%2A>"
  example:
  - "The following example creates a new `XmlDocument` using another document's implementation.  \n  \n [!code-cs[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_11_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_11_1.vb)]"
  syntax:
    content: public System.Xml.XmlImplementation Implementation { get; }
    return:
      type: System.Xml.XmlImplementation
      description: "O <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;> </xref> objeto para o documento atual."
  overload: System.Xml.XmlDocument.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  id: ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Importa um nó de outro documento ao documento atual."
  remarks: "O nó retornado não tem pai. O nó de origem não é alterado ou removido do documento original. `ImportNode` cria uma cópia do nó de origem.       Um nó de importação cria um `XmlNode` objeto pertencente o importar o documento, com <xref:System.Xml.XmlNode.Name%2A>e <xref:System.Xml.XmlNode.NodeType%2A>idênticas ao nó de origem.</xref:System.Xml.XmlNode.NodeType%2A> </xref:System.Xml.XmlNode.Name%2A> O novo objeto também tem os atributos relacionados aos namespaces (<xref:System.Xml.XmlNode.Prefix%2A>, <xref:System.Xml.XmlNode.LocalName%2A>, e <xref:System.Xml.XmlNode.NamespaceURI%2A>).</xref:System.Xml.XmlNode.NamespaceURI%2A> </xref:System.Xml.XmlNode.LocalName%2A> </xref:System.Xml.XmlNode.Prefix%2A>       Dependendo do tipo de nó do nó importado e o valor de `deep` parâmetro, informações adicionais é copiado conforme apropriado. Esse método tentará espelho o comportamento esperado se um fragmento de origem XML ou HTML foi copiado de um documento para outro (reconhecer que, no caso de XML, os dois documentos podem ter diferentes DTDs).       A tabela a seguir descreve o comportamento específico para cada <xref:System.Xml.XmlNodeType>.</xref:System.Xml.XmlNodeType>      | XmlNodeType | ImportNode(true) | ImportNode(false) |   |-----------------|------------------------|-------------------------|   | Atributo | O <xref:System.Xml.XmlAttribute.Specified%2A>está definida como `true` em gerado <xref:System.Xml.XmlAttribute>.</xref:System.Xml.XmlAttribute> </xref:System.Xml.XmlAttribute.Specified%2A> Os descendentes de origem `XmlAttribute` recursivamente importados e os nós resultantes reorganizados para formar a subárvore correspondente. | O `deep` parâmetro não se aplica a `XmlAttribute` nós; eles sempre ter seus filhos com eles quando importado. |   | CData | Copia o nó, incluindo seus dados. | Copia o nó, incluindo seus dados. |   | Comentário | Copia o nó, incluindo seus dados. | Copia o nó, incluindo seus dados. |   | DocumentFragment | Os descendentes do nó de origem são recursivamente importados e nós resultantes reorganizados para formar a subárvore correspondente. | <xref:System.Xml.XmlDocumentFragment>Vazio é gerado. |   | DocumentType | Copia o nó, incluindo seus dados. *| Copia o nó, incluindo seus dados. *|   | Elemento | Os descendentes do elemento de origem e de seus nós de atributo especificado são recursivamente importados e nós resultantes reorganizados para formar a subárvore correspondente.</xref:System.Xml.XmlDocumentFragment><br /><br /> Observação: Os atributos padrão não são copiados. Se o documento que está sendo importado para definir atributos padrão para esse nome de elemento, aqueles atribuídos. | Atributo especificado, nós de elemento de origem são importados e gerado `XmlAttribute` nós são anexados a gerado <xref:System.Xml.XmlElement>.</xref:System.Xml.XmlElement><br /><br /> Observação: Os atributos padrão não são copiados. Se o documento que está sendo importado para definir atributos padrão para esse nome de elemento, aqueles atribuídos. |   | EntityReference | Como os documentos de origem e de destino podem ter entidades definidas de forma diferente, esse método apenas copia o <xref:System.Xml.XmlEntityReference>nó.</xref:System.Xml.XmlEntityReference> O texto de substituição não está incluído. Se o documento de destino tem a entidade definida, seu valor é atribuído. | Como os documentos de origem e de destino podem ter entidades definidas de forma diferente, esse método apenas copia o <xref:System.Xml.XmlEntityReference>nó.</xref:System.Xml.XmlEntityReference> O texto de substituição não está incluído. Se o documento de destino tem a entidade definida, seu valor é atribuído. |   | Instrução de processamento | Copia o valor de destino e os dados a partir do nó importado. | Copia o valor de destino e os dados a partir do nó importado. |   | Texto | Copia o nó, incluindo seus dados. | Copia o nó, incluindo seus dados. |   | SignificantWhitespace | Copia o nó, incluindo seus dados. | Copia o nó, incluindo seus dados. |   | Espaço em branco | Copia o nó, incluindo seus dados. | Copia o nó, incluindo seus dados. |   | XmlDeclaration | Copia o valor de destino e os dados a partir do nó importado. | Copia o valor de destino e os dados a partir do nó importado. |   | Todos os outros tipos de nó. | Esses tipos de nó não podem ser importados. | Esses tipos de nó não podem ser importados. |       * Embora DocumentType nós podem ser importados, um documento só pode ter um DocumentType. Se o documento tem um nó DocumenType, ele deve ser removido antes de adicionar um novo."
  example:
  - "The following example imports a book node from a second XML document into the original XML document.  \n  \n [!code-vb[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_22_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_22_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_22_1.cs)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_22_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "O nó que está sendo importado."
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para executar um clone profundo; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlNode
      description: "Importado <xref href=&quot;System.Xml.XmlNode&quot;> </xref>."
  overload: System.Xml.XmlDocument.ImportNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Chamar este método em um tipo de nó que não pode ser importado."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerText
  id: InnerText
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gera um <xref:System.InvalidOperationException>em todos os casos.</xref:System.InvalidOperationException>"
  remarks: "Essa propriedade não está implementada."
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "Os valores do nó e todos os seus nós filho."
  overload: System.Xml.XmlDocument.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Em todos os casos."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerXml
  id: InnerXml
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém ou define a marcação que representa os filhos do nó atual."
  remarks: "A definição dessa propriedade substitui os filhos do nó com o conteúdo analisado da cadeia de caracteres especificada. A análise é feita no contexto atual do namespace.       `InnerXml`Remove as declarações de namespace redundantes. Como resultado, vários comandos Recortar e colar operações não aumentam o tamanho do documento com declarações de namespace redundantes. Considere o seguinte documento XSL: ```   <xsl:stylesheet version=&quot;1.0&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        <xsl:template match=&quot;stock&quot;>            ...        </xsl:template>       </xsl:stylesheet>   ``` o `InnerXml` propriedade no nó de folha de estilos retorna a cadeia de caracteres a seguir: ```   <xsl:template match=&quot;stock&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        ...       </xsl:template>   ``` Observe a declaração de namespace xmlns: XSL adicional que é usada para preservar a identidade do nó. Se você inserir novamente essa cadeia de caracteres XML interna, você obterá novamente o documento original. Em outras palavras, `InnerXml` reconhece que a declaração de namespace xmlns: XSL é redundante, considerando que o elemento de XSL: stylesheet pai já tem o delcaration de namespace xmlns: XSL e, portanto, remove-lo.       Se você mover `InnerXml` de um documento sem namespace padrão para um documento com um namespace padrão, o comportamento é um pouco diferente. Considere a seguinte cadeia de caracteres XML: ```   <test>         <item>123</item>       </test>   ``` `InnerXml` retorna uma cadeia de caracteres XML simples com nenhum declarações de namespace: ```   <item>123</item>   ``` se você inserir essa cadeia de caracteres em um documento que tem um namespace padrão, como o seguinte: ```   <test2 xmlns=&quot;urn:1&quot;>       </test>   ``` `InnerXml` analisa a cadeia de caracteres no contexto e os novos nós pegar o namespace urn:&1;.               O resultado tem esta aparência: ```   <test2 xmlns=&quot;urn:1&quot;>         <item>123</item>       </test>   ``` agora quando você pedir a `InnerXml` você voltar a seguir: ```   <item xmlns=&quot;urn:1&quot;>123</item>   ``` se você quiser explicitamente o item inserido para preservar o fato de que ela foi originada de um documento que não tinha nenhum namespace, você precisa adicionar manualmente um xmlns = &quot;&quot; declaração e inserir a cadeia de caracteres resultante: ```   <item xmlns=&quot;&quot;>123</item>   ``` o efeito líquido de tudo isso é o seguinte: 1.  Recortando e colando `InnerXml` entre documentos que não usam espaços para nome é limpa e simples e não cria &quot;xmlns&quot; redundância em suas cadeias de caracteres.      2.  `InnerXml`também pode ser usado para recortar e colar entre documentos que têm mais de um namespace (ou seja, folhas de estilo XSL).      3.  declarações xmlns: XSL automaticamente aparecem em suas cadeias de caracteres e desaparecem em suas hierarquias de nó.      4.  No caso em que você está movendo `InnerXml` de um documento que não tem namespace padrão para um documento que tem um namespace padrão, os novos nós escolherá o novo namespace padrão.       Se `InnerXml` é definido com o texto que contém referências a entidades que não estão atualmente definidas no documento, a árvore resultante conterá nós EntityReference vazios.       Esta propriedade é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "A marcação dos filhos do nó atual."
  overload: System.Xml.XmlDocument.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "O XML especificado quando a definição dessa propriedade não está bem formada."
  platform:
  - net462
- uid: System.Xml.XmlDocument.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém um valor que indica se o nó atual é somente leitura."
  remarks: "Um nó somente leitura é um cujas propriedades, atributos ou filhos não pode ser alterado. Você pode remover um nó somente leitura da árvore e inseri-lo em outro lugar.       Esta propriedade é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example shows how to use the `IsReadOnly` property.  \n  \n [!code-cs[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_7_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_7_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o nó atual é somente leitura; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref>nós sempre retornam <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Carrega o documento XML do fluxo especificado."
  remarks: "> [!NOTE]> De `Load` método sempre preserva espaço em branco significativo. O <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>propriedade determina se o espaço em branco insignificante, que é o espaço em branco no conteúdo do elemento, é preservado.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> O padrão é `false`; o espaço em branco no conteúdo do elemento não é preservado.       Se você deseja que ocorra validação, você pode criar uma validação <xref:System.Xml.XmlReader>instância usando o <xref:System.Xml.XmlReaderSettings>classe e o <xref:System.Xml.XmlReader.Create%2A>método.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Para obter mais informações, consulte a seção comentários a <xref:System.Xml.XmlReader>página de referência.</xref:System.Xml.XmlReader>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM).       Este método detecta automaticamente o formato de cadeia de caracteres de entrada XML (por exemplo, UTF-8, ANSI e assim por diante). Se seu aplicativo precisa saber qual codificação é usado para ler o fluxo, considere usar um <xref:System.Xml.XmlTextReader>para ler o fluxo do objeto e, em seguida, use o <xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName>propriedade para determinar a codificação.</xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName> </xref:System.Xml.XmlTextReader> Se você precisar usar um <xref:System.Xml.XmlDocument>objeto para trabalhar com o XML, você pode usar o <xref:System.Xml.XmlTextReader>objeto para criar um.</xref:System.Xml.XmlTextReader> </xref:System.Xml.XmlDocument> Para obter mais informações, consulte [leitura de dados XML usando XPathDocument e XmlDocument](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "O fluxo que contém o documento XML para carregar."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Há um erro de análise de carga no XML. Nesse caso, um <xref:System.IO.FileNotFoundException>é gerado.</xref:System.IO.FileNotFoundException>"
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Carrega o documento XML de <xref:System.IO.TextReader>.</xref:System.IO.TextReader> especificado"
  remarks: "> [!NOTE]> De `Load` método sempre preserva espaço em branco significativo. O <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>propriedade determina se o espaço em branco insignificante, que é o espaço em branco no conteúdo do elemento, é preservado.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> O padrão é `false`; o espaço em branco no conteúdo do elemento não é preservado.       Se você deseja que ocorra validação, você pode criar uma validação <xref:System.Xml.XmlReader>instância usando o <xref:System.Xml.XmlReaderSettings>classe e o <xref:System.Xml.XmlReader.Create%2A>método.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Para obter mais informações, consulte a seção comentários a <xref:System.Xml.XmlReader>página de referência.</xref:System.Xml.XmlReader>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example uses the <xref:System.IO.StringReader> class to load a string of XML data into the `XmlDocument` object.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_8_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_8_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_8_1.cpp)]"
  syntax:
    content: public virtual void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "O <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> usada para inserir os dados XML no documento."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Há um erro de análise de carga no XML. Nesse caso, o documento permanece vazio."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Carrega o documento XML da URL especificada."
  remarks: "> [!NOTE]> De `Load` método sempre preserva espaço em branco significativo. O <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>propriedade determina se o espaço em branco insignificante, que é o espaço em branco no conteúdo do elemento, é preservado.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> O padrão é `false`; o espaço em branco no conteúdo do elemento não é preservado.       Se você deseja que ocorra validação, você pode criar uma validação <xref:System.Xml.XmlReader>instância usando o <xref:System.Xml.XmlReaderSettings>classe e o <xref:System.Xml.XmlReader.Create%2A>método.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Para obter mais informações, consulte a seção comentários a <xref:System.Xml.XmlReader>página de referência.</xref:System.Xml.XmlReader>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  syntax:
    content: public virtual void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "URL do arquivo que contém o documento XML a ser carregado. A URL pode ser um arquivo local ou uma URL de HTTP (um endereço da Web)."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Há um erro de análise de carga no XML. Nesse caso, um <xref:System.IO.FileNotFoundException>é gerado.</xref:System.IO.FileNotFoundException>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filename</code>é uma cadeia de caracteres de comprimento zero, contém somente espaços em branco ou contém um ou mais caracteres inválidos, conforme definido pelo <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filename</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome do arquivo ou ambos excederem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas baseadas em Windows, caminhos devem ter menos de 248 caracteres e nomes de arquivo devem ter menos de 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é uma unidade não mapeada)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ocorreu um erro de e/s ao abrir o arquivo."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>filename</code>especificado um arquivo que é somente leitura.       - ou - não há suporte para esta operação na plataforma atual.       - ou - <code>filename</code> especificado um diretório.       - ou - o chamador não tem a permissão necessária."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O arquivo especificado em <code> filename </code> não foi encontrado."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>filename</code>está em um formato inválido."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Carrega o documento XML de <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> especificado"
  remarks: "> [!NOTE]> De `Load` método sempre preserva espaço em branco significativo. O <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>propriedade determina se o espaço em branco insignificante, que é o espaço em branco no conteúdo do elemento, é preservado.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> O padrão é `false`; o espaço em branco no conteúdo do elemento não é preservado.       Se o leitor estiver no estado inicial (<xref:System.Xml.XmlReader.ReadState%2A> = ReadState.Initial), `Load` consome todo o conteúdo do leitor e cria o DOM do que encontrar.</xref:System.Xml.XmlReader.ReadState%2A>       Se o leitor já está posicionado em um nó em profundidade &quot;n&quot;, esse método carrega esse nó e todos os irmãos subsequentes até a marca de fim que fecha a profundidade &quot;n&quot;. Isso tem os seguintes resultados.       Se o nó atual e seus irmãos aparecem semelhante à seguinte: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` lança uma exceção porque um documento não pode ter dois elementos de nível de raiz.        Se o nó atual e seus irmãos aparecem semelhante à seguinte: ```   <!--comment--><?process instruction?><!--comment--></endtag>   ``` `Load` for bem-sucedida, mas você tem uma árvore DOM incompleta porque não há nenhum elemento de nível raiz.        Antes de salvar o documento, você deve adicionar um elemento de nível raiz, caso contrário <xref:System.Xml.XmlDocument.Save%2A>lançará uma exceção.</xref:System.Xml.XmlDocument.Save%2A>       Se o leitor está posicionado em um nó de folha é inválido para o nível raiz de um documento, por exemplo um espaço em branco ou um nó de atributo, o leitor continua a ler até que ele seja posicionado em um nó que pode ser usado para a raiz. O documento começa a carregar neste momento.       Se você deseja que ocorra validação, você pode criar uma validação <xref:System.Xml.XmlReader>instância usando o <xref:System.Xml.XmlReaderSettings>classe e o <xref:System.Xml.XmlReader.Create%2A>método.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Para obter mais informações, consulte a seção comentários a <xref:System.Xml.XmlReader>página de referência.</xref:System.Xml.XmlReader>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example loads the last book node of the `books.xml` file into the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_23_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_23_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_23_1.cpp)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_23_2.xml)]"
  syntax:
    content: public virtual void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> usada para inserir os dados XML no documento."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Há um erro de análise de carga no XML. Nesse caso, o documento permanece vazio."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  id: LoadXml(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Carrega o documento XML de cadeia de caracteres especificada."
  remarks: "Por padrão o `LoadXml` método não preservar o espaço em branco ou espaço em branco significativo.       Esse método analisa DTDs, mas não a validação de DTD ou esquema. Se você deseja que ocorra validação, você pode criar uma validação <xref:System.Xml.XmlReader>instância usando o <xref:System.Xml.XmlReaderSettings>classe e o <xref:System.Xml.XmlReader.Create%2A>método.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Para obter mais informações, consulte a seção comentários a <xref:System.Xml.XmlReader>página de referência.</xref:System.Xml.XmlReader>       Se você quiser carregar de uma <xref:System.IO.Stream>, <xref:System.String>, <xref:System.IO.TextReader>, ou <xref:System.Xml.XmlReader>, use o método Load em vez desse método.</xref:System.Xml.XmlReader> </xref:System.IO.TextReader> </xref:System.String> </xref:System.IO.Stream>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_2_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_2_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_2_1.vb)]"
  syntax:
    content: public virtual void LoadXml (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "Cadeia de caracteres que contém o documento XML para carregar."
  overload: System.Xml.XmlDocument.LoadXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Há um erro de análise de carga no XML. Nesse caso, o documento permanece vazio."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LocalName
  id: LocalName
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o nome local do nó."
  remarks: "O nome local retornado depende do <xref:System.Xml.XmlDocument.NodeType%2A>do nó.</xref:System.Xml.XmlDocument.NodeType%2A> Para ver uma tabela que descreve o nome local retornado para cada tipo de nó, consulte a <xref:System.Xml.XmlNode.LocalName%2A>propriedade de <xref:System.Xml.XmlNode>classe.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.LocalName%2A>"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: 'Para <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nós, o nome local é #document.'
  overload: System.Xml.XmlDocument.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Name
  id: Name
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o nome qualificado do nó."
  remarks: "O nome retornado depende do <xref:System.Xml.XmlDocument.NodeType%2A>do nó.</xref:System.Xml.XmlDocument.NodeType%2A> Para ver uma tabela que descreve o nome retornado para cada tipo de nó, consulte a <xref:System.Xml.XmlNode.Name%2A>propriedade de <xref:System.Xml.XmlNode>classe.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.Name%2A>"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: 'Para <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nós, o nome é #document.'
  overload: System.Xml.XmlDocument.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NameTable
  id: NameTable
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o <xref:System.Xml.XmlNameTable>associados com essa implementação.</xref:System.Xml.XmlNameTable>"
  remarks: "Cada `XmlDocument` objeto tem um <xref:System.Xml.NameTable>objeto.</xref:System.Xml.NameTable> Nomes de elementos e atributos são armazenados no `NameTable` como atomizadas cadeias de caracteres. Isso significa que mesmo se um nome é referenciado no documento várias vezes ele é armazenado somente uma vez no `NameTable`. Por exemplo, se o documento possui vários elementos com o nome &quot;Cliente&quot;, `NameTable` retorna o mesmo objeto sempre que ele receber uma solicitação para esse nome. Como resultado, os usuários podem escrever o código usando comparações de objeto essas cadeias de caracteres em vez de comparações de cadeias de caracteres mais caras.       Para obter mais informações sobre cadeias de caracteres atomizadas, consulte <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "Um <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;> </xref> permitindo que você obtenha a versão atomizada de uma cadeia de caracteres dentro do documento."
  overload: System.Xml.XmlDocument.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanged
  id: NodeChanged
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ocorre quando o <xref:System.Xml.XmlNode.Value*>de um nó que pertencem a este documento foi alterado.</xref:System.Xml.XmlNode.Value*>"
  remarks: "Esse evento só se aplica a nós que têm um valor.       Todos os nós criados por este documento, se elas foram inseridas no documento, ou não são incluídos nesse evento."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanged;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanging
  id: NodeChanging
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ocorre quando o <xref:System.Xml.XmlNode.Value*>de um nó que pertencem a este documento está prestes a ser alterado.</xref:System.Xml.XmlNode.Value*>"
  remarks: "Esse evento permite que o usuário fazer a verificação adicional e, se necessário, gerar uma exceção para interromper a operação. Se uma exceção for lançada a `XmlDocument` retorna ao estado original. Esse evento só se aplica a nós que têm um valor.       Todos os nós criados por este documento, se elas foram inseridas no documento, ou não são incluídos nesse evento."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanging;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserted
  id: NodeInserted
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ocorre quando um nó que pertencem a este documento foi inserido em outro nó."
  remarks: "Todos os nós criados por este documento, se elas foram inseridas no documento, ou não são incluídos nesse evento."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserted;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserting
  id: NodeInserting
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ocorre quando um nó que pertencem a este documento está prestes a ser inserido em outro nó."
  remarks: "Esse evento permite que o usuário fazer a verificação adicional e, se necessário, gerar uma exceção para interromper a operação. Se uma exceção for lançada a `XmlDocument` retorna ao estado original.       Todos os nós criados por este documento, se elas foram inseridas no documento, ou não são incluídos nesse evento."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserting;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoved
  id: NodeRemoved
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ocorre quando um nó que pertencem a este documento foi removido do seu pai."
  remarks: "Todos os nós criados por este documento, se elas foram inseridas no documento, ou não são incluídos nesse evento."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoving
  id: NodeRemoving
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Ocorre quando um nó que pertencem a este documento está prestes a ser removido do documento."
  remarks: "Esse evento permite que o usuário fazer a verificação adicional e, se necessário, gerar uma exceção para interromper a operação. Se uma exceção for lançada a `XmlDocument` retorna ao estado original.       Todos os nós criados por este documento, se elas foram inseridas no documento, ou não são incluídos nesse evento."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeType
  id: NodeType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o tipo do nó atual."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "O tipo de nó. Para <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nós, esse valor é XmlNodeType.Document."
  overload: System.Xml.XmlDocument.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> ao qual pertence o nó atual."
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "Para <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nós (<xref:System.Xml.XmlDocument.NodeType*> é igual a XmlNodeType.Document), essa propriedade sempre retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Xml.XmlDocument.NodeType*>"
  overload: System.Xml.XmlDocument.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ParentNode
  id: ParentNode
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém o nó pai deste nó (para nós que podem ter pais)."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "Sempre retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.PreserveWhitespace
  id: PreserveWhitespace
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém ou define um valor que indica se é preservar espaço em branco no conteúdo do elemento."
  remarks: "Essa propriedade determina como o espaço em branco é tratado durante o carregamento e processo de salvamento.       Se `PreserveWhitespace` é `true` antes de <xref:System.Xml.XmlDocument.Load%2A>ou <xref:System.Xml.XmlDocument.LoadXml%2A>é chamado, nós de espaços em branco são preservados; caso contrário, se essa propriedade for `false`, espaço em branco significativo é preservado, espaço em branco não é.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDocument.Load%2A>       Se `PreserveWhitespace` é `true` antes de <xref:System.Xml.XmlDocument.Save%2A>é chamado, o espaço em branco no documento é preservado na saída; caso contrário, se essa propriedade for `false`, `XmlDocument` recuos automaticamente a saída.</xref:System.Xml.XmlDocument.Save%2A>       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example shows how to strip white space from a file.  \n  \n [!code-cs[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_6_1.cs)]\n [!code-vb[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_6_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_6_1.cpp)]  \n  \n The example uses the file `book.xml` as input.  \n  \n [!code-xml[Classic WebData XmlDocument.PreserveWhitespace Example#2](~/add/codesnippet/xml/p-system.xml.xmldocument_6_2.xml)]"
  syntax:
    content: public bool PreserveWhitespace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para preservar espaço em branco; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.PreserveWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  id: ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Cria um <xref href=&quot;System.Xml.XmlNode&quot;> </xref> objeto com base nas informações em <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> O leitor deve ser posicionado em um nó ou um atributo."
  remarks: "Lê um `XmlNode` do leitor fornecido e posiciona o leitor no próximo nó. Esse método cria o tipo de `XmlNode` correspondentes a <xref:System.Xml.XmlNode.NodeType%2A>em que o leitor está atualmente posicionado.</xref:System.Xml.XmlNode.NodeType%2A> (Se o leitor estiver no estado inicial, `ReadNode` avança o leitor para o primeiro nó e, em seguida, opera nesse nó.)       Se o leitor está posicionado no início de um elemento `ReadNode` lê qualquer filho e todos os atributos de nós, até e incluindo a marca de fim do nó atual. O `XmlNode` retornado contém subárvore representando tudo de leitura. O leitor é posicionado imediatamente após a marca de fim.       `ReadNode`também pode ler atributos, mas nesse caso ele não Avançar o leitor para o próximo atributo. Isso permite que você escreva o código c# a seguir: ```   XmlDocument doc = new XmlDocument();   while (reader.MoveToNextAttribute())   {     XmlNode a = doc.ReadNode(reader);     // Do some more processing.   }   ``` `ReadNode` consumir o valor do atributo, que significa que depois de chamar `ReadNode` em um atributo, <xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>retorna `false`.</xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>       "
  example:
  - "The following example uses `ReadNode` to create a new node and then inserts the new node into the document.  \n  \n [!code-cs[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_21_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_21_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_21_1.vb)]  \n  \n The example uses the file, `cd.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlDocument.ReadNode Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_21_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A origem XML"
    return:
      type: System.Xml.XmlNode
      description: "O novo <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se houver mais nenhum nó."
  overload: System.Xml.XmlDocument.ReadNode*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "O leitor está posicionado em um tipo de nó que não se traduz em um nó DOM válido (por exemplo, EndElement ou EndEntity)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Salva o documento XML para o fluxo especificado."
  remarks: "Espaço em branco é preservado somente se <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>for definido como `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       XmlDeclaration de atual `XmlDocument` objeto determina o atributo de codificação do documento salvo. O valor do atributo de codificação é obtido do <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>propriedade.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Se o `XmlDocument` does não tem uma XmlDeclaration ou se o XmlDeclaration não tem um atributo de codificação, o documento salvo não terá uma ou.       Quando o documento é salvo, os atributos xmlns são gerados para manter a identidade do nó (local nome + namespace URI) corretamente. Por exemplo, o seguinte código c# ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` gera esse atributo xmls `<item xmls=&quot;urn:1&quot;/>`.       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM).       Observe que apenas o <xref:System.Xml.XmlDocument.Save%2A>método impõe um documento XML bem formado.</xref:System.Xml.XmlDocument.Save%2A> Todos os outros `Save` sobrecargas apenas garantem um fragmento bem formado."
  syntax:
    content: public virtual void Save (System.IO.Stream outStream);
    parameters:
    - id: outStream
      type: System.IO.Stream
      description: "O fluxo para o qual você deseja salvar."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "A operação não resulta em um documento XML bem formado (por exemplo, nenhum documento duplicado ou elemento XML declarações)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Salva o documento XML especificado <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "A codificação de `TextWriter` determina a codificação é gravado (a codificação do nó &quot; XmlDeclaration é substituída pela codificação do `TextWriter`). Se não havia nenhuma codificação especificada no `TextWriter`, o `XmlDocument` é salvo sem um atributo de codificação.       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM).       Observe que apenas o <xref:System.Xml.XmlDocument.Save%2A>método impõe um documento XML bem formado.</xref:System.Xml.XmlDocument.Save%2A> Todos os outros `Save` sobrecargas apenas garantem um fragmento bem formado."
  syntax:
    content: public virtual void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "O <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> à qual você deseja salvar."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "A operação não resulta em um documento XML bem formado (por exemplo, nenhum documento duplicado ou elemento XML declarações)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.String)
  id: Save(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Salva o documento XML para o arquivo especificado. Se o arquivo especificado existir, esse método substitui-lo."
  remarks: "Espaço em branco é preservado na saída arquivo somente se <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>for definido como `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       XmlDeclaration de atual `XmlDocument` objeto determina o atributo de codificação do documento salvo. O valor do atributo de codificação é obtido do <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>propriedade.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Se o `XmlDocument` does não tem uma XmlDeclaration ou se o XmlDeclaration não tem um atributo de codificação, o documento salvo não terá uma ou.       Quando o documento é salvo, os atributos xmlns são gerados para manter a identidade do nó (local nome + namespace URI) corretamente. Por exemplo, o seguinte código c# ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` gera esse atributo xmls `<item xmls=&quot;urn:1&quot;/>`.       Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM).       Observe que apenas o método Save impõe um documento XML bem formado. Todos os outros `Save` sobrecargas apenas garantem um fragmento bem formado."
  example:
  - "The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file named data.xml.  \n  \n [!code-cs[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_18_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_18_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_18_1.cpp)]  \n  \n The data.xml file will contain the following XML: `<item><name>wrench</name><price>10.95</price></item>`."
  syntax:
    content: public virtual void Save (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "O local do arquivo onde você deseja salvar o documento."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "A operação não resulta em um documento XML bem formado (por exemplo, nenhum documento duplicado ou elemento XML declarações)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Salva o documento XML especificado <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Espaço em branco é preservado somente se <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>for definido como `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       A codificação de `XmlWriter` determina a codificação é gravado (a codificação do nó &quot; XmlDeclaration é substituída pela codificação do `XmlWriter`). Se não havia nenhuma codificação especificada no `XmlWriter`, o `XmlDocument` é salvo sem um atributo de codificação.       Quando o documento é salvo, os atributos xmlns são gerados para manter a identidade do nó (LocalName + NamespaceURI) corretamente. Por exemplo, o seguinte código c# ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` gera esse atributo xmls: ```   <item       xmls=&quot;urn:1&quot;/>   ``` esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM).       Observe que apenas o <xref:System.Xml.XmlDocument.Save%2A>método impõe um documento XML bem formado.</xref:System.Xml.XmlDocument.Save%2A> Todos os outros `Save` sobrecargas apenas garantem um fragmento bem formado."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_5_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_5_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_5_1.vb)]"
  syntax:
    content: public virtual void Save (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "O <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> à qual você deseja salvar."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "A operação não resulta em um documento XML bem formado (por exemplo, nenhum documento duplicado ou elemento XML declarações)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retorna o Post-Schema-validação-Infoset psvi (POST) do nó."
  remarks: "O conteúdo de psvi POST dessa propriedade é definido depois que o nó é validado.       Esta propriedade é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "O <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> objeto que representa a psvi POST do nó."
  overload: System.Xml.XmlDocument.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Schemas
  id: Schemas
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Obtém ou define o <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> objeto associado a esta <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  remarks: "Os esquemas contidos em um <xref:System.Xml.Schema.XmlSchemaSet>objeto associado a um <xref:System.Xml.XmlDocument>objeto são usados para validação quando o <xref:System.Xml.XmlDocument.Validate%2A>método de um <xref:System.Xml.XmlDocument>é executado.</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument.Validate%2A> </xref:System.Xml.XmlDocument> </xref:System.Xml.Schema.XmlSchemaSet>       Quando um <xref:System.Xml.XmlDocument>objeto é inicializado com dados XML de um <xref:System.Xml.XmlReader>objeto, o <xref:System.Xml.Schema.XmlSchemaSet>objeto é carregado o <xref:System.Xml.XmlReaderSettings.Schemas%2A>propriedade do <xref:System.Xml.XmlReader>objeto.</xref:System.Xml.XmlReader> </xref:System.Xml.XmlReaderSettings.Schemas%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "Um <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> objeto que contém os esquemas de linguagem de definição de esquema XML (XSD) associados a esta <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>; caso contrário, vazio <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> objeto."
  overload: System.Xml.XmlDocument.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Valida o <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> em relação aos esquemas de linguagem de definição de esquema XML (XSD) contidos no <xref:System.Xml.XmlDocument.Schemas*>propriedade.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "O método Validate valida os dados XML a <xref:System.Xml.XmlDocument>em relação aos esquemas contidos no <xref:System.Xml.XmlDocument.Schemas%2A>propriedade.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlDocument> O método Validate executa infoset aumento. Especificamente, após a validação for bem-sucedida, padrões de esquema são aplicados, os valores de texto são convertidos em valores atômicos conforme necessário e informações de tipo são associadas a itens de informações validadas. O resultado é uma árvore de subdiretório anteriormente sem tipo XML no <xref:System.Xml.XmlDocument>substituído por uma subárvore digitada.</xref:System.Xml.XmlDocument>       A seguir estão observações importantes a considerar ao usar o método Validate.      -Como dicas de local de esquema `xsi:schemaLocation` ou `xsi:noNamespaceSchemaLocation` são ignorados.      -Esquemas embutidos são ignoradas.      -Se ocorrerem erros de validação de esquema durante a validação de <xref:System.Xml.XmlDocument>torna-se parcialmente validada com alguns nós com as informações do tipo correto e outras sem.</xref:System.Xml.XmlDocument>      -O processo de validação inclui a verificação de restrições de exclusividade e de referência (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, e `xs:unique`)."
  example:
  - "The following example illustrates use of the Validate method. The example creates an <xref:System.Xml.XmlDocument> that contains an associated XSD schema using the <xref:System.Xml.XmlReaderSettings> and <xref:System.Xml.XmlReader> objects. The example then uses the <xref:System.Xml.XPath.XPathNavigator> class to incorrectly modify the typed value of an element in the XML document generating a schema validation error.  \n  \n [!code-cs[XPathValidation#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_19_1.cs)]\n [!code-cpp[XPathValidation#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_19_1.cpp)]\n [!code-vb[XPathValidation#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_19_1.vb)]  \n  \n The example takes the `contosoBooks.xml` and `contosoBooks.xsd` files as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/m-system.xml.xmldocument_19_2.xml)]  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/m-system.xml.xmldocument_19_3.xsd)]"
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "O <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objeto que recebe informações sobre erros e avisos de validação de esquema."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Ocorreu um evento de validação de esquema e não <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objeto foi especificado."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  id: Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Valida o <xref href=&quot;System.Xml.XmlNode&quot;> </xref> o objeto especificado em relação aos esquemas de linguagem de definição de esquema XML (XSD) no <xref:System.Xml.XmlDocument.Schemas*>propriedade.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "O método Validate valida os dados XML no <xref:System.Xml.XmlNode>objeto em relação aos esquemas contidos no <xref:System.Xml.XmlDocument.Schemas%2A>propriedade.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlNode> O método Validate executa infoset aumento. Especificamente, após a validação for bem-sucedida, padrões de esquema são aplicados, os valores de texto são convertidos em valores atômicos conforme necessário e informações de tipo são associadas a itens de informações validadas. O resultado é uma árvore de subdiretório anteriormente sem tipo XML no <xref:System.Xml.XmlDocument>substituído por uma subárvore digitada.</xref:System.Xml.XmlDocument>       A seguir estão observações importantes a considerar ao usar o método Validate.      -Como dicas de local de esquema `xsi:schemaLocation` ou `xsi:noNamespaceSchemaLocation` são ignorados.      -Esquemas embutidos são ignoradas.      -Se ocorrerem erros de validação de esquema durante a validação de <xref:System.Xml.XmlDocument>torna-se parcialmente validada com alguns nós com as informações do tipo correto e outras sem.</xref:System.Xml.XmlDocument>       Se o nó a ser validado é o nó raiz, o processo de validação inclui a verificação de restrições de exclusividade e de referência (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, e `xs:unique`); caso contrário, as restrições de exclusividade e de referência são omitidas."
  example:
  - For an example of the Validate method, see the <xref:System.Xml.XmlDocument.Validate%2A> method.
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "O <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objeto que recebe informações sobre erros e avisos de validação de esquema."
    - id: nodeToValidate
      type: System.Xml.XmlNode
      description: "O <xref href=&quot;System.Xml.XmlNode&quot;> </xref> objeto criado a partir de um <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> para validar."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <xref href=&quot;System.Xml.XmlNode&quot;> </xref> parâmetro de objeto não foi criado de um <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref href=&quot;System.Xml.XmlNode&quot;> </xref> parâmetro de objeto não é um elemento, atributo, fragmento de documento ou o nó raiz."
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Ocorreu um evento de validação de esquema e não <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> objeto foi especificado."
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Salva todos os filhos do <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nó especificado <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM). É funcionalmente equivalente ao <xref:System.Xml.XmlDocument.InnerXml%2A>propriedade.</xref:System.Xml.XmlDocument.InnerXml%2A>       O <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>propriedade determina a codificação é gravado.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Se o `Encoding` propriedade não tem um valor, o `XmlDocument` é gravado sem um atributo de codificação."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cs[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_0_1.cs)]\n [!code-vb[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_0_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_0_1.cpp)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter xw);
    parameters:
    - id: xw
      type: System.Xml.XmlWriter
      description: "O <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> à qual você deseja salvar."
  overload: System.Xml.XmlDocument.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Salva o <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> nó especificado <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Esse método é uma extensão da Microsoft para modelo de objeto de documento (DOM). É funcionalmente equivalente ao <xref:System.Xml.XmlNode.OuterXml%2A>propriedade.</xref:System.Xml.XmlNode.OuterXml%2A>       O <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>propriedade determina a codificação é gravado.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Se o `Encoding` propriedade não tem um valor, o `XmlDocument` é gravado sem um atributo de codificação."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cpp[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_6_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_6_1.vb)]\n [!code-cs[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_6_1.cs)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "O <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> à qual você deseja salvar."
  overload: System.Xml.XmlDocument.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.XmlResolver
  id: XmlResolver
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Conjuntos de <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> a ser usado para resolver a recursos externos."
  remarks: "O `XmlResolver` pode ser usado para carregar DTDs ou expandir as referências de entidade. Usando o <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>propriedade, você pode definir as credenciais no `XmlResolver` para acessar os recursos armazenados em um recurso de rede segura.</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      -Se o documento não foi carregado usando um <xref:System.Xml.XmlReader>(ou seja, se ele foi carregado usando um fluxo, arquivo e assim por diante) o `XmlResolver` no `XmlDocument` sempre é usado.</xref:System.Xml.XmlReader>      -Se o documento foi carregado com um <xref:System.Xml.XmlTextReader>, o resolvedor no `XmlTextReader` é usado para resolver quaisquer referências DTD no nó &quot; DocumentType.</xref:System.Xml.XmlTextReader> O resolvedor na `XmlDocument` é usada para expandir as referências de entidade.      -Se o documento foi carregado com um <xref:System.Xml.XmlValidatingReader>, o resolvedor no `XmlDocument` nunca é usado.</xref:System.Xml.XmlValidatingReader>      -Se o documento foi carregado com uma classe que estende o `XmlReader` e `XmlReader` não é possível resolver entidades (<xref:System.Xml.XmlReader.CanResolveEntity%2A> retorna `false`), o `XmlResolver` no `XmlDocument` é usado para resolver todas as referências no nó &quot; DocumentType e expandir as referências de entidade.</xref:System.Xml.XmlReader.CanResolveEntity%2A>      > [!NOTE] > Se o `XmlDocument` são carregados usando um <xref:System.Xml.XmlReader>que tinha um `XmlResolver` definido, o `XmlResolver` no `XmlReader` não é armazenado em cache pelo `XmlDocument` depois <xref:System.Xml.XmlDocument.Load%2A>for concluída.</xref:System.Xml.XmlDocument.Load%2A> </xref:System.Xml.XmlReader>       Na versão 1.1 do.NET Framework, se essa propriedade não é definida, o nível de confiança do aplicativo determina o comportamento padrão.       `Fully trusted code:`O documento usa um padrão <xref:System.Xml.XmlUrlResolver>sem credenciais de usuário.</xref:System.Xml.XmlUrlResolver> Se a autenticação é necessária para acessar um recurso de rede, use o `XmlResolver` propriedade para especificar um `XmlResolver` com as credenciais necessárias.       `Semi-trusted code:`O `XmlResolver` está definida como `null`. Recursos externos não são resolvidos.       Para obter mais informações sobre segurança e o `XmlResolver` propriedade, consulte [Resolvendo recursos externos](~/add/includes/ajax-current-ext-md.md).       Esta propriedade é uma extensão da Microsoft para modelo de objeto de documento (DOM)."
  example:
  - "The following example loads an XML document which includes a reference to a DTD file. The `XmlResolver` property is used to set the credentials necessary to access the network resource.  \n  \n [!code-cpp[XmlDocument.XmlResolver#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[XmlDocument.XmlResolver#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_9_1.cs)]\n [!code-vb[XmlDocument.XmlResolver#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_9_1.vb)]  \n  \n The example uses the following data files as input.  \n  \n `book5.xml`  \n  \n [!code-xml[XmlDocument.XmlResolver#2](~/add/codesnippet/xml/p-system.xml.xmldocument_9_2.xml)]  \n  \n `books.dtd`  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "The <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref> to use.       Na versão 1.1 do.NET Framework, o chamador deve ser totalmente confiável para especificar um <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.XmlResolver*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Essa propriedade é definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e uma entidade ou DTD externo é encontrada."
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.XmlDocument.#ctor
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
- uid: System.Xml.XmlImplementation
  parent: System.Xml
  isExternal: false
  name: XmlImplementation
  nameWithType: XmlImplementation
  fullName: System.Xml.XmlImplementation
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlDocument.BaseURI
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
- uid: System.Xml.XmlCDataSection
  parent: System.Xml
  isExternal: false
  name: XmlCDataSection
  nameWithType: XmlCDataSection
  fullName: System.Xml.XmlCDataSection
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
- uid: System.Xml.XmlComment
  parent: System.Xml
  isExternal: false
  name: XmlComment
  nameWithType: XmlComment
  fullName: System.Xml.XmlComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
- uid: System.Xml.XmlDocumentFragment
  parent: System.Xml
  isExternal: false
  name: XmlDocumentFragment
  nameWithType: XmlDocumentFragment
  fullName: System.Xml.XmlDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
- uid: System.Xml.XmlDocumentType
  parent: System.Xml
  isExternal: false
  name: XmlDocumentType
  nameWithType: XmlDocumentType
  fullName: System.Xml.XmlDocumentType
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
- uid: System.Xml.XmlProcessingInstruction
  parent: System.Xml
  isExternal: false
  name: XmlProcessingInstruction
  nameWithType: XmlProcessingInstruction
  fullName: System.Xml.XmlProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
- uid: System.Xml.XmlSignificantWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlSignificantWhitespace
  nameWithType: XmlSignificantWhitespace
  fullName: System.Xml.XmlSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
- uid: System.Xml.XmlText
  parent: System.Xml
  isExternal: false
  name: XmlText
  nameWithType: XmlText
  fullName: System.Xml.XmlText
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
- uid: System.Xml.XmlWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlWhitespace
  nameWithType: XmlWhitespace
  fullName: System.Xml.XmlWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
- uid: System.Xml.XmlDeclaration
  parent: System.Xml
  isExternal: false
  name: XmlDeclaration
  nameWithType: XmlDeclaration
  fullName: System.Xml.XmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
- uid: System.Xml.XmlDocument.Implementation
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
- uid: System.Xml.XmlDocument.InnerText
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDocument.Load(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
- uid: System.Xml.XmlDocument.LocalName
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeChanged
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
- uid: System.Xml.XmlNodeChangedEventHandler
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedEventHandler
  nameWithType: XmlNodeChangedEventHandler
  fullName: System.Xml.XmlNodeChangedEventHandler
- uid: System.Xml.XmlDocument.NodeChanging
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
- uid: System.Xml.XmlDocument.NodeInserted
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
- uid: System.Xml.XmlDocument.NodeInserting
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
- uid: System.Xml.XmlDocument.NodeRemoved
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
- uid: System.Xml.XmlDocument.NodeRemoving
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
- uid: System.Xml.XmlDocument.NodeType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlDocument.ParentNode
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlDocument.Save(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlDocument.SchemaInfo
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlDocument.Schemas
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
- uid: System.Xml.XmlDocument.XmlResolver
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.XmlDocument.#ctor*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument.XmlDocument
- uid: System.Xml.XmlDocument.BaseURI*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
- uid: System.Xml.XmlDocument.CloneNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDocument.CloneNode
- uid: System.Xml.XmlDocument.CreateAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute
  nameWithType: XmlDocument.CreateAttribute
- uid: System.Xml.XmlDocument.CreateCDataSection*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection
  nameWithType: XmlDocument.CreateCDataSection
- uid: System.Xml.XmlDocument.CreateComment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment
  nameWithType: XmlDocument.CreateComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute
  nameWithType: XmlDocument.CreateDefaultAttribute
- uid: System.Xml.XmlDocument.CreateDocumentFragment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment
  nameWithType: XmlDocument.CreateDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType
  nameWithType: XmlDocument.CreateDocumentType
- uid: System.Xml.XmlDocument.CreateElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDocument.CreateElement
- uid: System.Xml.XmlDocument.CreateEntityReference*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDocument.CreateEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDocument.CreateNavigator
- uid: System.Xml.XmlDocument.CreateNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode
  nameWithType: XmlDocument.CreateNode
- uid: System.Xml.XmlDocument.CreateProcessingInstruction*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction
  nameWithType: XmlDocument.CreateProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace
  nameWithType: XmlDocument.CreateSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode
  nameWithType: XmlDocument.CreateTextNode
- uid: System.Xml.XmlDocument.CreateWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace
  nameWithType: XmlDocument.CreateWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration
  nameWithType: XmlDocument.CreateXmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDocument.GetElementById
- uid: System.Xml.XmlDocument.GetElementsByTagName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDocument.GetElementsByTagName
- uid: System.Xml.XmlDocument.Implementation*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode
  nameWithType: XmlDocument.ImportNode
- uid: System.Xml.XmlDocument.InnerText*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load
  nameWithType: XmlDocument.Load
- uid: System.Xml.XmlDocument.LoadXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml
  nameWithType: XmlDocument.LoadXml
- uid: System.Xml.XmlDocument.LocalName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument.ParentNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode
  nameWithType: XmlDocument.ReadNode
- uid: System.Xml.XmlDocument.Save*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save
  nameWithType: XmlDocument.Save
- uid: System.Xml.XmlDocument.SchemaInfo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
- uid: System.Xml.XmlDocument.Schemas*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
- uid: System.Xml.XmlDocument.Validate*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate
  nameWithType: XmlDocument.Validate
- uid: System.Xml.XmlDocument.WriteContentTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlDocument.WriteContentTo
- uid: System.Xml.XmlDocument.WriteTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo
  nameWithType: XmlDocument.WriteTo
- uid: System.Xml.XmlDocument.XmlResolver*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
