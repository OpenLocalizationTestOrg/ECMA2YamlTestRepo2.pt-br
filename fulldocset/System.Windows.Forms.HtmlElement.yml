### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.HtmlElement
  id: HtmlElement
  children:
  - System.Windows.Forms.HtmlElement.All
  - System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.CanHaveChildren
  - System.Windows.Forms.HtmlElement.Children
  - System.Windows.Forms.HtmlElement.Click
  - System.Windows.Forms.HtmlElement.ClientRectangle
  - System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.Document
  - System.Windows.Forms.HtmlElement.DomElement
  - System.Windows.Forms.HtmlElement.DoubleClick
  - System.Windows.Forms.HtmlElement.Drag
  - System.Windows.Forms.HtmlElement.DragEnd
  - System.Windows.Forms.HtmlElement.DragLeave
  - System.Windows.Forms.HtmlElement.DragOver
  - System.Windows.Forms.HtmlElement.Enabled
  - System.Windows.Forms.HtmlElement.Equals(System.Object)
  - System.Windows.Forms.HtmlElement.FirstChild
  - System.Windows.Forms.HtmlElement.Focus
  - System.Windows.Forms.HtmlElement.Focusing
  - System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  - System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  - System.Windows.Forms.HtmlElement.GetHashCode
  - System.Windows.Forms.HtmlElement.GotFocus
  - System.Windows.Forms.HtmlElement.Id
  - System.Windows.Forms.HtmlElement.InnerHtml
  - System.Windows.Forms.HtmlElement.InnerText
  - System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  - System.Windows.Forms.HtmlElement.KeyDown
  - System.Windows.Forms.HtmlElement.KeyPress
  - System.Windows.Forms.HtmlElement.KeyUp
  - System.Windows.Forms.HtmlElement.LosingFocus
  - System.Windows.Forms.HtmlElement.LostFocus
  - System.Windows.Forms.HtmlElement.MouseDown
  - System.Windows.Forms.HtmlElement.MouseEnter
  - System.Windows.Forms.HtmlElement.MouseLeave
  - System.Windows.Forms.HtmlElement.MouseMove
  - System.Windows.Forms.HtmlElement.MouseOver
  - System.Windows.Forms.HtmlElement.MouseUp
  - System.Windows.Forms.HtmlElement.Name
  - System.Windows.Forms.HtmlElement.NextSibling
  - System.Windows.Forms.HtmlElement.OffsetParent
  - System.Windows.Forms.HtmlElement.OffsetRectangle
  - System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.OuterHtml
  - System.Windows.Forms.HtmlElement.OuterText
  - System.Windows.Forms.HtmlElement.Parent
  - System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  - System.Windows.Forms.HtmlElement.RemoveFocus
  - System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  - System.Windows.Forms.HtmlElement.ScrollLeft
  - System.Windows.Forms.HtmlElement.ScrollRectangle
  - System.Windows.Forms.HtmlElement.ScrollTop
  - System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  - System.Windows.Forms.HtmlElement.Style
  - System.Windows.Forms.HtmlElement.TabIndex
  - System.Windows.Forms.HtmlElement.TagName
  langs:
  - csharp
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
  type: Class
  summary: "Representa um elemento HTML dentro de uma página da Web."
  remarks: "HtmlElement representa qualquer tipo possíveis de elemento em um documento HTML, como `BODY`, `TABLE`, e `FORM`, entre outros. A classe expõe as propriedades mais comuns que você pode esperar encontrar em todos os elementos.       A maioria dos elementos podem ter *elementos filho*: outros elementos HTML que são colocados sob eles. Use o <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>propriedade para testar se um determinado elemento tiver filhos e o <xref:System.Windows.Forms.HtmlElement.Children%2A>coleção percorrê-los.</xref:System.Windows.Forms.HtmlElement.Children%2A> </xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> O <xref:System.Windows.Forms.HtmlElement.Parent%2A>propriedade retorna o HtmlElement na qual o elemento atual está aninhado.</xref:System.Windows.Forms.HtmlElement.Parent%2A>       Muitas vezes, é preciso acesso a atributos, propriedades e métodos no elemento subjacente que não são diretamente expostos pelo HtmlElement, como o `SRC` de atributo em uma `IMG` elemento ou o `Submit` método em um `FORM`. O <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>métodos permitem que você recupere e alterar qualquer atributo ou propriedade em um elemento específico, enquanto <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>fornece acesso a todos os métodos não expostos no gerenciado modelo DOM (Document Object).</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> </xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> </xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> Se seu aplicativo não gerenciado permissão de código, você também pode acessar não expostas propriedades e métodos com o <xref:System.Windows.Forms.HtmlElement.DomElement%2A>atributo.</xref:System.Windows.Forms.HtmlElement.DomElement%2A>       Use o <xref:System.Windows.Forms.HtmlElement.TagName%2A>propriedade para testar se um elemento é de um tipo específico.</xref:System.Windows.Forms.HtmlElement.TagName%2A>       Qualquer documento HTML pode ser modificado no tempo de execução. Você pode criar novos objetos de HtmlElement com o <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>método <xref:System.Windows.Forms.HtmlDocument>e adicioná-los para outro elemento usando a <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>ou <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>métodos.</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A> </xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> Você também pode criar os elementos como marcas HTML e atribuí-los a um elemento existente <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>propriedade.</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  example:
  - "The following code example shows how to examine an arbitrary HTML document and derive a string describing the HTML elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public sealed class HtmlElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.All
  id: All
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém um <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref> de todos os elementos sob o elemento atual."
  remarks: "Para acessar apenas os elementos que têm o elemento atual como seu pai direto, use o <xref:System.Windows.Forms.HtmlElement.Children%2A>coleção em vez disso.</xref:System.Windows.Forms.HtmlElement.Children%2A>       Elementos nesta coleção não serão necessariamente retornados em ordem de origem."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection All { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "Uma coleção de todos os elementos que são filhos diretos ou indiretos do elemento atual. Se o elemento atual for um `TABLE`, por exemplo, todos os retornará cada `TH`, `TR`, e `TD` elemento dentro da tabela, bem como quaisquer outros elementos, como `DIV` e `SPAN` elementos, contidos dentro das células."
  overload: System.Windows.Forms.HtmlElement.All*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  id: AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adiciona um elemento a subárvore do outro elemento."
  remarks: "O modelo de objeto de documento (DOM) HTML permite que você altere o conteúdo de tempo de execução de um arquivo HTML de várias maneiras. Use AppendChild para adicionar novos elementos para um documento existente, ou para mover um elemento na página.       Se um elemento já tiver sido pai, acrescentar um elemento para outro elemento removerá automaticamente esse elemento de seu pai anterior.       As inclusões feitas em um documento em tempo de execução usar AppendChild não será mantido quando você chamar o <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>método o <xref:System.Windows.Forms.WebBrowser>controle.</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>"
  example:
  - "The following code example creates a new hyperlink using the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method and adds it to end of a page using `AppendChild` on the `BODY` element. The example requires that your application contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "O <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> anexar a este local na árvore."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "O elemento depois que ele foi adicionado à árvore."
  overload: System.Windows.Forms.HtmlElement.AppendChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  id: AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adiciona um manipulador de eventos para um evento nomeado no HTML DOM Document Object Model ()."
  remarks: "O modelo gerenciado objeto de documento (DOM) expõe apenas selecionar um número de eventos. A maioria dos eventos não expostos é definida somente para tipos específicos de elementos; como o `submit` evento, que só é válido em `FORM` elementos. Use AttachEventHandler para adicionar um manipulador de eventos para esses eventos não expostos.       Você não deve anexar um evento para o documento ou um de seus objetos até que o documento for carregado. É o mais recente que você deve chamar esse método no <xref:System.Windows.Forms.WebBrowser.DocumentCompleted>evento o <xref:System.Windows.Forms.WebBrowser>controle.</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.DocumentCompleted>       Para obter mais informações sobre os eventos não gerenciados disponíveis, consulte [acessando membros não expostos no modelo de objeto de documento HTML gerenciado](~/add/includes/ajax-current-ext-md.md) e as interfaces IHTMLElement: [IHTMLElement](http://go.microsoft.com/fwlink/?LinkId=104876), [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877), [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878), [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)."
  syntax:
    content: public void AttachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "O nome do evento que você deseja controlar."
    - id: eventHandler
      type: System.EventHandler
      description: "O código gerenciado que manipula o evento."
  overload: System.Windows.Forms.HtmlElement.AttachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  id: CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém um valor que indica se este elemento pode ter elementos filho."
  remarks: "Alguns elementos, como `IMG` e `SCRIPT`, não pode ter nenhum filho. Use essa propriedade antes de chamar <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>ou <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>em um elemento arbitrário.</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A>"
  example:
  - "The following code example handles the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>. If an element was not previous selected using a mouse click, the code assigns the element to a private class variable named `MoveElement`. If an element was selected, the code attempts to append it to the element that was just clicked. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have already added an event handler for the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#2)]\n [!code-cs[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#2)]"
  syntax:
    content: public bool CanHaveChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento pode ter elementos filho; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.CanHaveChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Children
  id: Children
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém um <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref> de todos os filhos do elemento atual."
  remarks: "Muitos dos elementos dentro de um arquivo HTML podem ter outros elementos HTML sob eles. A coleção de filhos fornece um mecanismo simples para explorar a estrutura de árvore de um documento.       Filhos expõe apenas os elementos cujo pai direto é o elemento atual. Se você tiver um <xref:System.Windows.Forms.HtmlElement>para um `TABLE` elemento filhos fornecerá todos o `TR` elementos (linha) dentro do `TABLE`.</xref:System.Windows.Forms.HtmlElement> Para recuperar o `TD` elementos (célula) contidos dentro do `TR` elementos, você precisará usar a coleção Children em cada indivíduo `TR` elemento ou use a <xref:System.Windows.Forms.HtmlElement.All%2A>coleção em <xref:System.Windows.Forms.HtmlElement>.</xref:System.Windows.Forms.HtmlElement> </xref:System.Windows.Forms.HtmlElement.All%2A>       Não há garantia de elementos nesta coleção em ordem de origem.       Se <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>é `false`, `Children` sempre estará vazia.</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>"
  example:
  - "The following code example examines an arbitrary HTML document and derive a string describing the elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. It does this by searching the `Children` collection of all elements recursively, starting with the HTML element at the top of the document. This code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Children { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "Uma coleção de todos os <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> objetos que têm o elemento atual como um pai."
  overload: System.Windows.Forms.HtmlElement.Children*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Click
  id: Click
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário clica no elemento com o botão esquerdo do mouse."
  remarks: "Você pode cancelar a ação padrão para um evento de clique em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento de clique em um elemento também ocorrerá em elementos do pai do elemento e, na <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Se o usuário clica em um elemento não atualmente com entrada foco, o evento Click ocorrerá após o <xref:System.Windows.Forms.HtmlElement.Focusing>evento, mas antes de <xref:System.Windows.Forms.HtmlElement.LostFocus>evento para esse elemento.</xref:System.Windows.Forms.HtmlElement.LostFocus> </xref:System.Windows.Forms.HtmlElement.Focusing>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Click event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Click event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#432](~/add/codesnippet/csharp/e-system.windows.forms.h_5_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#432](~/add/codesnippet/visualbasic/e-system.windows.forms.h_5_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Click;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  id: ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém os limites da área cliente do elemento no documento HTML."
  remarks: "ClientRectangle retornará a posição de dados somente para elementos que foram atribuídos explícita de altura e largura ou elementos que usam o posicionamento absoluto. Um documento é posicionado absolutamente se seu estilo de posição é definido como `absolute`, depois que ele pode ser posicionado em qualquer coordenada na página HTML."
  example:
  - "Assume you have loaded the following HTML page into a hosted instance of the <xref:System.Windows.Forms.WebBrowser> control.  \n  \n```  \n<HTML>  \n  \n    <BODY>  \n  \n        <DIV id=\"div1\" style=\"position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;\">  \n            Edit this text.  \n        </DIV>  \n  \n    </BODY>  \n  \n</HTML>  \n```  \n  \n The following code example demonstrates retrieving this element and expanding its dimensions if the client area is less than 400 pixels wide by 50 pixels high, and also sets the `DIV` to the `contentEditable` state so that the user can input text.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#3)]\n [!code-cs[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#3)]"
  syntax:
    content: public System.Drawing.Rectangle ClientRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "A área cliente ocupada pelo elemento, menos qualquer área usada pelo bordas e barras de rolagem. Para obter a posição e dimensões do elemento incluindo seus ornamentos, use <xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>em vez disso.</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>"
  overload: System.Windows.Forms.HtmlElement.ClientRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  id: DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Remove um manipulador de eventos de um evento nomeado no HTML DOM Document Object Model ()."
  syntax:
    content: public void DetachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "O nome do evento que você deseja controlar."
    - id: eventHandler
      type: System.EventHandler
      description: "O código gerenciado que manipula o evento."
  overload: System.Windows.Forms.HtmlElement.DetachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Document
  id: Document
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o <xref href=&quot;System.Windows.Forms.HtmlDocument&quot;> </xref> ao qual pertence este elemento."
  remarks: "Algumas páginas HTML podem hospedar quadros usando o `FRAMESET` marcas. Nesse caso, cada indivíduo `FRAME` elemento conterá sua própria instância do <xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument> Essa propriedade é mais útil quando você recebeu uma referência a um elemento em um manipulador de eventos do <xref:System.Windows.Forms.HtmlElementEventArgs>e precisa executar alguma ação no documento no qual reside o elemento.</xref:System.Windows.Forms.HtmlElementEventArgs>"
  syntax:
    content: public System.Windows.Forms.HtmlDocument Document { get; }
    return:
      type: System.Windows.Forms.HtmlDocument
      description: "O documento pai deste elemento."
  overload: System.Windows.Forms.HtmlElement.Document*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DomElement
  id: DomElement
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém um ponteiro de interface não gerenciado para este elemento."
  remarks: "<xref:System.Windows.Forms.HtmlElement>é um wrapper para o Internet Explorer DOM Document Object Model (), que está escrito usando o modelo de objeto de componente (COM).</xref:System.Windows.Forms.HtmlElement> Se você precisar acessar não expostas propriedades ou métodos em interfaces de COM subjacentes, como `IHTMLElement`, você pode usar esse objeto de consulta para eles.       Para usar as interfaces não gerenciadas, você precisará importar biblioteca MSHTML (Mshtml. dll) para seu aplicativo. No entanto, você também pode executar não expostas propriedades e métodos usando o `Invoke` método."
  example:
  - "The following code example uses unmanaged interfaces to take the currently selected text and convert it into a hyperlink, with the URL chosen by the user. This code was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have added the unmanaged MSHTML library as a reference to your project.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#4)]\n [!code-cs[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#4)]"
  syntax:
    content: public object DomElement { get; }
    return:
      type: System.Object
      description: "O COM `IUnknown` interfaces de ponteiro para o elemento, que pode ser convertido para um elemento HTML, como `IHTMLElement`."
  overload: System.Windows.Forms.HtmlElement.DomElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  id: DoubleClick
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário clica no botão esquerdo do mouse sobre um elemento duas vezes em sucessão rápida."
  remarks: "Um clique duplo é determinado pelas configurações de mouse do sistema operacional do usuário. O usuário pode definir o tempo entre cliques de um botão do mouse que deve ser considerada um clique duplo em vez de dois cliques.       Você pode cancelar a ação padrão para um evento DoubleClick em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento DoubleClick em um elemento também ocorrerá em elementos do pai do elemento e, na <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DoubleClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#433](~/add/codesnippet/csharp/e-system.windows.forms.h_26_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#433](~/add/codesnippet/visualbasic/e-system.windows.forms.h_26_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Drag
  id: Drag
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário arrasta o texto em vários locais."
  remarks: "Esse evento ocorre quando o texto é arrastado para os seguintes locais: - dentro ou entre páginas HTML hospedadas no <xref:System.Windows.Forms.WebBrowser>controle ou área de trabalho do Internet Explorer - para outro aplicativo - para o Windows pode cancelar a ação padrão para um evento de arrastar em um elemento definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> </xref:System.Windows.Forms.WebBrowser>       Um evento de arrastar em um elemento também ocorrerá em elementos do pai do elemento e na <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade do <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Drag event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#434](~/add/codesnippet/csharp/e-system.windows.forms.h_11_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#434](~/add/codesnippet/visualbasic/e-system.windows.forms.h_11_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Drag;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragEnd
  id: DragEnd
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando um usuário termina uma operação de arrastar."
  remarks: "Você pode cancelar a ação padrão para um evento DragEnd em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento DragEnd em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragEnd event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragEnd event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#435](~/add/codesnippet/csharp/e-system.windows.forms.h_35_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#435](~/add/codesnippet/visualbasic/e-system.windows.forms.h_35_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragEnd;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragLeave
  id: DragLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário não está arrastando um item sobre este elemento."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#436](~/add/codesnippet/csharp/e-system.windows.forms.h_21_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#436](~/add/codesnippet/visualbasic/e-system.windows.forms.h_21_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragOver
  id: DragOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário arrasta o texto sobre o elemento."
  remarks: "Você pode cancelar a ação padrão para um evento DragOver em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento DragOver em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#437](~/add/codesnippet/csharp/e-system.windows.forms.h_31_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#437](~/add/codesnippet/visualbasic/e-system.windows.forms.h_31_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Enabled
  id: Enabled
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define se o usuário pode inserir dados no elemento."
  remarks: "Para `FORM` elementos, como caixas de texto e botões de opção, definindo habilitado como `false` impedirá que o usuário usando esses campos de formulário. Para outros elementos, como `DIV` ou `SPAN`, definindo habilitado como `false` fará com que todo o texto dentro do elemento pareça sombreada; no entanto, o texto ainda poderão ser selecionado. Para cancelar a seleção, adicione um manipulador de eventos para o não exposta `onselectstart` evento usando o <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>método.</xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento permite que a entrada do usuário; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Testa se o objeto fornecido é igual ao elemento atual."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto para testar a igualdade."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>obj</code> is an <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.FirstChild
  id: FirstChild
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o próximo elemento abaixo desse elemento na árvore do documento."
  remarks: "Use FirstChild em conjunto com <xref:System.Windows.Forms.HtmlElement.NextSibling%2A>para percorrer a árvore do documento para um documento HTML.</xref:System.Windows.Forms.HtmlElement.NextSibling%2A>"
  syntax:
    content: public System.Windows.Forms.HtmlElement FirstChild { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "Um <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> que representa o primeiro elemento contido sob o elemento atual, em ordem de origem."
  overload: System.Windows.Forms.HtmlElement.FirstChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focus
  id: Focus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Coloca o foco de entrada do usuário no elemento atual."
  remarks: "Definir o foco em um elemento coloca o foco desse elemento tanto torna o elemento ativo; Por exemplo, o elemento que tem o foco será retornado pela <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>propriedade de <xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>       Qualquer pressionamentos de tecla digitados por um usuário, após ter sido chamado foco serão enviados a esse elemento."
  syntax:
    content: public void Focus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focusing
  id: Focusing
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o elemento primeiro recebe foco de entrada do usuário."
  remarks: "Um elemento que tinha o foco para o usuário alternar para outro aplicativo usando a barra de tarefas ou as teclas ALT + TAB receberá o Focusing e <xref:System.Windows.Forms.HtmlElement.GotFocus>eventos novamente quando o usuário alterna para o aplicativo.</xref:System.Windows.Forms.HtmlElement.GotFocus>       Você não pode cancelar o comportamento padrão desse evento. Para remover o foco de um elemento, chame <xref:System.Windows.Forms.HtmlElement.Focus%2A>em um elemento diferente de dentro do <xref:System.Windows.Forms.HtmlElement.GotFocus>evento.</xref:System.Windows.Forms.HtmlElement.GotFocus> </xref:System.Windows.Forms.HtmlElement.Focus%2A>       Um evento Focusing em um elemento também ocorrerá no pai do elemento e no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Focusing event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#438](~/add/codesnippet/csharp/e-system.windows.forms.h_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#438](~/add/codesnippet/visualbasic/e-system.windows.forms.h_10_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Focusing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Recupera o valor de atributo nomeado no elemento."
  remarks: "Um atributo em HTML é qualquer par de nome/valor válido para esse elemento. <xref:System.Windows.Forms.HtmlElement>expõe apenas os atributos que são comuns a todos os elementos, deixando as que se aplicam somente a determinados tipos de elementos; `SRC` é um atributo predefinido para a `IMG` marca, por exemplo, mas não para o `DIV` marca.</xref:System.Windows.Forms.HtmlElement> Use GetAttribute e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>para manipular os atributos não são expostos no gerenciado modelo DOM (Document Object).</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>       GetAttribute e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>diferenciam maiusculas de minúsculas.</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>"
  example:
  - "The following code example retrieves all of the `META` tags within an HTML document, using GetAttribute to find the `META` tag with the name `Description`. The example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/visualbasic/HtmlDocumentProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/csharp/HtmlDocumentProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public string GetAttribute (string attributeName);
    parameters:
    - id: attributeName
      type: System.String
      description: "O nome do atributo. Esse argumento diferencia maiusculas de minúsculas."
    return:
      type: System.String
      description: "O valor desse atributo no elemento, como um <xref:System.String>valor.</xref:System.String> Se o atributo especificado não existe neste elemento, retorna uma cadeia de caracteres vazia."
  overload: System.Windows.Forms.HtmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Recupera uma coleção de elementos representada em HTML pelo `HTML` marca."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);
    parameters:
    - id: tagName
      type: System.String
      description: "O nome da marca cujos <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> objetos você deseja recuperar."
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "Um <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref> que contém todos os elementos cujo `HTML` o nome da marca é igual a <code> tagName </code>."
  overload: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  id: GetHashCode
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Serve como uma função de hash para um tipo específico."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para <xref:System.Object>.</xref:System.Object> atual"
  overload: System.Windows.Forms.HtmlElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GotFocus
  id: GotFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o elemento tiver recebido o foco de entrada do usuário."
  remarks: "Não é possível cancelar o comportamento padrão desse evento, nem impedi-lo de bolha. Para remover o foco de um elemento, chame <xref:System.Windows.Forms.HtmlElement.Focus%2A>em um elemento diferente de dentro do evento GotFocus.</xref:System.Windows.Forms.HtmlElement.Focus%2A>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "Save the following HTML code into a file, and load the file into a <xref:System.Windows.Forms.WebBrowser> control in a Windows Forms project.  \n  \n```  \n<HTML>  \n    <BODY>  \n        <FORM name=\"form1\">  \n            <INPUT type=\"text\" size=20 name=\"text1\">  \n            <INPUT type=\"text\" size=20 name=\"text2\">  \n            <INPUT type=\"text\" size=20 name=\"text3\">  \n        </FORM>  \n    </BODY>  \n</HTML>  \n```  \n  \n The following code example prevents the next `INPUT` element in the tab order from receiving user input focus if the previous element contains less than five characters. The example requires that the previously mentioned HTML file is loaded into an instance of the <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#15)]\n [!code-cs[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler GotFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Id
  id: Id
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define um rótulo identificar o elemento."
  remarks: "ID deve ser exclusiva. Você não pode ter dois elementos com a mesma Id dentro do mesmo documento. Use o <xref:System.Windows.Forms.HtmlElement.Name%2A>propriedade para fornecer o mesmo identificador a um grupo de elementos logicamente relacionados.</xref:System.Windows.Forms.HtmlElement.Name%2A>"
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "O identificador exclusivo para o elemento."
  overload: System.Windows.Forms.HtmlElement.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  id: InnerHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define a marcação HTML sob esse elemento."
  remarks: "Há várias maneiras de adicionar novos elementos a uma página HTML existente, como o <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>e <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>métodos.</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A> Usar InnerHtml geralmente é a maneira mais rápida para adicionar o novo conteúdo quando você precisa definir vários atributos ou estilos em seus novos elementos.       InnerHtml difere <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>nessa InnerHtml não incluirá o HTML que representa o objeto que está chamando.</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> Consulte <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>para obter mais informações sobre a diferença entre essas duas propriedades.</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>       Definir InnerHtml destrói todos os filhos anteriormente anexados ao elemento. Se você recupera um elemento DOM e, em seguida, atribuir novo HTML a propriedade InnerHtml de seus pais, sua referência para esse elemento será inútil e seu comportamento quando chama seus métodos e propriedades é indefinido.       Para alguns elementos, a configuração InnerHtml não é uma operação válida. Algumas marcas HTML não têm nenhuma marca de fechamento, como o `IMG` marca e, portanto, não pode conter elementos aninhados. Algumas marcas, como o `SCRIPT` marca, só pode conter texto conteúdo; configuração InnerHtml resultará em erro. Os dois tipos de marcas, o <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>propriedade retornará `false`.</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> No entanto, você também não é possível definir InnerHtml em `TABLE` e `TR` elementos, como atribuindo HTML malformado a esses elementos podem corromper o processamento do documento. Use <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>ou `insertRow` e `insertCell` métodos não gerenciado `IHTMLTable` interface para adicionar linhas e células para um `TABLE`.</xref:System.Windows.Forms.HtmlElement.AppendChild%2A>       Se você somente precisa atribuir texto a um elemento e não uma marcação HTML, use o <xref:System.Windows.Forms.HtmlElement.InnerText%2A>propriedade em vez disso.</xref:System.Windows.Forms.HtmlElement.InnerText%2A>       Atribuindo um valor para InnerHtml destruirá quaisquer valores de texto anteriormente atribuídos usando <xref:System.Windows.Forms.HtmlElement.InnerText%2A>.</xref:System.Windows.Forms.HtmlElement.InnerText%2A>"
  syntax:
    content: public string InnerHtml { get; set; }
    return:
      type: System.String
      description: "A marcação HTML que define os elementos filho do elemento atual."
  overload: System.Windows.Forms.HtmlElement.InnerHtml*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Não é permitida a criação de elementos filho neste elemento."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerText
  id: InnerText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define o texto atribuído ao elemento."
  remarks: "Se você tentar atribuir HTML para um elemento com InnerText, o código HTML será exibido como literais no documento, como se você estava exibindo HTML dentro de um arquivo de texto. Se você atribuir o HTML para um elemento usando o <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>propriedade InnerText retornará todo o texto em que o HTML com a marcação removido.</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>       Atribuindo um valor para InnerText destruirá quaisquer elementos-filho que pertencem ao elemento."
  example:
  - "The following code creates a new hyperlink using <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, and assigns text to the link using the InnerText property.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public string InnerText { get; set; }
    return:
      type: System.String
      description: "Texto do elemento ausente qualquer marcação HTML. Se o elemento contém elementos filho, o texto em um desses elementos filho será preservado."
  overload: System.Windows.Forms.HtmlElement.InnerText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O elemento especificado não pode conter texto (por exemplo, um `IMG` elemento)."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  id: InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inserir um novo elemento em modelo de objeto de documento (DOM)."
  remarks: "Não chame este método até após o <xref:System.Windows.Forms.WebBrowser.DocumentCompleted>evento no <xref:System.Windows.Forms.WebBrowser>ocorreu controle.</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.DocumentCompleted> Chamar esse método antes, em seguida, pode resultar em uma exceção, como o documento será não terminar de carregar.       Se um valor de <xref:System.Windows.Forms.HtmlElementInsertionOrientation>é válido dependem do tipo do elemento.</xref:System.Windows.Forms.HtmlElementInsertionOrientation> Por exemplo, <xref:System.Windows.Forms.HtmlElementInsertionOrientation>será válido se o elemento é um `DIV`, mas não se trata de um `SCRIPT` ou `IMG` elemento, nenhum deles pode conter elementos filho.</xref:System.Windows.Forms.HtmlElementInsertionOrientation>"
  example:
  - "The following code example inserts a `DIV` element into the top of every page that users view outside of the ADatum.com server. The example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`. Your sample must also import the namespace <xref:System.Text.RegularExpressions>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#9)]\n [!code-cs[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#9)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: orient
      type: System.Windows.Forms.HtmlElementInsertionOrientation
      description: "Onde inserir esse elemento em relação ao elemento atual."
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "O novo elemento a ser inserido."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "O <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> que foi inserida. Se uma falha na inserção, isto retornará <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  id: InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executa um método não exposto no elemento DOM subjacente desse elemento."
  remarks: "Esse método pode ser usado para chamar os métodos do modelo DOM (Document Object) que não têm equivalentes no código gerenciado. Use esta versão do InvokeMember para executar métodos não expostos que não usam argumentos. Para obter um exemplo, consulte <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>.</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>"
  syntax:
    content: public object InvokeMember (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome da propriedade ou método a ser invocado."
    return:
      type: System.Object
      description: "O elemento retornado por esse método, representado como um <xref:System.Object>.</xref:System.Object> Se este <xref:System.Object>outro elemento HTML, e você tem uma referência à biblioteca MSHTML não gerenciada adicionada ao seu projeto, você pode convertê-lo à sua interface de não gerenciado apropriado.</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  id: InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executa uma função definida na página HTML atual por uma linguagem de script."
  remarks: "Esse método pode ser usado para chamar os métodos do modelo DOM (Document Object) que não têm equivalentes no código gerenciado. Todos os argumentos fornecidos para InvokeMember serão convertidos em Win32 `VARIANT` tipos de dados antes que eles são passados para a função de script nomeada."
  example:
  - "The following code example gets a `TABLE` called `dataTable` and uses the unexposed `moveRow` method to move a row from the end of the table to the beginning.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public object InvokeMember (string methodName, object[] parameter);
    parameters:
    - id: methodName
      type: System.String
      description: "O nome da propriedade ou método a ser invocado."
    - id: parameter
      type: System.Object[]
      description: "Uma lista de parâmetros passados."
    return:
      type: System.Object
      description: "O elemento retornado pela função, representado como um <xref:System.Object>.</xref:System.Object> Se este <xref:System.Object>outro elemento HTML, e você tem uma referência à biblioteca MSHTML não gerenciada adicionada ao seu projeto, você pode convertê-lo à sua interface de não gerenciado apropriado.</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyDown
  id: KeyDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário pressiona uma tecla no teclado."
  remarks: "O evento KeyDown ocorre antes <xref:System.Windows.Forms.HtmlElement.KeyPress>, ativa o que ocorre antes de <xref:System.Windows.Forms.HtmlElement.KeyUp>.</xref:System.Windows.Forms.HtmlElement.KeyUp> </xref:System.Windows.Forms.HtmlElement.KeyPress>       Você pode cancelar a ação padrão de um evento KeyDown em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Em um elemento de um evento KeyDown também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#442](~/add/codesnippet/csharp/e-system.windows.forms.h_1_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#442](~/add/codesnippet/visualbasic/e-system.windows.forms.h_1_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyPress
  id: KeyPress
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário pressiona e solta uma tecla no teclado."
  remarks: "KeyPress ocorre depois <xref:System.Windows.Forms.HtmlElement.KeyDown>e antes de <xref:System.Windows.Forms.HtmlElement.KeyUp>.</xref:System.Windows.Forms.HtmlElement.KeyUp> </xref:System.Windows.Forms.HtmlElement.KeyDown>       Você pode cancelar a ação padrão para um evento de pressionamento de tecla em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento de pressionamento de tecla em um elemento também ocorrerá em elementos do pai do elemento e na <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade do <xref:System.Windows.Forms.HtmlElementEventArgs>classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyPress event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyPress event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#443](~/add/codesnippet/csharp/e-system.windows.forms.h_16_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#443](~/add/codesnippet/visualbasic/e-system.windows.forms.h_16_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyPress;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyUp
  id: KeyUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário solta uma tecla no teclado."
  remarks: "O evento KeyUp ocorre após <xref:System.Windows.Forms.HtmlElement.KeyPress>, que ocorre após <xref:System.Windows.Forms.HtmlElement.KeyDown>.</xref:System.Windows.Forms.HtmlElement.KeyDown> </xref:System.Windows.Forms.HtmlElement.KeyPress>       Você não pode cancelar este evento.       Um evento KeyUp em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#444](~/add/codesnippet/csharp/e-system.windows.forms.h_3_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#444](~/add/codesnippet/visualbasic/e-system.windows.forms.h_3_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  id: LosingFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o elemento está perdendo o foco de entrada do usuário."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LosingFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#440](~/add/codesnippet/csharp/e-system.windows.forms.h_12_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#440](~/add/codesnippet/visualbasic/e-system.windows.forms.h_12_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LostFocus
  id: LostFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o elemento perdeu o foco de entrada do usuário."
  remarks: "Um elemento não receberá mais eventos de teclas depois LostFocus ocorre até que ele recebe foco novamente pelo usuário selecionando-a na página ou pelo aplicativo que chama o <xref:System.Windows.Forms.HtmlElement.Focus%2A>método no elemento.</xref:System.Windows.Forms.HtmlElement.Focus%2A>       Você não pode cancelar este evento.       Um evento LostFocus em um elemento também ocorrerá no pai do elemento e no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LostFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#441](~/add/codesnippet/csharp/e-system.windows.forms.h_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#441](~/add/codesnippet/visualbasic/e-system.windows.forms.h_0_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LostFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário pressiona um botão do mouse."
  remarks: "Você pode cancelar a ação padrão para um evento MouseDown em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento MouseDown em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#446](~/add/codesnippet/csharp/e-system.windows.forms.h_32_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#446](~/add/codesnippet/visualbasic/e-system.windows.forms.h_32_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário primeiro move o cursor do mouse sobre o elemento atual."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseEnter event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseEnter event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#449](~/add/codesnippet/csharp/e-system.windows.forms.h_28_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#449](~/add/codesnippet/visualbasic/e-system.windows.forms.h_28_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário move o cursor do mouse fora do elemento atual."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#450](~/add/codesnippet/csharp/e-system.windows.forms.h_33_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#450](~/add/codesnippet/visualbasic/e-system.windows.forms.h_33_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário move o cursor do mouse em um elemento."
  remarks: "Você não pode cancelar este evento.       Um evento MouseMove em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseMove event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#445](~/add/codesnippet/csharp/e-system.windows.forms.h_15_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#445](~/add/codesnippet/visualbasic/e-system.windows.forms.h_15_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseMove;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseOver
  id: MouseOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o cursor do mouse entra nos limites do elemento."
  remarks: "Você pode cancelar a ação padrão para um evento do mouse em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento do mouse em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#447](~/add/codesnippet/csharp/e-system.windows.forms.h_29_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#447](~/add/codesnippet/visualbasic/e-system.windows.forms.h_29_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ocorre quando o usuário libera um botão do mouse."
  remarks: "Você pode cancelar a ação padrão para um evento MouseUp em um elemento, definindo o <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Um evento MouseUp em um elemento também ocorrerá em elementos do pai do elemento e, no <xref:System.Windows.Forms.HtmlDocument>classe em si, a menos que você defina o <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>propriedade o <xref:System.Windows.Forms.HtmlElementEventArgs>de classe para `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Para obter mais informações sobre a diferença entre o cancelamento de propagação de eventos e cancelar a ação padrão em um evento, consulte [sobre o modelo de objeto DHTML](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#448](~/add/codesnippet/csharp/e-system.windows.forms.h_17_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#448](~/add/codesnippet/visualbasic/e-system.windows.forms.h_17_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Name
  id: Name
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define o nome do elemento."
  remarks: "Use a propriedade Name para recuperar os elementos de um documento usando o <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>método na <xref:System.Windows.Forms.HtmlElement.All%2A>propriedade de <xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlElement.All%2A> </xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>       Quando aplicado a `INPUT` elementos, define o nome da variável de dados desse elemento quando o formulário é enviado ao servidor."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Um <xref:System.String>que representa o nome do elemento.</xref:System.String>"
  overload: System.Windows.Forms.HtmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.NextSibling
  id: NextSibling
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o próximo elemento no mesmo nível como esse elemento na árvore do documento."
  remarks: "Use NextSibling em conjunto com <xref:System.Windows.Forms.HtmlElement.FirstChild%2A>para percorrer a árvore do documento para um elemento HTML.</xref:System.Windows.Forms.HtmlElement.FirstChild%2A>"
  syntax:
    content: public System.Windows.Forms.HtmlElement NextSibling { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "Um <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> que representa o elemento à direita do elemento atual."
  overload: System.Windows.Forms.HtmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  id: OffsetParent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o elemento do qual <xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>é calculado.</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>"
  remarks: "Elementos podem ser posicionados em uma página HTML em um dos três modos: padrão de posicionamento de fluxo; posicionamento relativo, em que o elemento tem um deslocamento de um valor fixo em relação ao seu pai; e o posicionamento absoluto, no qual o elemento é fornecido um fixa coordenar posição em relação ao canto superior esquerdo do documento.       Quando os elementos de um documento usam o posicionamento absoluto ou relativo, você pode usar `OffsetParent` para calcular a posição de coordenadas de um elemento na área do cliente.       Para obter mais informações sobre o elemento de posicionamento no HTML, consulte [sobre posicionamento de elementos](http://msdn.microsoft.com/library/ms533005.aspx)."
  example:
  - "The following code example shows how OffsetParent and <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement OffsetParent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "O elemento do qual os deslocamentos são calculados.       Se o pai de um elemento ou outro elemento na hierarquia do elemento usa posicionamento relativo ou absoluto, <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;> </xref> será o primeiro elemento posicionado relativo ou absoluto, na qual o elemento atual está aninhado. Se nenhum dos elementos acima do elemento atual são absolutamente ou relativamente posicionado, <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;> </xref> será o `BODY` marca do documento."
  overload: System.Windows.Forms.HtmlElement.OffsetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  id: OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o local de um elemento em relação ao seu pai."
  remarks: "Elementos podem ser posicionados em uma página HTML em uma das três maneiras:-padrão de fluxo de posicionamento.      -Posicionamento relativo, em que o elemento tem um deslocamento de um valor fixo em relação ao seu pai.      -Posicionamento absoluto, no qual o elemento é fornecido um fixa coordenar posição em relação ao canto superior esquerdo do documento.       Para obter mais informações sobre o elemento de posicionamento no HTML, consulte [sobre posicionamento de elementos](http://msdn.microsoft.com/library/ms533005.aspx)."
  example:
  - "The following code example shows how <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> and OffsetRectangle differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Drawing.Rectangle OffsetRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "As posições de coordenadas x e y do elemento e sua altura e a largura, em relação ao seu pai.       Se o pai de um elemento é posicionado relativo ou absoluto, OffsetRectangle retornará o deslocamento do elemento pai. Se o elemento em si é relativamente posicionado em relação ao seu pai, OffsetRectangle retornará o deslocamento de seu pai."
  overload: System.Windows.Forms.HtmlElement.OffsetRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Compara dois elementos de igualdade."
  remarks: "Os testes de operador de igualdade de `IUnknown` ponteiros dos objetos subjacentes COM encapsulados pelo fornecido <xref:System.Windows.Forms.HtmlElement>classes.</xref:System.Windows.Forms.HtmlElement>"
  syntax:
    content: public static bool op_Equality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "A primeira <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "A segunda <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se ambos os parâmetros forem <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, ou se ambos os elementos têm a mesma interface de COM subjacentes; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Compara dois <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> objetos desigualdade."
  syntax:
    content: public static bool op_Inequality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "A primeira <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "A segunda <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>é apenas um elemento <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, ou os dois objetos não forem iguais; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  id: OuterHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define o código HTML do elemento atual."
  remarks: "Enquanto <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>retornará todos os HTML contido no elemento atual excluindo marcas ao redor do elemento atual, OuterHtml inclui a marca do elemento atual, bem como o HTML que marca contém, por exemplo: `<HTML>` `<BODY>` `<DIV id=&quot;div1&quot;>` `Hello` `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` `</DIV>` `</BODY>` `</HTML>` neste exemplo, chamar OuterHtml `div2` retornará: `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` chamar <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>retornará: `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` se você atribuir um novo valor para OuterHtml, a referência do elemento atual se tornarão inválida; ele não refletirá o nome , propriedades e filho conteúdo HTML que você atribuiu.                     </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>                                                                                                                        </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  syntax:
    content: public string OuterHtml { get; set; }
    return:
      type: System.String
      description: "O código HTML para o elemento atual e seus filhos."
  overload: System.Windows.Forms.HtmlElement.OuterHtml*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterText
  id: OuterText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define o texto do elemento atual."
  remarks: "Se você tentar atribuir HTML para um elemento com OuterText, o código HTML será exibido como literais no documento, como se você estava exibindo HTML dentro de um arquivo de texto. Se você atribuir o HTML para um elemento usando o <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>propriedade OuterText retornará todo o texto em que o HTML com a marcação removido.</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>       Atribuindo um valor para OuterText destruirá quaisquer elementos-filho que pertencem ao elemento."
  syntax:
    content: public string OuterText { get; set; }
    return:
      type: System.String
      description: "O texto dentro do elemento atual e os filhos do elemento."
  overload: System.Windows.Forms.HtmlElement.OuterText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Não é possível definir o texto fora deste elemento."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Parent
  id: Parent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o elemento pai do elemento atual."
  remarks: "A propriedade pai permite a descoberta de contexto de um elemento. É mais útil dentro de manipuladores de eventos, como <xref:System.Windows.Forms.HtmlElement.Click>, que pode ser acionado para qualquer elemento em qualquer lugar na hierarquia de objeto do documento.</xref:System.Windows.Forms.HtmlElement.Click>       A propriedade pai do elemento HTML (parte superior de um documento HTML) aponta para si mesmo. Se você chamar pai dentro de um loop, verifique se que a condição de interrupção do loop compara o tipo do elemento atual e o tipo do `Parent` propriedade, caso contrário, seu código pode executar um loop infinito."
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the Parent property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement Parent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "O elemento acima do elemento atual na hierarquia do documento HTML."
  overload: System.Windows.Forms.HtmlElement.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  id: RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Faz com que o evento nomeado chamar todos os manipuladores de eventos registrados."
  remarks: "Esse método é usado para acessar os eventos do modelo de objeto de documento (DOM) HTML. Chama diretamente o [IHTMLElement3::fireEvent](http://go.microsoft.com/fwlink/?LinkId=103189) método. Para obter mais informações sobre como usar o DOM por meio de <xref:System.Windows.Forms.HtmlElement>classe, consulte [acessando membros não expostos no modelo de objeto de documento HTML gerenciado](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.Forms.HtmlElement>"
  syntax:
    content: public void RaiseEvent (string eventName);
    parameters:
    - id: eventName
      type: System.String
      description: "O nome do evento a ser gerado."
  overload: System.Windows.Forms.HtmlElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  id: RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Remove o foco do elemento atual, se esse elemento tem foco."
  remarks: "Chamar esse método gera o <xref:System.Windows.Forms.HtmlElement.LostFocus>evento para o elemento.</xref:System.Windows.Forms.HtmlElement.LostFocus>       Quando o foco estiver desmarcado de um elemento usando esse método, ele recebe o documento que contém o elemento, não para o próximo elemento na ordem de tabulação."
  syntax:
    content: public void RemoveFocus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.RemoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Rola o documento que contém este elemento até que a borda superior ou inferior desse elemento é alinhada com a janela do documento."
  remarks: ''
  example:
  - "The following code example finds an element by name and scrolls through the page so that the top of the element is aligned with the top of the visible page.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#12)]\n [!code-cs[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#12)]"
  syntax:
    content: public void ScrollIntoView (bool alignWithTop);
    parameters:
    - id: alignWithTop
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, a parte superior do objeto será exibido na parte superior da janela. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, a parte inferior do objeto será exibido na parte inferior da janela."
  overload: System.Windows.Forms.HtmlElement.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  id: ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define a distância entre a borda do elemento e a borda esquerda de seu conteúdo."
  remarks: "As dimensões completas da área de rolagem estão disponíveis usando <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; `ScrollLeft` e <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>são expostos independentemente, pois elas são apenas duas propriedades da área de rolagem que os desenvolvedores podem definir.</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> </xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>"
  syntax:
    content: public int ScrollLeft { get; set; }
    return:
      type: System.Int32
      description: "A distância em pixels entre a borda esquerda do elemento e a borda esquerda de seu conteúdo."
  overload: System.Windows.Forms.HtmlElement.ScrollLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  id: ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém as dimensões da região de rolagem do elemento."
  remarks: "Um elemento terá uma região de rolagem se seu conteúdo excede o tamanho de suas dimensões, a menos que o estilo de estouro no elemento proíbe barras de rolagem de renderização.       Você não pode modificar o tamanho da área de rolagem diretamente, mas você pode modificar a distância entre as bordas da área de rolagem e as bordas do elemento. Use o <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>e <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>Propriedades para fazer isso.</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> </xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>"
  syntax:
    content: public System.Drawing.Rectangle ScrollRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "O local de tamanho e coordenado da área rolável de um elemento."
  overload: System.Windows.Forms.HtmlElement.ScrollRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  id: ScrollTop
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define a distância entre a borda do elemento e a borda superior de seu conteúdo."
  remarks: "As dimensões completas da área de rolagem estão disponíveis usando <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>e `ScrollTop` são expostos independentemente, pois elas são apenas duas propriedades da área de rolagem que os desenvolvedores podem definir.</xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> </xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>"
  syntax:
    content: public int ScrollTop { get; set; }
    return:
      type: System.Int32
      description: "A distância em pixels entre a borda superior do elemento e a borda superior de seu conteúdo."
  overload: System.Windows.Forms.HtmlElement.ScrollTop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Define o valor de atributo nomeado no elemento."
  remarks: "Um atributo em HTML é qualquer par de nome-valor válido para esse elemento. <xref:System.Windows.Forms.HtmlElement>expõe apenas os atributos que são comuns a todos os elementos, deixando as que se aplicam somente a determinados tipos de elementos; `SRC` é um atributo predefinido para a `IMG` marca, por exemplo, mas não para o `DIV` marca.</xref:System.Windows.Forms.HtmlElement> Use <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>e SetAttribute manipular atributos não são expostos no gerenciado modelo DOM (Document Object).</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       Se `attributeName` não é um atributo definido em um elemento, SetAttribute ele definirá o elemento como um novo atributo.       <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>e SetAttribute diferenciam maiusculas de minúsculas.</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       Para definir o `class` de atributo em um <xref:System.Windows.Forms.HtmlElement>, você deve se referir ao atributo como `className` ao especificar o primeiro argumento para SetAttribute</xref:System.Windows.Forms.HtmlElement>"
  example:
  - "The following code example adds a new `IMG` element to the current document, using SetAttribute to set the `SRC` attribute for the image.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#13)]\n [!code-cs[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#13)]"
  syntax:
    content: public void SetAttribute (string attributeName, string value);
    parameters:
    - id: attributeName
      type: System.String
      description: "O nome do atributo a ser definido."
    - id: value
      type: System.String
      description: "O novo valor deste atributo."
  overload: System.Windows.Forms.HtmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Style
  id: Style
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define uma lista separada por ponto-e-vírgula dos estilos para o elemento atual."
  remarks: "O modelo de objeto de documento (DOM) HTML usa estilos conforme definido na especificação de folhas de estilo em cascata do World Wide Web Consortiums para controlar a exibição de um elemento. Estilos na propriedade Style assumem a forma de pares nome-valor delimitado por vírgula, com cada par separados por ponto e vírgula, da seguinte maneira: `style-name1:value1;...;[style-nameN:valueN;]` para definir a fonte para um `DIV` elemento para 14 pontos Times New Roman Negrito, por exemplo, atribua a cadeia de caracteres a seguir: `font-face:Times New Roman;font-size:14px;font-weight:bold;` para obter uma lista completa de todos os estilos disponíveis no DOM HTML, consulte [atributo de estilo](http://msdn.microsoft.com/library/ms534651.aspx)."
  syntax:
    content: public string Style { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que consiste em todos os estilos do elemento"
  overload: System.Windows.Forms.HtmlElement.Style*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TabIndex
  id: TabIndex
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém ou define o local do elemento na ordem de tabulação."
  remarks: "TabIndex determina qual elemento em um documento HTML em seguida receber foco quando o usuário pressiona a tecla TAB. Por padrão, os únicos elementos incluídos na ordem de tabulação são `INPUT` elementos, o `SELECT` controle e qualquer elemento cujo `contentEditable` está definida como `true`. Você pode incluir qualquer elemento HTML na ordem de tabulação, como um `DIV`, atribuindo a ele um TabIndex explícita.       Valores válidos para o intervalo de TabIndex de-32767 a 32767."
  syntax:
    content: public short TabIndex { get; set; }
    return:
      type: System.Int16
      description: "O índice numérico do elemento na ordem de tabulação."
  overload: System.Windows.Forms.HtmlElement.TabIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TagName
  id: TagName
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Obtém o nome da marca HTML."
  remarks: "Muitos elementos no modelo de objeto de documento HTML têm atributos, propriedades e métodos que são exclusivos para esses elementos; como o `HREF` atributo no `A` elemento, ou o `Submit` método `FORM`. Use TagName quando você tem um elemento de um tipo potencialmente arbitrário e precisa executar uma operação de um tipo específico."
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the `TagName` property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public string TagName { get; }
    return:
      type: System.String
      description: "O nome usado para criar esse elemento usando a marcação HTML."
  overload: System.Windows.Forms.HtmlElement.TagName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Forms.HtmlElement.All
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
- uid: System.Windows.Forms.HtmlElementCollection
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementCollection
  nameWithType: HtmlElementCollection
  fullName: System.Windows.Forms.HtmlElementCollection
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
- uid: System.Windows.Forms.HtmlElement
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.HtmlElement.Children
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.Click
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
- uid: System.Windows.Forms.HtmlElementEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementEventHandler
  nameWithType: HtmlElementEventHandler
  fullName: System.Windows.Forms.HtmlElementEventHandler
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
- uid: System.Windows.Forms.HtmlElement.Document
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
- uid: System.Windows.Forms.HtmlDocument
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
- uid: System.Windows.Forms.HtmlElement.DomElement
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
- uid: System.Windows.Forms.HtmlElement.Drag
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
- uid: System.Windows.Forms.HtmlElement.DragEnd
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
- uid: System.Windows.Forms.HtmlElement.DragLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
- uid: System.Windows.Forms.HtmlElement.DragOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
- uid: System.Windows.Forms.HtmlElement.Enabled
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
- uid: System.Windows.Forms.HtmlElement.FirstChild
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
- uid: System.Windows.Forms.HtmlElement.Focusing
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.HtmlElement.GotFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
- uid: System.Windows.Forms.HtmlElement.Id
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
- uid: System.Windows.Forms.HtmlElementInsertionOrientation
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementInsertionOrientation
  nameWithType: HtmlElementInsertionOrientation
  fullName: System.Windows.Forms.HtmlElementInsertionOrientation
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.HtmlElement.KeyDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
- uid: System.Windows.Forms.HtmlElement.KeyPress
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
- uid: System.Windows.Forms.HtmlElement.KeyUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
- uid: System.Windows.Forms.HtmlElement.LostFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
- uid: System.Windows.Forms.HtmlElement.MouseDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
- uid: System.Windows.Forms.HtmlElement.MouseMove
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
- uid: System.Windows.Forms.HtmlElement.MouseOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
- uid: System.Windows.Forms.HtmlElement.MouseUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
- uid: System.Windows.Forms.HtmlElement.Name
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
- uid: System.Windows.Forms.HtmlElement.Style
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Windows.Forms.HtmlElement.TagName
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
- uid: System.Windows.Forms.HtmlElement.All*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
- uid: System.Windows.Forms.HtmlElement.AppendChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild
  nameWithType: HtmlElement.AppendChild
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler
  nameWithType: HtmlElement.AttachEventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
- uid: System.Windows.Forms.HtmlElement.Children*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.ClientRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler
  nameWithType: HtmlElement.DetachEventHandler
- uid: System.Windows.Forms.HtmlElement.Document*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
- uid: System.Windows.Forms.HtmlElement.DomElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.Enabled*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals
  nameWithType: HtmlElement.Equals
- uid: System.Windows.Forms.HtmlElement.FirstChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus
  nameWithType: HtmlElement.Focus
- uid: System.Windows.Forms.HtmlElement.GetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: HtmlElement.GetAttribute
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: HtmlElement.GetElementsByTagName
- uid: System.Windows.Forms.HtmlElement.GetHashCode*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode
  nameWithType: HtmlElement.GetHashCode
- uid: System.Windows.Forms.HtmlElement.Id*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement
  nameWithType: HtmlElement.InsertAdjacentElement
- uid: System.Windows.Forms.HtmlElement.InvokeMember*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember
  nameWithType: HtmlElement.InvokeMember
- uid: System.Windows.Forms.HtmlElement.Name*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality
  nameWithType: HtmlElement.op_Equality
- uid: System.Windows.Forms.HtmlElement.op_Inequality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality
  nameWithType: HtmlElement.op_Inequality
- uid: System.Windows.Forms.HtmlElement.OuterHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent
  nameWithType: HtmlElement.RaiseEvent
- uid: System.Windows.Forms.HtmlElement.RemoveFocus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus
  nameWithType: HtmlElement.RemoveFocus
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView
  nameWithType: HtmlElement.ScrollIntoView
- uid: System.Windows.Forms.HtmlElement.ScrollLeft*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: HtmlElement.SetAttribute
- uid: System.Windows.Forms.HtmlElement.Style*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
- uid: System.Windows.Forms.HtmlElement.TagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
