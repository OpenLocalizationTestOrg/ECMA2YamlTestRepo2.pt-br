### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemWatcher
  id: FileSystemWatcher
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.BeginInit
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.EndInit
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.Site
  - System.IO.FileSystemWatcher.SynchronizingObject
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  summary: "Monitora o sistema de arquivos altera notificações e gera eventos quando um diretório ou arquivo em um diretório, as alterações.       Para procurar o código-fonte do .NET Framework para este tipo, consulte o [fonte de referência](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use FileSystemWatcher to watch for changes in a specified directory. You can watch for changes in files and subdirectories of the specified directory. You can create a component to watch files on a local computer, a network drive, or a remote computer.  \n  \n To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string (\"\") or use wildcards (\"*.\\*\"). To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"\\*.txt\".  \n  \n There are several types of changes you can watch for in a directory or file. For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories. This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values. For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.  \n  \n You can watch for renaming, deletion, or creation of files or directories. For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"*.txt\" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes> specified for its parameter.  \n  \n The Windows operating system notifies your component of file changes in a buffer created by the FileSystemWatcher. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.  \n  \n For a list of initial property values for an instance of FileSystemWatcher, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.  \n  \n Please note the following when using the FileSystemWatcher class.  \n  \n-   Hidden files are not ignored.  \n  \n-   In some systems, FileSystemWatcher reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFil~.Lon\".  \n  \n-   This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).  \n  \n-   The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.  \n  \n> [!NOTE]\n>  Running FileSystemWatcher on Windows 98 is not supported.  \n  \n## Copying and moving folders  \n The operating system and FileSystemWatcher object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents. If you cut and paste a folder with files into a folder being watched, the FileSystemWatcher object reports only the folder as new, but not its contents because they are essentially only renamed.  \n  \n To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.  \n  \n|Event Handler|Events Handled|Performs|  \n|-------------------|--------------------|--------------|  \n|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>|Report changes in file attributes, created files, and deleted files.|  \n|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|List the old and new paths of renamed files and folders, expanding recursively if needed.|  \n  \n## Events and Buffer Sizes  \n Note that several factors can affect which file system change events are raised, as described by the following:  \n  \n-   Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by FileSystemWatcher.  \n  \n-   The FileSystemWatcher can watch disks as long as they are not switched or removed. The FileSystemWatcher does not raise events for CDs and DVDs, because time stamps and properties cannot change. Remote computers must have one of the required platforms installed for the component to function properly.  \n  \n-   If multiple FileSystemWatcher objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event. On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all FileSystemWatcher objects will raise the appropriate events.  \n  \n Note that a FileSystemWatcher may miss an event when the buffer size is exceeded. To avoid missing events, follow these guidelines:  \n  \n-   Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.  \n  \n-   Avoid watching files with long file names, because a long file name contributes to filling up the buffer. Consider renaming these files using shorter names.  \n  \n-   Keep your event handling code as short as possible."
  example:
  - "The following example creates a FileSystemWatcher to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/t-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/t-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/t-system.io.filesystemwa_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Changed")]

      [System.IO.IODescription("FileSystemWatcherDesc")]

      public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> classe."
  remarks: "You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.  \n  \n The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.  \n  \n|Property|Initial Value|  \n|--------------|-------------------|  \n|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`|  \n|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.Filter%2A>|\"*.\\*\" (Watch all files.)|  \n|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|8192|  \n|<xref:System.IO.FileSystemWatcher.Path%2A>|empty string (\"\")|  \n  \n> [!NOTE]\n>  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time. The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file displays to the console. When a file is renamed, the old and new paths display to the console.  \n  \n This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/m-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/m-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/m-system.io.filesystemwa_1.vb)]"
  syntax:
    content: public FileSystemWatcher ();
    parameters: []
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> classe, o diretório especificado para monitorar."
  remarks: "> [!NOTE]> O componente não observará o diretório especificado até o <xref:System.IO.FileSystemWatcher.Path%2A>for definida, e <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>é `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       O componente pode assistir a arquivos no seu computador pessoal, uma unidade de rede ou um computador remoto.       Você não pode assistir a um computador remoto que não tenha o Windows NT ou Windows 2000. Você não pode assistir a um computador remoto do Windows NT 4.0 em um computador Windows NT 4.0. O <xref:System.IO.FileSystemWatcher.Filter%2A>por padrão, a propriedade é definida para inspecionar todos os arquivos.</xref:System.IO.FileSystemWatcher.Filter%2A>"
  syntax:
    content: public FileSystemWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "O diretório para monitorar, standard ou notação de convenção de nomenclatura Universal (UNC)."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> path </code> parâmetro é uma cadeia de caracteres vazia (&quot;&quot;).       - ou - o caminho especificado por meio de <code> path </code> parâmetro não existe."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>é muito longo."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> classe, considerando o diretório especificado e o tipo de arquivo para monitorar."
  remarks: "> [!NOTE]> O componente não observará o diretório especificado até o <xref:System.IO.FileSystemWatcher.Path%2A>for definida, e <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>é `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       O componente pode assistir a arquivos no seu computador pessoal, uma unidade de rede ou um computador remoto.       Você não pode assistir a um computador remoto que não tenha o Windows NT ou Windows 2000. Você não pode assistir a um computador remoto do Windows NT 4.0 em um computador Windows NT 4.0."
  syntax:
    content: public FileSystemWatcher (string path, string filter);
    parameters:
    - id: path
      type: System.String
      description: "O diretório para monitorar, standard ou notação de convenção de nomenclatura Universal (UNC)."
    - id: filter
      type: System.String
      description: "O tipo de arquivos a serem observados. Por exemplo, &quot;*. txt&quot; observa alterações em todos os arquivos de texto."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>filter</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> path </code> parâmetro é uma cadeia de caracteres vazia (&quot;&quot;).       - ou - o caminho especificado por meio de <code> path </code> parâmetro não existe."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>é muito longo."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.BeginInit
  id: BeginInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Começa a inicialização de um <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> usado em um formulário ou usado por outro componente. A inicialização ocorre em tempo de execução."
  remarks: "O [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design ambiente usa esse método para iniciar a inicialização de um componente usado em um formulário ou usado por outro componente. O <xref:System.IO.FileSystemWatcher.EndInit%2A>método termina a inicialização.</xref:System.IO.FileSystemWatcher.EndInit%2A> Usando o BeginInit e <xref:System.IO.FileSystemWatcher.EndInit%2A>métodos impede que o controle que está sendo usada antes de ser totalmente inicializado.</xref:System.IO.FileSystemWatcher.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Ocorre quando um arquivo ou diretório especificado na <xref:System.IO.FileSystemWatcher.Path*>é alterado.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "O evento Changed é gerado quando as alterações são feitas para o tamanho, atributos de sistema, da última gravação tempo, último tempo de acesso ou permissões de segurança de um arquivo ou diretório no diretório que está sendo monitorado.      > [!NOTE] > Operações comuns de sistema de arquivos podem gerar mais de um evento. Por exemplo, quando um arquivo é movido de um diretório para outro, vários <xref:System.IO.FileSystemWatcher.OnChanged%2A>e alguns <xref:System.IO.FileSystemWatcher.OnCreated%2A>e <xref:System.IO.FileSystemWatcher.OnDeleted%2A>eventos poderão ser gerados.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> Mover que um arquivo é uma operação complexa que consiste em várias operações simples, portanto, gerando vários eventos. Da mesma forma, alguns aplicativos (por exemplo, um software antivírus) podem causar a eventos do sistema de arquivos adicionais que são detectados pelo <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher>       Use <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>para restringir o número de notificações gerada quando esse evento é manipulado.</xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      > [!NOTE] > Alterado o evento é gerado inesperadamente quando um arquivo é renomeado, mas não é gerado quando um diretório é renomeado. Para assistir a renomeação, use o <xref:System.IO.FileSystemWatcher.Renamed>evento.</xref:System.IO.FileSystemWatcher.Renamed>      > [!NOTE] > A ordem na qual o evento Changed é gerado em relação à outra <xref:System.IO.FileSystemWatcher>eventos podem ser alterado quando o <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>propriedade não é `null`.</xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> </xref:System.IO.FileSystemWatcher>"
  example:
  - "The following example uses the Changed event to display the file path to the console whenever the watched file is changed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Changed;
    return:
      type: System.IO.FileSystemEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Ocorre quando um arquivo ou diretório especificado na <xref:System.IO.FileSystemWatcher.Path*>é criado.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a Created event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a Created event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a Created event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Created event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.  \n  \n The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events."
  example:
  - "The following example uses the Created event to display the file path to the console whenever the watched file is created.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Created;
    return:
      type: System.IO.FileSystemEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Ocorre quando um arquivo ou diretório especificado na <xref:System.IO.FileSystemWatcher.Path*>é excluído.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a Deleted event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Deleted event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`."
  example:
  - "The following example uses the Deleted event to display the file path to the console whenever the watched file is deleted.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Deleted;
    return:
      type: System.IO.FileSystemEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público <xref:System.ComponentModel.Component.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>invoca o método Dispose protegido com o `disposing` parâmetro definido como `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>chama Dispose com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.IO.Compression.DeflateStream>referências.</xref:System.IO.Compression.DeflateStream> Este método chama o <xref:System.ComponentModel.Component.Dispose%2A>método de cada objeto referenciado.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.IO.FileSystemWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define um valor que indica se o componente está habilitado."
  remarks: "O componente não gerará eventos a menos que você defina EnableRaisingEvents `true`.      > [!NOTE] > O componente não observará o diretório especificado até o <xref:System.IO.FileSystemWatcher.Path%2A>propriedade foi definida e é EnableRaisingEvents `true`.</xref:System.IO.FileSystemWatcher.Path%2A>       O <xref:System.IO.FileSystemWatcher.WaitForChanged%2A>método permite que os manipuladores de eventos a ser invocado para responder às alterações de arquivo, mesmo se essa propriedade é definida como `false`.</xref:System.IO.FileSystemWatcher.WaitForChanged%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o componente está ativado. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Se você estiver usando o componente em um designer em [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], o padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.EnableRaisingEvents*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "O <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> objeto foi descartado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operacional atual não é o Microsoft Windows NT ou posterior."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O diretório especificado em <xref:System.IO.FileSystemWatcher.Path*>não pôde ser encontrado.</xref:System.IO.FileSystemWatcher.Path*>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.IO.FileSystemWatcher.Path*>não foi definido ou é inválido.</xref:System.IO.FileSystemWatcher.Path*>"
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EndInit
  id: EndInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Termina a inicialização de um <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> usado em um formulário ou usado por outro componente. A inicialização ocorre em tempo de execução."
  remarks: "O [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design ambiente usa esse método para terminar a inicialização de um componente usado em um formulário ou usado por outro componente. O <xref:System.IO.FileSystemWatcher.BeginInit%2A>método inicia a inicialização.</xref:System.IO.FileSystemWatcher.BeginInit%2A> Usando o <xref:System.IO.FileSystemWatcher.BeginInit%2A>e métodos de EndInit impede que o controle que está sendo usada antes de ser totalmente inicializado.</xref:System.IO.FileSystemWatcher.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Ocorre quando a instância do <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> não pode continuar a monitorar as alterações ou quando o buffer interno estoura."
  remarks: "Esse evento é gerado sempre que algo impede o <xref:System.IO.FileSystemWatcher>objeto de monitoramento de alterações.</xref:System.IO.FileSystemWatcher> Por exemplo, se o objeto está monitorando as alterações em um diretório remoto e a conexão ao diretório for perdida, o erro é gerado.       O sistema notifica sobre alterações de arquivo e armazena essas alterações em um buffer que o componente cria e passa para as APIs. Se houver muitas alterações em um curto período de tempo, o buffer pode estourar. Isso faz com que o componente de perder o controle de alterações no diretório e somente ele fornecerá notificação ampla. Aumentar o tamanho do buffer é caro, porque se trata de não paginado da memória que não pode ser trocada por disco, portanto mantenha o buffer tão pequeno quanto possível. Para evitar um estouro de buffer, use o <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, e <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>notificações de alteração de propriedades para filtrar indesejados.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      > [!NOTE] > Operações comuns de sistema de arquivos podem gerar mais de um evento. Por exemplo, quando um arquivo é movido de um diretório para outro, vários <xref:System.IO.FileSystemWatcher.OnChanged%2A>e alguns <xref:System.IO.FileSystemWatcher.OnCreated%2A>e <xref:System.IO.FileSystemWatcher.OnDeleted%2A>eventos poderão ser gerados.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> Mover que um arquivo é uma operação complexa que consiste em várias operações simples, portanto, gerando vários eventos. Da mesma forma, alguns aplicativos (por exemplo, um software antivírus) podem causar a eventos do sistema de arquivos adicionais que são detectados pelo <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public event System.IO.ErrorEventHandler Error;
    return:
      type: System.IO.ErrorEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define a cadeia de caracteres de filtro usada para determinar quais arquivos são monitorados em um diretório."
  remarks: "To watch changes in all files, set the Filter property to an empty string (\"\"). To watch a specific file, set the Filter property to the file name. For example, to watch for changes in the file MyDoc.txt, set the Filter property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the Filter property to \"*.txt\". Use of multiple filters such as \"\\*.txt&#124;\\*.doc\" is not supported.  \n  \n The Filter property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.  \n  \n For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.  \n  \n Filter accepts wildcards for matching files, as shown in the following examples.  \n  \n|Filter string|Watches the following files|  \n|-------------------|---------------------------------|  \n|*.\\*|All files (default). An empty string (\"\") also watches all files.|  \n|*.txt|All files with a \"txt\" extension.|  \n|*recipe.doc|All files ending in \"recipe\" with a \"doc\" extension.|  \n|win*.xml|All files beginning with \"win\" with an \"xml\" extension.|  \n|Sales*200?.xls|Matches the following:<br /><br /> Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls<br /><br /> but does not match:<br /><br /> Sales Nov 1999.xls|  \n|MyReport.Doc|Watches only MyReport.doc|"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "A cadeia de caracteres de filtro. O padrão é &quot;*. \\*&quot; (Inspeciona todos os arquivos)."
  overload: System.IO.FileSystemWatcher.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define um valor que indica se as subpastas no caminho especificado devem ser monitoradas."
  remarks: "Definir IncludeSubdirectories `true` quando você deseja observar as notificações de alteração para arquivos e pastas contidas no diretório especificado por meio de <xref:System.IO.FileSystemWatcher.Path%2A>propriedade e seus subdiretórios.</xref:System.IO.FileSystemWatcher.Path%2A> Definindo a propriedade IncludeSubdirectories para `false` ajuda a reduzir o número de notificações enviadas para o buffer interno. Para obter mais informações sobre a filtragem de notificações indesejadas, consulte o <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>e <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>Propriedades.</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       Quando `true`, IncludeSubdirectories é recursiva através da árvore inteira sub, não apenas os diretórios filhos imediatos. Retorna o caminho relativo para um arquivo ou diretório dentro da árvore sub na <xref:System.IO.FileSystemEventArgs.Name%2A>propriedade <xref:System.IO.FileSystemEventArgs>e a <xref:System.IO.RenamedEventArgs.OldName%2A>propriedade de <xref:System.IO.RenamedEventArgs>, dependendo de alterações assiste loop for</xref:System.IO.RenamedEventArgs> </xref:System.IO.RenamedEventArgs.OldName%2A> </xref:System.IO.FileSystemEventArgs> </xref:System.IO.FileSystemEventArgs.Name%2A> Você pode obter o caminho totalmente qualificado da <xref:System.IO.FileSystemEventArgs.FullPath%2A>propriedade <xref:System.IO.FileSystemEventArgs>e a <xref:System.IO.RenamedEventArgs.OldFullPath%2A>propriedade de <xref:System.IO.RenamedEventArgs>, dependendo das alterações assiste loop for</xref:System.IO.RenamedEventArgs> </xref:System.IO.RenamedEventArgs.OldFullPath%2A> </xref:System.IO.FileSystemEventArgs> </xref:System.IO.FileSystemEventArgs.FullPath%2A>       Se um diretório é criado na árvore do diretório sub assiste e IncludeSubdirectories `true`, esse diretório automaticamente será observado."
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se você quiser monitorar subdiretórios; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.IncludeSubdirectories*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define o tamanho (em bytes) do buffer interno."
  remarks: "Você pode definir o buffer de 4 KB ou maior, mas ele não deve exceder 64 KB. Se você tentar definir a propriedade InternalBufferSize menos de 4096 bytes, seu valor será descartado e a propriedade InternalBufferSize é definida como 4096 bytes. Para melhor desempenho, use um múltiplo de 4 KB em computadores baseados em Intel.       O sistema notifica o componente de alterações de arquivo e armazena essas alterações em um buffer que o componente cria e passa para as APIs. Cada evento pode usar até 16 bytes de memória, não incluindo o nome do arquivo. Se houver muitas alterações em um curto período de tempo, o buffer pode estourar. Isso faz com que o componente de perder o controle de alterações no diretório e somente ele fornecerá notificação ampla. Pode impedir o aumento do tamanho do buffer de eventos de alteração do sistema de arquivo ausente. No entanto, aumentando o tamanho do buffer é caro, porque se trata de memória não-paginável que não pode ser trocada por disco, mantenha o buffer tão pequenas quanto possível. Para evitar um estouro de buffer, use o <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>e <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>notificações de alteração de propriedades para filtrar indesejados.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>"
  syntax:
    content: public int InternalBufferSize { get; set; }
    return:
      type: System.Int32
      description: "O tamanho do buffer interno em bytes. O padrão é 8192 (8 KB)."
  overload: System.IO.FileSystemWatcher.InternalBufferSize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define o tipo de alterações a serem observados."
  remarks: "Você pode combinar os membros do <xref:System.IO.NotifyFilters>enumeração observar mais de um tipo de alteração de cada vez.</xref:System.IO.NotifyFilters> Por exemplo, você pode assistir para alterações no tamanho de um arquivo e alterações no `LastWrite` tempo. Isso gera um evento sempre que houver uma alteração no tamanho do arquivo ou pasta ou uma alteração no `LastWrite` de arquivo ou pasta.       Essa é uma maneira para filtrar notificações indesejadas. Para obter mais informações sobre a filtragem de notificações indesejadas, consulte o <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, e <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>Propriedades.</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public System.IO.NotifyFilters NotifyFilter { get; set; }
    return:
      type: System.IO.NotifyFilters
      description: "Uma da <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> valores. O padrão é a combinação de OR bit a bit de <xref uid=&quot;langword_csharp_LastWrite&quot; name=&quot;LastWrite&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_FileName&quot; name=&quot;FileName&quot; href=&quot;&quot;> </xref>, e <xref uid=&quot;langword_csharp_DirectoryName&quot; name=&quot;DirectoryName&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.NotifyFilter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor não é uma combinação válida de OR de bit a bit do <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> valores."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "O valor que está sendo definido não é válido."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Gera o <xref href=&quot;System.IO.FileSystemWatcher.Changed&quot;> </xref> eventos."
  remarks: "OnChanged é chamado quando as alterações são feitas para o tamanho, atributos de sistema, da última gravação tempo, último tempo de acesso ou permissões de segurança de um arquivo ou diretório no diretório que está sendo monitorado.       Use o <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>propriedade para restringir o número de eventos gerados quando o <xref:System.IO.FileSystemWatcher.Changed>evento é manipulado.</xref:System.IO.FileSystemWatcher.Changed> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       O <xref:System.IO.FileSystemWatcher.OnCreated%2A>é gerado como um arquivo é criado.</xref:System.IO.FileSystemWatcher.OnCreated%2A> Se um arquivo está sendo copiado ou transferido para um diretório monitorado, o <xref:System.IO.FileSystemWatcher.OnCreated%2A>evento ocorrerá imediatamente, seguido por um ou mais eventos de OnChanged.</xref:System.IO.FileSystemWatcher.OnCreated%2A>       Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter mais informações, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnChanged (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Um <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.IO.FileSystemWatcher.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Gera o <xref href=&quot;System.IO.FileSystemWatcher.Created&quot;> </xref> eventos."
  remarks: "OnCreated is called when a file or directory is created in the directory being monitored.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" and paste it into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.  \n  \n The OnCreated event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the OnCreated event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnCreated (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Um <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.IO.FileSystemWatcher.OnCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Gera o <xref href=&quot;System.IO.FileSystemWatcher.Deleted&quot;> </xref> eventos."
  remarks: "OnDeleted is called when a file or directory, within the directory being monitored, is deleted.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnDeleted (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Um <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.IO.FileSystemWatcher.OnDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Gera o <xref href=&quot;System.IO.FileSystemWatcher.Error&quot;> </xref> eventos."
  remarks: "OnError é chamado quando ocorre um erro.       Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter mais informações, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnError (System.IO.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "Um <xref href=&quot;System.IO.ErrorEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.IO.FileSystemWatcher.OnError*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Gera o <xref href=&quot;System.IO.FileSystemWatcher.Renamed&quot;> </xref> eventos."
  remarks: "OnRenamed é chamado quando um arquivo ou diretório dentro do diretório que está sendo monitorado é renomeado.       Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter mais informações, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnRenamed (System.IO.RenamedEventArgs e);
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "Um <xref href=&quot;System.IO.RenamedEventArgs&quot;> </xref> que contém os dados de evento."
  overload: System.IO.FileSystemWatcher.OnRenamed*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define o caminho do diretório para assistir."
  remarks: "This is a fully qualified path to a directory. If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched. To watch a specific file, set the Path property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.  \n  \n The Path property supports Universal Naming Convention (UNC) paths.  \n  \n> [!NOTE]\n>  This property must be set before the component can watch for changes.  \n  \n When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item. For example, if you set the Path property to \"C:\\My Documents\" and then manually rename the directory to \"C:\\Your Documents\", the component continues listening for change notifications on the newly renamed directory. However, when you ask for the Path property, it contains the old path. This happens because the component determines what directory watches based on the handle, rather than the name of the directory. Renaming does not affect the handle. So, if you destroy the component, and then recreate it without updating the Path property, your application will fail because the directory no longer exists."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "O caminho para monitorar. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.IO.FileSystemWatcher.Path*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O caminho especificado não existe ou não pôde ser encontrado.       - ou - o caminho especificado contém caracteres curinga.       - ou - o caminho especificado contém caracteres de caminho inválido."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Ocorre quando um arquivo ou diretório especificado na <xref:System.IO.FileSystemWatcher.Path*>é renomeado.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Renomeação do diretório que você está observando não gerará uma notificação. As notificações são geradas somente para entradas de dentro do diretório que você está observando."
  example:
  - "The following example uses the Renamed event to display the file path to the console whenever the watched file is renamed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public event System.IO.RenamedEventHandler Renamed;
    return:
      type: System.IO.RenamedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Site
  id: Site
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define um <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> para o <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref>."
  remarks: "Sites de associar um <xref:System.ComponentModel.Component>para um <xref:System.ComponentModel.Design.IDesignerHost.Container%2A>e habilitar a comunicação entre eles, bem como fornecer uma maneira para o contêiner gerenciar seus componentes.</xref:System.ComponentModel.Design.IDesignerHost.Container%2A> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref>."
  overload: System.IO.FileSystemWatcher.Site*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  id: SynchronizingObject
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Obtém ou define o objeto usado para empacotar as chamadas de manipulador de eventos emitidas como resultado de uma alteração de diretório."
  remarks: "Quando for SynchronizingObject `null`, métodos de manipulação de <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, e <xref:System.IO.FileSystemWatcher.Renamed>eventos são chamados em um thread do pool de threads do sistema.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> Para obter mais informações sobre pools de threads do sistema, consulte <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       Quando o <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, e <xref:System.IO.FileSystemWatcher.Renamed>eventos são tratados por um componente de Windows Forms visual, como um <xref:System.Windows.Forms.Button>, acessar o componente através do pool de threads de sistema pode não funcionar, ou pode resultar em uma exceção.</xref:System.Windows.Forms.Button> </xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> Evitar isso, definindo SynchronizingObject como um componente de Windows Forms, que faz com que os métodos que manipulam o <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, e <xref:System.IO.FileSystemWatcher.Renamed>eventos a ser chamado no mesmo thread em que o componente foi criado.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed>       Se o <xref:System.IO.FileSystemWatcher>é usado dentro de [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] em um designer de formulários do Windows, SynchronizingObject define automaticamente para o controle que contém o <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher> </xref:System.IO.FileSystemWatcher> Por exemplo, se você colocar um <xref:System.IO.FileSystemWatcher>em um designer para Form1 (que herda de <xref:System.Windows.Forms.Form>) a propriedade SynchronizingObject <xref:System.IO.FileSystemWatcher>está definido para a instância do Form1.</xref:System.IO.FileSystemWatcher> </xref:System.Windows.Forms.Form> </xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "O <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> que representa o objeto usado para empacotar as chamadas do manipulador de eventos emitidas como resultado de uma alteração de diretório. O padrão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Um método síncrono que retorna uma estrutura que contém informações específicas sobre a alteração que ocorreu, considerando o tipo de alteração que você deseja monitorar."
  remarks: "Este método espera indefinidamente até que a primeira alteração ocorre e, em seguida, retorna. Isso é o mesmo que usar WaitForChanged com o `timeout` parâmetro definido como -1.      > [!NOTE] > Esse método permite que um manipulador de eventos a ser invocado para responder a mesmo que as alterações do arquivo de <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>está definida como `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       Em alguns sistemas, <xref:System.IO.FileSystemWatcher>informa as alterações nos arquivos usando o formato de nome curto do arquivo no formato 8.3.</xref:System.IO.FileSystemWatcher> Por exemplo, uma alteração &quot;LongFileName.LongExtension&quot; poderia ser relatada como &quot;LongFi ~. LON&quot;."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "O <xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> observar."
    return:
      type: System.IO.WaitForChangedResult
      description: "Um <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> que contém informações específicas sobre a alteração que ocorreu."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Um método síncrono que retorna uma estrutura que contém informações específicas sobre a alteração que ocorreu, considerando o tipo de alteração que você deseja monitorar e o tempo (em milissegundos) de espera antes do tempo limite."
  remarks: "Esse método aguarda até que uma alteração ocorre ou ele expirou. Um valor de -1 para o `timeout` significa esperar indefinidamente.      > [!NOTE] > Esse método permite que um manipulador de eventos a ser invocado para responder a mesmo que as alterações do arquivo de <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>está definida como `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       Em alguns sistemas, <xref:System.IO.FileSystemWatcher>informa as alterações nos arquivos usando o formato de nome curto do arquivo no formato 8.3.</xref:System.IO.FileSystemWatcher> Por exemplo, uma alteração &quot;LongFileName.LongExtension&quot; poderia ser relatada como &quot;LongFi ~. LON&quot;."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "O <xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> observar."
    - id: timeout
      type: System.Int32
      description: "O tempo (em milissegundos) de espera antes do tempo limite."
    return:
      type: System.IO.WaitForChangedResult
      description: "Um <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> que contém informações específicas sobre a alteração que ocorreu."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.IO.FileSystemWatcher.#ctor
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
- uid: System.IO.FileSystemWatcher.BeginInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
- uid: System.IO.FileSystemWatcher.Changed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  nameWithType: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
- uid: System.IO.FileSystemWatcher.Created
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
- uid: System.IO.FileSystemWatcher.Deleted
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
- uid: System.IO.FileSystemWatcher.Error
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  nameWithType: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
- uid: System.IO.FileSystemWatcher.Filter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.FileSystemWatcher.NotifyFilter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  nameWithType: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  nameWithType: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  nameWithType: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
- uid: System.IO.FileSystemWatcher.Path
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Renamed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  nameWithType: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
- uid: System.IO.FileSystemWatcher.Site
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  nameWithType: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  nameWithType: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
- uid: System.IO.FileSystemWatcher.#ctor*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher.FileSystemWatcher
- uid: System.IO.FileSystemWatcher.BeginInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit
  nameWithType: FileSystemWatcher.BeginInit
- uid: System.IO.FileSystemWatcher.Dispose*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose
  nameWithType: FileSystemWatcher.Dispose
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit
  nameWithType: FileSystemWatcher.EndInit
- uid: System.IO.FileSystemWatcher.Filter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
- uid: System.IO.FileSystemWatcher.NotifyFilter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
- uid: System.IO.FileSystemWatcher.OnChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged
  nameWithType: FileSystemWatcher.OnChanged
- uid: System.IO.FileSystemWatcher.OnCreated*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated
  nameWithType: FileSystemWatcher.OnCreated
- uid: System.IO.FileSystemWatcher.OnDeleted*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted
  nameWithType: FileSystemWatcher.OnDeleted
- uid: System.IO.FileSystemWatcher.OnError*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError
  nameWithType: FileSystemWatcher.OnError
- uid: System.IO.FileSystemWatcher.OnRenamed*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed
  nameWithType: FileSystemWatcher.OnRenamed
- uid: System.IO.FileSystemWatcher.Path*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Site*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
- uid: System.IO.FileSystemWatcher.SynchronizingObject*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
- uid: System.IO.FileSystemWatcher.WaitForChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged
  nameWithType: FileSystemWatcher.WaitForChanged
