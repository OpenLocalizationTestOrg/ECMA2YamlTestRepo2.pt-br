### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "Fornece um objeto que permite que dois <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles para formar uma conexão. Essa classe não pode ser herdada."
  remarks: "No conjunto de controle de Web Parts, uma conexão é um link ou associação entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>(ou outro servidor ou usuário) controles que permite que eles compartilham dados.</xref:System.Web.UI.WebControls.WebParts.WebPart> Essa capacidade de compartilhar dados permite que os controles conectados a ser usado de maneiras que excedem a funcionalidade oferecida pelos controles isolados. Por exemplo, se um controle fornece dados de código postal e outro controle pode ler esses dados e fornecer informações de clima local com base no código postal, o recurso conectado dos dois controles fornece mais valor aos usuários. Para estender esse exemplo, outros controles podem ser criados que também exibir informações com base em um código postal, como um controle com links para obter notícias locais, e todos esses controles podem trabalhar com dados de código postal podem compartilhar dados com o controle único que fornece um código postal. Usuários finais de aplicativos Web Parts pode criar e gerenciar conexões entre todos esses controles compatíveis diretamente de um navegador da Web, usando a interface de usuário (UI) conexões padrão fornecida pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle ou usando uma interface do usuário personalizada fornecida por um desenvolvedor.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Esta visão geral da classe WebPartConnection é uma instrução geral de detalhes para a criação de uma conexão. Para obter mais informações sobre requisitos envolvidas na criação de conexões e componentes específicos, consulte [Web Parts Connections Overview](~/add/includes/ajax-current-ext-md.md), ou consulte as classes de referência e códigos de exemplo mencionado na discussão a seguir. Há vários aspectos fundamentais de uma conexão de Web Parts: - duas <xref:System.Web.UI.WebControls.WebParts.WebPart>controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> Cada conexão de Web Parts consiste em dois controles. É possível para um controle para participar de mais de uma conexão simultaneamente, mas cada conexão única consiste exatamente dois controles. Os controles podem derivar diretamente a <xref:System.Web.UI.WebControls.WebParts.WebPart>classe base, ou podem ser outros controles de servidor, incluindo controles ASP.NET, controles de servidor personalizados e controles de usuário.</xref:System.Web.UI.WebControls.WebParts.WebPart> Controles que não derivam o <xref:System.Web.UI.WebControls.WebParts.WebPart>classe se colocado em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, são ajustados automaticamente com um <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objeto em tempo de execução, o que permite que eles herdam a <xref:System.Web.UI.WebControls.WebParts.WebPart>classe e a função como tempo de execução <xref:System.Web.UI.WebControls.WebParts.WebPart>controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Controles que residem em <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zonas.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Ambos <xref:System.Web.UI.WebControls.WebParts.WebPart>controles e qualquer outro tipo de controle de servidor devem residir em um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona para poder participar de conexões de Web Parts (e a maioria dos outros recursos de Web Parts).</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Consumidores e provedores. Em cada conexão de Web Parts são dois controles: um provedor de dados e um consumidor de dados. O provedor fornece dados para o consumidor por meio de um método de retorno de chamada especificada que retorna os dados na forma de uma interface. (Para obter um exemplo de como criar e especificar o método de retorno de chamada, consulte a seção exemplo deste tópico.) Esse método de retorno de chamada é conhecido como um ponto de conexão do provedor. Os detalhes desse ponto de conexão (seu nome &quot;amigável&quot;, uma ID e o tipo da interface retornado) estão contidos em um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto associado com o controle de provedor.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> O consumidor recebe os dados por meio de um método especificado que pode aceitar uma instância da interface. Esse método é conhecido como um ponto de conexão do consumidor, e os detalhes do ponto de conexão (nome, ID e o tipo de interface) estão contidos em um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto associado com o controle de consumidor.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -Controles compatíveis ou um transformador válido. Para uma conexão funcione, o consumidor e provedor devem ser compatíveis (que significa que os seus métodos de ponto de conexão especificado podem trabalhar com o mesmo tipo de interface) ou não houver deve ser um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto capaz de converter o tipo oferecido pelo provedor em um tipo entendido pelo consumidor.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -Um objeto WebPartConnection. Para uma conexão existir, deve ser uma instância da classe WebPartConnection que contém referências aos controles de provedor e consumidor, junto com os detalhes de seus pontos de conexão. Se o provedor e consumidor são incompatíveis e em vez disso, use um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto de conexão, a conexão referencia o transformador.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -Um meio de estabelecer a conexão. Depois de controles de consumidor e provedor compatíveis foi corretamente criados com métodos de ponto de conexão e colocados em uma zona e um objeto WebPartConnection está disponível, última etapa básicos necessários é iniciar a conexão. É uma maneira que isso pode acontecer de usuários para criar a conexão por meio da interface do usuário. Se você colocar um `<asp:connectionszone>` necessário de elemento na página e outros componentes para uma conexão estão em vigor, em tempo de execução, um usuário pode alternar a página em modo de exibição de conectar, clique em um verbo de conexão no menu de verbos do provedor ou de consumidor e em uma conexão de interface do usuário (com base no <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle) será exibida.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Por meio desta interface do usuário, o usuário pode iniciar a conexão. Outra maneira de iniciar a conexão é para fazer isso programaticamente. Em ambos os casos, se por meio da interface do usuário ou programaticamente, o método subjacente que inicia a conexão é o mesmo. O aplicativo chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método (ou o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método se usando um transformador) no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar, transmitindo a ele o provedor, o consumidor e seus objetos de ponto de conexão do respectivos, e o método retorna um objeto WebPartConnection.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       A classe WebPartConnection define um objeto que encapsula os detalhes essenciais de uma conexão entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> A classe consiste quase que totalmente propriedades relacionadas aos detalhes de uma determinada conexão. Várias propriedades relacionados o controle de consumidor em uma conexão. A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>propriedade referencia o controle de consumidor em si e a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>propriedade faz referência a ID. do consumidor</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> O <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto, que contém os detalhes do ponto de conexão do consumidor, que é referenciado pelo consumidor do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> O <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>propriedade faz referência à ID do <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Todas essas propriedades de conexão relacionados ao consumidor devem ter um valor atribuído a eles para criar uma conexão.       A classe WebPartConnection também tem várias propriedades que se relacionam com o controle de provedor em uma conexão, e eles correspondem às propriedades de um consumidor. A <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>propriedade faz referência ao controle de provedor em si, enquanto a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>propriedade faz referência a sua ID.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> O <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>referências de propriedade de <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto e o <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>propriedade faz referência à ID de ponto de conexão do provedor.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       Várias propriedades relacionadas ao estado da conexão. O <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>propriedade indica se a conexão está ativo (atualmente troca de dados) ou inativos (ainda conectados, mas não ativamente compartilhamento de dados).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> O <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>propriedade indica se a conexão é compartilhado (disponível para todos os usuários de uma página) ou uma conexão específica do usuário e o <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>propriedade indica se o controle é estático (declarado na marcação da página e, portanto, permanentes) ou dinâmicos (criado por meio de programação, que significa que ele pode ser excluído).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> classe."
  remarks: "O construtor WebPartConnection é público para que o analisador do ASP.NET possa criar uma instância quando uma conexão é declarado na marcação de uma página da Web. Este construtor não se destina a ser usado no código do desenvolvedor.       Quando você deseja criar um <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto programaticamente, você deve usar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>ou o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>método fornecido no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Esses métodos de lidar com muitos detalhes da criação de uma conexão e retornar um <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       O construtor WebPartConnection o <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>classe define os valores da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>propriedades `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Portanto, o estado padrão de uma nova conexão deve ser estático (o que significa que ele é declarado na marcação da página da Web) e compartilhado (visível para todos os usuários da página). Esse será o caso quando você adiciona uma conexão em um cenário típico, declarando a conexão na marcação da página com um `<asp:webpartconnection>` elemento. No entanto, em outras circunstâncias uma conexão terá valores diferentes para essas propriedades. Por exemplo, quando você adicionar uma conexão programaticamente ao criar o objeto de conexão no código, e o usuário está exibindo a página no escopo de personalização do usuário padrão, a conexão é criada como uma conexão por user(visible only to the specific user) dinâmico.      > [!NOTE] > O <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>propriedades são somente leitura, e essas propriedades que determinam a natureza de uma conexão são definidas internamente pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle dependendo de como uma conexão é criada (declarativamente na marcação da página, ou programaticamente por meio de seu código ou a interface do usuário).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> objeto que está atuando como o controle de consumidor em uma conexão."
  remarks: "Cada conexão de Web Parts consiste em dois controles que compartilham dados. Um controle atua como o provedor de dados e o outro controle atua como um consumidor, recebimento e processamento de dados do provedor. A propriedade do consumidor obtém uma referência para o <xref:System.Web.UI.WebControls.WebParts.WebPart>controlar atuando como um consumidor em uma relação de conexão.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> que representa o controle de Web Parts que atua como o consumidor em uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comprimento do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>propriedade é zero.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o objeto que serve como um ponto de conexão para um controle que atua como um consumidor em uma conexão."
  remarks: "Uma das etapas necessárias para criar uma conexão entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controles é criar pontos de conexão para cada controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> O ponto de conexão do consumidor é um objeto que contém as informações sobre como conectar-se para o controle que atua como um consumidor. No código-fonte do consumidor, um dos métodos deve ser identificado com o `ConnectionConsumer` atributo. O <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto que está associado um controle de consumidor contém detalhes sobre o método e o atributo, inclusive uma ID para o método, um nome para exibição para uso na interface do usuário (IU), e que tipo de interface que o método pode recuperar.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Esse conjunto de informações sobre o consumidor, o método para formar conexões e o tipo de interface que ele entenda, coletivamente constitui um ponto de conexão do consumidor.       Por padrão, um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto pode se conectar a apenas um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto ao mesmo tempo.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Um consumidor pode ter vários métodos identificados como pontos de conexão do consumidor possíveis, mas um consumidor pode apenas participar de uma conexão como um consumidor (portanto, somente um dos seus pontos de conexão do consumidor poderá ser ativado) por vez. Por outro lado, um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>pode se conectar a qualquer número de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objetos.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Esse comportamento padrão pode ser alterado, substituindo o <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>propriedade o <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>atributo.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> associada ao controle do consumidor em uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o valor da propriedade em uma conexão que faz referência à ID do objeto que serve como o ponto de conexão do consumidor para essa conexão."
  remarks: "Para uma conexão estática declarada na marcação de uma página da Web, os desenvolvedores podem especificar qual ponto de conexão do consumidor será usado para a conexão, atribuindo um valor para o `ConsumerConnectionPointID` atributo no `<asp:webpartconnection>` elemento. Se um valor não é atribuído ao atributo, o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>o valor da propriedade é usado.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Quando você cria conexões (programáticos) dinâmicos, normalmente você não deve definir o valor da propriedade ConsumerConnectionPointID. Você pode simplesmente chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método sobre o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar, transmitindo a ele o consumidor e a conexão do consumidor aponte objetos (juntamente com os outros parâmetros necessários), e esse método determina a ID correta a ser usado para o ponto de conexão do consumidor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Da mesma forma, quando você desconectar, você pode chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>método sem a necessidade de especificar o valor da propriedade ConsumerConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > A ID do ponto de conexão do consumidor pode ser determinada ao designar um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor como um consumidor.</xref:System.Web.UI.WebControls.WebParts.WebPart> Você deve identificar um método no consumidor que recupera uma instância de uma interface fornecida por um controle de provedor ou um transformador. Para identificar o método, marque-o com o `ConnectionConsumer` atributo de código. Quando você adicionar esse atributo, você pode adicionar um parâmetro de valor de cadeia de caracteres opcional que serve como uma ID para o consumidor <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Se você fornecer um valor para o parâmetro de ID opcional, esse valor se torna o valor da propriedade ConsumerConnectionPointID para a conexão. Se você não fornecer um valor de ID, o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>o valor da propriedade é usado.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Ponto de uma cadeia de caracteres que contém a ID para a conexão do consumidor."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o valor da propriedade em uma conexão que faz referência à ID do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlar atuando como um consumidor para essa conexão."
  remarks: "O valor da propriedade ConsumerID é necessário quando você cria uma conexão entre <xref:System.Web.UI.WebControls.WebParts.WebPart>controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> Se um valor não é atribuído à propriedade, uma exceção é lançada quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle tenta ativar a conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a ID do controle que atua como um consumidor em uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define a ID de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objeto."
  remarks: "Cada <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto tem um valor exclusivo atribuído à sua propriedade ID.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Isso é para garantir que haja uma maneira para distinguir entre várias conexões.       Se você criar uma conexão estática, declarando um `<asp:webpartconnection>` elemento em uma página da Web e você não atribuir um valor para o `ID` atributo para a conexão, uma exceção é lançado quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle tenta ativar a conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle cria uma nova conexão dinâmica, ele chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>método para gerar uma ID exclusiva para a conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a ID de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objeto está sendo estabelecida e capaz de trocar dados entre seus provedor e consumidor controles."
  remarks: "A propriedade IsActive indica um estado de um <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Quando a conexão estiver nesse estado, os provedor e consumidor controles a conexão não estão se comunicando e trocar dados por meio de uma interface comum ou um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Quando um usuário exibe uma página renderizada que inclui uma conexão estabelecida no modo de procura normal, a conexão é normalmente ativa (a menos que falhou ao ser ativado devido a algum conflito ou outro problema ao carregar a página). Nos primeiros estágios do ciclo de vida de página e controle, o valor da propriedade é `false`. A conexão é ativada logo após o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>evento no <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle é gerado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Especificamente, a conexão é ativado depois que o consumidor tem recuperar uma instância da interface especificada do provedor ou um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       É útil saber se uma conexão está ativa em situações em que talvez haja conflitos ou problemas de sincronização devido a várias conexões em uma página. Por exemplo, se houver algum tipo de conflito entre duas conexões, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle tem a opção de ativação de uma das conexões não para evitar o conflito.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conexão estiver ativa; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objeto está visível para todos os usuários ou somente para o usuário atual."
  remarks: "Assim como acontece com individuais <xref:System.Web.UI.WebControls.WebParts.WebPart>controles, um <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto pode ser compartilhado ou uma instância de cada usuário.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> Uma instância compartilhada significa que a conexão é visível para todos os usuários de uma página da Web, e uma instância de usuário significa que a conexão é visível somente para um usuário específico.       Em geral, a maneira que uma conexão é adicionada a uma página determina se a conexão é compartilhada. Se a conexão é declarado na marcação de uma página da Web, em seguida, a conexão é compartilhado e é o valor da propriedade IsShared `true`. Além disso, se a página da Web estiver no escopo de personalização compartilhado quando uma conexão é adicionada, a conexão também é compartilhada. Normalmente, quando um usuário utiliza o `<asp:connectionszone>` a interface de usuário (UI) para adicionar uma conexão, a página está no escopo de personalização do usuário, para que a conexão não é compartilhado e é o valor da propriedade IsShared `false`."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conexão for compartilhado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um valor que indica se um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objeto declarado na marcação de uma página da Web ou criado por meio de programação."
  remarks: "Conexões entre os controles de Web Parts podem ser estático ou dinâmico. Uma conexão estática é declarado na marcação de uma página da Web, usando um `<asp:WebPartConnection>` elemento. Conexões dinâmicas são criados por meio de programação ou quando um usuário cria uma conexão por meio da interface do usuário (UI) definido pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Conexões estáticas são objetos compartilhados, o que significa que eles estão disponíveis para todos os usuários da página da Web. Além disso, eles são essencialmente permanentes porque, como static <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, não pode ser excluídas permanentemente.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Enquanto um objeto de conexão estática não pode ser excluído permanentemente, ela pode ser permanentemente desconectada. Nesse caso, o objeto desconectado existirá no servidor, mas um usuário final nunca deve estar atento a existência do objeto em uma página."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a conexão for estático; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle que atua como o provedor em uma conexão de Web Parts."
  remarks: "Cada conexão de Web Parts consiste em dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controles--um consumidor e um provedor – e a propriedade retorna uma referência para o controle de provedor em uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Como sua contraparte em uma conexão (o controle de consumidor), o controle de provedor é necessário para estabelecer uma conexão. Se você criar a conexão programaticamente ou por declará-la no formato de persistência da página, você deve especificar um controle para atuar como o provedor para uma conexão."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> que atua como o provedor de dados."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comprimento do <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>o valor da propriedade é zero.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém o objeto que serve como um ponto de conexão para um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> atuar como um provedor para uma conexão de controle."
  remarks: "Uma das etapas necessárias para criar uma conexão entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controles é criar pontos de conexão para cada controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> O ponto de conexão do provedor é um objeto que contém as informações sobre como conectar-se para o controle que atua como um provedor. No código-fonte do provedor, um dos métodos deve ser identificado com o `ConnectionProvider` atributo. O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>que é associado com um provedor de controle contém detalhes sobre o método e o atributo, inclusive uma ID para o método, um nome para exibição para uso na interface do usuário (IU), e que tipo de instância da interface que o método pode retornar a um controle de consumidor.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Esse conjunto de informações sobre o provedor, o método para formar conexões e o tipo de interface que fornece, coletivamente constitui um ponto de conexão do provedor.       Por padrão, um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>pode se conectar a apenas um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto ao mesmo tempo.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Um consumidor pode ter vários métodos identificados como pontos de conexão do consumidor possíveis, mas um consumidor pode apenas participar de uma conexão como um consumidor (portanto, somente um dos seus pontos de conexão do consumidor poderá ser ativado) por vez. Por outro lado, um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>pode se conectar a qualquer número de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objetos por padrão.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Por exemplo, um controle de provedor que fornece um código postal foi possível se conectar a vários controles de consumidor que usam um código postal para criar vários tipos de dados com base em um código postal, como os dados de clima, notícias e assim por diante. Esse comportamento padrão pode ser alterado, substituindo o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>propriedade o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>atributo.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> associados com o provedor de controle em uma conexão."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o valor da propriedade em uma conexão que faz referência à ID do objeto que serve como o ponto de conexão do provedor para essa conexão."
  remarks: "Para uma conexão estática declarada na marcação de uma página da Web, os desenvolvedores podem especificar qual ponto de conexão do provedor será usado para a conexão, atribuindo um valor para o `ProviderConnectionPointID` atributo no `<asp:webpartconnection>` elemento. Se um valor não é atribuído ao atributo, o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>o valor da propriedade é usado.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Quando você cria conexões (programáticos) dinâmicos, normalmente você não deve definir o valor da propriedade ProviderConnectionPointID. Você pode simplesmente chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controlar, transmitindo a ele o provedor e conexão de provedor aponte objetos (juntamente com os outros parâmetros necessários), e esse método determina a ID correta a ser usado para o ponto de conexão do provedor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Da mesma forma, quando você desconectar, você pode chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>método sem a necessidade de especificar o valor da propriedade ProviderConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > A ID do ponto de conexão do provedor pode ser determinada ao designar um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor como um provedor.</xref:System.Web.UI.WebControls.WebParts.WebPart> Você deve identificar um método de retorno de chamada no provedor que serve a uma instância de uma interface que contém dados com um consumidor. Para identificar o método, marque-o com o `ConnectionProvider` atributo de código. Quando você adicionar esse atributo, você pode adicionar um parâmetro de valor de cadeia de caracteres opcional que serve como uma ID para o provedor <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Se você fornecer um valor para o parâmetro de ID opcional, esse valor se torna o valor da propriedade ProviderConnectionPointID para a conexão. Se você não fornecer um valor de ID, o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle atribui uma ID padrão quando o objeto é criado.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a ID para um objeto de ponto de conexão do provedor."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o valor da propriedade em uma conexão que faz referência à ID do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlar atuar como um provedor para essa conexão."
  remarks: "O valor da propriedade ProviderID é necessário quando você cria uma conexão entre dois <xref:System.Web.UI.WebControls.WebParts.WebPart>controles.</xref:System.Web.UI.WebControls.WebParts.WebPart> Se um valor não é atribuído à propriedade, uma exceção é lançada quando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle tenta ativar a conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a ID do controle do provedor."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Substitui o herdadas <xref:System.Object.ToString*>método e retorna o nome de um tipo curto para o objeto de conexão.</xref:System.Object.ToString*>"
  remarks: "Esse método é usado principalmente para conveniência pelos designers de controle. Ele aumenta a como os objetos de conexão aparecem no modo de Design usando o nome de tipo menor, em vez de um nome de tipo totalmente qualificado. No entanto, o método pode ser chamado em qualquer ponto no seu código onde você deseja saber o nome do tipo de um objeto de conexão."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o nome curto de tipo (não qualificado) de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objeto que é usado para transformar dados entre dois pontos de conexão normalmente incompatíveis em uma conexão de Web Parts."
  remarks: "Em uma conexão de Web Parts, há duas maneiras em que os controles de provedor e consumidor de conexão podem se conectar. Eles podem se conectar diretamente por meio de suas respectivas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objetos e um tipo de interface que é entendido por ambos os controles.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Ou, se eles forem incompatíveis, eles podem conectar-se indiretamente, usando um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto que transforma uma instância da interface de um provedor em um tipo entendido por um consumidor.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Quando um transformador é necessário como parte de uma conexão, a propriedade transformador fornece uma referência para o <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Você pode adicionar um transformador para uma conexão declarativamente na marcação de uma página da Web, adicionando uma marca um transformador personalizado (ou um de transformadores fornecidos com o conjunto de controles de Web Parts) dentro do `<asp:WebPartConnection>` elemento. Você também pode adicionar um transformador programaticamente, criando uma instância no seu código e, em seguida, chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>método sobre o <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controle para criar a conexão, transmitindo a ele o objeto transformador junto com os outros parâmetros necessários.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. O valor padrão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma coleção de <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objetos usados internamente pelo conjunto de controle de Web Parts."
  remarks: "Usam os transformadores propriedade nunca deve ser pelos desenvolvedores. Para acessar o transformador associado a uma conexão, os desenvolvedores devem sempre usar o <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>propriedade.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       A propriedade transformadores é usada internamente pelo controle Web Parts definido para permitir que os desenvolvedores de página declarar elementos transformador dentro de `<asp:webpartconnection>` elemento na marcação de uma página da Web."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> contendo <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objetos."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
