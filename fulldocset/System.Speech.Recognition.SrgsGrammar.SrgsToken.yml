### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken
  id: SrgsToken
  children:
  - System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)
  - System.Speech.Recognition.SrgsGrammar.SrgsToken.Display
  - System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation
  - System.Speech.Recognition.SrgsGrammar.SrgsToken.Text
  langs:
  - csharp
  name: SrgsToken
  nameWithType: SrgsToken
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken
  type: Class
  summary: "Representa uma palavra ou frase curta que pode ser reconhecida."
  remarks: "Usando os membros da classe SrgsToken, você pode especificar três formas de uma palavra: o <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>formulário, o <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>formulário e um personalizado <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>para o word.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>       Se várias palavras são armazenadas em um único objeto SrgsToken, cada um é tratada como um token diferente internamente e no resultado.       Essa classe representa o `token` elemento definido pelo World Wide Web Consortium (W3C) [especificação de gramática de reconhecimento de fala (SRGS) versão 1.0.](http://go.microsoft.com/fwlink/?LinkId=201761). Para obter informações sobre o SRGS `token` elemento e detalhes sobre o suporte por Speech, consulte [token elemento](http://msdn.microsoft.com/en-us/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632)."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")]

      public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Speech.Recognition.SrgsGrammar.SrgsElement
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  langs:
  - csharp
  name: SrgsToken(String)
  nameWithType: SrgsToken.SrgsToken(String)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.SrgsToken(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsToken&quot;> </xref> classe e especifica o texto a ser reconhecido."
  remarks: "Cria um <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>do objeto cuja <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>propriedade é definida inicialmente para o valor da `text` parâmetro.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>"
  syntax:
    content: public SrgsToken (string text);
    parameters:
    - id: text
      type: System.String
      description: "O texto do novo <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsToken&quot;> </xref> instância da classe."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>text</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>text</code>está vazio."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Display
  id: Display
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  langs:
  - csharp
  name: Display
  nameWithType: SrgsToken.Display
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.Display
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Obtém ou define a forma de exibição de texto a ser falado."
  remarks: "Embora eles normalmente representam o mesmo valor, o formato de exibição pode ser diferente do <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>formulário de uma palavra ou frase em <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> </xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> Por exemplo, o formato de exibição pode ser um acrônimo, como &quot;EUA&quot;, enquanto o texto que será falado e ao qual o <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>aplica-se, é &quot;Estados Unidos da América&quot;.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>"
  syntax:
    content: public string Display { get; set; }
    return:
      type: System.String
      description: "Uma representação do token como ela deve ser exibida."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsToken.Display*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "É feita uma tentativa de definir a exibição <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "É feita uma tentativa para atribuir uma cadeia de caracteres vazia para exibição."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  langs:
  - csharp
  name: Pronunciation
  nameWithType: SrgsToken.Pronunciation
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Obtém ou define a cadeia de caracteres que define a pronúncia para o token."
  remarks: "Telefones são letras ou símbolos que descrevem os sons de fala. Speech suporta três letras do alfabeto fonético para especificar pronúncia personalizada: o Universal telefone definido (no-break), o conjunto de telefone Speech API (SAPI) e o alfabeto fonético de internacional (IPA). Os telefones especificados na pronúncia devem coincidir com o alfabeto fonético especificado em <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A> Consulte [dicionários e letras do alfabeto fonético](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) para obter mais informações.       Os telefones especificados na pronúncia indicam como o conteúdo de <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>deve ser pronunciados para reconhecimento bem-sucedido.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>  O mecanismo de reconhecimento de fala usa a pronúncia especificada na pronúncia para corresponder à entrada de fala e retorna a cadeia de caracteres contida pelo <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>no resultado de reconhecimento.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>       Se os telefones não são delimitados por espaços ou cadeia de caracteres especificada contém um telefone não reconhecido, o mecanismo de reconhecimento não reconhece a pronúncia especificada como uma pronúncia válida da palavra contida pelo <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>       Pronúncia especificada na pronúncia têm precedência sobre pronúncia especificada em dicionários associados a uma gramática ou um mecanismo de reconhecimento. Além disso, a pronúncia na propriedade pronúncia aplica-se somente a única ocorrência da palavra ou frase contida pelo <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>"
  example:
  - "The grammar in the following example contains slang words and also has an uncommon word: \"whatchamacallit\". Adding a custom, inline pronunciation using the Pronunciation property of the <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> class can improve the accuracy of recognition for the word \"whatchamacallit\" as well as for the entire phrase that contains it. The example uses phones from the Microsoft Universal Phone Set (UPS) to define the custom pronunciations.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Speech.Recognition.SrgsGrammar;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an instance of the in-process recognizer.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\")))  \n      {  \n  \n        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  \n        SrgsOneOf gimme = new SrgsOneOf(  \n          new string[] { \"give me\", \"gimme\", \"hand me\", \"ha'me\" });  \n        SrgsOneOf the = new SrgsOneOf(new string[] { \"the\", \"duh\" });  \n  \n        // Build the one-of element that contains the pronunciation.  \n        SrgsItem thing = new SrgsItem(\"thingamajig\");  \n        SrgsItem whatcha = new SrgsItem();  \n        SrgsToken callit = new SrgsToken(\"whatchamacallit\");  \n        callit.Pronunciation = \"W AE T CH AE M AE K AA L IH T\";  \n        whatcha.Add(callit);  \n        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  \n  \n        // Create the rule from the SrgsOneOf objects.  \n        SrgsRule slangRule = new SrgsRule(\"slang\", gimme, the, what);  \n  \n        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  \n        SrgsDocument tokenPron = new SrgsDocument(slangRule);  \n        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  \n  \n        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  \n        Grammar g_Slang = new Grammar(tokenPron);  \n        g_Slang.Name = (\"Slang Pronunciation\");  \n        recognizer.LoadGrammarAsync(g_Slang);  \n  \n        // Configure recognizer input.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Attach a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Start asynchronous recognition.  \n        recognizer.RecognizeAsync();  \n        Console.WriteLine(\"Starting asynchronous recognition...\");  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Recognized phrase: \" + e.Result.Text);  \n      Console.WriteLine(\"Confidence: \" + e.Result.Confidence);  \n      Console.WriteLine(\"  Word summary: \");  \n      foreach (RecognizedWordUnit word in e.Result.Words)  \n      {  \n        Console.WriteLine(  \n          \"    Lexical form ({1})\" +  \n          \" Pronunciation ({0})\" +  \n          \" Confidence ({2})\",  \n          word.Pronunciation, word.LexicalForm, word.Confidence);  \n      }  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public string Pronunciation { get; set; }
    return:
      type: System.String
      description: "Retorna uma cadeia de caracteres que contém os telefones do alfabeto fonético especificado em <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet*>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet*>"
  overload: System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "É feita uma tentativa de definir uma pronúncia <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "É feita uma tentativa para atribuir uma cadeia de caracteres vazia a pronúncia."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Text
  id: Text
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  langs:
  - csharp
  name: Text
  nameWithType: SrgsToken.Text
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Obtém ou define a forma escrita da palavra que deve ser ditas."
  remarks: "Embora eles normalmente representam o mesmo valor, o formato de texto pode ser diferente do <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>formulário de uma palavra ou frase em <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> </xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> Por exemplo, o <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>formulário pode ser um acrônimo, como &quot;EUA&quot;, enquanto o texto que será falado e ao qual o <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>aplica-se, é &quot;Estados Unidos da América&quot;.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A>       O valor padrão para a propriedade de texto é uma cadeia de caracteres vazia, &quot;&quot;."
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "O texto contido dentro de <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsToken&quot;> </xref> instância da classe."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsToken.Text*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "É feita uma tentativa de definir o texto <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "É feita uma tentativa para atribuir uma cadeia de caracteres vazia para texto."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "É feita uma tentativa para atribuir uma cadeia de caracteres que contém uma aspa (&quot;) em texto."
  platform:
  - net462
references:
- uid: System.Speech.Recognition.SrgsGrammar.SrgsElement
  isExternal: false
  name: System.Speech.Recognition.SrgsGrammar.SrgsElement
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: SrgsToken(String)
  nameWithType: SrgsToken.SrgsToken(String)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.SrgsToken(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Display
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: Display
  nameWithType: SrgsToken.Display
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.Display
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: Pronunciation
  nameWithType: SrgsToken.Pronunciation
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Text
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: Text
  nameWithType: SrgsToken.Text
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsToken.Text
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: SrgsToken
  nameWithType: SrgsToken.SrgsToken
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Display*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: Display
  nameWithType: SrgsToken.Display
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: Pronunciation
  nameWithType: SrgsToken.Pronunciation
- uid: System.Speech.Recognition.SrgsGrammar.SrgsToken.Text*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsToken
  isExternal: false
  name: Text
  nameWithType: SrgsToken.Text
