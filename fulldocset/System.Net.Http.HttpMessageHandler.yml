### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageHandler
  id: HttpMessageHandler
  children:
  - System.Net.Http.HttpMessageHandler.#ctor
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
  type: Class
  summary: "Um tipo base para manipuladores de mensagens HTTP."
  remarks: "Há vários identificadores de mensagem HTTP que podem ser usados. Eles incluem o seguinte.      1.  <xref:System.Net.Http.DelegatingHandler>-Uma classe usada para conectar um manipulador em um encadeamento de manipulador.</xref:System.Net.Http.DelegatingHandler>      2.  HttpMessageHandler - simples à classe para derivar de que suporte os requisitos mais comuns para a maioria dos aplicativos.      3.  <xref:System.Net.Http.HttpClientHandler>-Uma classe que opera na parte inferior da cadeia de manipulador que realmente manipula as operações de transporte HTTP.</xref:System.Net.Http.HttpClientHandler>      4.  <xref:System.Net.Http.WebRequestHandler>-A classe de especialidade opera na parte inferior da classe de cadeia de manipulador que manipula as operações de transporte HTTP com opções específicas para o <xref:System.Net.HttpWebRequest?displayProperty=fullName>objeto.</xref:System.Net.HttpWebRequest?displayProperty=fullName></xref:System.Net.Http.WebRequestHandler>       Se os desenvolvedores derivam classes de HttpMessageHandler e substituir o <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>método, eles devem garantir que <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>pode obter chamado simultaneamente por threads diferentes.</xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>       Isso é necessário desde métodos em <xref:System.Net.Http.HttpClient>pode ser chamado simultaneamente e precisa de uma garantia de segurança do thread.</xref:System.Net.Http.HttpClient> Portanto, se um manipulador é atribuído a um <xref:System.Net.Http.HttpClient>instância, o <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>método do manipulador de pode obter chamado simultaneamente pela <xref:System.Net.Http.HttpClient>instância e precisa ser thread-safe.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpClient>"
  syntax:
    content: 'public abstract class HttpMessageHandler : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> classe."
  syntax:
    content: protected HttpMessageHandler ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Versões de recursos não gerenciados e descarta os recursos gerenciados usadas pelo <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público `Dispose()` método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`. Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Net.Http.HttpMessageHandler>referências.</xref:System.Net.Http.HttpMessageHandler></xref:System.Object.Finalize%2A> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> às versões apenas recursos não gerenciados."
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída quando a resposta inteira, incluindo o conteúdo é lido.</xref:System.Threading.Tasks.Task%601>       O método SendAsync é usado principalmente pelo sistema. Este método é chamado pelo sistema de uma a <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName>métodos é chamado.</xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> A maioria dos aplicativos nunca chama esse método."
  syntax:
    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A mensagem de solicitação HTTP para enviar."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token de cancelamento para cancelar a operação."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpMessageHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageHandler.#ctor
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageHandler.#ctor*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler.HttpMessageHandler
- uid: System.Net.Http.HttpMessageHandler.Dispose*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageHandler.Dispose
- uid: System.Net.Http.HttpMessageHandler.SendAsync*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageHandler.SendAsync
