### YamlMime:ManagedReference
items:
- uid: System.Transactions.DependentTransaction
  id: DependentTransaction
  children:
  - System.Transactions.DependentTransaction.Complete
  langs:
  - csharp
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
  type: Class
  summary: "Descreve um clone de uma transação, fornecendo a garantia de que a transação não pode ser confirmada até que o aplicativo é fornecido para o rest sobre o trabalho na transação. Essa classe não pode ser herdada."
  remarks: "O DependentTransaction é um clone de um <xref:System.Transactions.Transaction>objeto criado usando o <xref:System.Transactions.Transaction.DependentClone%2A>método.</xref:System.Transactions.Transaction.DependentClone%2A> </xref:System.Transactions.Transaction>  Sua única finalidade é permitir que o aplicativo fique rest e garantir que a transação não pode ser confirmada enquanto o trabalho ainda está sendo executado na transação (por exemplo, em um thread de trabalho).       Quando o trabalho feito na transação clonada finalmente é concluído e pronto para ser confirmada, ele pode informar o criador da transação usando o <xref:System.Transactions.DependentTransaction.Complete%2A>método.</xref:System.Transactions.DependentTransaction.Complete%2A> Portanto, você pode preservar a consistência e a exatidão dos dados.       O <xref:System.Transactions.DependentCloneOption>enumeração é usada para determinar o comportamento de confirmação.</xref:System.Transactions.DependentCloneOption>  Este controle do comportamento permite que um aplicativo parar, bem como fornece suporte à simultaneidade. Para obter mais informações sobre como essa enumeração é usada, consulte [gerenciamento de simultaneidade com DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)."
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_0_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_0_1.cs)]"
  syntax:
    content: 'public sealed class DependentTransaction : System.Transactions.Transaction'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements: []
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.DependentTransaction.Complete
  id: Complete
  parent: System.Transactions.DependentTransaction
  langs:
  - csharp
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Tenta concluir a transação dependente."
  remarks: "Chame este método quando quiser que o clone dependente informar o criador da transação que concluiu seu trabalho e a transação pode ser confirmada se o pai também está pronto.       Depois que essa chamada é invocada, não tente qualquer trabalho adicional na transação, ou uma exceção será lançada.       Se o domínio do aplicativo falhar depois que este método é chamado e antes que a transação seja concluída, a transação pode anular.       **Observação** esse método deve ser chamado apenas uma vez durante o tempo de vida da transação dependente."
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.DependentTransaction.Complete*
  exceptions:
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "Qualquer tentativa de trabalho adicional na transação depois que este método é chamado. Isso inclui chamar métodos como <> </> *>, <> </> *>, <> </> *>, <> </> *>, ou todas as operações na transação de serialização."
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.DependentTransaction.Complete
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
- uid: System.Transactions.DependentTransaction.Complete*
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete
  nameWithType: DependentTransaction.Complete
