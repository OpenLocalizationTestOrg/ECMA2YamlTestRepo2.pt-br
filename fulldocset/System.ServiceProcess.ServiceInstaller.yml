### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceInstaller
  id: ServiceInstaller
  children:
  - System.ServiceProcess.ServiceInstaller.#ctor
  - System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  - System.ServiceProcess.ServiceInstaller.Description
  - System.ServiceProcess.ServiceInstaller.DisplayName
  - System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.ServiceName
  - System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  - System.ServiceProcess.ServiceInstaller.StartType
  - System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  langs:
  - csharp
  name: ServiceInstaller
  nameWithType: ServiceInstaller
  fullName: System.ServiceProcess.ServiceInstaller
  type: Class
  summary: "Instala uma classe que estende <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> para implementar um serviço. Essa classe é chamada pelo utilitário de instalação ao instalar um aplicativo de serviço."
  remarks: "The ServiceInstaller does work specific to the service with which it is associated. It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services registry key. The service is identified by its ServiceName within this subkey. The subkey also includes the name of the executable or .dll to which the service belongs.  \n  \n To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`. Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one ServiceInstaller instance for each service in the application. Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and ServiceInstaller instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n> [!NOTE]\n>  It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.  \n  \n For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods. However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute. If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.  \n  \n The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all ServiceInstaller instances in the project. If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.  \n  \n> [!NOTE]\n>  It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property to locate the service within this executable.  \n  \n You can modify other properties on the ServiceInstaller either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer. For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.  \n  \n Normally, you will not call the methods on ServiceInstaller within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \n  \n The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.  \n  \n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each ServiceInstaller instance is installed by the utility. It is usually unnecessary for your code to modify state information explicitly.  \n  \n When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class. The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log. When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the ServiceInstaller (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value. In an installation failure, the source's installation is rolled-back along with previously installed services.  \n  \n The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running. Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. If a new source was created for event logging, the source is deleted."
  example:
  - "The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for `MyProjectInstaller` (which would be called by the install utility), ServiceInstaller objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable. For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.  \n  \n Normally, you would not create an instance of your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._4_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._4_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._4_1.vb)]"
  syntax:
    content: 'public class ServiceInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceProcess.ServiceInstaller&quot;> </xref> classe."
  remarks: "Para instalar um serviço, criar uma classe de instalador de projeto que herda o <xref:System.Configuration.Install.Installer>de classe e defina o <xref:System.ComponentModel.RunInstallerAttribute>atributo da classe para `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> Dentro de seu projeto, criar um <xref:System.ServiceProcess.ServiceProcessInstaller>instância por aplicativo de serviço e um <xref:System.ServiceProcess.ServiceInstaller>instância para cada serviço no aplicativo.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> No construtor de classe de instalador seu projeto, defina as propriedades de instalação para o serviço usando o <xref:System.ServiceProcess.ServiceProcessInstaller>e <xref:System.ServiceProcess.ServiceInstaller>instâncias e, em seguida, adicione as instâncias de <xref:System.Configuration.Install.Installer.Installers%2A>coleção.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>       O construtor ServiceInstaller gera automaticamente uma origem de log de eventos cuja <xref:System.Diagnostics.EventLog.Log%2A>propriedade está definida para o log de aplicativo do computador e um <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLog.Log%2A> Quando você define o <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>do <xref:System.ServiceProcess.ServiceInstaller>, que deve ser idêntico de <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>do serviço, o <xref:System.Diagnostics.EventLog.Source%2A>o log de eventos é automaticamente definida como o mesmo valor.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> A fonte será excluída automaticamente no caso de uma falha de instalação.       Os conjuntos de construtor ServiceInstaller o <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>propriedade `ServiceStartMode.Manual` para especificar que um usuário iniciar o serviço.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A> Você pode redefinir a propriedade `ServiceStartMode.Automatic` para especificar que o serviço iniciar quando o computador é reinicializado."
  syntax:
    content: public ServiceInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Copia as propriedades de uma instância do <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> para esse instalador."
  remarks: "Esse método será chamado raramente dentro de seu código. CopyFromComponent é geralmente chamado apenas pelos designers.       CopyFromComponent salva o nome do serviço do `component` parâmetro para o <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>da <xref:System.ServiceProcess.ServiceInstaller>instância.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> (Porque o parâmetro deve ser uma instância de uma classe que deriva de <xref:System.ServiceProcess.ServiceBase>, `component` é garantido que tem uma propriedade <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>.)      > [!NOTE] > Se você estiver usando o designer do Visual Studio, este método é chamado em tempo de design, quando o usuário clica `Add Installer` em um componente que essa classe como instalador.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase> O instalador usa todas as informações que ele possa do componente em tempo real e armazena-a para uso no momento da instalação."
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> da qual copiar."
  overload: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O componente que você estiver associando o instalador não herda de <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  id: DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Obtém ou define um valor que indica se o serviço deve ser atrasado seja iniciado até que estão executando outros serviços iniciados automaticamente."
  remarks: "A propriedade DelayedAutoStart pode ser aplicada a qualquer serviço, mas é ignorado, a menos que o modo de início do serviço é <xref:System.ServiceProcess.ServiceStartMode>.</xref:System.ServiceProcess.ServiceStartMode> A configuração entra em vigor na próxima vez que o sistema for reiniciado. O Gerenciador de controle de serviço não garante uma hora de início específica para o serviço.       Um serviço de início automático atrasado não pode ser um membro de um grupo de ordenação de carga, mas ele pode depender de outro serviço de início automático. Se um aplicativo chamar um serviço de início automático atrasado antes que ele seja carregado, a chamada falhará.       Em sistemas operacionais que dão suporte ao início automático atrasado, a definição dessa propriedade não terá efeito."
  syntax:
    content: public bool DelayedAutoStart { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Iniciar o atraso automático do serviço; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Description
  id: Description
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Obtém ou define a descrição para o serviço."
  remarks: "Use a propriedade Description para descrever a finalidade do serviço instalado para o usuário. O usuário pode exibir a descrição do serviço em aplicativos que exibem detalhes de serviços instalados.       Por exemplo, usando o Windows XP, você pode exibir a descrição do serviço com o utilitário de linha de comando de controle de serviço (Sc.exe) ou você pode exibir a descrição do serviço dentro do **serviços** nó do **gerenciamento do computador** console."
  example:
  - "The following code example sets the installation properties for a new Windows service application. The example sets the service name, along with the display name and description. After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cs[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/csharp/p-system.serviceprocess._7_1.cs)]\n [!code-vb[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "A descrição do serviço. O padrão é uma cadeia de caracteres vazia (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceInstaller.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica o nome amigável que identifica o serviço para o usuário."
  remarks: "The DisplayName is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service. The DisplayName is a registry value, but is never used as a registry key. Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\\System\\CurrentControlSet\\Services registry key, so it is restricted.  \n  \n The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property."
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "O nome associado ao serviço, usado com frequência para ferramentas interativas."
  overload: System.ServiceProcess.ServiceInstaller.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Instala o serviço gravando informações do aplicativo de serviço no registro. Este método destina-se a ser usada por ferramentas de instalação, que processam os métodos apropriados automaticamente."
  remarks: "Normalmente, você não irá chamar os métodos em <xref:System.ServiceProcess.ServiceInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceInstaller> O utilitário de instalação automaticamente chama o método de instalação durante a instalação. Ele desfaz falhas, se necessário, chamando <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>no objeto que gerou a exceção.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>       Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes que já foram instaladas, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Essas informações de estado passado para instalar como o `stateSaver` parâmetro, é atualizado continuamente como o <xref:System.ServiceProcess.ServiceProcessInstaller>instância e cada <xref:System.ServiceProcess.ServiceInstaller>instância é instalada pelo utilitário.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Normalmente, é desnecessário para seu código modificar essas informações de estado explicitamente.       O <xref:System.ServiceProcess.ServiceProcessInstaller>associado a seu projeto instalação classe instala informações comuns a todos os <xref:System.ServiceProcess.ServiceInstaller>instâncias no projeto.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Se este serviço tem tudo o que o separa de outros serviços no projeto de instalação, essas informações específicas do serviço são instaladas por este método.       Para instalar um serviço, criar uma classe de instalador de projeto que herda o <xref:System.Configuration.Install.Installer>de classe e defina o <xref:System.ComponentModel.RunInstallerAttribute>atributo da classe para `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> Dentro de seu projeto, criar um <xref:System.ServiceProcess.ServiceProcessInstaller>instância por aplicativo de serviço e um <xref:System.ServiceProcess.ServiceInstaller>instância para cada serviço no aplicativo.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> No construtor de classe de instalador seu projeto, defina as propriedades de instalação para o serviço usando o <xref:System.ServiceProcess.ServiceProcessInstaller>e <xref:System.ServiceProcess.ServiceInstaller>instâncias e, em seguida, adicione as instâncias de <xref:System.Configuration.Install.Installer.Installers%2A>coleção.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>      > [!NOTE] > É recomendável que você use o construtor para adicionar instâncias de instalador; no entanto, se você precisa adicionar ao <xref:System.Configuration.Install.Installer.Installers%2A>coleção no método de instalação, certifique-se de executar as mesmo adições à coleção o <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>método.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A>       Para todas as classes que derivam de <xref:System.Configuration.Install.Installer>classe, o estado do <xref:System.Configuration.Install.Installer.Installers%2A>coleção deve ser o mesmo na instalação e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>métodos.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> No entanto, você pode evitar a manutenção da coleção em que a instalação e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>métodos se você adicionar instâncias de instalador para o <xref:System.Configuration.Install.Installer.Installers%2A>coleção em seu construtor de classe de instalador personalizado.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "Um <xref:System.Collections.IDictionary>que contém as informações de contexto associadas à instalação.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Install*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A instalação não tem um <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> para o executável.       - ou - o nome de arquivo para o assembly é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia.       - ou - o nome do serviço é inválido.       - ou - não foi possível abrir o Gerenciador de controle de serviço."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome de exibição para o serviço é de mais de 255 caracteres."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "O sistema não pôde gerar um identificador para o serviço.       - ou - um serviço com esse nome já está instalado."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica se dois instaladores instalaria o mesmo serviço."
  remarks: "IsEquivalentInstaller indica, por exemplo, se dois instaladores instalaria o mesmo serviço sob a mesma conta de usuário."
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "Um <xref href=&quot;System.Configuration.Install.ComponentInstaller&quot;> </xref> ao qual você está comparando o instalador atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se chamar <xref:System.ServiceProcess.ServiceInstaller.Install*>em ambos esses instaladores resultaria em instalando o mesmo serviço; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceInstaller.Install*>"
  overload: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Retorna informações de aplicativo de serviço gravadas no registro, o procedimento de instalação. Este método destina-se a ser usada por ferramentas de instalação, que processam os métodos apropriados automaticamente."
  remarks: "Normalmente, você não irá chamar os métodos em <xref:System.ServiceProcess.ServiceInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceInstaller> O utilitário de instalação chama automaticamente o <xref:System.ServiceProcess.ServiceInstaller.Install%2A>método durante o processo de instalação.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> Ele desfaz falhas, se necessário, ao chamar reversão no objeto que gerou a exceção.       Rotina de instalação do aplicativo mantém informações automaticamente sobre os componentes já instalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Essas informações de estado passado para reversão como o `savedState` parâmetro, é atualizado continuamente como o <xref:System.ServiceProcess.ServiceProcessInstaller>instância e cada <xref:System.ServiceProcess.ServiceInstaller>instância é instalada pelo utilitário.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Normalmente, é desnecessário para seu código modificar essas informações de estado explicitamente."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Um <xref:System.Collections.IDictionary>que contém as informações de contexto associadas à instalação.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica o nome usado pelo sistema para identificar este serviço. Essa propriedade deve ser idêntica de &lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt; do serviço que você deseja instalar."
  remarks: "It is crucial that the ServiceName be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the ServiceName property to locate the service within this executable.  \n  \n When you set the ServiceName of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value. This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.  \n  \n> [!NOTE]\n>  If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown. If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.  \n  \n The ServiceName cannot be `null` or have zero length. Its maximum size is 256 characters. It also cannot contain forward or backward slashes, '/' or '\\\\', or characters from the ASCII character set with value less than decimal value 32."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "O nome do serviço a ser instalado. Esse valor deve ser definido antes das tentativas de utilitário de instalação para instalar o serviço."
  overload: System.ServiceProcess.ServiceInstaller.ServiceName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade ServiceName é inválida."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica os serviços que devem estar em execução para esse serviço seja executado."
  remarks: "Um serviço pode exigir outros serviços em execução antes de iniciar. As informações dessa propriedade são gravadas para uma chave do registro. Quando o usuário (ou sistema, no caso de inicialização automática) tenta executar o serviço, o Gerenciador de controle de serviços (SCM) verifica se cada um dos serviços na matriz já foi iniciada.       Se qualquer serviço na matriz, em seguida, não está em execução, o SCM tentará iniciá-los. Isso inclui serviços com `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A>       Se qualquer dos quais esse serviço depende de serviço não iniciar, este serviço não será iniciado. Uma exceção não é gerada se o sistema não foi iniciado porque não há nenhuma exceção tratamento no nível do sistema para detectar isso. Decida como tratar as falhas de início do serviço e implementar isso em seu código. Normalmente, uma caixa de diálogo aparece para o usuário na inicialização, se um serviço não for iniciado.       Se o serviço não iniciar, uma entrada é gravada no log de eventos do aplicativo.       Os serviços dos quais esse serviço depende não precisam estar no mesmo executável."
  syntax:
    content: public string[] ServicesDependedOn { get; set; }
    return:
      type: System.String[]
      description: "Uma matriz de serviços que devem estar em execução antes de executar o serviço associado a esse instalador."
  overload: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica como e quando esse serviço foi iniciado."
  remarks: "Defina o StartType para especificar que o serviço ser iniciado automaticamente após a reinicialização ou que um usuário inicie manualmente o serviço. Um serviço também pode ser desabilitado, especificando que não pode ser iniciado, manualmente ou programaticamente, até que ele seja habilitado.       Não é possível alterar <xref:System.ServiceProcess.ServiceInstaller>valores de propriedade após a instalação.</xref:System.ServiceProcess.ServiceInstaller> Para alterar o StartType, você precisa desinstalar e reinstalar o serviço, tanto alterar manualmente a configuração usando o Gerenciador de controle de serviço."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; set; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "Um <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> que representa a maneira que o serviço foi iniciado. O padrão é <xref uid=&quot;langword_csharp_Manual&quot; name=&quot;Manual&quot; href=&quot;&quot;> </xref>, que especifica que o serviço não será iniciado automaticamente após a reinicialização."
  overload: System.ServiceProcess.ServiceInstaller.StartType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "O modo de início não é um valor de <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> enumeração."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Desinstala o serviço removendo as informações sobre ele no registro."
  remarks: "Desinstale primeiro tentará interromper o serviço antes de desinstalá-lo. Se o serviço não pode ser interrompido, nenhuma exceção for detectada, e o método continua com a remoção do serviço.       Normalmente, você não irá chamar os métodos em <xref:System.ServiceProcess.ServiceInstaller>dentro de seu código; eles geralmente são chamados somente com o utilitário de instalação.</xref:System.ServiceProcess.ServiceInstaller> InstallUtil é usado para desinstalar os serviços, bem como instalá-los; Desinstalando o leva a um comutador na chamada de linha de comando.       Rotina de desinstalação de um aplicativo mantém informações automaticamente sobre os componentes que estão sendo desinstalado, usando o instalador de projeto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Essas informações de estado passado para desinstalação, como o `savedState` parâmetro, é atualizado continuamente como o <xref:System.ServiceProcess.ServiceProcessInstaller>instância e cada <xref:System.ServiceProcess.ServiceInstaller>instância é instalada pelo utilitário.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Normalmente, é desnecessário para seu código modificar essas informações de estado explicitamente.       Para todas as classes que derivam de <xref:System.Configuration.Install.Installer>classe, o estado do <xref:System.Configuration.Install.Installer.Installers%2A>coleção deve ser o mesmo no <xref:System.ServiceProcess.ServiceInstaller.Install%2A>e métodos de desinstalação.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> No entanto, você pode evitar a manutenção da coleção no <xref:System.ServiceProcess.ServiceInstaller.Install%2A>e métodos de desinstalação, se você adicionar instâncias de instalador para o <xref:System.Configuration.Install.Installer.Installers%2A>coleção em seu construtor de classe de instalador personalizado.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Install%2A>       Não há nenhum mecanismo de reversão para desinstalar, portanto, se um serviço falhar para desinstalar, isso não afeta os outros serviços (normalmente dentro do mesmo projeto de instalação) que está sendo desinstalados."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Um <xref:System.Collections.IDictionary>que contém as informações de contexto associadas à instalação.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Uninstall*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível abrir o Gerenciador de controle de serviço.       - ou - o sistema não foi possível obter um identificador para o serviço."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceInstaller.Description
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceInstaller.StartType
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.#ctor*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller
  nameWithType: ServiceInstaller.ServiceInstaller
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
- uid: System.ServiceProcess.ServiceInstaller.Description*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
- uid: System.ServiceProcess.ServiceInstaller.DisplayName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceInstaller.Install
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: ServiceInstaller.IsEquivalentInstaller
- uid: System.ServiceProcess.ServiceInstaller.Rollback*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceInstaller.Rollback
- uid: System.ServiceProcess.ServiceInstaller.ServiceName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
- uid: System.ServiceProcess.ServiceInstaller.StartType*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceInstaller.Uninstall*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall
  nameWithType: ServiceInstaller.Uninstall
