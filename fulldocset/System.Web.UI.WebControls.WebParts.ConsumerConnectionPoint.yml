### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Define um objeto de ponto de conexão que permite um controle de servidor que atua como um consumidor para formar uma conexão com um provedor."
  remarks: "Em cada conexão de Web Parts entre dois controles de servidor, cada controle deve ter (entre outros requisitos de) um objeto de ponto de conexão associado que permite que ele se conectar a outro controle e fornecer ou consumir dados, dependendo se o controle é designado como o provedor ou o consumidor para a conexão. Um <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objeto em geral contém os detalhes de como um controle pode se conectar a outro controle e o tipo de dados pode compartilhar.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Para um controle que atua como o consumidor em uma conexão, o seu ponto de conexão deve ser um objeto de ConsumerConnectionPoint. Para obter detalhes sobre pontos de conexão e conexões de Web Parts, leia os tópicos listados na seção Consulte também abaixo.       Para criar um objeto de ConsumerConnectionPoint, várias etapas são necessárias: 1.  Ativar um controle de consumidor fazer referência a uma instância da interface. Um <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controle de servidor (qualquer tipo de controle de servidor que será adicionado a um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona pode ser usada) deve ser capaz de consumir dados de uma instância de interface específica.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> O controle não precisa implementar a interface; somente o provedor deve implementá-la. O consumidor pode trabalhar tanto com o tipo de interface exata atendido por um provedor ou, se não, uma <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto pode ser usado para transformar dados de tipo de interface do provedor para um tipo entendido pelo consumidor.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> É uma maneira comum para habilitar um consumidor declarar um campo particular para conter uma referência para o tipo de interface desejado.      2.  Identificar um método de retorno de chamada. Um método no consumidor deve ser identificado como o método de retorno de chamada para estabelecer uma conexão com o provedor. Esse método recupera uma instância da interface que o provedor implementa e atribui-lo (por exemplo) no campo particular criado na primeira etapa. A abordagem de Web Parts para identificar um método de retorno de chamada no consumidor é adicionar um `ConnectionConsumer` atributo de metadados (definido pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe) para o método que recebe a instância da interface.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Quando o atributo é adicionado, o único parâmetro necessário é um nome de exibição a ser usado para o ponto de conexão do consumidor. Parâmetros opcionais também podem ser adicionados como uma ID.      3.  Processo e os dados da instância de interface de saída. Executar qualquer processamento interno conforme necessário nos dados e, em seguida, normalmente um controle de consumidor processará os dados para a página. Uma maneira comum de fazer isso é substituir o controle <xref:System.Web.UI.Control.OnPreRender%2A>método.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > Durante uma solicitação síncrona, um consumidor deve solicitar dados diretamente do provedor durante ou imediatamente após o <xref:System.Web.UI.Control.PreRender>evento.</xref:System.Web.UI.Control.PreRender> Durante uma solicitação assíncrona, se o método de retorno de chamada do provedor não é chamado a qualquer momento durante o processamento, o desenvolvedor pode assumir que nenhum dado foi enviado para o consumidor.       Depois que um controle foi equipado para atuar como um consumidor, o controle pode participar de conexões (supondo que um controle de provedor também está equipado e disponível). Para criar uma conexão estática, declarativa na marcação de uma página da Web, os desenvolvedores podem usar o `<asp:webpartconnection>` elemento. Se o `ConnectionConsumer` atributo no código-fonte consumidor que identifica o método de retorno de chamada especifica uma ID para o ponto de conexão e, em seguida, esse valor deve ser atribuído ao `ConsumerConnectionPointID` atributo o `<asp:webpartconnection>` elemento em uma página. Um motivo que um desenvolvedor pode especificar uma ID para um ponto de conexão do consumidor é se houver vários pontos de conexão definidos no controle do consumidor. Se uma ID não é especificada para o ponto de conexão do consumidor no controle do consumidor, um valor não precisa ser atribuído ao `ConsumerConnectionPointID` atributo na página, porque a conexão será criada usando um valor padrão obtido o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Para criar uma conexão no código, os desenvolvedores devem criar um novo objeto de ConsumerConnectionPoint chamando o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>método e transmitindo a ele a identificação do controle consumidor, juntamente com a ID ou o índice do objeto ConsumerConnectionPoint definido no controle do consumidor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> O objeto retornado de ConsumerConnectionPoint, junto com uma referência para o controle de consumidor, uma referência para o controle de provedor e um correspondente <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>de objeto, terão passado para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método para criar um novo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Embora os desenvolvedores podem usar pontos de conexão do consumidor como parte do estabelecimento de conexões declarativamente ou por meio de programação, os usuários também podem interagir com pontos de conexão do consumidor para estabelecer conexões por meio da interface do usuário (IU). Se os desenvolvedores declarar um <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controle em uma página da Web, ele fornece uma interface de usuário em tempo de execução para que os usuários criem conexões.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Se os usuários optarem o controle provedor como o ponto de partida para estabelecer a conexão clicando em seu conectar verbo (eles também podem escolher o consumidor; não há nenhuma diferença na conexão resultante), a interface do usuário, eles verão um controle de lista suspensa com nomes para exibição disponível consumidor conexão ponto (ou pontos se houver várias) que o provedor pode enviar os dados. Os usuários devem selecionar um ponto de conexão do consumidor para estabelecer uma conexão.       Um objeto de ConsumerConnectionPoint associa diretamente em um controle específico de consumidor e armazena os detalhes sobre uma conexão nas propriedades do qual que ela herda da <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> base Por exemplo, no herdadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>propriedade, um ponto de conexão do consumidor mantém o tipo de interface, ele usa.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se o provedor e consumidor em uma conexão ambos entendem o tipo de interface, os controles são compatíveis e é capaz de formar uma conexão direta. Se o provedor e consumidor não podem funcionar com o mesmo tipo de interface, elas são incompatíveis e deve usar um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto para converter o ponto de conexão de provedor <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>propriedade em um tipo que o consumidor pode trabalhar com.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Outra propriedade herdada importante é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>durante a criação de conexões do ponto de propriedade, que fornece um nome amigável para exibir na interface de usuário, os usuários podem escolher uma conexão de consumidor.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> O nome de exibição é o parâmetro necessário quando os desenvolvedores de adicionar um `ConnectionConsumer` de atributo para o método de retorno de chamada em um controle de consumidor. O herdadas <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>propriedade também é útil, conforme indicado acima, porque ele fornece um identificador exclusivo para um ponto de conexão do consumidor que um consumidor tiver vários pontos de conexão.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Um consumidor pode ter vários objetos de ConsumerConnectionPoint definidos nele e nesse caso, quando os desenvolvedores de adicionar o `ConnectionConsumer` atributo para um método, eles devem especificar um valor de ID para distinguir cada ponto de conexão. Uma outra propriedade herdada notável é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>propriedade, que indica se um ponto de conexão do consumidor pode se conectar simultaneamente a vários provedores.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> O valor da propriedade é `false` por padrão para pontos de conexão do consumidor (enquanto o padrão é `true` para pontos de conexão do provedor).       A classe de ConsumerConnectionPoint adiciona vários métodos exclusivos para os membros que ele herda da <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> de O <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>método invoca o método de retorno de chamada do consumidor próprio definido para recuperar a instância da interface do provedor.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> O <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>método retorna um valor booliano que indica se o ponto de conexão é capaz de estabelecer conexões, com base no estado atual do controle consumidor associado.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> classe."
  remarks: "O construtor ConsumerConnectionPoint para a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe simplesmente chama o construtor base, transmitindo a ele os vários parâmetros e inicializar a classe base.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       O construtor de classe base verifica um número de parâmetros para um ponto de conexão e pode gerar várias exceções. Para obter uma lista de exceções possíveis, consulte a seção de exceções.       Você pode chamar o construtor ConsumerConnectionPoint para criar sua própria instância da <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> No entanto, nos casos em que você simplesmente estabelecer uma conexão e não estende a classe, você deve chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>método para retornar um objeto de ponto de conexão de um provedor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "O método no controle do consumidor que retorna uma instância da interface para os consumidores para estabelecer uma conexão."
    - id: interfaceType
      type: System.Type
      description: "O <xref:System.Type>da interface que o consumidor recebe de um provedor.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "O <xref:System.Type>do controle consumidor ao qual o ponto de conexão do consumidor está associado.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Um nome para exibição amigável para o ponto de conexão do consumidor que aparece aos usuários na interface do usuário de conexão (IU)."
    - id: id
      type: System.String
      description: "Um identificador exclusivo para o ponto de conexão do consumidor."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Um valor booliano que indica se o ponto de conexão do consumidor pode ter várias conexões simultâneas com provedores."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>não é o mesmo tipo que o controle de consumidor (ou uma classe válida derivada)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Invoca o método de retorno de chamada em um controle de consumidor e recupera a instância da interface de um controle de provedor."
  remarks: "Este método recebe uma instância da interface de um provedor que contém dados para o controle de consumidor.       O método SetObject é chamado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objetos quando uma conexão está sendo ativado.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Essa é uma etapa crítica que faz parte de iniciar uma conexão e permitindo que dois controles para compartilhar dados.       O controle de consumidor em uma conexão deve ser capaz de trabalhar com o mesmo tipo de interface como o provedor. Se isso não acontecer, os controles são incompatíveis e um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto deve ser usado para estabelecer uma conexão.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controle de consumidor associado a um ponto de conexão do consumidor."
    - id: data
      type: System.Object
      description: "A instância da interface retornado de um controle de provedor."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Determina se um ponto de conexão do consumidor é atualmente capaz de estabelecer uma conexão."
  remarks: "O método SupportsConnection conforme implementado sempre retorna `true` em todos os casos para a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> O objetivo deste método é para que ele verifique o estado da `control` e `secondaryInterfaces` em determinados pontos críticos para determinar se um <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto está atualmente capaz de criar uma conexão.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Pode haver situações em que `control` está em um estado que seria tornar impossível formar uma conexão, ou onde `secondaryInterfaces` devem existir antes que uma conexão pode ser formada. Nesses casos, os desenvolvedores podem herdar do <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe e substituir o método SupportsConnection, fornecendo uma implementação personalizada para determinar quando o ponto de conexão está pronto para dar suporte a conexões.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controle de consumidor associado a <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> de quaisquer interfaces secundárias que participam de uma conexão."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se um ponto de conexão no momento pode estabelecer uma conexão; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
