### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpClient
  id: HttpClient
  children:
  - System.Net.Http.HttpClient.#ctor
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpClient.BaseAddress
  - System.Net.Http.HttpClient.CancelPendingRequests
  - System.Net.Http.HttpClient.DefaultRequestHeaders
  - System.Net.Http.HttpClient.DeleteAsync(System.String)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Dispose(System.Boolean)
  - System.Net.Http.HttpClient.GetAsync(System.String)
  - System.Net.Http.HttpClient.GetAsync(System.Uri)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStreamAsync(System.String)
  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStringAsync(System.String)
  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  - System.Net.Http.HttpClient.MaxResponseContentBufferSize
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Timeout
  langs:
  - csharp
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
  type: Class
  summary: "Fornece uma classe base para enviar solicitações HTTP e receber respostas HTTP de um recurso identificado por um URI."
  remarks: "A instância da classe HttpClient atua como uma sessão para enviar solicitações HTTP. Uma instância de HttpClient é uma coleção de configurações aplicadas a todas as solicitações executadas por aquela instância. Além disso, cada instância de HttpClient usa seu próprio pool de conexão, isolar suas solicitações de solicitações executadas por outras instâncias HttpClient.       O HttpClient também atua como uma classe base para clientes HTTP mais específicos. Um exemplo seria um FacebookHttpClient fornecer métodos adicionais específicos a um serviço web de Facebook (um método GetFriends, por exemplo).       Por padrão, <xref:System.Net.HttpWebRequest>será usado para enviar solicitações ao servidor.</xref:System.Net.HttpWebRequest> Esse comportamento pode ser modificado, especificando um canal diferente em uma das sobrecargas de construtor colocar um <xref:System.Net.Http.HttpMessageHandler>instância como parâmetro.</xref:System.Net.Http.HttpMessageHandler> Se os recursos como autenticação ou o armazenamento em cache são necessários, <xref:System.Net.Http.WebRequestHandler>pode ser usada para definir as configurações e o pode instância ser transmitido ao construtor.</xref:System.Net.Http.WebRequestHandler> O manipulador retornado pode ser passado para uma das sobrecargas de construtor colocar um <xref:System.Net.Http.HttpMessageHandler>parâmetro.</xref:System.Net.Http.HttpMessageHandler>       Se um aplicativo usando HttpClient e classes relacionadas a <xref:System.Net.Http>namespace pretende baixar grandes quantidades de dados (50 megabytes ou mais), em seguida, o aplicativo deve transmitir esses downloads e não usar o armazenamento em buffer padrão.</xref:System.Net.Http> Se o armazenamento em buffer padrão é usado o uso de memória do cliente obterá muito grande, possivelmente resultando em substancialmente o desempenho reduzido.       Os métodos a seguir são thread-safe: 1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>2.</xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>3.</xref:System.Net.Http.HttpClient.DeleteAsync%2A>  <xref:System.Net.Http.HttpClient.GetAsync%2A>4.</xref:System.Net.Http.HttpClient.GetAsync%2A>  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>5.</xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>6.</xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>7.</xref:System.Net.Http.HttpClient.GetStringAsync%2A>  <xref:System.Net.Http.HttpClient.PostAsync%2A>8.</xref:System.Net.Http.HttpClient.PostAsync%2A>  <xref:System.Net.Http.HttpClient.PutAsync%2A>9.</xref:System.Net.Http.HttpClient.PutAsync%2A> <xref:System.Net.Http.HttpClient.SendAsync%2A>HttpClient é se destina a ser criada uma vez e reutilizada em toda a vida útil de um aplicativo.</xref:System.Net.Http.HttpClient.SendAsync%2A> Criando uma classe HttpClient para cada solicitação serão esgotar o número de soquetes disponíveis com cargas pesadas. Isso resultará em erros SocketException. Abaixo está um exemplo de uso HttpClient corretamente.      ```c#   public class GoodController : ApiController   {       // OK       private static readonly HttpClient HttpClient;          static GoodController()       {           HttpClient = new HttpClient();       }   }      ```"
  example:
  - '[!code-cs[System.Net.Http.HttpClient#1](~/add/codesnippet/csharp/t-system.net.http.httpcl_1_1.cs)]'
  syntax:
    content: 'public class HttpClient : System.Net.Http.HttpMessageInvoker'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageInvoker
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageInvoker.Dispose
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient()
  nameWithType: HttpClient.HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> classe."
  syntax:
    content: public HttpClient ();
    parameters: []
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient(HttpMessageHandler)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> classe com um manipulador específico."
  remarks: "Se `null` é especificado para `handler` parâmetro, o <xref:System.Net.Http.WebRequestHandler>é usado como o manipulador de transporte.</xref:System.Net.Http.WebRequestHandler>"
  syntax:
    content: public HttpClient (System.Net.Http.HttpMessageHandler handler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "A pilha do manipulador HTTP a ser usado para enviar solicitações."
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient(HttpMessageHandler,Boolean)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler,Boolean)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> classe com um manipulador específico."
  syntax:
    content: public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "O <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> responsável por processar as mensagens de resposta HTTP."
    - id: disposeHandler
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o manipulador interno deve ser descartado por Dispose (), <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se você quiser reutilizar o manipulador interno."
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.BaseAddress
  id: BaseAddress
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Obtém ou define o endereço base do identificador de URI (Uniform Resource) do recurso da Internet usado ao enviar solicitações."
  remarks: "Ao enviar um <xref:System.Net.Http.HttpRequestMessage>com um Uri relativo, a Uri de mensagem será adicionada à propriedade BaseAddress para criar um Uri absoluto.</xref:System.Net.Http.HttpRequestMessage>"
  syntax:
    content: public Uri BaseAddress { get; set; }
    return:
      type: System.Uri
      description: "O endereço base do identificador de URI (Uniform Resource) do recurso da Internet usado ao enviar solicitações."
  overload: System.Net.Http.HttpClient.BaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  id: CancelPendingRequests
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: CancelPendingRequests()
  nameWithType: HttpClient.CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Cancele todas as solicitações pendentes nessa instância."
  remarks: "Depois de chamar esse método, o <xref:System.Net.Http.HttpClient>instância ainda pode ser usada para executar solicitações adicionais.</xref:System.Net.Http.HttpClient>"
  syntax:
    content: public void CancelPendingRequests ();
    parameters: []
  overload: System.Net.Http.HttpClient.CancelPendingRequests*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  id: DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Obtém os cabeçalhos que deveriam ser enviados com cada solicitação."
  remarks: "Cabeçalhos de definir esta propriedade não precisam ser definida em mensagens de solicitação novamente."
  syntax:
    content: public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }
    return:
      type: System.Net.Http.Headers.HttpRequestHeaders
      description: "Os cabeçalhos que deveriam ser enviados com cada solicitação."
  overload: System.Net.Http.HttpClient.DefaultRequestHeaders*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(String)
  nameWithType: HttpClient.DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação de exclusão para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  id: DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(Uri)
  nameWithType: HttpClient.DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação de exclusão para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  id: DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(String,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação de exclusão para o Uri especificado com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(Uri,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação de exclusão para o Uri especificado com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpClient.Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público `Dispose()` método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Net.Http.HttpClient>referências.</xref:System.Net.Http.HttpClient> Este método chama o `Dispose()` método de cada objeto referenciado.       Quando este método é chamado, o <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>método é chamado para cancelar todas as solicitações pendentes.</xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> às versões apenas recursos não gerenciados."
  overload: System.Net.Http.HttpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String)
  nameWithType: HttpClient.GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  id: GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri)
  nameWithType: HttpClient.GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado com uma opção de conclusão de HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluído com base no `completionOption` parâmetro depois que a parte ou toda a resposta (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Um valor de opção de conclusão de HTTP que indica quando a operação deve ser considerada concluída."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado com uma opção de conclusão de HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluído com base no `completionOption` parâmetro depois que a parte ou toda a resposta (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Um valor de opção de conclusão de HTTP que indica quando a operação deve ser considerada concluída."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado com uma opção de conclusão de HTTP e um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluído com base no `completionOption` parâmetro depois que a parte ou toda a resposta (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Um valor de opção de conclusão de HTTP que indica quando a operação deve ser considerada concluída."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação GET para o Uri especificado com uma opção de conclusão de HTTP e um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluído com base no `completionOption` parâmetro depois que a parte ou toda a resposta (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Um valor de opção de conclusão de HTTP que indica quando a operação deve ser considerada concluída."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  id: GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetByteArrayAsync(String)
  nameWithType: HttpClient.GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Enviar uma solicitação GET para o Uri especificado e retorna o corpo de resposta como uma matriz de bytes em uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que o corpo da resposta inteira é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetByteArrayAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  id: GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetByteArrayAsync(Uri)
  nameWithType: HttpClient.GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Enviar uma solicitação GET para o Uri especificado e retorna o corpo de resposta como uma matriz de bytes em uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que o corpo da resposta inteira é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetByteArrayAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  id: GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStreamAsync(String)
  nameWithType: HttpClient.GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Enviar uma solicitação GET para o Uri especificado e retorna o corpo de resposta como um fluxo em uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que o corpo da resposta inteira é lida.</xref:System.Threading.Tasks.Task%601> Esse método não armazena em buffer o fluxo."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetStreamAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  id: GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStreamAsync(Uri)
  nameWithType: HttpClient.GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Enviar uma solicitação GET para o Uri especificado e retorna o corpo de resposta como um fluxo em uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que o corpo da resposta inteira é lida.</xref:System.Threading.Tasks.Task%601> Esse método não armazena em buffer o fluxo."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetStreamAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  id: GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStringAsync(String)
  nameWithType: HttpClient.GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Enviar uma solicitação GET para o Uri especificado e retorna o corpo de resposta como uma cadeia de caracteres em uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que o corpo da resposta inteira é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<string> GetStringAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  id: GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStringAsync(Uri)
  nameWithType: HttpClient.GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Enviar uma solicitação GET para o Uri especificado e retorna o corpo de resposta como uma cadeia de caracteres em uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que o corpo da resposta inteira é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<string> GetStringAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.GetStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  id: MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Obtém ou define o número máximo de bytes em buffer ao ler o conteúdo da resposta."
  remarks: "Um aplicativo pode definir a propriedade MaxResponseContentBufferSize para um valor menor para limitar o tamanho da resposta em buffer ao ler a resposta. Se o tamanho do conteúdo da resposta é maior que a propriedade MaxResponseContentBufferSize, uma exceção será lançada."
  syntax:
    content: public long MaxResponseContentBufferSize { get; set; }
    return:
      type: System.Int64
      description: "O número máximo de bytes em buffer ao ler o conteúdo da resposta. O valor padrão desta propriedade é 2 gigabytes."
  overload: System.Net.Http.HttpClient.MaxResponseContentBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O tamanho especificado é menor que ou igual a zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uma operação já foi iniciada na instância atual."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A instância atual foi descartada."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  id: PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(String,HttpContent)
  nameWithType: HttpClient.PostAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação POST para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(Uri,HttpContent)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação POST para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação POST com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação POST com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  id: PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(String,HttpContent)
  nameWithType: HttpClient.PutAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação PUT para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(Uri,HttpContent)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação PUT para o Uri especificado como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação PUT com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação PUT com um token de cancelamento como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída depois que a resposta inteira (incluindo conteúdo) é lida.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "O Uri para a solicitação é enviada."
    - id: content
      type: System.Net.Http.HttpContent
      description: "O conteúdo da solicitação HTTP enviado ao servidor."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento que pode ser usado por outros objetos ou threads para receber o aviso de cancelamento."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  id: SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída quando a resposta inteira, incluindo o conteúdo é lido.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A mensagem de solicitação HTTP para enviar."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,HttpCompletionOption)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Dependendo do valor da `completionOption` parâmetro, retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída assim que uma resposta estiver disponível ou a resposta inteira, incluindo o conteúdo é lido.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A mensagem de solicitação HTTP para enviar."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Quando a operação deve ser concluída (como uma resposta estiver disponível ou depois de ler o conteúdo de resposta inteira)."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída quando a resposta inteira, incluindo o conteúdo é lido.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A mensagem de solicitação HTTP para enviar."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token de cancelamento para cancelar a operação."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envie uma solicitação HTTP como uma operação assíncrona."
  remarks: "Essa operação não será bloqueada. Dependendo do valor da `completionOption` parâmetro, retornado <xref:System.Threading.Tasks.Task%601>objeto será concluída assim que uma resposta estiver disponível ou a resposta inteira, incluindo o conteúdo é lido.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A mensagem de solicitação HTTP para enviar."
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "Quando a operação deve ser concluída (como uma resposta estiver disponível ou depois de ler o conteúdo de resposta inteira)."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token de cancelamento para cancelar a operação."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem de solicitação já foi enviada pelo <xref href=&quot;System.Net.Http.HttpClient&quot;> </xref> instância."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "A solicitação falhou devido a um problema subjacente, como conectividade de rede, falhas de DNS, validação de certificado do servidor ou tempo limite."
  platform:
  - net462
- uid: System.Net.Http.HttpClient.Timeout
  id: Timeout
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: Timeout
  nameWithType: HttpClient.Timeout
  fullName: System.Net.Http.HttpClient.Timeout
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Obtém ou define o período de tempo de espera antes que a solicitação expire."
  remarks: "O valor padrão é 100.000 milissegundos (100 segundos).       Para definir um tempo limite infinito, defina o valor da propriedade <xref:System.Threading.Timeout.InfiniteTimeSpan>.</xref:System.Threading.Timeout.InfiniteTimeSpan>       Uma consulta de sistema de nome de domínio (DNS) pode levar até 15 segundos para retornar ou tempo limite. Se a solicitação contém um nome de host que requer que a resolução e definir tempo limite para um valor menor que 15 segundos, pode levar 15 segundos ou mais antes de um <xref:System.Net.WebException>é gerada para indicar um tempo limite em sua solicitação.</xref:System.Net.WebException>       O tempo limite da mesmo será aplicada para todas as solicitações que usam essa <xref:System.Net.Http.HttpClient>instância.</xref:System.Net.Http.HttpClient>  Você também pode definir tempos limite diferentes para solicitações individuais usando um <xref:System.Threading.CancellationTokenSource>em uma tarefa.</xref:System.Threading.CancellationTokenSource> Observe que se aplicam somente a mais curta dos dois limites."
  syntax:
    content: public TimeSpan Timeout { get; set; }
    return:
      type: System.TimeSpan
      description: "O período de tempo de espera antes da solicitação expire."
  overload: System.Net.Http.HttpClient.Timeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O tempo limite especificado é menor que ou igual a zero e não <xref:System.Threading.Timeout.InfiniteTimeSpan>.</xref:System.Threading.Timeout.InfiniteTimeSpan>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Uma operação já foi iniciada na instância atual."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "A instância atual foi descartada."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: System.Net.Http.HttpMessageInvoker
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Http.HttpRequestException
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestException
  nameWithType: HttpRequestException
  fullName: System.Net.Http.HttpRequestException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.Http.HttpClient.#ctor
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient()
  nameWithType: HttpClient.HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient(HttpMessageHandler)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient(HttpMessageHandler,Boolean)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpClient.BaseAddress
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: CancelPendingRequests()
  nameWithType: HttpClient.CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
- uid: System.Net.Http.Headers.HttpRequestHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpRequestHeaders
  nameWithType: HttpRequestHeaders
  fullName: System.Net.Http.Headers.HttpRequestHeaders
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(String)
  nameWithType: HttpClient.DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(Uri)
  nameWithType: HttpClient.DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri)
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(String,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(Uri,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri,CancellationToken)
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpClient.Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(Boolean)
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String)
  nameWithType: HttpClient.GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(String)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri)
  nameWithType: HttpClient.GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri)
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption)
- uid: System.Net.Http.HttpCompletionOption
  parent: System.Net.Http
  isExternal: false
  name: HttpCompletionOption
  nameWithType: HttpCompletionOption
  fullName: System.Net.Http.HttpCompletionOption
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync(String)
  nameWithType: HttpClient.GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(String)
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync(Uri)
  nameWithType: HttpClient.GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(Uri)
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync(String)
  nameWithType: HttpClient.GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(String)
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync(Uri)
  nameWithType: HttpClient.GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(Uri)
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync(String)
  nameWithType: HttpClient.GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(String)
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync(Uri)
  nameWithType: HttpClient.GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(Uri)
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(String,HttpContent)
  nameWithType: HttpClient.PostAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent)
- uid: System.Net.Http.HttpContent
  parent: System.Net.Http
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(Uri,HttpContent)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent)
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(String,HttpContent)
  nameWithType: HttpClient.PutAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent)
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(Uri,HttpContent)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent)
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage)
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,HttpCompletionOption)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.Timeout
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Timeout
  nameWithType: HttpClient.Timeout
  fullName: System.Net.Http.HttpClient.Timeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.HttpClient.#ctor*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient
  nameWithType: HttpClient.HttpClient
- uid: System.Net.Http.HttpClient.BaseAddress*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
- uid: System.Net.Http.HttpClient.CancelPendingRequests*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: CancelPendingRequests
  nameWithType: HttpClient.CancelPendingRequests
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
- uid: System.Net.Http.HttpClient.DeleteAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync
  nameWithType: HttpClient.DeleteAsync
- uid: System.Net.Http.HttpClient.Dispose*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Dispose
  nameWithType: HttpClient.Dispose
- uid: System.Net.Http.HttpClient.GetAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync
  nameWithType: HttpClient.GetAsync
- uid: System.Net.Http.HttpClient.GetByteArrayAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync
  nameWithType: HttpClient.GetByteArrayAsync
- uid: System.Net.Http.HttpClient.GetStreamAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync
  nameWithType: HttpClient.GetStreamAsync
- uid: System.Net.Http.HttpClient.GetStringAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync
  nameWithType: HttpClient.GetStringAsync
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
- uid: System.Net.Http.HttpClient.PostAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync
  nameWithType: HttpClient.PostAsync
- uid: System.Net.Http.HttpClient.PutAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync
  nameWithType: HttpClient.PutAsync
- uid: System.Net.Http.HttpClient.SendAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync
  nameWithType: HttpClient.SendAsync
- uid: System.Net.Http.HttpClient.Timeout*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Timeout
  nameWithType: HttpClient.Timeout
