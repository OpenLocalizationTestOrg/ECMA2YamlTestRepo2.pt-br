### YamlMime:ManagedReference
items:
- uid: System.Reflection.IReflect
  id: IReflect
  children:
  - System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.IReflect.UnderlyingSystemType
  langs:
  - csharp
  name: IReflect
  nameWithType: IReflect
  fullName: System.Reflection.IReflect
  type: Interface
  summary: "Interopera com o [interface IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)."
  remarks: "A interface IReflect é usada para interoperar com o [interface IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5). IReflect define um subconjunto de <xref:System.Type>métodos de reflexão.</xref:System.Type> Implementar essa interface permite que um tipo personalizar seu comportamento quando o objeto está sendo acessado de COM, como um `IDispatch` objeto. O <xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>classe pode ser usada para realizar marshaling de um objeto que implementa IReflect ou <xref:System.Runtime.InteropServices.Expando.IExpando>como uma COM `IDispatch` objeto e vice-versa.</xref:System.Runtime.InteropServices.Expando.IExpando> </xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("AFBF15E5-C37C-11d2-B88E-00A0C9B471B8")]

      public interface IReflect
  implements: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Retorna o <xref:System.Reflection.FieldInfo>objeto corresponde ao campo especificado e o sinalizador de associação.</xref:System.Reflection.FieldInfo>"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "O nome do campo a ser localizado."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.FieldInfo
      description: "Um <xref:System.Reflection.FieldInfo>objeto que contém as informações de campo para o objeto nomeado que atenda às restrições de pesquisa especificadas em <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "O objeto implementa vários campos com o mesmo nome."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Retorna uma matriz de <xref:System.Reflection.FieldInfo>objetos que correspondem a todos os campos de classe atual.</xref:System.Reflection.FieldInfo>"
  remarks: "A correspondência é baseada em um nome. Cada campo deve ter um nome exclusivo. O <xref:System.Reflection.BindingFlags?displayProperty=fullName>sinalizador Especifica que os métodos não-públicos são incluídos na pesquisa.</xref:System.Reflection.BindingFlags?displayProperty=fullName> O <xref:System.Reflection.BindingFlags?displayProperty=fullName>sinalizador Especifica que os métodos públicos são incluídos na pesquisa.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.FieldInfo[]
      description: "Uma matriz de <xref:System.Reflection.FieldInfo>objetos que contém todas as informações para este objeto de reflexão que atenda às restrições de pesquisa especificadas no campo <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera uma matriz de <xref:System.Reflection.MemberInfo>objetos correspondentes para todos os membros públicos ou para todos os membros que correspondem a um nome especificado.</xref:System.Reflection.MemberInfo>"
  remarks: "O método GetMember recupera uma matriz de <xref:System.Reflection.MemberInfo>objetos usando o nome e o atributo de associação que correspondem a todos os membros públicos ou todos os membros que correspondem a um nome especificado.</xref:System.Reflection.MemberInfo> No caso do nome especificado é observado ou ignorado, conforme especificado pelo <xref:System.Reflection.BindingFlags?displayProperty=fullName>.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro a ser localizado."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Uma matriz de <xref:System.Reflection.MemberInfo>objetos correspondentes a <code> name </code> parâmetro.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera uma matriz de <xref:System.Reflection.MemberInfo>objetos que correspondem a todos os membros públicos ou para todos os membros da classe atual.</xref:System.Reflection.MemberInfo>"
  remarks: "Esse método retorna uma matriz de <xref:System.Reflection.MemberInfo>objetos usando o atributo de associação que corresponde a todos os membros públicos ou para todos os membros da classe atual.</xref:System.Reflection.MemberInfo> Retorna uma matriz de todos os membros definidos para esse objeto."
  syntax:
    content: public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Uma matriz de <xref:System.Reflection.MemberInfo>objetos que contém todas as informações de membro para esse objeto de reflexão.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera um <xref:System.Reflection.MethodInfo>especificado de objeto que corresponde a um método especificado em restrições de pesquisa.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro a ser localizado."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.MethodInfo
      description: "Um <xref:System.Reflection.MethodInfo>objeto que contém as informações do método, com a correspondência baseada nas restrições de nome e a pesquisa de método especificadas em <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "O objeto implementa vários métodos com o mesmo nome."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera um <xref:System.Reflection.MethodInfo>objeto correspondente a um método especificado, usando um <xref:System.Type>métodos sobrecarregados de matriz para a escolha de entre.</xref:System.Type> </xref:System.Reflection.MethodInfo>"
  remarks: "O valor de retorno é uma correspondência com base no nome do método, <xref:System.Reflection.BindingFlags>membro de enumeração, o tipo de conversão de tipo especificado pelo `binder` parâmetro, a sobrecarga e o <xref:System.Reflection.ParameterInfo>que descreve a assinatura do método.</xref:System.Reflection.ParameterInfo> </xref:System.Reflection.BindingFlags>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro a ser localizado."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    - id: binder
      type: System.Reflection.Binder
      description: "Um objeto que implementa <xref href=&quot;System.Reflection.Binder&quot;> </xref>, que contém as propriedades relacionadas a este método."
    - id: types
      type: System.Type[]
      description: "Uma matriz usada para escolher entre os métodos sobrecarregados."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz dos modificadores de parâmetro usado para fazer a associação de trabalhar com assinaturas de parâmetro no qual os tipos foram modificados."
    return:
      type: System.Reflection.MethodInfo
      description: "O método solicitado que corresponde aos parâmetros especificados."
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "O objeto implementa vários métodos com o mesmo nome."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera uma matriz de <xref:System.Reflection.MethodInfo>objetos com todos os métodos públicos ou todos os métodos da classe atual.</xref:System.Reflection.MethodInfo>"
  remarks: "O atributo não-públicos de `bindingAttr` é indicada apenas se os métodos públicos são retornados."
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.MethodInfo[]
      description: "Uma matriz de <xref:System.Reflection.MethodInfo>objetos que contém todos os métodos definidos para esse objeto de reflexão atendem as restrições de pesquisa especificadas em <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera uma matriz de <xref:System.Reflection.PropertyInfo>objetos correspondentes para todas as propriedades públicas ou para todas as propriedades da classe atual.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "O atributo de associação usado para controlar a pesquisa."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "Uma matriz de <xref:System.Reflection.PropertyInfo>objetos para todas as propriedades definidas no objeto de reflexão.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera um <xref:System.Reflection.PropertyInfo>especificado de objeto correspondente a uma propriedade especificada em restrições de pesquisa.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "O nome da propriedade a ser localizada."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Os atributos de associação usados para controlar a pesquisa."
    return:
      type: System.Reflection.PropertyInfo
      description: "Um <xref:System.Reflection.PropertyInfo>objeto para a propriedade localizado que atenda às restrições de pesquisa especificadas em <code> bindingAttr </code>, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a propriedade não foi localizada.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "O objeto implementa vários campos com o mesmo nome."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Recupera um <xref:System.Reflection.PropertyInfo>especificado de objeto que corresponde a uma propriedade especificada com restrições de pesquisa.</xref:System.Reflection.PropertyInfo>"
  remarks: "Esse método recupera um <xref:System.Reflection.PropertyInfo>especificado de objeto correspondente a uma propriedade especificada em restrições de pesquisa.</xref:System.Reflection.PropertyInfo> Uma matriz de tipo é usada para escolher entre os métodos sobrecarregados."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro a ser localizado."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "O atributo de associação usado para controlar a pesquisa."
    - id: binder
      type: System.Reflection.Binder
      description: "Um objeto que implementa <xref href=&quot;System.Reflection.Binder&quot;> </xref>, que contém as propriedades relacionadas a este método."
    - id: returnType
      type: System.Type
      description: "O tipo da propriedade."
    - id: types
      type: System.Type[]
      description: "Uma matriz usada para escolher entre os métodos sobrecarregados com o mesmo nome."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Uma matriz usada para escolher os modificadores de parâmetro."
    return:
      type: System.Reflection.PropertyInfo
      description: "Um <xref:System.Reflection.PropertyInfo>objeto para a propriedade localizado, se uma propriedade com o nome especificado foi localizada no objeto reflexão, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a propriedade não foi localizada.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Invoca um membro especificado."
  remarks: "O método a ser invocado deve ser acessível e forneça a correspondência mais específica com a lista de argumento especificado, sob as restrições de atributos especificados de fichário e invocação.       Um método é invocado se o número de parâmetros na declaração de método é igual ao número de argumentos na lista de argumentos especificada e o tipo de cada argumento pode ser convertido pelo associador para o tipo do parâmetro.      > [!NOTE] > A matriz dos modificadores de parâmetro passado para o método InvokeMember deve conter um modificador de parâmetro único. Somente o modificador de parâmetro primeiro é considerado ao determinar o argumento deve ser passado por referência quando exposto a COM.       O associador localiza todos os métodos de correspondência, de acordo com o tipo de associação solicitada (<xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.IReflect.GetProperties%2A>e assim por diante).</xref:System.Reflection.IReflect.GetProperties%2A> </xref:System.Reflection.BindingFlags?displayProperty=fullName> O conjunto de métodos é filtrado pelo nome, número de argumentos e um conjunto de modificadores de pesquisa definidos associador. Depois que o método for selecionado, ele é chamado e acessibilidade é verificada pelo ponto. A pesquisa pode controlar qual conjunto de métodos é pesquisado com base no atributo acessibilidade associado com o método. <xref:System.Reflection.Binder.BindToMethod%2A>Seleciona o método a ser invocado.</xref:System.Reflection.Binder.BindToMethod%2A> O associador padrão seleciona a correspondência mais específica.       Restrições de acesso são ignoradas por código totalmente confiável. Ou seja, propriedades, métodos, campos e construtores privados podem ser acessadas e invocadas pela reflexão sempre que o código é totalmente confiável."
  example:
  - "The following example obtains the value of the <xref:System.DateTime.Now%2A> property.  \n  \n [!code-cs[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/csharp/46b5c0ee-07c6-4491-8e06-_1.cs)]\n [!code-vb[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/visualbasic/46b5c0ee-07c6-4491-8e06-_1.vb)]\n [!code-cpp[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/cpp/46b5c0ee-07c6-4491-8e06-_1.cpp)]"
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "O nome do membro a ser localizado."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: "Uma da <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> atributos de invocação. O `invokeAttr` parâmetro pode ser um construtor, método, propriedade ou campo. Um atributo de invocação adequado deve ser especificado. Chamar o membro padrão de uma classe, passando a cadeia de caracteres vazia (&quot;&quot;) como o nome do membro."
    - id: binder
      type: System.Reflection.Binder
      description: "Uma da <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> sinalizadores de bit. Implementa <xref href=&quot;System.Reflection.Binder&quot;> </xref>, que contém as propriedades relacionadas a este método."
    - id: target
      type: System.Object
      description: "O objeto no qual invocar o membro especificado. Esse parâmetro é ignorado para membros estáticos."
    - id: args
      type: System.Object[]
      description: "Uma matriz de objetos que contém o número, ordem e tipo dos parâmetros do membro a ser invocado. Isso é uma matriz vazia se não houver nenhum parâmetro."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: 'An array of <xref href="System.Reflection.ParameterModifier"></xref> objects. This array has the same length as the `args` parameter, representing the invoked member''s argument attributes in the metadata. A parameter can have the following attributes: <xref uid="langword_csharp_pdIn" name="pdIn" href=""></xref>, <xref uid="langword_csharp_pdOut" name="pdOut" href=""></xref>, <xref uid="langword_csharp_pdRetval" name="pdRetval" href=""></xref>, <xref uid="langword_csharp_pdOptional" name="pdOptional" href=""></xref>, and <xref uid="langword_csharp_pdHasDefault" name="pdHasDefault" href=""></xref>. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.'
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Uma instância de <xref:System.Globalization.CultureInfo>determinam a coerção de tipos.</xref:System.Globalization.CultureInfo> Por exemplo, `culture` converte um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> que representa a 1000 para um <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> valor, desde que 1000 é representado de forma diferente por diferentes culturas. Se esse parâmetro for <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o <xref:System.Globalization.CultureInfo>para o segmento atual é usado.</xref:System.Globalization.CultureInfo>"
    - id: namedParameters
      type: System.String[]
      description: "Um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matriz de parâmetros."
    return:
      type: System.Object
      description: "O membro especificado."
  overload: System.Reflection.IReflect.InvokeMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Mais de um argumento é especificado para um campo <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref>."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "O campo ou propriedade não pode ser encontrada."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "O método não pode ser encontrado."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Um membro privado é chamado sem a necessidade <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>."
  platform:
  - net462
- uid: System.Reflection.IReflect.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Obtém o tipo subjacente que representa o <xref href=&quot;System.Reflection.IReflect&quot;> </xref> objeto."
  syntax:
    content: public Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "O tipo subjacente que representa o <xref href=&quot;System.Reflection.IReflect&quot;> </xref> objeto."
  overload: System.Reflection.IReflect.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.UnderlyingSystemType
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
- uid: System.Reflection.IReflect.GetField*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField
  nameWithType: IReflect.GetField
- uid: System.Reflection.IReflect.GetFields*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields
  nameWithType: IReflect.GetFields
- uid: System.Reflection.IReflect.GetMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember
  nameWithType: IReflect.GetMember
- uid: System.Reflection.IReflect.GetMembers*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers
  nameWithType: IReflect.GetMembers
- uid: System.Reflection.IReflect.GetMethod*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod
  nameWithType: IReflect.GetMethod
- uid: System.Reflection.IReflect.GetMethods*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods
  nameWithType: IReflect.GetMethods
- uid: System.Reflection.IReflect.GetProperties*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties
  nameWithType: IReflect.GetProperties
- uid: System.Reflection.IReflect.GetProperty*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty
  nameWithType: IReflect.GetProperty
- uid: System.Reflection.IReflect.InvokeMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember
  nameWithType: IReflect.InvokeMember
- uid: System.Reflection.IReflect.UnderlyingSystemType*
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
