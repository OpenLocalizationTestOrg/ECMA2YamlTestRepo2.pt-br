### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortKey
  id: SortKey
  children:
  - System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  - System.Globalization.SortKey.Equals(System.Object)
  - System.Globalization.SortKey.GetHashCode
  - System.Globalization.SortKey.KeyData
  - System.Globalization.SortKey.OriginalString
  - System.Globalization.SortKey.ToString
  langs:
  - csharp
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
  type: Class
  summary: "Representa o resultado de uma cadeia de caracteres de mapeamento a sua chave de classificação."
  remarks: "Uma comparação de cultura de duas cadeias de caracteres depende de cada caractere em cadeias de caracteres com várias categorias de pesos de classificação, incluindo o script, em ordem alfabética, os pesos de maiusculas e minúsculas e sinais diacríticos. Uma chave de classificação funciona como repositório desses pesos para uma determinada cadeia de caracteres.       O <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>método retorna uma instância da classe de chave de classificação que reflete o mapeamento sensíveis à cultura de caracteres em uma cadeia de caracteres especificada.</xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName> O valor de um objeto de chave de classificação é seus dados de chave, que são retornados pelo <xref:System.Globalization.SortKey.KeyData%2A>propriedade.</xref:System.Globalization.SortKey.KeyData%2A> Essas chave dados consistem em uma série de bytes que codificar a cadeia de caracteres, as regras de classificação específicas de cultura e opções de comparação especificado pelo usuário. Uma comparação usando chaves de classificação consiste em uma comparação bit a bit dos dados da chave correspondentes em cada chave de classificação.  Por exemplo, se você criar uma chave de classificação chamando o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>método com um valor de <xref:System.Globalization.CompareOptions?displayProperty=fullName>, uma operação de comparação de cadeia de caracteres que usa a chave de classificação diferencia maiusculas de minúsculas.</xref:System.Globalization.CompareOptions?displayProperty=fullName> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>       Depois de criar uma chave de classificação para uma cadeia de caracteres, compare as chaves de classificação chamando estático <xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName>método.</xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName> Esse método executa uma comparação byte por byte simple, portanto, é muito mais rápido que o <xref:System.String.Compare%2A?displayProperty=fullName>ou <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.String.Compare%2A?displayProperty=fullName>      ## Considerações de desempenho ao executar uma comparação de cadeia de caracteres, o <xref:System.Globalization.SortKey.Compare%2A>e <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>métodos geram os mesmos resultados, mas eles se destinam a cenários diferentes.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.Globalization.SortKey.Compare%2A>       Em um nível alto, o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método gera a chave de classificação para cada cadeia de caracteres, executar a comparação e, em seguida, descarta a chave de classificação e retorna o resultado da comparação.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> No entanto, o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método realmente não gera uma chave de classificação inteira para executar a comparação.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> Em vez disso, o método gera os dados de chave para cada elemento de texto (ou seja, caractere base, par substituto ou combinação de sequência de caracteres) em cada cadeia de caracteres. O método compara os dados de chave para os elementos de texto correspondentes. A operação será encerrada, assim como o resultado final da comparação é determinado. Informações de chave de classificação são computadas, mas nenhum objeto de chave de classificação é criado. Essa estratégia é econômica em termos de desempenho se duas cadeias de caracteres são comparadas de uma vez, mas fica cara se o mesmo cadeias de caracteres são comparadas muitas vezes.       O <xref:System.Globalization.SortKey.Compare%2A>método requer a geração de um objeto de chave de classificação para cada cadeia de caracteres antes de executar a comparação.</xref:System.Globalization.SortKey.Compare%2A> Essa estratégia é cara em termos de desempenho para a primeira comparação devido a memória investido para gerar os objetos de chave de classificação e a hora. No entanto, ele se torna econômico se as mesmas chaves de classificação são comparadas muitas vezes.       Por exemplo, suponha que você escrever um aplicativo que procura uma tabela de banco de dados para a linha na qual a coluna de índice com base em cadeia de caracteres corresponde a uma cadeia de caracteres de pesquisa especificada. A tabela contém milhares de linhas e comparar a cadeia de caracteres de pesquisa para o índice em cada linha levará algum tempo. Portanto, quando o aplicativo armazena uma linha e sua coluna de índice, ele também gera e armazena a chave de classificação para o índice em uma coluna dedicada para melhorar o desempenho da pesquisa. Quando o aplicativo de pesquisa para uma linha de destino, ele compara a chave de classificação para a cadeia de caracteres de pesquisa para a chave de classificação para a cadeia de caracteres de índice, em vez de comparar a cadeia de caracteres de pesquisa para a cadeia de caracteres de índice.      ## Considerações de segurança de <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>método retorna um objeto de chave de classificação com o valor com base em uma cadeia de caracteres especificada e <xref:System.Globalization.CompareOptions>valor e a cultura associada com subjacente <xref:System.Globalization.CompareInfo>objeto.</xref:System.Globalization.CompareInfo> </xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> Se uma decisão de segurança depende de uma comparação de cadeia de caracteres ou uma alteração, você deve usar o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>método da cultura invariável para garantir que o comportamento da operação é consistente, independentemente das configurações de cultura do sistema operacional.</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       Use as etapas a seguir para obter uma chave de classificação: 1.  Recuperar a cultura invariável do <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>propriedade.</xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>      2.  Recuperar um <xref:System.Globalization.CompareInfo>objeto para a cultura invariável do <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName>propriedade.</xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> </xref:System.Globalization.CompareInfo>      3.  Chamar o <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>método.</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       Trabalhando com o valor de uma chave de classificação objeto é equivalente a chamar o Windows `LCMapString` método com o valor LCMAP_SORTKEY especificado. No entanto, para o objeto de chave de classificação, as chaves de classificação de caracteres em inglês precedem as chaves de classificação para caracteres coreanos.       Objetos de chave de classificação podem ser serializado, mas somente para que eles podem cruzar <xref:System.AppDomain>objetos.</xref:System.AppDomain> Se um aplicativo serializa um objeto de chave de classificação, o aplicativo deve gerar novamente as chaves de classificação quando há uma nova versão do .NET Framework.       Para obter mais informações sobre chaves de classificação, consulte Unicode Technical Standard #10, &quot;Algoritmo de agrupamento Unicode&quot; sobre o [site de consórcio Unicode](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following example compares the string \"llama\" using the \"en-US\" and \"es-ES\" cultures, and the \"en-US\" and \"es-ES\" traditional cultures.  \n  \n [!code-cpp[System.Globalization.SortKey.Compare#1](~/add/codesnippet/cpp/t-system.globalization.s_1_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Compare#1](~/add/codesnippet/csharp/t-system.globalization.s_1_1.cs)]\n [!code-vb[System.Globalization.SortKey.Compare#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_1.vb)]  \n  \n The following example shows how you can use the SortKey class to improve performance in an application that relies extensively on sorting and searching a large array. The example creates an unordered array of names, which in this case has 13 elements. It then stores the sort key of each name in a parallel array, which it passes to the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=fullName> method. The result is a sorted array. The example then searches the array for three strings. For each search string, it calls the <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method to retrieve the string's sort key, and then calls the <xref:System.Array.FindIndex%2A?displayProperty=fullName> method to retrieve the index of that sort key in the array of sort keys. Because the name and sort key arrays are parallel, the returned index is also the index of the name in the `names` array.  \n  \n [!code-vb[System.Globalization.SortKey.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_2.vb)]\n [!code-cs[System.Globalization.SortKey.Class#1](~/add/codesnippet/csharp/t-system.globalization.s_1_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  id: Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Compara duas chaves de classificação."
  remarks: "O método de comparação compara o <xref:System.Globalization.SortKey.KeyData%2A>Propriedades do `sortkey1` e `sortkey2` parâmetros.</xref:System.Globalization.SortKey.KeyData%2A> O método produz os mesmos resultados que o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>método.</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>       Para obter mais informações sobre o método de comparação e a comparação de chaves de classificação, consulte o <xref:System.Globalization.SortKey>tópico sobre a classe.</xref:System.Globalization.SortKey>"
  example:
  - "The following code example compares two strings using the Compare method and the equivalent <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method.  \n  \n [!code-cs[sys.glob.sortkey.compare#1](~/add/codesnippet/csharp/4647647d-ce80-4fb7-82b7-_1.cs)]\n [!code-vb[sys.glob.sortkey.compare#1](~/add/codesnippet/visualbasic/4647647d-ce80-4fb7-82b7-_1.vb)]"
  syntax:
    content: public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
    parameters:
    - id: sortkey1
      type: System.Globalization.SortKey
      description: "A primeira chave de classificação a ser comparado."
    - id: sortkey2
      type: System.Globalization.SortKey
      description: "A segunda chave de classificação a ser comparado."
    return:
      type: System.Int32
      description: "Um inteiro que indica a relação entre <code> sortkey1 </code> e <code> sortkey2 </code>.       <table><thead><tr><th> Valor       </th><th> Condição       </th></tr></thead><tbody><tr><td> Menor que zero       </td><td><code>sortkey1</code>is less than <code>sortkey2</code>.       </td></tr><tr><td> Zero       </td><td><code>sortkey1</code>is equal to <code>sortkey2</code>.       </td></tr><tr><td> Maior que zero       </td><td><code>sortkey1</code>é maior do que <code> sortkey2 </code>.       </td></tr></tbody></table>"
  overload: System.Globalization.SortKey.Compare*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sortkey1</code>or <code>sortkey2</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determina se o objeto especificado é igual ao atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: "Dois <xref:System.Globalization.SortKey>objetos são considerados iguais se seus <xref:System.Globalization.SortKey.KeyData%2A>propriedades são iguais.</xref:System.Globalization.SortKey.KeyData%2A> </xref:System.Globalization.SortKey>       Esse método substitui <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>"
  example:
  - "The following code example shows the results of Equals when compared with different <xref:System.Globalization.SortKey> objects.  \n  \n [!code-vb[System.Globalization.SortKey.Equals#1](~/add/codesnippet/visualbasic/m-system.globalization.s_0_1.vb)]\n [!code-cpp[System.Globalization.SortKey.Equals#1](~/add/codesnippet/cpp/m-system.globalization.s_0_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Equals#1](~/add/codesnippet/csharp/m-system.globalization.s_0_1.cs)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O objeto a ser comparado com o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <code> value </code> parâmetro for igual ao atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Globalization.SortKey.Equals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Serve como uma função de hash atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto que é adequado para o hash de algoritmos e estruturas de dados como uma tabela de hash."
  remarks: "Este método gera o mesmo código de hash de dois objetos são iguais de acordo com o <xref:System.Globalization.SortKey.Equals%2A>método.</xref:System.Globalization.SortKey.Equals%2A>       Esse método substitui <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para a atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.KeyData
  id: KeyData
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a matriz de bytes que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: "Para obter mais informações sobre o uso dos dados retornados pela propriedade KeyData na comparação de cadeias de caracteres, consulte o <xref:System.Globalization.SortKey>tópico sobre a classe.</xref:System.Globalization.SortKey>"
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_0_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_0_1.cs)]"
  syntax:
    content: public virtual byte[] KeyData { get; }
    return:
      type: System.Byte[]
      description: "Uma matriz de bytes que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.KeyData*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.OriginalString
  id: OriginalString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Obtém a cadeia de caracteres original usada para criar atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: ''
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_1_1.cs)]"
  syntax:
    content: public virtual string OriginalString { get; }
    return:
      type: System.String
      description: "A cadeia de caracteres original usada para criar atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.OriginalString*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.ToString
  id: ToString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Retorna uma cadeia de caracteres que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  remarks: "O valor de retorno é a concatenação de cadeia de caracteres &quot;Chave de classificação -&quot;, o identificador de cultura e opções de comparação do atual <xref:System.Globalization.SortKey>objeto e o valor de <xref:System.Globalization.SortKey.OriginalString%2A>propriedade.</xref:System.Globalization.SortKey.OriginalString%2A> </xref:System.Globalization.SortKey>       Esse método substitui <xref:System.Object.ToString%2A?displayProperty=fullName>.</xref:System.Object.ToString%2A?displayProperty=fullName>"
  example:
  - "The following code example displays an original string, the strings yielded by the ToString method for case-sensitive and case-insensitive sort keys, and the key data for case-sensitive and case-insensitive sort keys.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/m-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/m-system.globalization.s_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia de caracteres que representa o atual <xref href=&quot;System.Globalization.SortKey&quot;> </xref> objeto."
  overload: System.Globalization.SortKey.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.SortKey
  parent: System.Globalization
  isExternal: false
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
- uid: System.Globalization.SortKey.Equals(System.Object)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortKey.GetHashCode
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
- uid: System.Globalization.SortKey.KeyData
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.SortKey.OriginalString
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.SortKey.ToString
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
- uid: System.Globalization.SortKey.Compare*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare
  nameWithType: SortKey.Compare
- uid: System.Globalization.SortKey.Equals*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals
  nameWithType: SortKey.Equals
- uid: System.Globalization.SortKey.GetHashCode*
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode
  nameWithType: SortKey.GetHashCode
- uid: System.Globalization.SortKey.KeyData*
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
- uid: System.Globalization.SortKey.OriginalString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
- uid: System.Globalization.SortKey.ToString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString
  nameWithType: SortKey.ToString
