### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.EncryptedPackageEnvelope
  id: EncryptedPackageEnvelope
  children:
  - System.IO.Packaging.EncryptedPackageEnvelope.Close
  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  - System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  - System.IO.Packaging.EncryptedPackageEnvelope.Flush
  - System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  - System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  - System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  langs:
  - csharp
  name: EncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope
  fullName: System.IO.Packaging.EncryptedPackageEnvelope
  type: Class
  summary: "Representa um arquivo composto OLE que contém um pacote criptografado."
  remarks: "EncryptedPackageEnvelope não tem nenhum construtor público.  Um EncryptedPackageEnvelope é criado pelo uso do estático <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, ou <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A>métodos.</xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>"
  syntax:
    content: 'public class EncryptedPackageEnvelope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close
  id: Close
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Close()
  nameWithType: EncryptedPackageEnvelope.Close()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Fecha o pacote criptografado e o arquivo composto OLE que mantém a ele."
  remarks: ''
  example:
  - "The following example shows how to use this method to close an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Close*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Create(Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Cria e retorna um <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> no fluxo especificado."
  remarks: "O usuário atual tem acesso de leitura/gravação para o novo arquivo."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "O fluxo no qual criar o arquivo."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "A licença de publicação que é inserida no arquivo composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Um objeto que determina quais operações o usuário atual tem permissão para executar o conteúdo criptografado."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Recém-criado <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>envelopeStream</code>não fornece acesso de leitura/gravação."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Create(String,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Cria e retorna um <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> e concede a ele o nome de arquivo especificado."
  remarks: "Se um arquivo com o nome especificado já existir, ele será substituído.       O usuário atual tem acesso de leitura/gravação para o arquivo."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "O nome do arquivo composto OLE."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "A licença de publicação que é inserida no arquivo composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Um objeto que determina quais operações o usuário atual tem permissão para executar o conteúdo criptografado."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Recém-criado <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeFileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Cria e retorna um <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> (no fluxo especificado), que usa o pacote não criptografado especificado como seu conteúdo."
  remarks: "O usuário atual tem acesso de leitura/gravação para o novo arquivo."
  example:
  - "The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "O fluxo no qual criar o arquivo."
    - id: packageStream
      type: System.IO.Stream
      description: "O fluxo que representa o pacote não criptografado existente."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "A licença de publicação que é inserida no arquivo composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Um objeto que determina quais operações o usuário atual tem permissão para executar o conteúdo criptografado."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Recém-criado <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeStream</code>or <code>packageStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>envelopeStream</code>não fornece acesso de leitura/gravação."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Cria e retorna um <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> que usa o pacote não criptografado especificado como seu conteúdo e concede a ele o nome de arquivo especificado."
  remarks: "Se um arquivo com o nome especificado já existir, ele será substituído.       O usuário atual tem acesso de leitura/gravação para o arquivo."
  example:
  - "The following example shows how to use the CreateFromPackage method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "O nome do arquivo composto OLE."
    - id: packageStream
      type: System.IO.Stream
      description: "O fluxo que representa o pacote não criptografado existente."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "A licença de publicação que é inserida no arquivo composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Um objeto que determina quais operações o usuário atual tem permissão para executar o conteúdo criptografado."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Recém-criado <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeFileName</code>or <code>packageStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  id: Dispose
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Dispose()
  nameWithType: EncryptedPackageEnvelope.Dispose()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Libera todos os recursos usados pelo <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  remarks: "Chamar Dispose quando terminar com um <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</xref:System.IO.Packaging.EncryptedPackageEnvelope> O método Dispose deixa a <xref:System.IO.Packaging.EncryptedPackageEnvelope>em um estado inutilizável.</xref:System.IO.Packaging.EncryptedPackageEnvelope> Depois de chamar Dispose, você deve liberar todas as referências para o <xref:System.IO.Packaging.EncryptedPackageEnvelope>para o coletor de lixo possa recuperar a memória que o <xref:System.IO.Packaging.EncryptedPackageEnvelope>estava ocupando.</xref:System.IO.Packaging.EncryptedPackageEnvelope> </xref:System.IO.Packaging.EncryptedPackageEnvelope> Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [implementar um método Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada Dispose antes de liberar sua última referência a <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</xref:System.IO.Packaging.EncryptedPackageEnvelope> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.IO.Packaging.EncryptedPackageEnvelope>do objeto <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público `Dispose()`método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro for true, este método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.IO.Packaging.EncryptedPackageEnvelope>referências.</xref:System.IO.Packaging.EncryptedPackageEnvelope> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  id: FileOpenAccess
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém um valor que especifica se o arquivo foi aberto com acesso de leitura, gravação, ou ambos."
  syntax:
    content: public System.IO.FileAccess FileOpenAccess { get; }
    return:
      type: System.IO.FileAccess
      description: "O <xref href=&quot;System.IO.FileAccess&quot;> </xref> valor que foi usado para abrir o arquivo."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush
  id: Flush
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Flush()
  nameWithType: EncryptedPackageEnvelope.Flush()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Liberar o fluxo para ambos os <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> e seu conteúdo do pacote."
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  id: GetPackage
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: GetPackage()
  nameWithType: EncryptedPackageEnvelope.GetPackage()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém o pacote criptografado dentro do <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  syntax:
    content: public System.IO.Packaging.Package GetPackage ();
    parameters: []
    return:
      type: System.IO.Packaging.Package
      description: "O <xref href=&quot;System.IO.Packaging.Package&quot;> </xref> no envelope."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  id: IsEncryptedPackageEnvelope(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: IsEncryptedPackageEnvelope(Stream)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém um valor que especifica se o fluxo especificado é um arquivo composto de OLE com um fluxo de pacote criptografado."
  syntax:
    content: public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O fluxo que é testado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo especificado é um arquivo composto de OLE com um fluxo de pacote criptografado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  id: IsEncryptedPackageEnvelope(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: IsEncryptedPackageEnvelope(String)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém um valor que especifica se o arquivo especificado é um arquivo composto de OLE com um fluxo de pacote criptografado."
  remarks: ''
  example:
  - "The following example shows how to use this method to test for encryption.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static bool IsEncryptedPackageEnvelope (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "O arquivo que é testado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o arquivo especificado é um arquivo composto de OLE com um fluxo de pacote criptografado; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  id: Open(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(Stream)
  nameWithType: EncryptedPackageEnvelope.Open(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Abra o pacote criptografado no fluxo especificado."
  remarks: "O fluxo deve ter um pacote criptografado."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "O fluxo que contém o pacote criptografado."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "O <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> que é aberto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  id: Open(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String)
  nameWithType: EncryptedPackageEnvelope.Open(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Abra o pacote criptografado no arquivo especificado como leitura somente e não compartilhada."
  remarks: "O arquivo deve ter um pacote criptografado.       O arquivo aberto é lido apenas e não compartilhado."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "O arquivo que contém o pacote criptografado."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "O <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> que é aberto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileAccess)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String,FileAccess)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Abra o pacote criptografado no arquivo especificado como não compartilhado e com o acesso especificado."
  remarks: "O arquivo deve ter um pacote criptografado.       O arquivo aberto é removido."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "O arquivo que contém o pacote criptografado."
    - id: access
      type: System.IO.FileAccess
      description: "O tipo de acesso."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "O <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> que é aberto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String,FileAccess,FileShare)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Abra o pacote criptografado no arquivo especificado e concede o acesso especificado e compartilhamento."
  remarks: "O arquivo deve ter um pacote criptografado."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "O arquivo que contém o pacote criptografado."
    - id: access
      type: System.IO.FileAccess
      description: "O tipo de acesso."
    - id: sharing
      type: System.IO.FileShare
      description: "O tipo de compartilhamento."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "O <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> que é aberto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  id: PackageProperties
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém os principais propriedades do pacote (por exemplo, título e assunto) do documento direitos gerenciado."
  remarks: "Essas propriedades de núcleo são armazenadas em fluxos padrão de propriedade OLE (\\005SummaryInformation e \\005DocumentSummaryInformation). As propriedades de núcleo também são armazenadas no próprio pacote. É responsabilidade do aplicativo para manter os dois conjuntos de propriedades sincronizados."
  syntax:
    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }
    return:
      type: System.IO.Packaging.PackageProperties
      description: "O <xref href=&quot;System.IO.Packaging.PackageProperties&quot;> </xref> para o pacote."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  id: RightsManagementInformation
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém os direitos de informações de gerenciamento armazenadas na <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>; especificamente, o <xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref> e <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>s armazenadas no arquivo composto OLE que incorpora o gerenciamento de direitos protegidos pacote"
  remarks: ''
  example:
  - "The following example shows how to obtain <xref:System.IO.Packaging.RightsManagementInformation> for an encrypted package by use the RightsManagementInformation property.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }
    return:
      type: System.IO.Packaging.RightsManagementInformation
      description: "O <xref href=&quot;System.IO.Packaging.RightsManagementInformation&quot;> </xref> para o pacote."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  id: StorageInfo
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Obtém um objeto que fornece acesso para os fluxos de arquivo composto fora do pacote criptografado."
  syntax:
    content: public System.IO.Packaging.StorageInfo StorageInfo { get; }
    return:
      type: System.IO.Packaging.StorageInfo
      description: "Um <xref href=&quot;System.IO.Packaging.StorageInfo&quot;> </xref> representar fluxos no arquivo composto OLE que estão fora do pacote criptografado."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Close()
  nameWithType: EncryptedPackageEnvelope.Close()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create(Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope
  parent: System.IO.Packaging
  isExternal: false
  name: EncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope
  fullName: System.IO.Packaging.EncryptedPackageEnvelope
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.RightsManagement.PublishLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: PublishLicense
  nameWithType: PublishLicense
  fullName: System.Security.RightsManagement.PublishLicense
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create(String,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose()
  nameWithType: EncryptedPackageEnvelope.Dispose()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Flush()
  nameWithType: EncryptedPackageEnvelope.Flush()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: GetPackage()
  nameWithType: EncryptedPackageEnvelope.GetPackage()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope(Stream)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope(String)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(Stream)
  nameWithType: EncryptedPackageEnvelope.Open(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String)
  nameWithType: EncryptedPackageEnvelope.Open(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String,FileAccess)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String,FileAccess,FileShare)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
- uid: System.IO.Packaging.PackageProperties
  parent: System.IO.Packaging
  isExternal: false
  name: PackageProperties
  nameWithType: PackageProperties
  fullName: System.IO.Packaging.PackageProperties
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
- uid: System.IO.Packaging.RightsManagementInformation
  parent: System.IO.Packaging
  isExternal: false
  name: RightsManagementInformation
  nameWithType: RightsManagementInformation
  fullName: System.IO.Packaging.RightsManagementInformation
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
- uid: System.IO.Packaging.StorageInfo
  parent: System.IO.Packaging
  isExternal: false
  name: StorageInfo
  nameWithType: StorageInfo
  fullName: System.IO.Packaging.StorageInfo
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Close
  nameWithType: EncryptedPackageEnvelope.Close
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create
  nameWithType: EncryptedPackageEnvelope.Create
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose
  nameWithType: EncryptedPackageEnvelope.Dispose
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Flush
  nameWithType: EncryptedPackageEnvelope.Flush
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: GetPackage
  nameWithType: EncryptedPackageEnvelope.GetPackage
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open
  nameWithType: EncryptedPackageEnvelope.Open
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
