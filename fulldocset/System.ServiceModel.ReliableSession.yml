### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ReliableSession
  id: ReliableSession
  children:
  - System.ServiceModel.ReliableSession.#ctor
  - System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  - System.ServiceModel.ReliableSession.InactivityTimeout
  - System.ServiceModel.ReliableSession.Ordered
  langs:
  - csharp
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
  type: Class
  summary: "Fornece acesso conveniente para as propriedades de um elemento de associação de sessão confiável que estão disponíveis ao usar uma das associações fornecidas pelo sistema."
  remarks: "As propriedades contidas na classe ReliableSession são o subconjunto dos contidos no <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>acessíveis a partir de uma associação predefinida.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> Esse subconjunto consiste de <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A>e <xref:System.ServiceModel.ReliableSession.Ordered%2A>Propriedades.</xref:System.ServiceModel.ReliableSession.Ordered%2A> </xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> A classe ReliableSession referencia os mesmos objetos faz o <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, portanto, alterar o valor de um altera o valor do outro muito.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> Essa classe reúne essas duas propriedades de elemento de associação de sessão confiável juntas para melhor capacidade de descoberta."
  example:
  - "The following example shows how to create a new reliable session, and access and change the property values of that session. The ReliableSession class allows you to write:  \n  \n [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/t-system.servicemodel.re_0_1.cs)]\n [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/t-system.servicemodel.re_0_1.vb)]"
  syntax:
    content: public class ReliableSession
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> classe."
  syntax:
    content: public ReliableSession ();
    parameters: []
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  id: '#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> classe a partir de um elemento de associação de sessão confiável."
  remarks: ''
  example:
  - >-
    [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/80f1598c-ddfc-4656-a81f-_1.cs)]
     [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/80f1598c-ddfc-4656-a81f-_1.vb)]
  syntax:
    content: public ReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement);
    parameters:
    - id: reliableSessionBindingElement
      type: System.ServiceModel.Channels.ReliableSessionBindingElement
      description: "O <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref> cujos valores de propriedade são usados para inicializar a sessão confiável."
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>reliableSessionBindingElement</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  id: InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um intervalo de tempo que um serviço pode permanecer inativo antes de fechar."
  remarks: "A propriedade obtém e define o valor de <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>propriedade.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>       Atividade em um canal é definida como receber uma mensagem de infraestrutura ou de aplicativo. A propriedade de tempo limite de inatividade controla a quantidade máxima de tempo para manter uma sessão inativa ativa. Se houver mais de intervalo de tempo especificado InactivityTimeout passa sem nenhuma atividade, a sessão é anulada pela infraestrutura e as falhas de canal. A sessão confiável é subdividida forma unilateral.       Se o aplicativo enviar nenhuma mensagem a enviar, em seguida, a sessão confiável normalmente não apresentou falha devido a inatividade; em vez disso, um mecanismo keep-alive mantém a sessão ativa indefinidamente. Observe que o dispatcher independentemente foi possível cancelar a sessão confiável se nenhuma mensagem de aplicativo é enviadas ou recebidas. Portanto, o tempo limite de inatividade normalmente expira se as condições de rede, de modo que nenhuma mensagem de qualquer tipo é recebida ou se houver uma falha no remetente.       Definir esse tempo limite impede que o servidor mantiver uma sessão de segurança se o cliente não fechá-la. Se a sessão de segurança não recebeu uma mensagem para o intervalo de tempo de inatividade, ela é fechada pelo servidor. Isso reduz a um potencial ataque de negação de serviço.       Ao usar uma sessão confiável, existem dois timers de inatividade diferentes que devem ser atendidos para manter a conexão ativa. Se qualquer um desses temporizadores de inatividade for, a conexão é descartado.      -O primeiro temporizador de inatividade está na sessão confiável e é chamado de InactivityTimeout. Esse tempo de inatividade é acionada se nenhuma mensagem, aplicativo ou infraestrutura, for recebida dentro do período de tempo limite. Uma mensagem de infraestrutura é uma mensagem que é gerada com a finalidade de um dos protocolos na pilha de canais, como um keep alive ou uma confirmação, em vez de contendo dados de aplicativo.      -O timer de inatividade segundo é o serviço e usa o <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>configuração da associação.</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> Esse tempo de inatividade é acionada se nenhuma mensagem de aplicativo for recebida dentro do período de tempo limite.       Desde que a conexão será descartada se o timer de inatividade é acionado, aumentando InactivityTimeout depois que for maior que <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>não tem nenhum efeito.</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> O padrão para ambos esses tempos limite é 10 minutos, para que você sempre tenha que aumentar a ambos os parâmetros de fazer a diferença ao usar uma sessão confiável."
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_0_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_0_1.vb)]
  syntax:
    content: public TimeSpan InactivityTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>que especifica o intervalo de tempo que um serviço permanece inativo antes de fechar.</xref:System.TimeSpan> O valor padrão é 10 minutos."
  overload: System.ServiceModel.ReliableSession.InactivityTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O conjunto de valor é menor ou igual a zero."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.Ordered
  id: Ordered
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um valor que indica se a entrega de mensagens deve preservar a ordem na qual as mensagens são enviadas."
  remarks: "A propriedade obtém e define o valor de <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>propriedade.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>"
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_1_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_1_1.vb)]
  syntax:
    content: public bool Ordered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as mensagens devem ser entregues na ordem em que são enviados; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.ReliableSession.Ordered*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.ReliableSession.#ctor
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement
  parent: System.ServiceModel.Channels
  isExternal: false
  name: ReliableSessionBindingElement
  nameWithType: ReliableSessionBindingElement
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.ReliableSession.Ordered
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ReliableSession.#ctor*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession.ReliableSession
- uid: System.ServiceModel.ReliableSession.InactivityTimeout*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
- uid: System.ServiceModel.ReliableSession.Ordered*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
