### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.NestedContainer
  id: NestedContainer
  children:
  - System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  - System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  - System.ComponentModel.NestedContainer.GetService(System.Type)
  - System.ComponentModel.NestedContainer.Owner
  - System.ComponentModel.NestedContainer.OwnerName
  langs:
  - csharp
  name: NestedContainer
  nameWithType: NestedContainer
  fullName: System.ComponentModel.NestedContainer
  type: Class
  summary: "Fornece a implementação base para a <xref href=&quot;System.ComponentModel.INestedContainer&quot;> </xref> interface, que permite que os contêineres para ter um componente de propriedade."
  remarks: "A classe NestedContainer é uma implementação simple do <xref:System.ComponentModel.INestedContainer>interface, que define um componente que contém zero ou mais componentes logicamente e pertence a um componente pai.</xref:System.ComponentModel.INestedContainer> O comportamento de contêineres aninhados difere de um padrão <xref:System.ComponentModel.Container>de várias maneiras, incluindo o seguinte:-Site características como <xref:System.ComponentModel.Component.DesignMode%2A>e <xref:System.ComponentModel.Component.GetService%2A>são roteadas por meio do site do componente proprietário.</xref:System.ComponentModel.Component.GetService%2A> </xref:System.ComponentModel.Component.DesignMode%2A> </xref:System.ComponentModel.Container>      -O site <xref:System.ComponentModel.ISite.Name%2A>propriedade é um nome qualificado que inclui o nome do componente proprietário seguido por um ponto (.) e o nome do componente filho.</xref:System.ComponentModel.ISite.Name%2A>      - <xref:System.ComponentModel.NestedContainer.GetService%2A>fornece suporte para o <xref:System.ComponentModel.INestedContainer>como um serviço.</xref:System.ComponentModel.INestedContainer> </xref:System.ComponentModel.NestedContainer.GetService%2A>      -Quando o componente proprietário for descartado, o contêiner é descartado também.       Além disso, designers de tratam contêineres aninhados de forma diferente. Um host designer só está interessado em um contêiner — associado com o host. Portanto, o componente de adicionar e remover eventos não são disparados quando um componente é adicionado ou removido de um contêiner aninhado. No entanto, como serviços fluem para o contêiner aninhado, eventos de alteração de componente são gerados quando um componente em um contêiner aninhado é alterado.       Essa diferença no acompanhamento de evento também afeta a funcionalidade de desfazer, que está diretamente ligada à serialização. O mecanismo de desfazer padrão usa <xref:System.ComponentModel.Design.IReferenceService>para rastrear as alterações feitas nos componentes.</xref:System.ComponentModel.Design.IReferenceService> Se o mecanismo de desfazer não pode identificar o nome de um componente por meio do serviço de referência, o mecanismo irá ignorar as alterações para esse componente. Este serviço reconhece automaticamente alterações nos componentes independentes somente se eles são expostos como propriedades públicas de somente leitura do mesmo nome nos seus proprietários. Caso contrário, o desenvolvedor deve passar em eventos de alteração até o proprietário de componente. Por exemplo, se um componente aninhado `Text` propriedade é resurfaced em seu componente de propriedade como um `Address` propriedade, quando o `Text` propriedade é alterada, uma alteração de propriedade deve ser feita programaticamente para o correspondente `Address` propriedade ou então que as alterações não serão controladas por Desfazer."
  syntax:
    content: 'public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer'
  inheritance:
  - System.Object
  - System.ComponentModel.Container
  implements:
  - System.ComponentModel.INestedContainer
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Components
  - System.ComponentModel.Container.Dispose
  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  id: '#ctor(System.ComponentModel.IComponent)'
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: NestedContainer(IComponent)
  nameWithType: NestedContainer.NestedContainer(IComponent)
  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.NestedContainer&quot;> </xref> classe."
  remarks: "Este construtor inscreve no seu proprietário <xref:System.ComponentModel.IComponent.Disposed>evento para que o contêiner aninhado <xref:System.ComponentModel.NestedContainer.Dispose%2A>método será chamado automaticamente.</xref:System.ComponentModel.NestedContainer.Dispose%2A> </xref:System.ComponentModel.IComponent.Disposed>"
  syntax:
    content: public NestedContainer (System.ComponentModel.IComponent owner);
    parameters:
    - id: owner
      type: System.ComponentModel.IComponent
      description: "O <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> que possui este contêiner aninhado."
  overload: System.ComponentModel.NestedContainer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owner</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  id: CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: CreateSite(IComponent,String)
  nameWithType: NestedContainer.CreateSite(IComponent,String)
  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um site para o componente dentro do contêiner."
  remarks: "Se o `name` parâmetro é `null`, o <xref:System.ComponentModel.IComponent>é adicionado ao contêiner aninhado sem um nome de identificação.</xref:System.ComponentModel.IComponent>"
  syntax:
    content: protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "O <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> para criar um site."
    - id: name
      type: System.String
      description: "O nome a ser atribuído ao `component`, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para ignorar a atribuição de nome."
    return:
      type: System.ComponentModel.ISite
      description: "Recém-criado <xref href=&quot;System.ComponentModel.ISite&quot;> </xref>."
  overload: System.ComponentModel.NestedContainer.CreateSite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NestedContainer.Dispose(Boolean)
  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Libera os recursos usados pelo contêiner aninhado."
  remarks: "Este método é chamado pelo público `Dispose()` método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro for true, este método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.ComponentModel.NestedContainer>referências.</xref:System.ComponentModel.NestedContainer> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.ComponentModel.NestedContainer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: NestedContainer.GetService(Type)
  fullName: System.ComponentModel.NestedContainer.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o objeto de serviço do tipo especificado, se estiver disponível."
  remarks: "Esse método substitui o <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName>método.</xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> Essa implementação apenas resolve solicitações para o <xref:System.ComponentModel.INestedContainer>e <xref:System.ComponentModel.IContainer>services.</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.INestedContainer>"
  syntax:
    content: protected override object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "O <xref:System.Type>do serviço para recuperar.</xref:System.Type>"
    return:
      type: System.Object
      description: "Um <xref:System.Object>que implementa o serviço solicitado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o serviço não pode ser resolvido.</xref:System.Object>"
  overload: System.ComponentModel.NestedContainer.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.Owner
  id: Owner
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: Owner
  nameWithType: NestedContainer.Owner
  fullName: System.ComponentModel.NestedContainer.Owner
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o componente proprietário para este contêiner aninhado."
  remarks: "O componente proprietário é a característica que diferencia contêineres aninhados de contêineres comuns."
  syntax:
    content: public System.ComponentModel.IComponent Owner { get; }
    return:
      type: System.ComponentModel.IComponent
      description: "O <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> que possui este contêiner aninhado."
  overload: System.ComponentModel.NestedContainer.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.OwnerName
  id: OwnerName
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
  fullName: System.ComponentModel.NestedContainer.OwnerName
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o nome do componente de propriedade."
  remarks: "Essa propriedade pode ser substituída para fornecer um nome de proprietário personalizado. A implementação padrão de pesquisa de site do proprietário para <xref:System.ComponentModel.INestedSite>e chamadas <xref:System.ComponentModel.INestedSite.FullName%2A>, ou <xref:System.ComponentModel.ISite.Name%2A>se não houver nenhum site aninhada.</xref:System.ComponentModel.ISite.Name%2A> </xref:System.ComponentModel.INestedSite.FullName%2A> </xref:System.ComponentModel.INestedSite> Se não estiver disponível, essa propriedade retornará `null`."
  syntax:
    content: protected virtual string OwnerName { get; }
    return:
      type: System.String
      description: "O nome do componente de propriedade."
  overload: System.ComponentModel.NestedContainer.OwnerName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Container
  isExternal: false
  name: System.ComponentModel.Container
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: NestedContainer(IComponent)
  nameWithType: NestedContainer.NestedContainer(IComponent)
  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: CreateSite(IComponent,String)
  nameWithType: NestedContainer.CreateSite(IComponent,String)
  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NestedContainer.Dispose(Boolean)
  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.NestedContainer.GetService(System.Type)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: GetService(Type)
  nameWithType: NestedContainer.GetService(Type)
  fullName: System.ComponentModel.NestedContainer.GetService(Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.NestedContainer.Owner
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Owner
  nameWithType: NestedContainer.Owner
  fullName: System.ComponentModel.NestedContainer.Owner
- uid: System.ComponentModel.NestedContainer.OwnerName
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
  fullName: System.ComponentModel.NestedContainer.OwnerName
- uid: System.ComponentModel.NestedContainer.#ctor*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: NestedContainer
  nameWithType: NestedContainer.NestedContainer
- uid: System.ComponentModel.NestedContainer.CreateSite*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: CreateSite
  nameWithType: NestedContainer.CreateSite
- uid: System.ComponentModel.NestedContainer.Dispose*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Dispose
  nameWithType: NestedContainer.Dispose
- uid: System.ComponentModel.NestedContainer.GetService*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: GetService
  nameWithType: NestedContainer.GetService
- uid: System.ComponentModel.NestedContainer.Owner*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Owner
  nameWithType: NestedContainer.Owner
- uid: System.ComponentModel.NestedContainer.OwnerName*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
