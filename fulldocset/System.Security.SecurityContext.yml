### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityContext
  id: SecurityContext
  children:
  - System.Security.SecurityContext.Capture
  - System.Security.SecurityContext.CreateCopy
  - System.Security.SecurityContext.Dispose
  - System.Security.SecurityContext.IsFlowSuppressed
  - System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed
  - System.Security.SecurityContext.RestoreFlow
  - System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  - System.Security.SecurityContext.SuppressFlow
  - System.Security.SecurityContext.SuppressFlowWindowsIdentity
  langs:
  - csharp
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Security.SecurityContext
  type: Class
  summary: "Encapsula e propaga todos os dados relacionados à segurança para contextos de execução transferidos entre threads. Essa classe não pode ser herdada."
  remarks: "A SecurityContext object captures all security-related information for a logical thread, including the information contained in the <xref:System.Security.Principal.WindowsIdentity> and <xref:System.Threading.CompressedStack> objects.  This configuration allows the Windows identity and the security elements on the stack to be propagated automatically when the SecurityContext is copied and transferred across asynchronous threads.  \n  \n> [!NOTE]\n>  The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions. Only managed <xref:System.Security.Principal.WindowsIdentity> objects can flow across asynchronous points, unless the `alwaysFlowImpersonationPolicy` element has been set to `true` (`<alwaysFlowImpersonationPolicy enabled=\"true\"/>`). Setting the `alwaysFlowImpersonationPolicy` element to `true` specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed. For more information about flowing unmanaged impersonation across asynchronous points, see [\\&lt;alwaysFlowImpersonationPolicy\\&gt; Element](../Topic/%3CalwaysFlowImpersonationPolicy%3E%20Element.md).  \n  \n The SecurityContext is part of the larger <xref:System.Threading.ExecutionContext> and flows or migrates when the <xref:System.Threading.ExecutionContext> flows or migrates.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."
  syntax:
    content: 'public sealed class SecurityContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityContext.Capture
  id: Capture
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: Capture()
  nameWithType: SecurityContext.Capture()
  fullName: System.Security.SecurityContext.Capture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Captura o contexto de segurança para o thread atual."
  remarks: "O contexto de segurança capturada pode ser aplicado a outro thread. O <xref:System.Security.SecurityContext>consiste o <xref:System.Threading.CompressedStack>e o <xref:System.Security.Principal.WindowsIdentity>para a execução do thread.</xref:System.Security.Principal.WindowsIdentity> </xref:System.Threading.CompressedStack> </xref:System.Security.SecurityContext>"
  syntax:
    content: public static System.Security.SecurityContext Capture ();
    parameters: []
    return:
      type: System.Security.SecurityContext
      description: "O contexto de segurança para o thread atual."
  overload: System.Security.SecurityContext.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.CreateCopy
  id: CreateCopy
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: SecurityContext.CreateCopy()
  fullName: System.Security.SecurityContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Cria uma cópia do contexto de segurança atual."
  remarks: "O contexto atual deve ter sido adquirido por meio de uma captura ou de uma operação de cópia. Esse método é útil para aplicar um capturada <xref:System.Security.SecurityContext>em vários threads.</xref:System.Security.SecurityContext>"
  syntax:
    content: public System.Security.SecurityContext CreateCopy ();
    parameters: []
    return:
      type: System.Security.SecurityContext
      description: "O contexto de segurança para o thread atual."
  overload: System.Security.SecurityContext.CreateCopy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O contexto de segurança atual foi usado anteriormente, foi empacotado em domínios de aplicativo ou não foi adquirido por meio de <xref:System.Security.SecurityContext.Capture*>método.</xref:System.Security.SecurityContext.Capture*>"
  platform:
  - net462
- uid: System.Security.SecurityContext.Dispose
  id: Dispose
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Security.SecurityContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Libera todos os recursos usados pela instância atual do <xref href=&quot;System.Security.SecurityContext&quot;> </xref> classe."
  remarks: "Chamar `Dispose` quando terminar de usar o <xref:System.Security.SecurityContext>.</xref:System.Security.SecurityContext> O `Dispose` método deixa o <xref:System.Security.SecurityContext>em um estado inutilizável.</xref:System.Security.SecurityContext> Depois de chamar `Dispose`, você deve liberar todas as referências para o <xref:System.Security.SecurityContext>para o coletor de lixo possa recuperar a memória que o <xref:System.Security.SecurityContext>estava ocupando.</xref:System.Security.SecurityContext> </xref:System.Security.SecurityContext>       Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [implementar um método Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada `Dispose` antes de liberar sua última referência a <xref:System.Security.SecurityContext>.</xref:System.Security.SecurityContext> Caso contrário, os recursos que está usando não serão liberados até que o coletor de lixo chame o <xref:System.Security.SecurityContext>do objeto `Finalize` método.</xref:System.Security.SecurityContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecurityContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.IsFlowSuppressed
  id: IsFlowSuppressed
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: IsFlowSuppressed()
  nameWithType: SecurityContext.IsFlowSuppressed()
  fullName: System.Security.SecurityContext.IsFlowSuppressed()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina se o fluxo do contexto de segurança foram suprimido."
  remarks: "O método IsFlowSuppressed é usado pelos componentes de infraestrutura para determinar se é preciso transferir a <xref:System.Security.SecurityContext>informações durante as operações assíncronas.</xref:System.Security.SecurityContext>"
  syntax:
    content: public static bool IsFlowSuppressed ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo foi suprimido; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityContext.IsFlowSuppressed*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed
  id: IsWindowsIdentityFlowSuppressed
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: IsWindowsIdentityFlowSuppressed()
  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed()
  fullName: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina se o fluxo da porção de identidade de Windows do contexto de segurança atual foi suprimido."
  remarks: "O método IsWindowsIdentityFlowSuppressed é usado pelos componentes de infraestrutura para determinar se deseja transferir as informações de identidade do Windows quando o <xref:System.Security.SecurityContext>migra durante operações assíncronas.</xref:System.Security.SecurityContext>"
  syntax:
    content: public static bool IsWindowsIdentityFlowSuppressed ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o fluxo foi suprimido; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.RestoreFlow
  id: RestoreFlow
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: RestoreFlow()
  nameWithType: SecurityContext.RestoreFlow()
  fullName: System.Security.SecurityContext.RestoreFlow()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Restaura o fluxo do contexto de segurança entre threads assíncronas."
  remarks: "O método RestoreFlow é chamado pelo <xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName>método para reverter o efeito de um anterior <xref:System.Security.SecurityContext.SuppressFlow%2A>chamada de método.</xref:System.Security.SecurityContext.SuppressFlow%2A> </xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName>"
  syntax:
    content: public static void RestoreFlow ();
    parameters: []
  overload: System.Security.SecurityContext.RestoreFlow*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O contexto de segurança é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia."
  platform:
  - net462
- uid: System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  id: Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: Run(SecurityContext,ContextCallback,Object)
  nameWithType: SecurityContext.Run(SecurityContext,ContextCallback,Object)
  fullName: System.Security.SecurityContext.Run(SecurityContext,ContextCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Executa o método especificado no contexto de segurança especificado no thread atual."
  remarks: "O contexto de segurança para o segmento atual é retornado para seu estado anterior quando a chamada do método está concluída."
  example:
  - "The following code example shows how to use the Run method to execute a method in a specified security context.  \n  \n [!code-cs[System.Security.SecurityContext.Run#1](~/add/codesnippet/csharp/f32751be-87d3-46b4-a1da-_1.cs)]\n [!code-vb[System.Security.SecurityContext.Run#1](~/add/codesnippet/visualbasic/f32751be-87d3-46b4-a1da-_1.vb)]"
  syntax:
    content: public static void Run (System.Security.SecurityContext securityContext, System.Threading.ContextCallback callback, object state);
    parameters:
    - id: securityContext
      type: System.Security.SecurityContext
      description: "O contexto de segurança para definir."
    - id: callback
      type: System.Threading.ContextCallback
      description: "O delegado que representa o método a ser executado no contexto de segurança especificado."
    - id: state
      type: System.Object
      description: "O objeto para passar para o método de retorno de chamada."
  overload: System.Security.SecurityContext.Run*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>securityContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>securityContext</code> não foi adquirido por meio de uma operação de captura.       - ou - <code>securityContext</code> já foi usado como o argumento para uma chamada de método de execução."
  platform:
  - net462
- uid: System.Security.SecurityContext.SuppressFlow
  id: SuppressFlow
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: SuppressFlow()
  nameWithType: SecurityContext.SuppressFlow()
  fullName: System.Security.SecurityContext.SuppressFlow()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Suprime o fluxo do contexto de segurança entre threads assíncronas."
  remarks: "Use esse método para suprimir o fluxo de <xref:System.Security.SecurityContext>informações sobre o thread atual para operações assíncronas.</xref:System.Security.SecurityContext>       O common language runtime (CLR) só está ciente das operações de representação executadas usando código gerenciado. O CLR não tem conhecimento de representação executada fora do código gerenciado, como a plataforma invoca para código não gerenciado que faz a representação, ou por meio de chamadas a funções do Win32. A identidade de fluxo nos pontos de assíncronas, você deve usar o gerenciado <xref:System.Security.Principal.WindowsIdentity>e <xref:System.Security.Principal.WindowsImpersonationContext>métodos.</xref:System.Security.Principal.WindowsImpersonationContext> </xref:System.Security.Principal.WindowsIdentity>       Use o <xref:System.Threading.AsyncFlowControl.Undo%2A>método retornado <xref:System.Threading.AsyncFlowControl>estrutura para retornar o <xref:System.Security.SecurityContext>objeto para seu estado anterior.</xref:System.Security.SecurityContext> </xref:System.Threading.AsyncFlowControl> </xref:System.Threading.AsyncFlowControl.Undo%2A>       Esse método é protegido com um <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>para <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>permissão.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> Um componente totalmente confiável pode chamar esse método para suprimir o fluxo do <xref:System.Security.SecurityContext>informações durante chamadas assíncronas.</xref:System.Security.SecurityContext> Quando o fluxo é suprimido, a <xref:System.Security.SecurityContext.Capture%2A>método retornará `null`.</xref:System.Security.SecurityContext.Capture%2A>"
  syntax:
    content: public static System.Threading.AsyncFlowControl SuppressFlow ();
    parameters: []
    return:
      type: System.Threading.AsyncFlowControl
      description: "Um <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> estrutura para restaurar o fluxo."
  overload: System.Security.SecurityContext.SuppressFlow*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity
  id: SuppressFlowWindowsIdentity
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: SuppressFlowWindowsIdentity()
  nameWithType: SecurityContext.SuppressFlowWindowsIdentity()
  fullName: System.Security.SecurityContext.SuppressFlowWindowsIdentity()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Suprime o fluxo da porção de identidade de Windows do contexto de segurança atual entre threads assíncronas."
  remarks: "Use this method to suppress the flow of the Windows identity when the <xref:System.Security.SecurityContext> migrates across asynchronous threads.  \n  \n Use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to return the <xref:System.Security.SecurityContext> object to its previous state.  \n  \n> [!NOTE]\n>  The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions. Only managed <xref:System.Security.Principal.WindowsIdentity> objects can flow across asynchronous points, unless the `alwaysFlowImpersonationPolicy` element has been set to `true` (`<alwaysFlowImpersonationPolicy enabled=\"true\"/>`). Setting the `alwaysFlowImpersonationPolicy` element to `true` specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed. For more information about flowing unmanaged impersonation across asynchronous points, see [\\<alwaysFlowImpersonationPolicy> Element](../Topic/%3CalwaysFlowImpersonationPolicy%3E%20Element.md)."
  syntax:
    content: public static System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity ();
    parameters: []
    return:
      type: System.Threading.AsyncFlowControl
      description: "Uma estrutura para restaurar o fluxo."
  overload: System.Security.SecurityContext.SuppressFlowWindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityContext.Capture
  parent: System.Security.SecurityContext
  isExternal: false
  name: Capture()
  nameWithType: SecurityContext.Capture()
  fullName: System.Security.SecurityContext.Capture()
- uid: System.Security.SecurityContext
  parent: System.Security
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Security.SecurityContext
- uid: System.Security.SecurityContext.CreateCopy
  parent: System.Security.SecurityContext
  isExternal: false
  name: CreateCopy()
  nameWithType: SecurityContext.CreateCopy()
  fullName: System.Security.SecurityContext.CreateCopy()
- uid: System.Security.SecurityContext.Dispose
  parent: System.Security.SecurityContext
  isExternal: false
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Security.SecurityContext.Dispose()
- uid: System.Security.SecurityContext.IsFlowSuppressed
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsFlowSuppressed()
  nameWithType: SecurityContext.IsFlowSuppressed()
  fullName: System.Security.SecurityContext.IsFlowSuppressed()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsWindowsIdentityFlowSuppressed()
  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed()
  fullName: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed()
- uid: System.Security.SecurityContext.RestoreFlow
  parent: System.Security.SecurityContext
  isExternal: false
  name: RestoreFlow()
  nameWithType: SecurityContext.RestoreFlow()
  fullName: System.Security.SecurityContext.RestoreFlow()
- uid: System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  parent: System.Security.SecurityContext
  isExternal: false
  name: Run(SecurityContext,ContextCallback,Object)
  nameWithType: SecurityContext.Run(SecurityContext,ContextCallback,Object)
  fullName: System.Security.SecurityContext.Run(SecurityContext,ContextCallback,Object)
- uid: System.Threading.ContextCallback
  parent: System.Threading
  isExternal: true
  name: ContextCallback
  nameWithType: ContextCallback
  fullName: System.Threading.ContextCallback
- uid: System.Security.SecurityContext.SuppressFlow
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlow()
  nameWithType: SecurityContext.SuppressFlow()
  fullName: System.Security.SecurityContext.SuppressFlow()
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlowWindowsIdentity()
  nameWithType: SecurityContext.SuppressFlowWindowsIdentity()
  fullName: System.Security.SecurityContext.SuppressFlowWindowsIdentity()
- uid: System.Security.SecurityContext.Capture*
  parent: System.Security.SecurityContext
  isExternal: false
  name: Capture
  nameWithType: SecurityContext.Capture
- uid: System.Security.SecurityContext.CreateCopy*
  parent: System.Security.SecurityContext
  isExternal: false
  name: CreateCopy
  nameWithType: SecurityContext.CreateCopy
- uid: System.Security.SecurityContext.Dispose*
  parent: System.Security.SecurityContext
  isExternal: false
  name: Dispose
  nameWithType: SecurityContext.Dispose
- uid: System.Security.SecurityContext.IsFlowSuppressed*
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsFlowSuppressed
  nameWithType: SecurityContext.IsFlowSuppressed
- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed*
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsWindowsIdentityFlowSuppressed
  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed
- uid: System.Security.SecurityContext.RestoreFlow*
  parent: System.Security.SecurityContext
  isExternal: false
  name: RestoreFlow
  nameWithType: SecurityContext.RestoreFlow
- uid: System.Security.SecurityContext.Run*
  parent: System.Security.SecurityContext
  isExternal: false
  name: Run
  nameWithType: SecurityContext.Run
- uid: System.Security.SecurityContext.SuppressFlow*
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlow
  nameWithType: SecurityContext.SuppressFlow
- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity*
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlowWindowsIdentity
  nameWithType: SecurityContext.SuppressFlowWindowsIdentity
