### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Implementa uma estrutura de dados para descrever uma propriedade como um caminho abaixo outra propriedade, ou abaixo de um tipo de propriedade. Caminhos de propriedade são usados na associação de dados para objetos e storyboards e cronogramas de animações."
  remarks: "Essa classe contém uma cadeia de caracteres <xref:System.Windows.PropertyPath.Path%2A>e a lista de propriedades de dependência são o <xref:System.Windows.PropertyPath.PathParameters%2A>na cadeia de caracteres<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath dá suporte a dois modos de comportamento: **modo fonte** descreve um caminho para uma propriedade que é usada como uma fonte para alguma outra operação. Esse modo é usado pelo <xref:System.Windows.Data.Binding>classe para dar suporte a associação de dados.</xref:System.Windows.Data.Binding>       **Modo de destino** descreve um caminho para uma propriedade que será definido como uma propriedade de destino. Esse modo é usado por animação para oferecer suporte a setters de storyboard e linha do tempo.       Por exemplo, `Background.Opacity` é um caminho de duas etapas. Esse caminho implica: primeiro, encontre o `Background` o objeto de valor de obter a propriedade de um objeto que o `Background` propriedade é definida como e, em seguida, obter o valor da `Opacity` propriedade no objeto.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a># # Uso do atributo XAML ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> # # XAML valores *propertyPath* uma cadeia de caracteres que é avaliada como um caminho de propriedade simples ou complexos.       A sintaxe para definir um PropertyPath [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] é versátil mas complexa e é descrito no tópico separado [sintaxe XAML de PropertyPath](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> classe."
  remarks: "Este construtor tem dois usos completamente diferentes, dependendo se ele está sendo usado para o caminho da propriedade modo de origem para uma associação, ou para um caminho de propriedade de apenas uma etapa de modo de destino para um destino de storyboard.       Se usar esta <xref:System.Windows.PropertyPath>no modo de origem para uma associação, `parameter` é uma cadeia de caracteres que representa um nome de propriedade, ou pode ser uma cadeia de caracteres que descreve um caminho &quot;passo a passo&quot; para a propriedade no [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] modelo de objeto do objeto que está sendo usado como a origem para uma associação.</xref:System.Windows.PropertyPath> Para um caminho de propriedade de associação, o caractere que identifica uma etapa de&quot;&quot; é um ponto (.). Também há suporte para referências de indexador (incluindo vários indexadores e diferenciação de tipo). Para obter mais detalhes sobre a sintaxe da cadeia de caracteres usada especificamente pelo <xref:System.Windows.Data.Binding>objeto, consulte <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> Uma propriedade usada como uma origem de associação não precisa ser uma propriedade de dependência. Se a associação bidirecional, a propriedade referenciada deve ser leitura / gravação. Observe também que o destino da associação tem uma propriedade de dependência. Para obter detalhes, consulte [visão geral de associação de dados](~/add/includes/ajax-current-ext-md.md).       Se usar esta <xref:System.Windows.PropertyPath>no modo de destino para um caminho de etapa única para um destino de storyboard, `parameter` geralmente é fornecido como tipo <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> Você também pode especificar uma cadeia de caracteres <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> Qualquer uma delas é avaliada como o mesmo resultado, porque ele é armazenado internamente como uma cadeia de caracteres. Um fornecido <xref:System.Windows.DependencyProperty>é convertido em uma cadeia de caracteres por meio de <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> O <xref:System.Windows.Markup.DependencyPropertyConverter>oferece suporte a um formato de nome qualificado para propriedades de dependência, portanto, você pode especificar um *typeName*.* propertyName* qualificado a cadeia de caracteres do nome de propriedade de dependência para o construtor PropertyPath em código.</xref:System.Windows.Markup.DependencyPropertyConverter> O caminho qualificado para o identificador de propriedade de dependência é um conceito diferente um caminho complexo. Um caminho complexo <xref:System.Windows.PropertyPath>em vez disso, deve ser criado com o <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>construtor.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "O caminho da propriedade que o descreve um caminho para um [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] propriedade ou uma propriedade de dependência único."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> classe, com os parâmetros e a cadeia de caracteres de token do caminho fornecido."
  remarks: "Esta assinatura geralmente é usada somente para o modo de destino <xref:System.Windows.PropertyPath>usos com caminhos complexos.</xref:System.Windows.PropertyPath>       Este construtor dá suporte a `params` para o `pathParameters` argumento de construtor. Portanto, você pode especificar o conteúdo de `pathParameters` como uma série de argumentos de construtor separada por vírgulas que preenchem a matriz, em vez de precisar de uma matriz de dimensão e preencha-o com o `pathParameters` itens. Cada item que você especificar deve ser um dos seguintes tipos: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Para obter mais informações sobre os requisitos dos parâmetros, consulte <xref:System.Windows.PropertyPath.Path%2A>e <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "Uma cadeia de caracteres que especifica o <xref:System.Windows.PropertyPath.Path*>, em um formato editáveis.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "Uma matriz de objetos que define <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define a cadeia de caracteres que descreve o caminho."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "A cadeia de caracteres que descreve o caminho."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém a lista de parâmetros a serem usados quando o caminho se refere aos parâmetros indexados."
  remarks: "As propriedades de um <xref:System.Windows.PropertyPath>normalmente são estabelecidas por meio de construtores.</xref:System.Windows.PropertyPath> Para definir PathParameters, o <xref:System.Windows.PropertyPath.%23ctor%2A>construtor é particularmente conveniente porque o `pathParameters` argumento do construtor é designado como `params`, que significa que você não precisa criar ou uma matriz para a construção de dimensão.</xref:System.Windows.PropertyPath.%23ctor%2A> Você simplesmente especifica cada membro da matriz como um parâmetro adicional.       Se a propriedade final que é o destino for um <xref:System.Windows.Freezable>de tipo, que o valor será clonado.</xref:System.Windows.Freezable> Para obter detalhes, consulte [Storyboards Overview](~/add/includes/ajax-current-ext-md.md).       A avaliação real da cadeia de propriedade é executada por mecanismos de animação de storyboard. No <xref:System.Windows.PropertyPath>nível, nenhuma validação é executada para certificar-se de que as etapas do caminho se conectar em todos os.</xref:System.Windows.PropertyPath> Por exemplo, você pode construir um caminho de propriedade que tenha <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>como a primeira etapa, e <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>como a segunda etapa.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Mas esse caminho de propriedade falhará se realmente aplicadas como um destino, porque o tipo de pincel que preenchimentos <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>não tem um <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>propriedade.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Caminhos de propriedade inválido falharem em modo silencioso. Para obter mais informações, consulte [Storyboards Overview](../Topic/Storyboards%20Overview.md).       **XAML:** quando você usa um <xref:System.Windows.PropertyPath>para descrever uma referência de propriedade em [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], como um valor de atributo, a cadeia de caracteres que você especifique primeiro é manipulado por um conversor de tipo (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Este conversor de tipo, em seguida, processa a cadeia de caracteres e com base em sua sintaxe chamará uma da <xref:System.Windows.PropertyPath>assinaturas de construtor.</xref:System.Windows.PropertyPath> Geralmente, esta indireção por meio de conversor de tipo de tratamento de um valor de atributo é como você usa <xref:System.Windows.PropertyPath>em [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], em vez de declarar um <xref:System.Windows.PropertyPath>elemento e, em seguida, aplicar valores específicos aos atributos como objeto <xref:System.Windows.PropertyPath.Path%2A>e PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Para obter mais informações, consulte [sintaxe XAML de PropertyPath](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a># # XAML texto uso membros o <xref:System.Windows.PropertyPath>tipo geralmente não são definidos em uma conexão direta [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] sintaxe.</xref:System.Windows.PropertyPath> Consulte comentários."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "A lista de parâmetros."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
