### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.TableCellCollection
  id: TableCellCollection
  children:
  - System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])
  - System.Web.UI.WebControls.TableCellCollection.Clear
  - System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.Count
  - System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.GetEnumerator
  - System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  - System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  - System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)
  - System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.SyncRoot
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add(System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains(System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item(System.Int32)
  - System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: TableCellCollection
  nameWithType: TableCellCollection
  fullName: System.Web.UI.WebControls.TableCellCollection
  type: Class
  summary: "Encapsula uma coleção de <xref href=&quot;System.Web.UI.WebControls.TableHeaderCell&quot;> </xref> e <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos que compõem uma linha em uma <xref href=&quot;System.Web.UI.WebControls.Table&quot;> </xref> controle. Essa classe não pode ser herdada."
  remarks: "Use esta classe para gerenciar programaticamente uma coleção de <xref:System.Web.UI.WebControls.TableCell>objetos que compõem uma linha em um <xref:System.Web.UI.WebControls.Table>controle.</xref:System.Web.UI.WebControls.Table> </xref:System.Web.UI.WebControls.TableCell> Normalmente, essa classe é usada para adicionar ou remover as células de uma linha em um <xref:System.Web.UI.WebControls.Table>controle.</xref:System.Web.UI.WebControls.Table>      > [!NOTE] > Um <xref:System.Web.UI.WebControls.Table>controle contém um <xref:System.Web.UI.WebControls.Table.Rows%2A>coleção que representa uma coleção de <xref:System.Web.UI.WebControls.TableRow>objetos.</xref:System.Web.UI.WebControls.TableRow> </xref:System.Web.UI.WebControls.Table.Rows%2A> </xref:System.Web.UI.WebControls.Table> Cada <xref:System.Web.UI.WebControls.TableRow>representa uma linha individual na tabela e contém um <xref:System.Web.UI.WebControls.TableRow.Cells%2A>coleção que representa uma coleção de <xref:System.Web.UI.WebControls.TableCell>objetos.</xref:System.Web.UI.WebControls.TableCell> </xref:System.Web.UI.WebControls.TableRow.Cells%2A> </xref:System.Web.UI.WebControls.TableRow> Essas <xref:System.Web.UI.WebControls.TableCell>objetos representam as células individuais na tabela.</xref:System.Web.UI.WebControls.TableCell> Para obter uma célula individual, você deve primeiro obter um <xref:System.Web.UI.WebControls.TableRow>do <xref:System.Web.UI.WebControls.Table.Rows%2A>coleção de um <xref:System.Web.UI.WebControls.Table>controle.</xref:System.Web.UI.WebControls.Table> </xref:System.Web.UI.WebControls.Table.Rows%2A> </xref:System.Web.UI.WebControls.TableRow> Em seguida, você pode obter um <xref:System.Web.UI.WebControls.TableCell>da <xref:System.Web.UI.WebControls.TableRow.Cells%2A>coleção de <xref:System.Web.UI.WebControls.TableRow>.</xref:System.Web.UI.WebControls.TableRow> </xref:System.Web.UI.WebControls.TableRow.Cells%2A> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to programmatically fill a <xref:System.Web.UI.WebControls.Table> control. <xref:System.Web.UI.WebControls.TableCell> objects, which represent individual cells, are added to <xref:System.Web.UI.WebControls.TableRow> objects, which represent the individual rows, through the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property.  \n  \n [!code-cs[Classic TableCellCollection Example#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_221_1.aspx)]\n [!code-vb[Classic TableCellCollection Example#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_221_1.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.Editor("System.Web.UI.Design.WebControls.TableCellsCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]

      public sealed class TableCellCollection : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)
  id: Add(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Add(TableCell)
  nameWithType: TableCellCollection.Add(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Add(TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Acrescenta especificado <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> ao final do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Use esse método para adicionar o especificado <xref:System.Web.UI.WebControls.TableCell>ao final da <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the Add method to add a <xref:System.Web.UI.WebControls.TableCell> to a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.Add Example#1](~/add/codesnippet/csharp/ee795911-b57c-473c-a40c-_1.aspx)]\n [!code-vb[Classic TableCellCollection.Add Example#1](~/add/codesnippet/visualbasic/ee795911-b57c-473c-a40c-_1.aspx)]"
  syntax:
    content: public int Add (System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "O <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> para adicionar à coleção."
    return:
      type: System.Int32
      description: "O número de índice a <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  id: AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: AddAt(Int32,TableCell)
  nameWithType: TableCellCollection.AddAt(Int32,TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.AddAt(Int32,TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Adiciona o <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> para o <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> no local do índice especificado."
  remarks: "Use esse método para inserir especificado <xref:System.Web.UI.WebControls.TableCell>em um <xref:System.Web.UI.WebControls.TableCellCollection>no índice especificado.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the AddAt method to add a <xref:System.Web.UI.WebControls.TableCell> to the middle of a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.AddAt Example#1](~/add/codesnippet/csharp/8b5e0b20-2dc9-4b2e-bd0c-_1.aspx)]\n [!code-vb[Classic TableCellCollection.AddAt Example#1](~/add/codesnippet/visualbasic/8b5e0b20-2dc9-4b2e-bd0c-_1.aspx)]"
  syntax:
    content: public void AddAt (int index, System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: index
      type: System.Int32
      description: "O local a <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> no qual adicionar o <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref>."
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "The <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;></xref> to add to the <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;></xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.AddAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])
  id: AddRange(System.Web.UI.WebControls.TableCell[])
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: AddRange(TableCell[])
  nameWithType: TableCellCollection.AddRange(TableCell[])
  fullName: System.Web.UI.WebControls.TableCellCollection.AddRange(TableCell[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Acrescenta o <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos da matriz especificada ao final da coleção."
  remarks: "Use o método AddRange para acrescentar o <xref:System.Web.UI.WebControls.TableCell>objetos da matriz especificada à coleção.</xref:System.Web.UI.WebControls.TableCell> Esse método é geralmente usado quando você está construindo uma linha de uma tabela. Para construir uma linha de uma tabela, primeiro crie uma matriz de <xref:System.Web.UI.WebControls.TableCell>objetos para representar as células da linha.</xref:System.Web.UI.WebControls.TableCell> Em seguida, use o método AddRange, passando a matriz como um argumento, para adicionar o <xref:System.Web.UI.WebControls.TableCell>objetos na coleção.</xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the AddRange method to add the <xref:System.Web.UI.WebControls.TableCell> objects from an array to a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-vb[TableCellCollection_AddRange#1](~/add/codesnippet/visualbasic/cc471817-21c7-41f0-a2b5-_1.aspx)]\n [!code-cs[TableCellCollection_AddRange#1](~/add/codesnippet/csharp/cc471817-21c7-41f0-a2b5-_1.aspx)]"
  syntax:
    content: public void AddRange (System.Web.UI.WebControls.TableCell[] cells);
    parameters:
    - id: cells
      type: System.Web.UI.WebControls.TableCell[]
      description: "A matriz que contém o <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos para adicionar à coleção."
  overload: System.Web.UI.WebControls.TableCellCollection.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O valor de <code> cells </code> parâmetro é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Clear
  id: Clear
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: TableCellCollection.Clear()
  fullName: System.Web.UI.WebControls.TableCellCollection.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Remove todos os <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> de objetos a partir de <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Use esse método para remover todos os <xref:System.Web.UI.WebControls.TableCell>de objetos a partir de <xref:System.Web.UI.WebControls.TableCellCollection>e defina o <xref:System.Web.UI.WebControls.TableCellCollection.Count%2A>propriedade como 0.</xref:System.Web.UI.WebControls.TableCellCollection.Count%2A> </xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>      > [!NOTE] > Este método Remove o <xref:System.Web.UI.WebControls.TableCell>objetos do <xref:System.Web.UI.WebControls.TableCellCollection>, mas não remove o <xref:System.Web.UI.WebControls.TableRow>do <xref:System.Web.UI.WebControls.Table>controle.</xref:System.Web.UI.WebControls.Table> </xref:System.Web.UI.WebControls.TableRow> </xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell> Certifique-se de também removerá o <xref:System.Web.UI.WebControls.TableRow>se você deseja remover completamente uma linha da tabela.</xref:System.Web.UI.WebControls.TableRow>"
  example:
  - "The following example demonstrates how to use the Clear method to remove all <xref:System.Web.UI.WebControls.TableCell> objects from the center row of the table and replace them with new <xref:System.Web.UI.WebControls.TableCell> objects.  \n  \n [!code-cs[Classic TableCellCollection.Clear Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_74_1.aspx)]\n [!code-vb[Classic TableCellCollection.Clear Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_74_1.aspx)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.UI.WebControls.TableCellCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: TableCellCollection.CopyTo(Array,Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Copia os itens a <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> especificado &lt;xref:System.Array?displayProperty=fullName&gt;, começando com o índice especificado no &lt;xref:System.Array?displayProperty=fullName&gt;."
  remarks: "Use esse método para copiar o conteúdo do <xref:System.Web.UI.WebControls.TableCellCollection>especificado <xref:System.Array?displayProperty=fullName>iniciando no índice especificado.</xref:System.Array?displayProperty=fullName> </xref:System.Web.UI.WebControls.TableCellCollection>      > [!NOTE] > O `array` parâmetro deve ser <xref:System.Array?displayProperty=fullName>.</xref:System.Array?displayProperty=fullName> com base em zero"
  example:
  - "The following example demonstrates how to use the CopyTo method to copy the items from the <xref:System.Web.UI.WebControls.TableCellCollection> into the specified array.  \n  \n [!code-vb[Classic TableCellCollection.CopyTo Example#1](~/add/codesnippet/visualbasic/bdea1b6d-8af6-40aa-a8be-_1.aspx)]\n [!code-cs[Classic TableCellCollection.CopyTo Example#1](~/add/codesnippet/csharp/bdea1b6d-8af6-40aa-a8be-_1.aspx)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Uma base zero &lt;xref:System.Array?displayProperty=fullName&gt; que recebe os itens copiados do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
    - id: index
      type: System.Int32
      description: "O primeiro índice especificado na &lt;xref:System.Array?displayProperty=fullName&gt; para receber os itens."
  overload: System.Web.UI.WebControls.TableCellCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Count
  id: Count
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Count
  nameWithType: TableCellCollection.Count
  fullName: System.Web.UI.WebControls.TableCellCollection.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém o número de <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos no <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Use esta propriedade para determinar o número de células em <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> A propriedade Count é geralmente usada quando a iteração na coleção para determinar o limite superior."
  example:
  - "The following example demonstrates how to use the Count property to determine the number of cells in the <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.Count Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_107_1.cs)]\n [!code-vb[Classic TableCellCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_107_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos no <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>. O padrão é 0."
  overload: System.Web.UI.WebControls.TableCellCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)
  id: GetCellIndex(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: GetCellIndex(TableCell)
  nameWithType: TableCellCollection.GetCellIndex(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Retorna um valor que representa o índice do <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Use esse método para determinar o índice do especificado <xref:System.Web.UI.WebControls.TableCell>em <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell> Se especificado <xref:System.Web.UI.WebControls.TableCell>não é encontrado, um índice de -1 será retornado.</xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the GetCellIndex property to display the column index of the selected cell.  \n  \n [!code-cs[Classic TableCellCollection.GetCellIndex Example#1](~/add/codesnippet/csharp/adbcd4ba-a31d-48e3-aca6-_1.aspx)]\n [!code-vb[Classic TableCellCollection.GetCellIndex Example#1](~/add/codesnippet/visualbasic/adbcd4ba-a31d-48e3-aca6-_1.aspx)]"
  syntax:
    content: public int GetCellIndex (System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "O <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> para obter o índice do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice especificado <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> dentro de <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>. O padrão é -1, que indica que uma correspondência não foi encontrada."
  overload: System.Web.UI.WebControls.TableCellCollection.GetCellIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: TableCellCollection.GetEnumerator()
  fullName: System.Web.UI.WebControls.TableCellCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Retorna um &lt;xref:System.Collections.IEnumerator?displayProperty=fullName&gt; implementado o objeto que contém todos os <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos no <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Use esse método para criar um <xref:System.Collections.IEnumerator?displayProperty=fullName>implementado um objeto que pode ser iterado por meio fácil de colocar cada item em <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Collections.IEnumerator?displayProperty=fullName>       Use o <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>apontada propriedade para obter o item atualmente na coleção.</xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>       Use o <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName>método para mover para o próximo item na coleção.</xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName>       Use o <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName>método para mover o enumerador de volta para a posição inicial.</xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName>      > [!NOTE] > O <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName>método deve ser chamado depois de criar um <xref:System.Collections.IEnumerator?displayProperty=fullName>implementado objeto ou depois de usar o <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName>método para mover o enumerador para o primeiro item na coleção.</xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> </xref:System.Collections.IEnumerator?displayProperty=fullName> </xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> Caso contrário, o item é representado pelo <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>propriedade está definida.</xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName>"
  example:
  - "The following example demonstrates how to use the GetEnumerator method to create a <xref:System.Collections.IEnumerator?displayProperty=fullName> implemented object. It is then iterated through to display the items in the selected row.  \n  \n [!code-cs[Classic TableCellCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_188_1.aspx)]\n [!code-vb[Classic TableCellCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_188_1.aspx)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um &lt;xref:System.Collections.IEnumerator?displayProperty=fullName&gt; implementado o objeto que contém todos os <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> objetos dentro do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: TableCellCollection.IsReadOnly
  fullName: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> é somente leitura."
  remarks: "Essa propriedade sempre retorna `false` para indicar que o <xref:System.Web.UI.WebControls.TableCellCollection>podem ser gravados em todos os casos.</xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>para todos os casos."
  overload: System.Web.UI.WebControls.TableCellCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: TableCellCollection.IsSynchronized
  fullName: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um valor que indica se o acesso para o <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> é sincronizado (thread-safe)."
  remarks: "Essa propriedade é derivada do <xref:System.Collections.ICollection?displayProperty=fullName>e é substituído para sempre retornar `false`.</xref:System.Collections.ICollection?displayProperty=fullName>       Para obter mais informações sobre a propriedade IsSynchronized, consulte o <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=fullName>propriedade o <xref:System.Collections.ICollection?displayProperty=fullName>interface.</xref:System.Collections.ICollection?displayProperty=fullName> </xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>para todos os casos."
  overload: System.Web.UI.WebControls.TableCellCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: TableCellCollection.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém um <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> no índice especificado."
  remarks: "Use este indexador para obter um indivíduo <xref:System.Web.UI.WebControls.TableCell>no <xref:System.Web.UI.WebControls.TableCellCollection>no índice especificado usando a notação de matriz simples.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how to use the indexer to get a <xref:System.Web.UI.WebControls.TableCell> from a <xref:System.Web.UI.WebControls.TableCellCollection>. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-vb[Classic TableCellCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_965_1.aspx)]\n [!code-cs[Classic TableCellCollection.this Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_965_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.TableCell this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Um valor de índice ordinal que especifica o <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> para retornar."
    return:
      type: System.Web.UI.WebControls.TableCell
      description: "Um <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> que representa um elemento de <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)
  id: Remove(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: Remove(TableCell)
  nameWithType: TableCellCollection.Remove(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Remove(TableCell)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Remove o <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "Use esse método para remover a especificado <xref:System.Web.UI.WebControls.TableCell>de <xref:System.Web.UI.WebControls.TableCellCollection>.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how use the Remove method to remove the center column from the table. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class.  \n  \n [!code-cs[Classic TableCellCollection.Remove Example#1](~/add/codesnippet/csharp/5661f8f5-48f6-4afd-9f95-_1.aspx)]\n [!code-vb[Classic TableCellCollection.Remove Example#1](~/add/codesnippet/visualbasic/5661f8f5-48f6-4afd-9f95-_1.aspx)]"
  syntax:
    content: public void Remove (System.Web.UI.WebControls.TableCell cell);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "O <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> para remover do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: TableCellCollection.RemoveAt(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Remove um <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref> no índice especificado."
  remarks: "Use esse método para remover um <xref:System.Web.UI.WebControls.TableCell>de um <xref:System.Web.UI.WebControls.TableCellCollection>no índice especificado.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCell>"
  example:
  - "The following example demonstrates how use the RemoveAt method to remove the fourth column from the table. Note that in the example, the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> property of the <xref:System.Web.UI.WebControls.TableRow> is an instance of the <xref:System.Web.UI.WebControls.TableCellCollection> class. Also note that the index of the <xref:System.Web.UI.WebControls.TableRow.Cells%2A> collection is zero-based.  \n  \n [!code-cs[Classic TableCellCollection.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_147_1.aspx)]\n [!code-vb[Classic TableCellCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_147_1.aspx)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice do <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;> </xref> para remover do <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.SyncRoot
  id: SyncRoot
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: TableCellCollection.SyncRoot
  fullName: System.Web.UI.WebControls.TableCellCollection.SyncRoot
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obtém o objeto que pode ser usado para sincronizar o acesso a <xref href=&quot;System.Web.UI.WebControls.TableCellCollection&quot;> </xref>."
  remarks: "O objeto retornado nesta implementação é o <xref:System.Web.UI.WebControls.TableCellCollection>em si.</xref:System.Web.UI.WebControls.TableCellCollection>       Para obter mais informações sobre a propriedade SyncRoot, consulte o <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=fullName>propriedade o <xref:System.Collections.ICollection?displayProperty=fullName>interface.</xref:System.Collections.ICollection?displayProperty=fullName> </xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=fullName>"
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser usado para sincronizar o acesso à coleção."
  overload: System.Web.UI.WebControls.TableCellCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Add(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Adiciona um objeto à coleção."
  remarks: "Normalmente, você deve usar o <xref:System.Web.UI.WebControls.TableCellCollection.Add%2A?displayProperty=fullName>para adicionar um elemento para uma <xref:System.Web.UI.WebControls.TableCellCollection>objeto.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.Add%2A?displayProperty=fullName>       O método IList é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida em um <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: int IList.Add (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O objeto a ser adicionado à coleção."
    return:
      type: System.Int32
      description: "O índice no qual o objeto foi adicionado à coleção."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Contains(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determina se o objeto especificado está contido dentro da coleção."
  remarks: "O método IList.Contains é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida em um <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: bool IList.Contains (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O objeto a ser localizado na coleção."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto estiver na coleção; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: TableCellCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência na coleção."
  remarks: "Normalmente, você deve usar o <xref:System.Web.UI.WebControls.TableCellCollection.GetCellIndex%2A>método para obter o índice de um elemento em um <xref:System.Web.UI.WebControls.TableCellCollection>objeto.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.GetCellIndex%2A>       O método IList.IndexOf é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida em um <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: int IList.IndexOf (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O objeto a ser localizado na coleção."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência do objeto na coleção; Caso contrário, retornará -1 se o objeto não está na coleção."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: TableCellCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Insere um objeto na coleção no índice especificado."
  remarks: "Normalmente, você deve usar o <xref:System.Web.UI.WebControls.TableCellCollection.AddAt%2A>para adicionar um elemento para uma <xref:System.Web.UI.WebControls.TableCellCollection>objeto.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.AddAt%2A>       O método IList.Insert é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida em um <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: void IList.Insert (int index, object o);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero na coleção na qual inserir o objeto."
    - id: o
      type: System.Object
      description: "O objeto a ser inserido na coleção."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: TableCellCollection.System.Collections.IList.IsFixedSize
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Para obter uma descrição desse membro, consulte <xref:System.Collections.IList.IsFixedSize*>.</xref:System.Collections.IList.IsFixedSize*>"
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida para o <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a lista tem um tamanho fixo; Caso contrário,<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>"
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: TableCellCollection.System.Collections.IList.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Para obter uma descrição desse membro, consulte <xref:System.Collections.IList.Item*>.</xref:System.Collections.IList.Item*>"
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida para o <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero do elemento a ser obtido ou definido."
    return:
      type: System.Object
      description: "O elemento no índice especificado."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.TableCellCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Remove(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Remove um objeto da coleção."
  remarks: "Normalmente, você deve usar o <xref:System.Web.UI.WebControls.TableCellCollection.Remove%2A?displayProperty=fullName>método para remover um elemento de uma <xref:System.Web.UI.WebControls.TableCellCollection>objeto.</xref:System.Web.UI.WebControls.TableCellCollection> </xref:System.Web.UI.WebControls.TableCellCollection.Remove%2A?displayProperty=fullName>       O método IList.Remove é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Web.UI.WebControls.TableCellCollection>instância é convertida em um <xref:System.Collections.IList>interface.</xref:System.Collections.IList> </xref:System.Web.UI.WebControls.TableCellCollection>"
  syntax:
    content: void IList.Remove (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O objeto a ser removido da coleção."
  overload: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.WebControls.TableCellCollection.Add(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Add(TableCell)
  nameWithType: TableCellCollection.Add(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Add(TableCell)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.TableCell
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableCell
  nameWithType: TableCell
  fullName: System.Web.UI.WebControls.TableCell
- uid: System.Web.UI.WebControls.TableCellCollection.AddAt(System.Int32,System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddAt(Int32,TableCell)
  nameWithType: TableCellCollection.AddAt(Int32,TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.AddAt(Int32,TableCell)
- uid: System.Web.UI.WebControls.TableCellCollection.AddRange(System.Web.UI.WebControls.TableCell[])
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddRange(TableCell[])
  nameWithType: TableCellCollection.AddRange(TableCell[])
  fullName: System.Web.UI.WebControls.TableCellCollection.AddRange(TableCell[])
- uid: System.Web.UI.WebControls.TableCell[]
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableCell
  nameWithType: TableCell
  fullName: System.Web.UI.WebControls.TableCell[]
  spec.csharp:
  - uid: System.Web.UI.WebControls.TableCell
    name: TableCell
    nameWithType: TableCell
    fullName: TableCell[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.WebControls.TableCellCollection.Clear
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Clear()
  nameWithType: TableCellCollection.Clear()
  fullName: System.Web.UI.WebControls.TableCellCollection.Clear()
- uid: System.Web.UI.WebControls.TableCellCollection.CopyTo(System.Array,System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: TableCellCollection.CopyTo(Array,Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Web.UI.WebControls.TableCellCollection.Count
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Count
  nameWithType: TableCellCollection.Count
  fullName: System.Web.UI.WebControls.TableCellCollection.Count
- uid: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetCellIndex(TableCell)
  nameWithType: TableCellCollection.GetCellIndex(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.GetCellIndex(TableCell)
- uid: System.Web.UI.WebControls.TableCellCollection.GetEnumerator
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: TableCellCollection.GetEnumerator()
  fullName: System.Web.UI.WebControls.TableCellCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: TableCellCollection.IsReadOnly
  fullName: System.Web.UI.WebControls.TableCellCollection.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: TableCellCollection.IsSynchronized
  fullName: System.Web.UI.WebControls.TableCellCollection.IsSynchronized
- uid: System.Web.UI.WebControls.TableCellCollection.Item(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: TableCellCollection.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.Item(Int32)
- uid: System.Web.UI.WebControls.TableCellCollection.Remove(System.Web.UI.WebControls.TableCell)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Remove(TableCell)
  nameWithType: TableCellCollection.Remove(TableCell)
  fullName: System.Web.UI.WebControls.TableCellCollection.Remove(TableCell)
- uid: System.Web.UI.WebControls.TableCellCollection.RemoveAt(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: TableCellCollection.RemoveAt(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.RemoveAt(Int32)
- uid: System.Web.UI.WebControls.TableCellCollection.SyncRoot
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: SyncRoot
  nameWithType: TableCellCollection.SyncRoot
  fullName: System.Web.UI.WebControls.TableCellCollection.SyncRoot
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Add(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Add(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Contains(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Contains(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: TableCellCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IndexOf(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: TableCellCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: TableCellCollection.System.Collections.IList.IsFixedSize
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.IsFixedSize
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item(System.Int32)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: TableCellCollection.System.Collections.IList.Item(Int32)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Item(Int32)
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove(System.Object)
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: TableCellCollection.System.Collections.IList.Remove(Object)
  fullName: System.Web.UI.WebControls.TableCellCollection.System.Collections.IList.Remove(Object)
- uid: System.Web.UI.WebControls.TableCellCollection.Add*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Add
  nameWithType: TableCellCollection.Add
- uid: System.Web.UI.WebControls.TableCellCollection.AddAt*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddAt
  nameWithType: TableCellCollection.AddAt
- uid: System.Web.UI.WebControls.TableCellCollection.AddRange*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: AddRange
  nameWithType: TableCellCollection.AddRange
- uid: System.Web.UI.WebControls.TableCellCollection.Clear*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Clear
  nameWithType: TableCellCollection.Clear
- uid: System.Web.UI.WebControls.TableCellCollection.CopyTo*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: CopyTo
  nameWithType: TableCellCollection.CopyTo
- uid: System.Web.UI.WebControls.TableCellCollection.Count*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Count
  nameWithType: TableCellCollection.Count
- uid: System.Web.UI.WebControls.TableCellCollection.GetCellIndex*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetCellIndex
  nameWithType: TableCellCollection.GetCellIndex
- uid: System.Web.UI.WebControls.TableCellCollection.GetEnumerator*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: TableCellCollection.GetEnumerator
- uid: System.Web.UI.WebControls.TableCellCollection.IsReadOnly*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: TableCellCollection.IsReadOnly
- uid: System.Web.UI.WebControls.TableCellCollection.IsSynchronized*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: TableCellCollection.IsSynchronized
- uid: System.Web.UI.WebControls.TableCellCollection.Item*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Item
  nameWithType: TableCellCollection.Item
- uid: System.Web.UI.WebControls.TableCellCollection.Remove*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: Remove
  nameWithType: TableCellCollection.Remove
- uid: System.Web.UI.WebControls.TableCellCollection.RemoveAt*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: RemoveAt
  nameWithType: TableCellCollection.RemoveAt
- uid: System.Web.UI.WebControls.TableCellCollection.SyncRoot*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: SyncRoot
  nameWithType: TableCellCollection.SyncRoot
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Add*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: TableCellCollection.System.Collections.IList.Add
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Contains*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: TableCellCollection.System.Collections.IList.Contains
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IndexOf*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: TableCellCollection.System.Collections.IList.IndexOf
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Insert*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: TableCellCollection.System.Collections.IList.Insert
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#IsFixedSize*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: TableCellCollection.System.Collections.IList.IsFixedSize
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Item*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: TableCellCollection.System.Collections.IList.Item
- uid: System.Web.UI.WebControls.TableCellCollection.System#Collections#IList#Remove*
  parent: System.Web.UI.WebControls.TableCellCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: TableCellCollection.System.Collections.IList.Remove
