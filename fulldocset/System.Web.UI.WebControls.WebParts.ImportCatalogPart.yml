### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  id: ImportCatalogPart
  children:
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  langs:
  - csharp
  name: ImportCatalogPart
  nameWithType: ImportCatalogPart
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  type: Class
  summary: "Importa um arquivo de descrição de um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle (ou outro controle de servidor ASP.NET usado como um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle), de modo que os usuários podem adicionar o controle para uma página da Web com configurações predefinidas. Essa classe não pode ser herdada."
  remarks: "O controle ImportCatalogPart permite que os usuários importar um arquivo de descrição que descreve as configurações em um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle ou controle de servidor que um usuário deseja adicionar a um <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       Depois que um usuário importa um arquivo de descrição, o <xref:System.Web.UI.WebControls.WebParts.WebPart>referenciado no arquivo de controle aparece dentro do controle ImportCatalogPart e um usuário pode adicionar o controle para a página.</xref:System.Web.UI.WebControls.WebParts.WebPart>       O arquivo de descrição não é o mesmo que o próprio controle. É um arquivo XML que termina com um. Extensão de Web Part e contém pares de nome/valor – principalmente valores de propriedade – que descrevem o estado do controle. O arquivo de descrição é criado de acordo com um formato XML especificado, conforme descrito no tópico [controle de Web Parts descrição arquivos](~/add/includes/ajax-current-ext-md.md).       Para que o arquivo de descrição refere-se ao controle, ele pode ser compilado em um assembly, ou pode ser um controle de usuário definido em um arquivo. ascx. Em ambos os casos, o controle referenciado em um arquivo de descrição importado deve existir no servidor Web que hospeda a página que está tentando importar o controle. O arquivo de descrição faz referência a controle nome e o assembly (ou arquivo) que contém o controle e o arquivo de descrição contém as configurações que afetam os valores de propriedade, a aparência e o comportamento do controle.       O controle de ImportCatalogPart permite que os usuários compartilhem as configurações em controles. Um controle complexo pode ter muitas propriedades e configurações. Por exemplo, em um site de intranet típico de uma grande empresa, um personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart>controle pode conter um número de propriedades que contêm valores específicos do ambiente dos usuários, como suas conexões de banco de dados, informações departamentais e assim por diante.</xref:System.Web.UI.WebControls.WebParts.WebPart> O controle também pode conter um número de propriedades que afetam sua aparência. Um usuário pode personalizar o controle em um site específico e fazê-lo funcionar corretamente, exportar um arquivo de descrição para o controle e, em seguida, compartilhe o arquivo de descrição com outros usuários, o que foi possível importar o arquivo para adicionar o controle totalmente configurado para outros sites de intranet que eles têm permissão para personalizar. Como o assembly compilado ou o arquivo de controle de usuário que contém o controle existe no servidor Web que está hospedando o seu site, os usuários podem adicionar o controle para outros sites da Web.       O mecanismo pelo qual os usuários importar um arquivo de descrição (e, portanto, controlar o seu servidor associado) em uma página da Web é o controle de ImportCatalogPart, um desenvolvedor de página deve adicionar a uma página da Web. Quando um usuário alterna a página para o modo de exibição de catálogo, o controle ImportCatalogPart aparece e o usuário pode usar este controle para navegar até o. Arquivo de descrição de Web Part correspondente para o controle de servidor que desejam importar. A interface do usuário e as instruções a seguir fornecidas pelo controle ImportCatalogPart, um usuário é capaz de adicionar o controle de servidor desejado na página da Web, com sua aparência e propriedades totalmente configuradas conforme especificado no arquivo de descrição importado.       Antes de um <xref:System.Web.UI.WebControls.WebParts.WebPart>arquivo de descrição do controle pode ser importado, um usuário deve primeiro criar (exportar) o arquivo com base em uma <xref:System.Web.UI.WebControls.WebParts.WebPart>controle.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Um arquivo de descrição pode ser exportado para um controle se as seguintes condições forem atendidas:-o controle tiver propriedades marcadas com o `Personalizable` atributo.      -O arquivo Web. config tem o `enableExport` valor definido como atributo `true` no `<webParts>` elemento.      -Um desenvolvedor define o valor da <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>propriedade no controle para um valor diferente do valor padrão de <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, que proíbe de exportação.</xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> Se o <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>o valor da propriedade é definido como <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, qualquer propriedade que contém um <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A>parâmetro com um `Personalizable` atributo não é exportado quando um usuário exportar um arquivo de descrição.</xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> Isso permite que os desenvolvedores de controle impedir que os dados confidenciais, como cadeias de caracteres de conexão, que está sendo exportado em determinadas situações.       Um usuário pode exportar um controle que tenha sido habilitado para exportação clicando o verbo de exportação que é exibido no menu de verbos do controle e seguindo as instruções para salvar um. Arquivo de descrição de Web Part para o controle. Outros usuários, em seguida, podem importar esse arquivo para configurar suas próprias instâncias do controle.       A classe ImportCatalogPart contém várias propriedades. O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>propriedade contém o texto com instruções para os usuários quando eles procuram para localizar o arquivo de descrição.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>propriedade contém o texto que serve como um rótulo para o controle importado como ele aparece dentro do controle ImportCatalogPart.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>contém o texto que será exibido se um erro ocorre quando uma descrição do controle está sendo importada.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>propriedade substitui a propriedade base para atribuir um título padrão para um controle ImportCatalogPart se o desenvolvedor não atribuir um título.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>propriedade contém o texto do botão que o usuário clica para carregar o arquivo de descrição, e o <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>propriedade contém as instruções para o processo de carregamento.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>       A classe ImportCatalogPart também contém vários métodos exclusivos. O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>método retorna um <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>objeto para cada <xref:System.Web.UI.WebControls.WebParts.WebPart>controle no catálogo, que permite que um controle ImportCatalogPart exibir informações sobre cada controle de servidor sem a necessidade de criar uma instância do proprietário.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> O <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>método obtém uma instância de um determinado <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, com base na descrição do passado para o método.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>       Há alguns riscos inerentes associados usando o controle ImportCatalogPart. Um exemplo é a possibilidade de importar dados mal-intencionados para seu aplicativo da Web através dos arquivos de descrição usados para importar. Se alguém tiver colocado código mal-intencionado no script como o valor de uma propriedade de cadeia de caracteres no arquivo de descrição, em seguida, esse script pode ser potencialmente executado quando um usuário importa o arquivo de descrição e adiciona o controle de servidor referenciado a uma página da Web. Para minimizar o risco de importar arquivos de descrição com dados mal-intencionados, controles de servidor que possuem propriedades do tipo cadeia de caracteres devem sempre codificar os dados da propriedade. Outro risco envolve a importação de tipos através dos arquivos de descrição (consulte [controle de Web Parts descrição arquivos](../Topic/Web%20Parts%20Control%20Description%20Files.md)). Um usuário mal-intencionado poderia enviar solicitações para carregar vários assemblies para o <xref:System.AppDomain>, resultando em uma quantidade excessiva de memória sendo consumida.</xref:System.AppDomain>       Para evitar os riscos associados à importação, você pode desabilitar o recurso completamente por não usar o recurso de importação ou controle ImportCatalogPart. Ou você pode limitar quais usuários têm acesso ao controle. Você pode fazer isso programaticamente, usando o gerenciamento de função (consulte [Gerenciando autorização usando funções](~/add/includes/ajax-current-ext-md.md)). Por exemplo, quando a página for carregada, você pode testar para ver se um usuário está em uma determinada função, como a função de administrador. Se o usuário está na função, você pode adicionar programaticamente o controle ImportCatalogPart até a página para esse usuário. Você também pode usar uma abordagem declarativa para limitar o conjunto de usuários que pode usar o controle ImportCatalogPart.  Na página da web que contém um catálogo, você pode colocar dois <xref:System.Web.UI.WebControls.WebParts.CatalogZone>controles: um para os usuários que podem importar e outro para aqueles que não é possível.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> A zona para os usuários que podem importar conteria o controle ImportCatalogPart. A zona pode ser colocada dentro de um <xref:System.Web.UI.WebControls.LoginView>controle, que permitem que você limite o uso do controle na zona para somente aqueles autenticados usuários ou funções que você especificar.</xref:System.Web.UI.WebControls.LoginView>"
  example:
  - "The following code example demonstrates how to use the ImportCatalogPart control declaratively and programmatically on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an ImportCatalogPart control.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that the page has a declarative reference to the ImportCatalogPart control, nested within the proper hierarchy of declarative elements. Notice also that several property values are assigned declaratively on the `<asp:importcatalogpart>` element. Also, the `Button1_Click` method updates a number of property values on the ImportCatalogPart control.  \n  \n In the page's <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls are declared. The `<aspSample:userinfowebpart>` control has an `exportmode=\"all\"` attribute on it. This attribute is required to enable users to export a description file for the control, which can then be imported by other users who wish to import the control using the description file.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that some properties on these controls are marked with the `WebBrowsable` attribute. This enables the <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> control to dynamically generate the user interface (UI) for a user to edit those properties when the controls are in edit mode. The properties are also marked with a `WebDisplayName` attribute, to specify the text of the label that appears next to each control in the editing UI. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n The custom control called `TextDisplayWebPart` is referenced on the Web page with an `<aspSample:TextDisplayWebPart>` element. The other control, called `UserInfoWebPart`, is also declared on the Web page initially, though you will remove it later to demonstrate the ability to import a description file for a control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is to edit the `UserInfoWebPart` control. Use the **Display Mode** drop-down list control and select **Edit** to switch the page to edit mode. Click the verbs menu of the `UserInfoWebPart` control (the downward arrow in the title bar), and then click **Edit**. When the editing UI appears, several editing controls appear below the `UserInfoWebPart` control that you can use to edit its field values. Edit some fields, click **OK**, and then use the **Display Mode** drop-down to return the page to browse mode.  \n  \n The second step is to export a .WebPart description file for the `UserInfoWebPart` control. Click the verbs menu on the custom control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. Now close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` control declaration element, then save and close the file. (You are doing this step to simulate a user who does not yet have the `UserInfoWebPart` control, so you can import the control to the page).  \n  \n Load the Web page again in a browser. The `UserInfoWebPart` control should not appear, because you removed it. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the ImportCatalogPart control, click the **Browse** button, and browse to the .WebPart file you created, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page.  \n  \n While you are in this view of the page, click the **Update ImportCatalogPart** button near the bottom of the page to see the effect of programmatically updating a number of property values on the ImportCatalogPart control. After clicking the button, observe how the various properties are changed in the UI.  \n  \n Finally, click **Close** to exit catalog mode and return the page to browse mode. The `UserInfoWebPart` control should now appear in the page, containing the values that it had when you exported it earlier."
  syntax:
    content: 'public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart'
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  - System.Web.UI.WebControls.Panel
  - System.Web.UI.WebControls.WebParts.Part
  - System.Web.UI.WebControls.WebParts.CatalogPart
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  - System.Web.UI.WebControls.Panel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.BackImageUrl
  - System.Web.UI.WebControls.Panel.CreateControlStyle
  - System.Web.UI.WebControls.Panel.Direction
  - System.Web.UI.WebControls.Panel.GroupingText
  - System.Web.UI.WebControls.Panel.HorizontalAlign
  - System.Web.UI.WebControls.Panel.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.ScrollBars
  - System.Web.UI.WebControls.Panel.SupportsDisabledAttribute
  - System.Web.UI.WebControls.Panel.Wrap
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.SaveViewState
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagKey
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.TrackViewState
  - System.Web.UI.WebControls.WebControl.Width
  - System.Web.UI.WebControls.WebParts.CatalogPart.DisplayTitle
  - System.Web.UI.WebControls.WebParts.CatalogPart.GetDesignModeState
  - System.Web.UI.WebControls.WebParts.CatalogPart.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.CatalogPart.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.WebControls.WebParts.CatalogPart.WebPartManager
  - System.Web.UI.WebControls.WebParts.CatalogPart.Zone
  - System.Web.UI.WebControls.WebParts.Part.ChromeState
  - System.Web.UI.WebControls.WebParts.Part.ChromeType
  - System.Web.UI.WebControls.WebParts.Part.Controls
  - System.Web.UI.WebControls.WebParts.Part.DataBind
  - System.Web.UI.WebControls.WebParts.Part.Description
  - System.Web.UI.WebControls.WebParts.Part.System#Web#UI#WebControls#ICompositeControlDesignerAccessor#RecreateChildControls
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: ImportCatalogPart()
  nameWithType: ImportCatalogPart.ImportCatalogPart()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.ImportCatalogPart&quot;> </xref> classe."
  remarks: "O construtor ImportCatalogPart é um padrão. Nenhum construtor está declarado no <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>classe e tarefas especiais, portanto, não são executadas quando uma nova instância da classe é criada.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> O .NET Framework usa o construtor internamente para criar uma instância da classe.       Normalmente você não precisará usar o construtor de ImportCatalogPart programaticamente em seu próprio código. O uso pretendido do controle é para desenvolvedores de página para adicioná-lo a uma página de forma declarativa em tempo de design."
  syntax:
    content: public ImportCatalogPart ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  id: BrowseHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define uma mensagem de texto que faz com que os usuários para navegar até o local de um arquivo de descrição."
  remarks: 'A propriedade BrowseHelpText fornece aos usuários uma simples visão geral do que a primeira coisa que eles devem fazer no processo de adição de um controle importado: fornecer o local de um arquivo de descrição, digitando um caminho ou navegando até o arquivo. Um motivo comum para fornecer um valor personalizado para essa propriedade é se você tiver as instruções especiais para usuários, como um compartilhamento de rede específico para o qual deve procurar para localizar um arquivo de descrição.'
  example:
  - "The following code example demonstrates how to use the BrowseHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the BrowseHelpText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_1.aspx)]  \n  \n In this section of code, the BrowseHelpText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the BrowseHelpText property."
  syntax:
    content: public string BrowseHelpText { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o texto da mensagem. O valor padrão é uma mensagem específica da cultura fornecida pelo .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  id: CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: CreateChildControls()
  nameWithType: ImportCatalogPart.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void CreateChildControls ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  id: DefaultButton
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o botão na interface do usuário (UI) é tratado como botão padrão que recebe o foco quando o formulário que contém o botão é renderizado. Essa propriedade não se destina a ser chamado no código do desenvolvedor de página."
  remarks: "O código para essa propriedade substitui a propriedade base herdada do <xref:System.Web.UI.WebControls.Panel>classe para ocultar a propriedade de designers e impedir que sejam afetados por temas.</xref:System.Web.UI.WebControls.Panel> Embora seja público, essa propriedade é usada internamente pelo controle Web Parts definido para a renderização padrão deste controle e não se destina a ser usado por desenvolvedores de página.       Essa propriedade não pode ser definida por temas ou temas de folha de estilo. Para obter mais informações, consulte <xref:System.Web.UI.ThemeableAttribute>e [capas e temas do ASP.NET](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.ThemeableAttribute>"
  syntax:
    content: public override string DefaultButton { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém a ID do <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref> que recebe o foco padrão em um <xref href=&quot;System.Web.UI.WebControls.Panel&quot;> </xref> controle."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  id: GetAvailableWebPartDescriptions
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: GetAvailableWebPartDescriptions()
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retorna uma coleção de descrições disponíveis do <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controles em um catálogo."
  remarks: "O método GetAvailableWebPartDescriptions fornece uma implementação do método de base abstrata declarado na <xref:System.Web.UI.WebControls.WebParts.CatalogPart>classe.</xref:System.Web.UI.WebControls.WebParts.CatalogPart> O método GetAvailableWebPartDescriptions retorna informações de descrição de cada controle em um catálogo. Observe que no caso de um <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>controlar, pode haver apenas um servidor controle no catálogo de cada vez, mesmo que o método funcionaria se houver vários controles.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>       Um <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>objeto é um objeto que contém informações essenciais sobre um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle, incluindo sua ID, uma referência de objeto para o controle e os valores de várias propriedades importantes que são herdadas da <xref:System.Web.UI.WebControls.WebParts.Part>classe, como <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>e <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.</xref:System.Web.UI.WebControls.WebParts.Part.Description%2A> </xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> </xref:System.Web.UI.WebControls.WebParts.Part> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartDescription>       O método GetAvailableWebPartDescriptions melhora o desempenho. Quando um catálogo é criado, ele precisa de algumas informações sobre cada controle que ele contém, inclusive um título, uma descrição, um ícone (se houver) e uma ID. Em vez de criar uma instância de cada controle para obter essas informações, um <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>zona que cria um catálogo de chama o método GetAvailableWebPartDescriptions, e a chamada retorna apenas as informações de descrição para o controle em vez de uma instância do controle.</xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>"
  example:
  - "The following code example demonstrates how to use the GetAvailableWebPartDescriptions method on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetAvailableWebPartDescriptions method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\"all\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetAvailableWebPartDescriptions method is called within the code for the `Button1_Click` method.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \n  \n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page. Repeat this process for the other control.  \n  \n While you are in this view of the page, click the **Get WebPart Description** button near the bottom of the page to see the effect of programmatically accessing the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. The method used to access the description details, found in the `Button1_Click` method of the page source, is the GetAvailableWebPartDescriptions method. A label below the button displays basic details about the control.  \n  \n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection&quot;> </xref> que contém um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> para cada controle em um catálogo."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  id: GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: GetWebPart(WebPartDescription)
  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retorna uma referência a um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle com base nos valores na descrição do passado para o método."
  remarks: "O método GetWebPart retorna uma referência a um <xref:System.Web.UI.WebControls.WebParts.WebPart>controle cujos detalhes de descrição correspondem aos valores do <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>objeto passado para o método.</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.WebPart> Normalmente, esse método é usado junto com o <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A>método, que é usado para recuperar as descrições dos controles no catálogo.</xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> Individuais <xref:System.Web.UI.WebControls.WebParts.WebPart>controles podem ser recuperados ou manipulados conforme necessário, passando individuais <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>objetos para o método GetWebPart.</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the GetWebPart method on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetWebPart method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\"all\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetWebPart method is called within the code for the `Button2_Click` method.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \n  \n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Now that the control description is uploaded to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Use GetWebPart** button near the bottom of the page. This will demonstrate the effect of calling the GetWebPart method and passing to it the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Note that the associated server control is added immediately to the Web page, without the user having to click the **Add** button. The GetWebPart method, which is called in the `Button2_Click` method of the page source, returns the <xref:System.Web.UI.WebControls.WebParts.WebPart> control associated with the current description that is loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Next the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> method is called, and the <xref:System.Web.UI.WebControls.WebParts.WebPart> control is directly added to the page. This demonstrates how to add a control programmatically from the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control without user intervention.  \n  \n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);
    parameters:
    - id: description
      type: System.Web.UI.WebControls.WebParts.WebPartDescription
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> que contém detalhes sobre o controle."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controle cuja descrição corresponde aos valores no <code> description </code>."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>description</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>description</code>Não há um <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> valor."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  id: ImportedPartLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o texto exibido após um usuário importar um arquivo de descrição para representar ou descrever o controle importado no catálogo de controles importados."
  remarks: "A propriedade ImportedPartLabelText normalmente é usada para conter um rótulo curto, geral que descreve o controle no <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>controle.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>"
  example:
  - "The following code example demonstrates how to use the ImportedPartLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the ImportedPartLabelText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_1.aspx)]  \n  \n In this section of code, the ImportedPartLabelText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the ImportedPartLabelText property."
  syntax:
    content: public string ImportedPartLabelText { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o texto do rótulo. O valor padrão é uma mensagem específica da cultura fornecida pelo .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: ImportCatalogPart.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "A ser adicionado."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ImportCatalogPart.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "A ser adicionado."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  id: PartImportErrorLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define uma mensagem de erro será exibida se ocorrer um erro durante o processo de importação."
  remarks: "A propriedade PartImportErrorLabelText é útil para notificar o usuário se algum problema ou erro ocorrer enquanto a página tenta importar um arquivo de descrição."
  example:
  - "The following code example demonstrates how to use the PartImportErrorLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the PartImportErrorLabelText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_1.aspx)]  \n  \n In this section of code, the PartImportErrorLabelText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the PartImportErrorLabelText property."
  syntax:
    content: public string PartImportErrorLabelText { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que contém o texto do rótulo. O valor padrão é uma mensagem específica da cultura fornecida pelo .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "A ser adicionado."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  id: RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: RenderContents(HtmlTextWriter)
  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "A ser adicionado."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: ImportCatalogPart.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "A ser adicionado."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  id: Title
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: Title
  nameWithType: ImportCatalogPart.Title
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o título que aparece na barra de título de um <xref href=&quot;System.Web.UI.WebControls.WebParts.ImportCatalogPart&quot;> </xref> controle."
  remarks: "O valor da propriedade Title é exibido na barra de título de um <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>controlar quando o controle está visível no modo de catálogo.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> Quando o controle for declarado em uma página, você pode definir um valor para a propriedade usando o `Title` atributo. Se você não fornecer um valor para o título, um valor específico da cultura padrão é usado para descrever o tipo de propriedades que esse controle permite que os usuários editem."
  example:
  - "The following code example demonstrates how to use the Title property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the Title property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_1.aspx)]  \n  \n In this section of code, the Title property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the Title property."
  syntax:
    content: public override string Title { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada como o título do controle. O valor padrão é um nome de controle calculado fornecidas pelo conjunto de controle de Web Parts."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  id: UploadButtonText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o texto para o <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref> controle que inicia o carregamento de um arquivo de descrição."
  remarks: "A propriedade UploadButtonText fornece o texto para o <xref:System.Web.UI.WebControls.Button>controle que inicia o processo de carregamento.</xref:System.Web.UI.WebControls.Button> Se você atribuir texto personalizado para essa propriedade, ou o <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>propriedade, o texto deve deixar claro que o usuário está carregando um arquivo de descrição.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> O texto não deve dizer ou implica que o processo de carregamento está carregando, na verdade, o próprio controle."
  example:
  - "The following code example demonstrates how to use the UploadButtonText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the UploadButtonText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_1.aspx)]  \n  \n In this section of code, the UploadButtonText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadButtonText property."
  syntax:
    content: public string UploadButtonText { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada como o texto para um <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref>. O valor padrão é uma cadeia de caracteres específicas da cultura fornecida pelo conjunto de controle de Web Parts."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  id: UploadHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém ou define o texto da mensagem que informa ao usuário como carregar um arquivo de descrição."
  remarks: "A propriedade UploadHelpText fornece uma breve frase ou frase de instruções para os usuários, informando que eles cliquem em um botão para carregar o arquivo de descrição. Se você atribuir texto personalizado para essa propriedade, ou o <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>propriedade, o texto deve deixar claro que o usuário está carregando um arquivo de descrição.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> O texto não deve dizer ou implica que o processo de carregamento está carregando, na verdade, o próprio controle."
  example:
  - "The following code example demonstrates how to use the UploadHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the UploadHelpText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_1.aspx)]  \n  \n In this section of code, the UploadHelpText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadHelpText property."
  syntax:
    content: public string UploadHelpText { get; set; }
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é usada como instruções para o usuário para carregar um arquivo de descrição. O valor padrão é uma cadeia de caracteres específicas da cultura fornecida pelo conjunto de controle de Web Parts."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.CatalogPart
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.CatalogPart
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportCatalogPart()
  nameWithType: ImportCatalogPart.ImportCatalogPart()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: CreateChildControls()
  nameWithType: ImportCatalogPart.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetAvailableWebPartDescriptions()
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()
- uid: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDescriptionCollection
  nameWithType: WebPartDescriptionCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetWebPart(WebPartDescription)
  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartDescription
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDescription
  nameWithType: WebPartDescription
  fullName: System.Web.UI.WebControls.WebParts.WebPartDescription
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: ImportCatalogPart.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ImportCatalogPart.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: RenderContents(HtmlTextWriter)
  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: SaveControlState()
  nameWithType: ImportCatalogPart.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Title
  nameWithType: ImportCatalogPart.Title
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportCatalogPart
  nameWithType: ImportCatalogPart.ImportCatalogPart
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: CreateChildControls
  nameWithType: ImportCatalogPart.CreateChildControls
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetAvailableWebPartDescriptions
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetWebPart
  nameWithType: ImportCatalogPart.GetWebPart
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: LoadControlState
  nameWithType: ImportCatalogPart.LoadControlState
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: OnInit
  nameWithType: ImportCatalogPart.OnInit
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Render
  nameWithType: ImportCatalogPart.Render
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: RenderContents
  nameWithType: ImportCatalogPart.RenderContents
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: SaveControlState
  nameWithType: ImportCatalogPart.SaveControlState
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Title
  nameWithType: ImportCatalogPart.Title
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
