### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityToken
  id: SecurityToken
  children:
  - System.IdentityModel.Tokens.SecurityToken.#ctor
  - System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.Id
  - System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  - System.IdentityModel.Tokens.SecurityToken.ValidFrom
  - System.IdentityModel.Tokens.SecurityToken.ValidTo
  langs:
  - csharp
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
  type: Class
  summary: "Representa uma classe base usada para implementar todos os tokens de segurança."
  remarks: "Use um token de segurança para fornecer credenciais de autenticação ou para proteger uma mensagem.       Um token de segurança pode ser usado para fornecer credenciais de autenticação, o material de chave de criptografia, ou, no caso de um token de segurança emitido por um serviço de token segurança (STS), um conjunto de declarações sobre um assunto. Todos os tokens de segurança é derivado da classe SecurityToken.       Começando com o .NET 4.5, Windows Identity Foundation (WIF) foi totalmente integrado ao .NET Framework e as classes expostas pelo WIF são o método preferencial de manipulação de tokens de segurança em seu código. No WIF, tokens de segurança são serializados e desserializados para e de seu XML representação e são validados usando classes derivadas da <xref:System.IdentityModel.Tokens.SecurityTokenHandler>classe de base</xref:System.IdentityModel.Tokens.SecurityTokenHandler> Validar um token envolve não apenas garantindo que o token seja válido, mas também retornando um <xref:System.Security.Claims.ClaimsIdentity>instância do token que pode ser usado na tomada de decisões de autenticação e autorização.</xref:System.Security.Claims.ClaimsIdentity> O <xref:System.Security.Claims.ClaimsIdentity>é construído pela implementação do manipulador de token do <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>método de declarações contidas no token como bem como declarações que são intrínsecas para o token de tipo em si.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> </xref:System.Security.Claims.ClaimsIdentity>       O WIF é fornecido com suporte para os seguintes tipos de tokens de segurança:- <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: representa um token de segurança que baseia-se uma asserção do SAML 2.0.</xref:System.IdentityModel.Tokens.Saml2SecurityToken> Normalmente, esse tipo de token é emitido por um serviço de token de segurança em resposta a uma solicitação token (primeira) WS-Trust ou WS-Federation segurança.      - <xref:System.IdentityModel.Tokens.SamlSecurityToken>: Representa um token de segurança que baseia-se uma asserção de SAML 1.1.</xref:System.IdentityModel.Tokens.SamlSecurityToken> Normalmente, esse tipo de token é emitido por um serviço de token de segurança em resposta a uma solicitação token (primeira) WS-Trust ou WS-Federation segurança.      - <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>e <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: representa um token de segurança que é baseado em um tíquete Kerberos que é recebido ou enviado em uma mensagem SOAP - <xref:System.IdentityModel.Tokens.RsaSecurityToken>: representa um token de segurança com base na chave que é criado usando o algoritmo RSA.</xref:System.IdentityModel.Tokens.RsaSecurityToken> </xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken> </xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>      - <xref:System.IdentityModel.Tokens.SessionSecurityToken>: Representa um token de segurança que contém informações sobre uma sessão.</xref:System.IdentityModel.Tokens.SessionSecurityToken>      - <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: Representa um token de segurança com base em um nome de usuário e senha.</xref:System.IdentityModel.Tokens.UserNameSecurityToken>      - <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Representa um token de segurança com base na identidade de uma conta de domínio ou usuário do Windows.</xref:System.IdentityModel.Tokens.WindowsSecurityToken>      - <xref:System.IdentityModel.Tokens.X509SecurityToken>: Representa um token de segurança que se baseia em um certificado x.&509;.</xref:System.IdentityModel.Tokens.X509SecurityToken>      - <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Representa um token de segurança que baseia-se um certificado x.&509; que é mapeado para um usuário de domínio do Windows ou a conta de usuário do computador local.</xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>       Duas outras classes de token de segurança, <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>e <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>, pode ser usado para ajudar a manipular casos gerais.</xref:System.IdentityModel.Tokens.EncryptedSecurityToken> </xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>       Amplamente falando tokens de segurança se enquadram em três categorias principais:-material de chave de Tokens que executar ou fazer referência a criptografia. Por exemplo o <xref:System.IdentityModel.Tokens.RsaSecurityToken>e <xref:System.IdentityModel.Tokens.X509SecurityToken>tipos são geralmente usados para essa finalidade.</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.RsaSecurityToken>      -Tokens que representam as credenciais para usuários que já foi autenticados. Por exemplo, o <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, <xref:System.IdentityModel.Tokens.WindowsSecurityToken>e, no caso de um usuário autenticado usando um certificado, o <xref:System.IdentityModel.Tokens.X509SecurityToken>tipos.</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.WindowsSecurityToken> </xref:System.IdentityModel.Tokens.UserNameSecurityToken>      -Tokens emitidos por um serviço de token de segurança (STS) em resposta a uma solicitação de token de segurança usando o protocolo WS-Federation ou WS-Trust. Normalmente, esses são retornados em um `wst:RequestSecurityTokenResponse` fragmento XML. O <xref:System.IdentityModel.Tokens.Saml2SecurityToken>e <xref:System.IdentityModel.Tokens.SamlSecurityToken>tipos são geralmente usados para representar esses tokens.</xref:System.IdentityModel.Tokens.SamlSecurityToken> </xref:System.IdentityModel.Tokens.Saml2SecurityToken>       Um tipo especial de token, o <xref:System.IdentityModel.Tokens.SessionSecurityToken>, contém informações necessárias para recriar uma entidade de segurança ao usar sessões em cenários de ativos ou passivos.</xref:System.IdentityModel.Tokens.SessionSecurityToken>       Para adicionar funcionalidade a tipos de token existentes, que você pode derivar o tipo específico e seu manipulador de token associada para oferecer suporte a quaisquer novos elementos que você adicionar ao token. Para adicionar suporte para novos tipos de token, você pode derivar diretamente da classe SecurityToken. Quando você fizer isso, você também precisará criar uma classe de manipulador de token derivando de <xref:System.IdentityModel.Tokens.SecurityTokenHandler>classe.</xref:System.IdentityModel.Tokens.SecurityTokenHandler> Dependendo de como seu token será usada, também convém criar um resolvedor de token personalizado derivando a <xref:System.IdentityModel.Tokens.IssuerTokenResolver>classe, bem como um ou mais tipos de cláusula de identificador de chave personalizado derivando de <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>classe.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> </xref:System.IdentityModel.Tokens.IssuerTokenResolver>"
  example:
  - "The code examples that are used in the SecurityToken topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the implementation of the `SimpleWebToken` class. This class extends SecurityToken.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#2](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#2)]"
  syntax:
    content: public abstract class SecurityToken
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Chamado pelos construtores em classes derivadas para inicializar o <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> classe."
  syntax:
    content: protected SecurityToken ();
    parameters: []
  overload: System.IdentityModel.Tokens.SecurityToken.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  id: CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual bool CanCreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: System.Boolean
      description: "A ser adicionado."
  overload: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  id: CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual T CreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: T
      description: "A ser adicionado."
  overload: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  id: Id
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um identificador exclusivo do token de segurança."
  remarks: "Normalmente, quando um token de segurança é serializado em XML, o `Id` para o token de segurança é definido como o valor da propriedade de Id de atributo."
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the Id property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#4](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#4)]"
  syntax:
    content: public abstract string Id { get; }
    return:
      type: System.String
      description: "O identificador exclusivo do token de segurança."
  overload: System.IdentityModel.Tokens.SecurityToken.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Retorna um valor que indica se o identificador de chave para essa instância pode ser resolvido para o identificador de chave especificado."
  remarks: "A implementação padrão oferece suporte a cláusulas de identificador de chave de tipo<xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause></xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>"
  syntax:
    content: public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "Um <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> para comparar a esta instância."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> keyIdentifierClause </code> é um <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> e tem o mesmo identificador exclusivo que o <xref:System.IdentityModel.Tokens.SecurityToken.Id*>propriedade; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityToken.Id*>"
  overload: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém a chave para a cláusula de identificador de chave especificado."
  remarks: "As chamadas de método ResolveKeyIdentifierClause o <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>primeiro determinar se a cláusula de identificador de chave especificado é o mesmo que essa instância.</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>       A implementação padrão retorna o primeiro elemento do <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>coleção se a coleção não está vazia e se <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>retorna `true`; caso contrário, ele retorna `null`.</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> </xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "Um <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> para obter a chave."
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "Um <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> que representa a chave."
  overload: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  id: SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém as chaves criptográficas associadas ao token de segurança."
  remarks: "Use o <xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A>propriedade para definir as chaves de criptografia para este token de segurança proteger uma mensagem SOAP ou tokens.</xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> As chaves podem ser usadas, entre outras coisas, para assinar digitalmente ou criptografar tokens ou mensagens SOAP."
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the SecurityKeys property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#5](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#5)]"
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey> SecurityKeys { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
      description: "Um &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; do tipo <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> que contém o conjunto de chaves associadas com o token de segurança."
  overload: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  id: ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o primeiro instantâneo na hora em que esse token de segurança é válido."
  remarks: "Use o ValidFrom e <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>Propriedades para determinar o período de tempo no qual um <xref:System.IdentityModel.Tokens.SecurityToken>token é válido.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> ValidFrom e <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>propriedades representam os primeiro e o últimos instants na hora em que o token de segurança é válido, respectivamente.</xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidFrom property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#6](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#6)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidFrom { get; }
    return:
      type: System.DateTime
      description: "Um <xref:System.DateTime>que representa o momento no tempo em que esse token de segurança primeiro é válido.</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  id: ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o último no momento em que esse token de segurança é válido."
  remarks: "Use o <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>e ValidTo propriedades para determinar o período de tempo no qual um <xref:System.IdentityModel.Tokens.SecurityToken>token é válido.</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> O <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>e ValidTo propriedades representam os primeiro e o últimos instants na hora em que o token de segurança é válido, respectivamente.</xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidTo property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#7](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#7)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidTo { get; }
    return:
      type: System.DateTime
      description: "Um <xref:System.DateTime>que representa o último no momento em que esse token de segurança é válido.</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SecurityKey>
  nameWithType: ReadOnlyCollection<SecurityKey>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: SecurityKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.Id*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause
  nameWithType: SecurityToken.MatchesKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause
  nameWithType: SecurityToken.ResolveKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
