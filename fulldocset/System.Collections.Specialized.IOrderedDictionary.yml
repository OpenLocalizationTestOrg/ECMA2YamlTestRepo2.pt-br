### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.IOrderedDictionary
  id: IOrderedDictionary
  children:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
  type: Interface
  summary: "Representa uma coleção indexada de pares chave/valor."
  remarks: "Elementos de IOrderedDictionary podem ser acessados com a chave ou com o índice.       Cada elemento é um par chave/valor armazenado em um <xref:System.Collections.DictionaryEntry>estrutura.</xref:System.Collections.DictionaryEntry>       Cada par deve ter uma chave exclusiva que não seja `null`, mas o valor pode ser `null` e não precisa ser exclusivo. A interface IOrderedDictionary permite independente de chaves e valores a serem enumerados, mas isso não significa que uma ordem de classificação específica.       O `foreach` instrução de linguagem c# (`For Each` no Visual Basic) retorna um objeto do tipo dos elementos na coleção. Como cada elemento do <xref:System.Collections.IDictionary>é um par chave/valor, o tipo de elemento não é o tipo de chave ou o tipo do valor.</xref:System.Collections.IDictionary> Em vez disso, o tipo de elemento é <xref:System.Collections.DictionaryEntry>, como mostra o exemplo a seguir.</xref:System.Collections.DictionaryEntry>       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)][!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)][!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb) ] o `foreach` instrução é um wrapper em torno de enumerador, que permite que somente leitura de não gravar à coleção.    "
  example:
  - "The following code example demonstrates the implementation of a simple IOrderedDictionary based on the <xref:System.Collections.ArrayList> class. The implemented IOrderedDictionary stores first names as the keys and last names as the values, with the added requirement that each first name is unique.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/cpp/t-system.collections.spe_7_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/csharp/t-system.collections.spe_7_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/visualbasic/t-system.collections.spe_7_2.vb)]"
  syntax:
    content: 'public interface IOrderedDictionary : System.Collections.IDictionary'
  implements:
  - System.Collections.IDictionary
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Retorna um enumerador que itera por meio de <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção."
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Portanto, usando `foreach` é recomendado em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. <xref:System.Collections.IEnumerator.Reset%2A>também traz o enumerador de volta para essa posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição, o <xref:System.Collections.IEnumerator.Current%2A>propriedade está definida.</xref:System.Collections.IEnumerator.Current%2A> Portanto, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A>retornado `false`, <xref:System.Collections.IEnumerator.Current%2A>é indefinido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido pelo <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente e seu comportamento é indefinido.       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de thread-safe.  Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração.  Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_15_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_15_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_15_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Um <xref:System.Collections.IDictionaryEnumerator>para todo o <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Insere um par chave/valor na coleção no índice especificado."
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.IOrderedDictionary>       Se o `index` parâmetro for igual ao <xref:System.Collections.ICollection.Count%2A>, o `value` parâmetro é adicionado ao final do <xref:System.Collections.Specialized.IOrderedDictionary>coleção.</xref:System.Collections.Specialized.IOrderedDictionary> </xref:System.Collections.ICollection.Count%2A>       Coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção se mover para baixo para acomodar o novo elemento. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções em que elementos são conceitualmente agrupados, como uma tabela de hash."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/36355794-2a11-4b04-824e-_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/36355794-2a11-4b04-824e-_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/36355794-2a11-4b04-824e-_1.vb)]"
  syntax:
    content: public void Insert (int index, object key, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero no qual o par chave/valor deve ser inserido."
    - id: key
      type: System.Object
      description: "O objeto a ser usado como a chave do elemento para adicionar."
    - id: value
      type: System.Object
      description: "O objeto a ser usado como o valor do elemento para adicionar.  O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.IOrderedDictionary.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que 0.       - ou - <code>index</code> é maior do que <xref:System.Collections.ICollection.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Um elemento com a mesma chave já existe no <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção é somente leitura.       - ou - <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém ou define o elemento no índice especificado."
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.Specialized.IOrderedDictionary>       A linguagem c# usa a palavra-chave para definir os indexadores em vez de implementar a propriedade do Item. Visual Basic implementa um Item como uma propriedade padrão, que fornece a mesma funcionalidade de indexação.       Esta propriedade permite que você acesse um elemento específico na coleção usando a sintaxe a seguir: [!code-cs [System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)][!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)][!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04    ](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/p-system.collections.spe_12_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/p-system.collections.spe_12_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/p-system.collections.spe_12_2.vb)]"
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero do elemento a ser obtido ou definido."
    return:
      type: System.Object
      description: "O elemento no índice especificado."
  overload: System.Collections.Specialized.IOrderedDictionary.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que 0.       - ou - <code>index</code> é maior ou igual a <xref:System.Collections.ICollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove o elemento no índice especificado."
  remarks: "Coleções de elementos de contíguos, como listas, os elementos que seguem o elemento removido mover para cima para ocupar o ponto vagas. Se a coleção é indexada, os índices dos elementos que são movidos também são atualizados. Esse comportamento não se aplica às coleções em que elementos são conceitualmente agrupados, como uma tabela de hash."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_23_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_23_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_23_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice com base em zero do elemento a ser removido."
  overload: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que 0.       - ou - <code>index</code> é maior ou igual a <xref:System.Collections.ICollection.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção é somente leitura.       - ou - <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> coleção tem um tamanho fixo."
  platform:
  - net462
references:
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: IOrderedDictionary.GetEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert
  nameWithType: IOrderedDictionary.Insert
- uid: System.Collections.Specialized.IOrderedDictionary.Item*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item
  nameWithType: IOrderedDictionary.Item
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt
  nameWithType: IOrderedDictionary.RemoveAt
