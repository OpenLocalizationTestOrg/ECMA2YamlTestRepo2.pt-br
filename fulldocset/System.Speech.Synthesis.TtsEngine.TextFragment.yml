### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.TtsEngine.TextFragment
  id: TextFragment
  children:
  - System.Speech.Synthesis.TtsEngine.TextFragment.#ctor
  - System.Speech.Synthesis.TtsEngine.TextFragment.State
  - System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  - System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  - System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  langs:
  - csharp
  name: TextFragment
  nameWithType: TextFragment
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment
  type: Class
  summary: "Contém informações de atributo de texto e fala para consumo pelo mecanismo de synthsizer de fala."
  remarks: "A infraestrutura da plataforma de fala descompacta a estrutura XML com base do SSML de entrada e cria objetos TextFragment.       Conteúdo de fala está disponível por meio de <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, e <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>Propriedades de uma instância de TextFragment.</xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> </xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> </xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>       Fala de atributo informações, como ênfase, densidade e a taxa, são obtidas no <xref:System.Speech.Synthesis.TtsEngine.FragmentState>objeto retornado pelo TextFragment<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> propriedade.</xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> </xref:System.Speech.Synthesis.TtsEngine.FragmentState>"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of TextFragment, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of TextFragment instances and creates a new array of TextFragment instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original TextFragment when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new TextFragment instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each TextFragment instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified TextFragment array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public class TextFragment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextFragment()
  nameWithType: TextFragment.TextFragment()
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextFragment()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Constrói uma nova instância da <xref uid=&quot;langword_csharp_TextFragment&quot; name=&quot;TextFragment&quot; href=&quot;&quot;> </xref>."
  remarks: "Construtor padrão para <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.</xref:System.Speech.Synthesis.TtsEngine.TextFragment>"
  syntax:
    content: public TextFragment ();
    parameters: []
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State
  id: State
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: State
  nameWithType: TextFragment.State
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.State
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Obtém ou define informações de atributo de fala de um <xref uid=&quot;langword_csharp_TextFragment&quot; name=&quot;TextFragment&quot; href=&quot;&quot;> </xref>."
  remarks: "O valor padrão dessa propriedade é `null`.       Prosody informações podem ser obtidas da instância do <xref:System.Speech.Synthesis.TtsEngine.Prosody>retornado pelo <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A>propriedade na instância do <xref:System.Speech.Synthesis.TtsEngine.FragmentState>retornado por estado.</xref:System.Speech.Synthesis.TtsEngine.FragmentState> </xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> </xref:System.Speech.Synthesis.TtsEngine.Prosody>"
  syntax:
    content: public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }
    return:
      type: System.Speech.Synthesis.TtsEngine.FragmentState
      description: "Um <xref href=&quot;System.Speech.Synthesis.TtsEngine.FragmentState&quot;> </xref> instância é retornada ou usada para definir informações de atributo de fala de um <xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;> </xref>."
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.State*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  id: TextLength
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextLength
  nameWithType: TextFragment.TextLength
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Obtém ou define o comprimento do texto fala no fragmento."
  remarks: "O valor padrão dessa propriedade é 0."
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, TextLength on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public int TextLength { get; set; }
    return:
      type: System.Int32
      description: "Um <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;> </xref> é retornado ou pode ser usado para definir o comprimento em caracteres, da cadeia de caracteres de texto associada a este fragmento a ser falado."
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  id: TextOffset
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextOffset
  nameWithType: TextFragment.TextOffset
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Obtém ou define o local inicial do texto no fragmento."
  remarks: "O valor padrão dessa propriedade é 0."
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the TextOffset, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public int TextOffset { get; set; }
    return:
      type: System.Int32
      description: "Um <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;> </xref> é retornado ou pode ser usado para definir o local de início, em caracteres, da parte da cadeia de caracteres de texto associada a este fragmento a ser falado."
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  id: TextToSpeak
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextToSpeak
  nameWithType: TextFragment.TextToSpeak
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Define ou obtém o texto em fala do fragmento."
  remarks: "O valor padrão dessa propriedade é `System.String.Empty`.       Os aplicativos são pode alterar completamente o valor de TextToSpeak.       Redefinindo o valor de TextToSpeak não alterará o valor de <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.</xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> </xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the TextToSpeak on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public string TextToSpeak { get; set; }
    return:
      type: System.String
      description: "Um <xref uid=&quot;langword_csharp_System.String&quot; name=&quot;System.String&quot; href=&quot;&quot;> </xref> é retornado ou pode ser usado para definir o texto de fala a ser usado pelo mecanismo de síntese de fala para gerar a saída de áudio."
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextFragment()
  nameWithType: TextFragment.TextFragment()
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextFragment()
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: State
  nameWithType: TextFragment.State
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.State
- uid: System.Speech.Synthesis.TtsEngine.FragmentState
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: FragmentState
  nameWithType: FragmentState
  fullName: System.Speech.Synthesis.TtsEngine.FragmentState
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextLength
  nameWithType: TextFragment.TextLength
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextOffset
  nameWithType: TextFragment.TextOffset
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextToSpeak
  nameWithType: TextFragment.TextToSpeak
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextFragment
  nameWithType: TextFragment.TextFragment
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: State
  nameWithType: TextFragment.State
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextLength
  nameWithType: TextFragment.TextLength
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextOffset
  nameWithType: TextFragment.TextOffset
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextToSpeak
  nameWithType: TextFragment.TextToSpeak
