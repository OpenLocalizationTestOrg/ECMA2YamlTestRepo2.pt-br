### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SearchResultCollection
  id: SearchResultCollection
  children:
  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  - System.DirectoryServices.SearchResultCollection.Count
  - System.DirectoryServices.SearchResultCollection.Dispose
  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  - System.DirectoryServices.SearchResultCollection.Finalize
  - System.DirectoryServices.SearchResultCollection.GetEnumerator
  - System.DirectoryServices.SearchResultCollection.Handle
  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: SearchResultCollection
  nameWithType: SearchResultCollection
  fullName: System.DirectoryServices.SearchResultCollection
  type: Class
  summary: "A classe SearchResultCollection contém o <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> instâncias hierarquia do Active Directory retornada durante um <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;> </xref> consulta."
  remarks: "Devido a restrições de implementação, a classe SearchResultCollection não é possível liberar todos os seus recursos não gerenciados quando é coletado como lixo. Para evitar um vazamento de memória, você deve chamar o <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>método quando o objeto SearchResultCollection não é mais necessário.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>"
  syntax:
    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  id: Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Determina se um especificado <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto está nesta coleção."
  syntax:
    content: public bool Contains (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "O <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto a ser encontrado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a propriedade especificada pertence a esta coleção; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SearchResultCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copia todos os <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objetos na coleção para a matriz específica, começando no índice especificado na matriz de destino."
  syntax:
    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);
    parameters:
    - id: results
      type: System.DirectoryServices.SearchResult[]
      description: "A matriz de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objetos que recebe os elementos desta coleção."
    - id: index
      type: System.Int32
      description: "O índice de base zero no `results` onde esse método inicia a cópia desta coleção."
  overload: System.DirectoryServices.SearchResultCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Count
  id: Count
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o número de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objetos nesta coleção."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objetos nesta coleção."
  overload: System.DirectoryServices.SearchResultCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  id: Dispose
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Libera todos os recursos que são usados pelo <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;> </xref> objeto."
  remarks: "O método Dispose, ele permite que os recursos que são usados pelo <xref:System.DirectoryServices.SearchResultCollection>para ser realocada para outros fins.</xref:System.DirectoryServices.SearchResultCollection> Para obter mais informações sobre Dispose, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md).       O coletor de lixo não liberar memória para um <xref:System.DirectoryServices.SearchResultCollection>objeto.</xref:System.DirectoryServices.SearchResultCollection> Portanto, um aplicativo deve chamar o método Dispose explicitamente para evitar um vazamento de memória."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;> </xref> de objeto e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>invoca o método Dispose protegido com o `disposing` parâmetro definido como `true`.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.Object.Finalize%2A>chama Dispose com o `disposing` parâmetro definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos que são mantidos por qualquer objeto gerenciado que este <xref:System.DirectoryServices.SearchResultCollection>referências.</xref:System.DirectoryServices.SearchResultCollection>       O coletor de lixo não liberar memória para um <xref:System.DirectoryServices.SearchResultCollection>objeto.</xref:System.DirectoryServices.SearchResultCollection> Portanto, você deve chamar o <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>método explicitamente para evitar um vazamento de memória.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       Este método chama o <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>método de cada objeto na coleção.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       Para obter mais informações sobre <xref:System.DirectoryServices.SearchResultCollection.Dispose>e <xref:System.Object.Finalize%2A>, consulte [limpeza de recursos não gerenciados](~/add/includes/ajax-current-ext-md.md) e [substituindo o método Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  id: Finalize
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Substitui o &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; método."
  syntax:
    content: ~SearchResultCollection ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Retorna um enumerador que você pode usar para percorrer a esta coleção."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>objeto que você pode usar para percorrer a esta coleção.</xref:System.Collections.IEnumerator>"
  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Handle
  id: Handle
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o identificador que é retornado pelo [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) método que executa a pesquisa real. Para obter mais informações, consulte o [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) tópico na biblioteca MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  remarks: "O <xref:System.DirectoryServices.DirectorySearcher>que criou esta coleção chama o [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) método, que disponibiliza os resultados da consulta para o objeto T:System.DirectoryServices.SearchResultCollection.</xref:System.DirectoryServices.DirectorySearcher> Para obter mais informações, consulte o [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) tópico na biblioteca MSDN em [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       Cada vez que uma consulta é executada, um identificador para os resultados da consulta está associado com seu <xref:System.DirectoryServices.SearchResultCollection>objeto.</xref:System.DirectoryServices.SearchResultCollection> Esse identificador corresponde ao identificador de pesquisa na ADSI. Esse identificador persiste até que você chamar o <xref:System.DirectoryServices.SearchResultCollection.Dispose>método o <xref:System.DirectoryServices.SearchResultCollection>do objeto, você deve chamar <xref:System.DirectoryServices.SearchResultCollection.Dispose>para evitar um vazamento de memória.</xref:System.DirectoryServices.SearchResultCollection.Dispose> </xref:System.DirectoryServices.SearchResultCollection> </xref:System.DirectoryServices.SearchResultCollection.Dispose> O coletor de lixo não libera memória para esse objeto."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "O valor ADS_SEARCH_HANDLE que usa essa coleção."
  overload: System.DirectoryServices.SearchResultCollection.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  id: IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Retorna o índice da primeira ocorrência do <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto na coleção."
  syntax:
    content: public int IndexOf (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "O <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto a ser pesquisado na coleção."
    return:
      type: System.Int32
      description: "O índice de base zero do primeiro objeto correspondente. Retornará -1 se nenhum membro dessa coleção é idêntico de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto."
  overload: System.DirectoryServices.SearchResultCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto está localizado em um índice especificado na coleção."
  remarks: "No c#, essa propriedade é o indexador de <xref:System.DirectoryServices.SearchResultCollection>classe.</xref:System.DirectoryServices.SearchResultCollection>       No JScript, você pode usar as propriedades indexadas padrão definidas por um tipo, mas você não pode definir explicitamente as suas próprias. No entanto, especificar o atributo expando em uma classe fornece automaticamente um padrão cujo tipo é um objeto de propriedade indexada e com um tipo de índice de <xref:System.String>.</xref:System.String>"
  syntax:
    content: public System.DirectoryServices.SearchResult this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice de base zero de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto a ser recuperado."
    return:
      type: System.DirectoryServices.SearchResult
      description: "O <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objeto que está localizado no índice especificado."
  overload: System.DirectoryServices.SearchResultCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  id: PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;> </xref> propriedades que foram especificadas para a pesquisa foi executada."
  syntax:
    content: public string[] PropertiesLoaded { get; }
    return:
      type: System.String[]
      description: "Uma matriz do tipo <xref:System.String>que contém as propriedades que foram especificadas no <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*>coleção de propriedades antes que a pesquisa foi executada.</xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> </xref:System.String>"
  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copia os elementos do <xref:System.Collections.ICollection>para um <xref:System.Array>, a partir de um determinado <xref:System.Array>índice.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Unidimensional <xref:System.Array>que é o destino dos elementos copiados de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Array> O <xref:System.Array>devem ter a indexação com base em zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice de base zero no `array` no qual a cópia começa."
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       o número de elementos na origem - ou - <xref:System.Collections.ICollection> é maior que o espaço disponível do <code>index</code> até o final do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo de origem <xref:System.Collections.ICollection>não pode ser convertido automaticamente para o tipo de destino <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um valor que indica se o acesso para o <xref:System.Collections.ICollection>é sincronizado (thread-safe).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Retorna um objeto, que pode ser usado para sincronizar o acesso <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       Coleta a maioria das classes de <xref:System.Collections?displayProperty=fullName>namespace também implementa um método sincronizado, que fornece um wrapper sincronizado para a coleção subjacente.</xref:System.Collections?displayProperty=fullName>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       [Visual Basic, c#]       O exemplo de código a seguir mostra como bloquear a coleção usando o <xref:System.Collections.ICollection.SyncRoot%2A>durante toda a enumeração: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se acessar para o <xref:System.Collections.ICollection>é sincronizado (thread-safe); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um objeto que pode ser usado para sincronizar o acesso <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "Para coleções cujo repositório subjacente não está disponível publicamente, a implementação esperada é retornar a instância atual. Observe que o ponteiro para a instância atual pode não ser suficiente para coleções que agrupam outras coleções; aqueles devem retornar a coleção subjacente `SyncRoot` propriedade.       Coleta a maioria das classes de <xref:System.Collections?displayProperty=fullName>namespace também implementam um `Synchronized` método, que fornece um wrapper sincronizado para a coleção subjacente.</xref:System.Collections?displayProperty=fullName> No entanto, as classes derivadas podem fornecer sua própria versão sincronizada de coleção usando o <xref:System.Collections.ICollection.SyncRoot%2A>propriedade.</xref:System.Collections.ICollection.SyncRoot%2A> O código de sincronização necessário realizar operações no <xref:System.Collections.ICollection.SyncRoot%2A>da coleção, não diretamente na coleção.</xref:System.Collections.ICollection.SyncRoot%2A> Isso garante que a operação correta de coleções que são derivados de outros objetos. Especificamente, ele mantém uma sincronização adequada com outros threads que podem ser simultaneamente modificando a instância de coleção.       Na ausência de um `Synchronized` método em uma coleção, o uso esperado para <xref:System.Collections.ICollection.SyncRoot%2A>tem esta aparência: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` [Visual Basic] ```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` enumerando através de um conjunto não é intrinsecamente um procedimento com segurança de thread.</xref:System.Collections.ICollection.SyncRoot%2A> Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       [Visual Basic, c#]       O exemplo de código a seguir mostra como bloquear a coleção usando o <xref:System.Collections.ICollection.SyncRoot%2A>durante toda a enumeração: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser usado para sincronizar o acesso <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SearchResult
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
- uid: System.DirectoryServices.SearchResult[]
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult[]
  spec.csharp:
  - uid: System.DirectoryServices.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: SearchResult[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SearchResultCollection.Count
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SearchResultCollection.Contains*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains
  nameWithType: SearchResultCollection.Contains
- uid: System.DirectoryServices.SearchResultCollection.CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo
  nameWithType: SearchResultCollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.Count*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose
  nameWithType: SearchResultCollection.Dispose
- uid: System.DirectoryServices.SearchResultCollection.Finalize*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize
  nameWithType: SearchResultCollection.Finalize
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SearchResultCollection.GetEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
- uid: System.DirectoryServices.SearchResultCollection.IndexOf*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf
  nameWithType: SearchResultCollection.IndexOf
- uid: System.DirectoryServices.SearchResultCollection.Item*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item
  nameWithType: SearchResultCollection.Item
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
