### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMAC
  id: HMAC
  children:
  - System.Security.Cryptography.HMAC.#ctor
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  langs:
  - csharp
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
  type: Class
  summary: "Representa a classe abstrata da qual todas as implementações de Hash-based HMAC Message Authentication Code () devem derivar."
  remarks: "Um Hash-based HMAC Message Authentication Code () pode ser usado para determinar se uma mensagem enviada por um canal inseguro foi violada, desde que o remetente e o destinatário compartilham uma chave secreta. O remetente calcula o valor de hash para os dados originais e envia os dados originais e o HMAC como uma única mensagem. O receptor calcula novamente o valor de hash na mensagem recebida e verifica se o valor de hash computado corresponde ao valor de hash transmitido.       HMAC pode ser usado com qualquer função de hash criptográfico iterativo, como MD5 ou SHA-1, em combinação com uma chave de segredo compartilhada. A intensidade criptográfica do HMAC depende das propriedades da função de hash subjacente.       Qualquer alteração de dados ou o valor de hash resulta em uma incompatibilidade, porque é necessário conhecimento da chave secreta para alterar a mensagem e reproduza o valor de hash correto. Portanto, se os valores de hash computado e original corresponderem, a mensagem é autenticada."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref> classe."
  syntax:
    content: protected HMAC ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define o tamanho do bloco a ser usado no valor de hash."
  remarks: "Um Hash-based HMAC Message Authentication Code () usa uma função de hash em que dados é transformado em hash pela iteração de uma função de compactação básica em blocos de dados. BlockSizeValue é o tamanho em bytes de tal um bloco. Seu valor é de 64 bytes."
  syntax:
    content: protected int BlockSizeValue { get; set; }
    return:
      type: System.Int32
      description: "O tamanho do bloco a ser usado no valor de hash."
  overload: System.Security.Cryptography.HMAC.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create
  id: Create
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Cria uma instância da implementação do padrão de um Hash-based HMAC Message Authentication Code ()."
  remarks: "Por padrão, essa sobrecarga usa a implementação de SHA-1 do HMAC. Se você deseja especificar uma implementação diferente, use o <xref:System.Security.Cryptography.HMAC.Create%28System.String%29>sobrecarga, que permite que você especifique um nome de algoritmo, em vez disso.</xref:System.Security.Cryptography.HMAC.Create%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.HMAC Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HMAC
      description: "Instância de um novo SHA-1, a menos que as configurações padrão foram alteradas usando o [ &lt;cryptoClass&gt; elemento](../Topic/%3CcryptoClass%3E%20Element.md)."
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Cria uma instância da implementação de um Hash-based HMAC Message Authentication Code () especificada."
  remarks: "HMAC dá suporte a vários algoritmos de hash, incluindo MD5, SHA-1, SHA-256 e RIPEMD160. Para obter a lista completa, consulte os valores com suporte para o `algorithmName` parâmetro."
  syntax:
    content: public static System.Security.Cryptography.HMAC Create (string algorithmName);
    parameters:
    - id: algorithmName
      type: System.String
      description: "A implementação de HMAC para usar. A tabela a seguir mostra os valores válidos para o `algorithmName` parâmetro e os algoritmos que são mapeados para.       <table><thead><tr><th> Valor do parâmetro       </th><th> Implementa       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HMAC
      description: "Uma nova instância da implementação do HMAC especificada."
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Libera os recursos não gerenciados usados pelo <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref> classe quando uma alteração de chave é legítima e, opcionalmente, libera os recursos gerenciados."
  remarks: "Este método é chamado pelo público `Dispose()` método e o `Finalize` método. `Dispose()`invoca o protegido `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. `Finalize`invoca `Dispose` com `disposing` definido como `false`.       Quando o `disposing` parâmetro é `true`, esse método libera todos os recursos mantidos por qualquer objeto gerenciado que este <xref:System.Security.Cryptography.HMAC>referências.</xref:System.Security.Cryptography.HMAC> Este método chama o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para liberar recursos gerenciados e não gerenciados; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para liberar apenas recursos não gerenciados."
  overload: System.Security.Cryptography.HMAC.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando substituído em uma classe derivada, encaminha os dados gravados para o objeto padrão <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref> algoritmo de hash para computar o valor de hash."
  remarks: "Este método não é chamado pelo código do aplicativo.       Esse método abstrato executa o cálculo de hash. Cada gravação no objeto de fluxo de criptografia transmite os dados este método. Para cada bloco de dados, este método atualizará o estado do objeto de hash para que um valor de hash correto é retornado no final do fluxo de dados."
  syntax:
    content: protected override void HashCore (byte[] rgb, int ib, int cb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "Os dados de entrada."
    - id: ib
      type: System.Int32
      description: "O deslocamento para a matriz de bytes da qual começar a usar os dados."
    - id: cb
      type: System.Int32
      description: "O número de bytes na matriz para usar como dados."
  overload: System.Security.Cryptography.HMAC.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando substituído em uma classe derivada, finaliza o cálculo de hash depois que os últimos dados são processados pelo objeto de fluxo de criptografia."
  remarks: "Este método não é chamado pelo código do aplicativo. Esse método finaliza qualquer computação parcial e retorna o valor de hash correto do fluxo de dados."
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "O código de hash computado em uma matriz de bytes."
  overload: System.Security.Cryptography.HMAC.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashName
  id: HashName
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define o nome do algoritmo de hash a ser usado para hash."
  syntax:
    content: public string HashName { get; set; }
    return:
      type: System.String
      description: "O nome do algoritmo de hash."
  overload: System.Security.Cryptography.HMAC.HashName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "O algoritmo de hash atual não pode ser alterado."
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma instância da implementação padrão do <xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref>."
  remarks: "Um Hash-based HMAC Message Authentication Code () pode ser usado para determinar se uma mensagem enviada por um canal inseguro foi violada, desde que o remetente e o destinatário compartilham uma chave secreta. O remetente calcula o valor de hash para os dados originais e envia os dados originais e o HMAC como uma única mensagem. O receptor calcula novamente o valor de hash na mensagem recebida e verifica se o valor de hash computado corresponde ao valor de hash transmitido.       HMAC pode ser usado com qualquer função de hash criptográfico iterativo, como MD5 ou SHA-1, em combinação com uma chave de segredo compartilhada. A intensidade criptográfica do HMAC depende das propriedades da função de hash subjacente.       Qualquer alteração de dados ou o valor de hash resulta em uma incompatibilidade, porque é necessário conhecimento da chave secreta para alterar a mensagem e reproduza o valor de hash correto. Portanto, se os valores de hash computado e original corresponderem, a mensagem é autenticada."
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Key
  id: Key
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Obtém ou define a chave para usar o algoritmo de hash."
  remarks: "Essa propriedade é a chave para o algoritmo de hash com chave.       Um Hash-based HMAC Message Authentication Code () pode ser usado para determinar se uma mensagem enviada por um canal inseguro foi violada, desde que o remetente e o destinatário compartilham uma chave secreta. O remetente calcula o valor de hash para os dados originais e envia os dados originais e o HMAC como uma única mensagem. O receptor calcula novamente o valor de hash na mensagem recebida e verifica se o valor de hash computado corresponde ao valor de hash transmitido.       HMAC pode ser usado com qualquer função de hash criptográfico iterativo, como MD5 ou SHA-1, em combinação com uma chave de segredo compartilhada. A intensidade criptográfica do HMAC depende das propriedades da função de hash subjacente.       Qualquer alteração de dados ou o valor de hash resulta em uma incompatibilidade, porque é necessário conhecimento da chave secreta para alterar a mensagem e reproduza o valor de hash correto. Portanto, se os valores de hash computado e original corresponderem, a mensagem é autenticada."
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "A chave para usar o algoritmo de hash."
  overload: System.Security.Cryptography.HMAC.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "É feita uma tentativa para alterar a propriedade de chave depois de hash foi iniciado."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.HMAC.#ctor
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMAC.HashFinal
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
- uid: System.Security.Cryptography.HMAC.Key
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
- uid: System.Security.Cryptography.HMAC.#ctor*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC
  nameWithType: HMAC.HMAC
- uid: System.Security.Cryptography.HMAC.BlockSizeValue*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.Create*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create
  nameWithType: HMAC.Create
- uid: System.Security.Cryptography.HMAC.Dispose*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose
  nameWithType: HMAC.Dispose
- uid: System.Security.Cryptography.HMAC.HashCore*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore
  nameWithType: HMAC.HashCore
- uid: System.Security.Cryptography.HMAC.HashFinal*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal
  nameWithType: HMAC.HashFinal
- uid: System.Security.Cryptography.HMAC.HashName*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize
  nameWithType: HMAC.Initialize
- uid: System.Security.Cryptography.HMAC.Key*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
