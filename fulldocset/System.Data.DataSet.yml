### YamlMime:ManagedReference
items:
- uid: System.Data.DataSet
  id: DataSet
  children:
  - System.Data.DataSet.#ctor
  - System.Data.DataSet.#ctor(System.String)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  - System.Data.DataSet.AcceptChanges
  - System.Data.DataSet.BeginInit
  - System.Data.DataSet.CaseSensitive
  - System.Data.DataSet.Clear
  - System.Data.DataSet.Clone
  - System.Data.DataSet.Copy
  - System.Data.DataSet.CreateDataReader
  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  - System.Data.DataSet.DataSetName
  - System.Data.DataSet.DefaultViewManager
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.EndInit
  - System.Data.DataSet.EnforceConstraints
  - System.Data.DataSet.ExtendedProperties
  - System.Data.DataSet.GetChanges
  - System.Data.DataSet.GetChanges(System.Data.DataRowState)
  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetSchemaSerializable
  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetXml
  - System.Data.DataSet.GetXmlSchema
  - System.Data.DataSet.HasChanges
  - System.Data.DataSet.HasChanges(System.Data.DataRowState)
  - System.Data.DataSet.HasErrors
  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  - System.Data.DataSet.Initialized
  - System.Data.DataSet.InitializeDerivedDataSet
  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.IsInitialized
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  - System.Data.DataSet.Locale
  - System.Data.DataSet.Merge(System.Data.DataRow[])
  - System.Data.DataSet.Merge(System.Data.DataSet)
  - System.Data.DataSet.Merge(System.Data.DataTable)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.MergeFailed
  - System.Data.DataSet.Namespace
  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  - System.Data.DataSet.Prefix
  - System.Data.DataSet.RaisePropertyChanging(System.String)
  - System.Data.DataSet.ReadXml(System.IO.Stream)
  - System.Data.DataSet.ReadXml(System.IO.TextReader)
  - System.Data.DataSet.ReadXml(System.String)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataSet.ReadXmlSchema(System.String)
  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataSet.RejectChanges
  - System.Data.DataSet.Relations
  - System.Data.DataSet.RemotingFormat
  - System.Data.DataSet.Reset
  - System.Data.DataSet.SchemaSerializationMode
  - System.Data.DataSet.ShouldSerializeRelations
  - System.Data.DataSet.ShouldSerializeTables
  - System.Data.DataSet.Site
  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataSet.System#ComponentModel#IListSource#GetList
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.Tables
  - System.Data.DataSet.WriteXml(System.IO.Stream)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter)
  - System.Data.DataSet.WriteXml(System.String)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataSet.WriteXmlSchema(System.String)
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  langs:
  - csharp
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
  type: Class
  summary: "Representa um cache na memória dos dados."
  remarks: "O conjunto de dados, que é um cache na memória dos dados recuperados de uma fonte de dados, é um componente importante da arquitetura do ADO.NET. O conjunto de dados consiste em uma coleção de <xref:System.Data.DataTable>objetos que você pode se relacionam entre si com <xref:System.Data.DataRelation>objetos.</xref:System.Data.DataRelation> </xref:System.Data.DataTable> Você também pode impor integridade de dados no conjunto de dados usando o <xref:System.Data.UniqueConstraint>e <xref:System.Data.ForeignKeyConstraint>objetos.</xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint> Para obter mais detalhes sobre como trabalhar com objetos de conjunto de dados, consulte [DataSets, DataTables e DataViews](~/add/includes/ajax-current-ext-md.md).       Enquanto <xref:System.Data.DataTable>objetos contêm os dados, o <xref:System.Data.DataRelationCollection>permite que você navegue pela hierarquia de tabela.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataTable> As tabelas estão contidas em um <xref:System.Data.DataTableCollection>acessados por meio de <xref:System.Data.DataSet.Tables%2A>propriedade.</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> Ao acessar <xref:System.Data.DataTable>objetos, observe que eles são condicionalmente diferencia maiusculas de minúsculas.</xref:System.Data.DataTable> Por exemplo, se um <xref:System.Data.DataTable>chamado &quot;mydatatable&quot; e outro chamado &quot;Mydatatable&quot;, uma cadeia de caracteres usada para pesquisar uma das tabelas é considerada como maiusculas e minúsculas.</xref:System.Data.DataTable> No entanto, se existe &quot;mydatatable&quot; e &quot;Mydatatable&quot; não, a cadeia de caracteres de pesquisa é considerada como maiusculas e minúsculas. Para obter mais informações sobre como trabalhar com <xref:System.Data.DataTable>objetos, consulte [criando um DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataTable>       Um conjunto de dados pode ler e gravar dados e esquema como documentos XML. Os dados e esquema podem ser transportados em HTTP e usadas por qualquer aplicativo, em qualquer plataforma que é habilitado para XML. Você pode salvar o esquema como um esquema XML com o <xref:System.Data.DataSet.WriteXmlSchema%2A>método e esquema e os dados podem ser salvos usando o <xref:System.Data.DataSet.WriteXml%2A>método.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.WriteXmlSchema%2A> Para ler um documento XML que inclui o esquema e dados, use o <xref:System.Data.DataSet.ReadXml%2A>método.</xref:System.Data.DataSet.ReadXml%2A>       Em uma implementação típica de várias camadas, as etapas para criar e atualizar um conjunto de dados e, por sua vez, atualizando os dados originais devem: 1.  Criar e preencher cada <xref:System.Data.DataTable>em um conjunto de dados com dados de uma fonte de dados usando um <xref:System.Data.Common.DataAdapter>.</xref:System.Data.Common.DataAdapter> </xref:System.Data.DataTable>      2.  Alterar os dados na individuais <xref:System.Data.DataTable>objetos adicionando, atualizando ou excluindo <xref:System.Data.DataRow>objetos.</xref:System.Data.DataRow> </xref:System.Data.DataTable>      3.  Chamar o <xref:System.Data.DataSet.GetChanges%2A>método para criar um segundo conjunto de dados que possui apenas as alterações aos dados.</xref:System.Data.DataSet.GetChanges%2A>      4.  Chamar o <xref:System.Data.Common.DataAdapter.Update%2A>método o <xref:System.Data.Common.DataAdapter>, passando o segundo conjunto de dados como um argumento.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.Update%2A>      5.  Chamar o <xref:System.Data.DataSet.Merge%2A>método para mesclar as alterações do segundo conjunto de dados primeiro.</xref:System.Data.DataSet.Merge%2A>      6.  Invocar o <xref:System.Data.DataSet.AcceptChanges%2A>no conjunto de dados.</xref:System.Data.DataSet.AcceptChanges%2A> Como alternativa, invocar <xref:System.Data.DataSet.RejectChanges%2A>para cancelar as alterações.</xref:System.Data.DataSet.RejectChanges%2A>      > [!NOTE] > O conjunto de dados e <xref:System.Data.DataTable>objetos herdam <xref:System.ComponentModel.MarshalByValueComponent>e oferece suporte a <xref:System.Runtime.Serialization.ISerializable>interface remotamente.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataTable> Esses são os únicos objetos ADO.NET que podem ser remotos.      > [!NOTE] > Classes herdadas de conjunto de dados não são finalizados pelo coletor de lixo, pois o finalizador foram suprimido no conjunto de dados. A classe derivada pode chamar o <xref:System.GC.ReRegisterForFinalize%2A>método no construtor para permitir que a classe a ser finalizada pelo coletor de lixo.</xref:System.GC.ReRegisterForFinalize%2A>"
  example:
  - "The following example consists of several methods that, combined, create and fill a DataSet from the **Northwind** database.  \n  \n [!code-cs[Classic WebData DataSet Example#1](~/add/codesnippet/csharp/t-system.data.dataset_1.cs)]\n [!code-vb[Classic WebData DataSet Example#1](~/add/codesnippet/visualbasic/t-system.data.dataset_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("DataSetName")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Xml.Serialization.XmlRoot("DataSet")]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")]

      public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Data.DataSet.#ctor
  id: '#ctor'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataSet&quot;> </xref> classe."
  remarks: "Essa implementação do <xref:System.Data.DataSet>construtor sem parâmetros e cria um nome padrão, &quot;NewDataSet&quot;, para a nova instância.</xref:System.Data.DataSet>       Um nome para o <xref:System.Data.DataSet>é necessário para garantir que a representação XML do <xref:System.Data.DataSet>sempre tem um nome para o elemento do documento, que é o elemento de nível mais alto em uma definição de esquema.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \n  \n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_1_1.vb)]"
  syntax:
    content: public DataSet ();
    parameters: []
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância de um <xref href=&quot;System.Data.DataSet&quot;> </xref> classe com o nome fornecido."
  remarks: "Um nome para o <xref:System.Data.DataSet>é necessário para garantir que a representação XML do <xref:System.Data.DataSet>sempre tem um nome para o elemento do documento, que é o elemento de nível mais alto em uma definição de esquema.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \n  \n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_0_1.vb)]"
  syntax:
    content: public DataSet (string dataSetName);
    parameters:
    - id: dataSetName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância de um <xref href=&quot;System.Data.DataSet&quot;> </xref> classe que tem as informações de serialização fornecido e o contexto."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Os dados necessários para serializar ou desserializar um objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A origem e destino de um determinado fluxo serializado."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataSet&quot;> </xref> classe."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "O <xref:System.Runtime.Serialization.StreamingContext>objeto.</xref:System.Runtime.Serialization.StreamingContext>"
    - id: ConstructSchema
      type: System.Boolean
      description: "O valor booliano."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Confirma todas as alterações feitas a este <xref href=&quot;System.Data.DataSet&quot;> </xref> desde que foi carregado ou desde a última vez que o AcceptChanges foi chamado."
  remarks: "Tanto o <xref:System.Data.DataRow>e <xref:System.Data.DataTable>classes têm métodos AcceptChanges.</xref:System.Data.DataTable> </xref:System.Data.DataRow> Chamando <xref:System.Data.DataTable.AcceptChanges%2A>no <xref:System.Data.DataTable>faz com que o nível de <xref:System.Data.DataRow.AcceptChanges%2A>método para cada <xref:System.Data.DataRow>seja chamado.</xref:System.Data.DataRow> </xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A> Da mesma forma, chamam AcceptChanges que <xref:System.Data.DataSet>faz com que <xref:System.Data.DataTable.AcceptChanges%2A>seja chamado em cada tabela em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataSet> Dessa maneira, você tem vários níveis em que o método pode ser chamado. Chamar AcceptChanges do <xref:System.Data.DataSet>permite que você chame o método em todos os objetos subordinados (por exemplo, tabelas e linhas) com uma chamada.</xref:System.Data.DataSet>       Quando você chama `AcceptChanges` no `DataSet`, qualquer <xref:System.Data.DataRow>objetos ainda no modo de edição terminam suas edições com êxito.</xref:System.Data.DataRow> A propriedade <xref:System.Data.DataRow.RowState%2A>de cada <xref:System.Data.DataRow>também será alterado; `Added` e `Modified` linhas se tornam `Unchanged`, e `Deleted` linhas são removidas.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowState%2A>       Se o `DataSet` contém <xref:System.Data.ForeignKeyConstraint>objetos, invocando o `AcceptChanges` também faz com que o método de <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>devem ser aplicadas.</xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> </xref:System.Data.ForeignKeyConstraint>      > [!NOTE]  >   `AcceptChanges` e `RejectChanges` só se aplicam a `DataRow` relacionados a alterações (ou seja, adicionar, remover, excluir e modificar). Eles não são aplicáveis para o esquema ou alterações estruturais.   >> Chamar AcceptChanges não replicará essas alterações de volta para a fonte de dados se o conjunto de dados tenha sido preenchido usando um DataAdapter. Nessa situação, chame <xref:System.Data.Common.DataAdapter.Update%2A>em vez disso.</xref:System.Data.Common.DataAdapter.Update%2A> Consulte [Atualizar fontes de dados com DataAdapters](http://msdn.microsoft.com/library/33y2221y.aspx) para obter mais informações."
  example:
  - "The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The AcceptChanges method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \n  \n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ac_1.vb)]\n [!code-cs[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/csharp/m-system.data.dataset.ac_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataSet.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.BeginInit
  id: BeginInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Começa a inicialização de um <xref href=&quot;System.Data.DataSet&quot;> </xref> que é usado em um formulário ou usado por outro componente. A inicialização ocorre em tempo de execução."
  remarks: "O ambiente de design do Visual Studio .NET usa esse método para iniciar a inicialização de um componente que é usado em um formulário ou por outro componente. O <xref:System.Data.DataSet.EndInit%2A>método termina a inicialização.</xref:System.Data.DataSet.EndInit%2A> Usando o BeginInit e <xref:System.Data.DataSet.EndInit%2A>métodos impede que o controle que está sendo usada antes de ser totalmente inicializado.</xref:System.Data.DataSet.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Data.DataSet.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se string comparações em <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos diferenciam maiusculas de minúsculas."
  remarks: "A propriedade CaseSensitive afeta como classificação, pesquisa e operações de filtragem são executadas em cada <xref:System.Data.DataTable>objeto contido em um <xref:System.Data.DataSet>ao usar o <xref:System.Data.DataTable.Select%2A>método.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       Por padrão, definindo a propriedade CaseSensitive para um <xref:System.Data.DataSet>também define o <xref:System.Data.DataTable.CaseSensitive%2A>propriedade de cada um associado <xref:System.Data.DataTable>com o mesmo valor.</xref:System.Data.DataTable> </xref:System.Data.DataTable.CaseSensitive%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example toggles the CaseSensitive property.  \n  \n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ca_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as comparações de cadeia de caracteres diferenciam maiusculas de minúsculas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clear
  id: Clear
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Limpa o <xref href=&quot;System.Data.DataSet&quot;> </xref> de todos os dados, removendo todas as linhas em todas as tabelas."
  remarks: "Se <xref:System.Data.DataSet>estiver associado a um <xref:System.Xml.XmlDataDocument>chamada de limpar ou <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName>gera <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> </xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Para evitar essa situação, percorra cada tabela, removendo cada linha, um por vez."
  example:
  - "The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \n  \n [!code-vb[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_1_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataSet.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clone
  id: Clone
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copia a estrutura do <xref href=&quot;System.Data.DataSet&quot;> </xref>, incluindo todos os <xref href=&quot;System.Data.DataTable&quot;> </xref> esquemas, relações e restrições. Não copie os dados."
  remarks: >-
    > [!NOTE]

    >  If these classes have been subclassed, the clone will also be of the same subclasses.
  example:
  - "The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_0_1.cs)]\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet Clone ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Um novo <xref href=&quot;System.Data.DataSet&quot;> </xref> com o mesmo esquema atual <xref href=&quot;System.Data.DataSet&quot;> </xref>, mas nenhum dos dados."
  overload: System.Data.DataSet.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Copy
  id: Copy
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copia a estrutura e os dados para este <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/csharp/m-system.data.dataset.copy_1.cs)]\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.copy_1.vb)]"
  syntax:
    content: public System.Data.DataSet Copy ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Um novo <xref href=&quot;System.Data.DataSet&quot;> </xref> com a mesma estrutura (esquemas de tabela, relações e restrições) e dados como isso <xref href=&quot;System.Data.DataSet&quot;> </xref>.       <div class=&quot;alert NOTE&quot;>    Se essas classes têm sido derivadas, a cópia também será o mesmo subclasses.      </div>"
  overload: System.Data.DataSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Retorna um <xref href=&quot;System.Data.DataTableReader&quot;> </xref> com um resultado definido por <xref href=&quot;System.Data.DataTable&quot;> </xref>, na mesma sequência conforme as tabelas aparecem no <xref:System.Data.DataSet.Tables*>coleção.</xref:System.Data.DataSet.Tables*>"
  remarks: "Para garantir a ordem dos conjuntos de resultados em retornado <xref:System.Data.DataTableReader>, se um <xref:System.Data.DataTable>dentro a <xref:System.Data.DataSet>está vazio, é representado por um resultado vazio definido em retornado `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader>"
  example:
  - "The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_0_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_0_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "Um <xref href=&quot;System.Data.DataTableReader&quot;> </xref> que contém um ou mais conjuntos de resultados, correspondente a <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias contidas na fonte <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  id: CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Retorna um <xref href=&quot;System.Data.DataTableReader&quot;> </xref> com um resultado definido por <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Para garantir que a ordem do resultado define dentro retornado <xref:System.Data.DataTableReader>, se um <xref:System.Data.DataTable>dentro a <xref:System.Data.DataSet>está vazio, é representado por um resultado vazio definido em retornado `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader> Porque esta versão sobrecarregada permite que você forneça uma lista de `DataTable` instâncias como parâmetros, você pode especificar a ordem na qual os conjuntos de resultados aparecem em retornado `DataTableReader`."
  example:
  - "This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the CreateDataReader method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_1_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_1_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Define uma matriz de DataTables fornecendo a ordem do resultado a ser retornado no <xref href=&quot;System.Data.DataTableReader&quot;> </xref>."
    return:
      type: System.Data.DataTableReader
      description: "Um <xref href=&quot;System.Data.DataTableReader&quot;> </xref> que contém um ou mais conjuntos de resultados, correspondente a <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias contidas na fonte <xref href=&quot;System.Data.DataSet&quot;> </xref>. Os conjuntos de resultados retornados estão na ordem especificada pelo <code> dataTables </code> parâmetro."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DataSetName
  id: DataSetName
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o nome da atual <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataSet> with the given DataSetName.  \n  \n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.da_1.vb)]\n [!code-cs[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/csharp/p-system.data.dataset.da_1.cs)]"
  syntax:
    content: public string DataSetName { get; set; }
    return:
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.DataSetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DefaultViewManager
  id: DefaultViewManager
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém uma exibição personalizada dos dados contidos no <xref href=&quot;System.Data.DataSet&quot;> </xref> para permitir a filtragem, pesquisar e navegar usando um personalizado <xref href=&quot;System.Data.DataViewManager&quot;> </xref>."
  remarks: "O <xref:System.Data.DataViewManager>retornado pelo DefaultViewManager propriedade permite que você crie configurações personalizadas para cada <xref:System.Data.DataTable>em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataViewManager>       Quando você obtém um <xref:System.Data.DataView>de um <xref:System.Data.DataTable>, a ordem de classificação, filtragem e <xref:System.Data.DataViewRowState>estão configurados de acordo com as configurações na propriedade DefaultViewManager.</xref:System.Data.DataViewRowState> </xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \n  \n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.de_1.vb)]"
  syntax:
    content: public System.Data.DataViewManager DefaultViewManager { get; }
    return:
      type: System.Data.DataViewManager
      description: "A <xref href=&quot;System.Data.DataViewManager&quot;></xref> object."
  overload: System.Data.DataSet.DefaultViewManager*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Determina o <xref:System.Data.DataSet.SchemaSerializationMode*>para um <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Esse método pode ser chamado durante a desserialização de um tipo <xref:System.Data.DataSet>para determinar seu <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>passado durante a desserialização de instância de <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "Um <xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> enumeração que indica se as informações de esquema foi omitidas da carga."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Determina o <xref:System.Data.DataSet.SchemaSerializationMode*>para um <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Esse método pode ser chamado durante a desserialização de um tipo <xref:System.Data.DataSet>para determinar seu <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> que um <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>protegido do construtor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; é invocado com durante a desserialização em cenários de comunicação remota."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "O <xref:System.Runtime.Serialization.StreamingContext>que um <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>protegido do construtor &lt;xref:System.Data.DataSet.%23ctor%2A&gt; é invocado com durante a desserialização em cenários de comunicação remota.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "Um <xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> enumeração que indica se as informações de esquema foi omitidas da carga."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EndInit
  id: EndInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Termina a inicialização de um <xref href=&quot;System.Data.DataSet&quot;> </xref> que é usado em um formulário ou usado por outro componente. A inicialização ocorre em tempo de execução."
  remarks: "O ambiente de design do Visual Studio .NET usa esse método para encerrar a inicialização de um componente que é usado em um formulário ou por outro componente. O <xref:System.Data.DataSet.BeginInit%2A>método inicia a inicialização.</xref:System.Data.DataSet.BeginInit%2A> Usando o <xref:System.Data.DataSet.BeginInit%2A>e métodos de EndInit impede que o controle que está sendo usada antes de ser totalmente inicializado.</xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Data.DataSet.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EnforceConstraints
  id: EnforceConstraints
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se as regras de restrição são seguidas durante a tentativa de qualquer operação de atualização."
  remarks: "Restrições são definidas no <xref:System.Data.DataTable>nível (<xref:System.Data.DataTable.Constraints%2A> propriedade).</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable> Para obter mais informações sobre a criação de restrições, consulte [restrições de DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The EnforceConstraints property is set to `false` and the values of each row are set to the same value. When the EnforceConstraints property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \n  \n [!code-cs[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/csharp/p-system.data.dataset.en_1.cs)]\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.en_1.vb)]"
  syntax:
    content: public bool EnforceConstraints { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as regras são impostas; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O padrão é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.EnforceConstraints*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Não podem ser aplicadas a uma ou mais restrições."
  platform:
  - net462
- uid: System.Data.DataSet.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém a coleção de informações de usuário personalizadas associadas a <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "A propriedade ExtendedProperties permite que você armazene informações personalizadas com o `DataSet`. Por exemplo, você pode armazenar um tempo quando os dados devem ser atualizados.       Propriedades estendidas devem ser do tipo <xref:System.String>se deseja que sejam persistentes quando o <xref:System.Data.DataSet>é gravada como XML.</xref:System.Data.DataSet> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ex_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ex_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "Um <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> com todas as informações de usuário personalizada."
  overload: System.Data.DataSet.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges
  id: GetChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém uma cópia do <xref href=&quot;System.Data.DataSet&quot;> </xref> que contém todas as alterações feitas desde que foi carregado ou desde <xref:System.Data.DataSet.AcceptChanges*>foi chamado pela última vez.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "Cria um novo <xref:System.Data.DataSet>que contém uma cópia de todas as linhas no original <xref:System.Data.DataSet>que possuem alterações pendentes.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Restrições de relação podem fazer com que linhas inalteradas adicionais a serem adicionados ao novo <xref:System.Data.DataSet>se linhas inalteradas contenham chaves primárias correspondentes a chaves estrangeiras em linhas alteradas.</xref:System.Data.DataSet> O método retorna `null` se não houver nenhuma linha original <xref:System.Data.DataSet>que possuem alterações pendentes.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_0_1.vb)]"
  syntax:
    content: public System.Data.DataSet GetChanges ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Uma cópia das alterações neste <xref href=&quot;System.Data.DataSet&quot;> </xref> que podem ter ações executadas nele e posteriormente ser mesclados em usando <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Se nenhuma linha alterada for encontrada, o método retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém uma cópia do <xref href=&quot;System.Data.DataSet&quot;> </xref> que contém todas as alterações feitas desde que foi carregada pela última vez, ou desde <xref:System.Data.DataSet.AcceptChanges*>foi chamado, filtrados por <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "O <xref:System.Data.DataSet.GetChanges%2A>método é usado para produzir um segundo <xref:System.Data.DataSet>objeto que contém apenas as alterações introduzidas em original.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> Use o `rowStates` argumento para especificar o tipo de alterações deve incluir o novo objeto.       Isso retornado cópia foi projetada para ser mescladas novamente a este original <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Restrições de relação podem causar linhas pai marcado como `Unchanged` a ser incluído. Se não houver linhas de desejado <xref:System.Data.DataRowState>forem encontrados, o <xref:System.Data.DataSet.GetChanges%2A>retorna método `null`.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataRowState>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_2_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_2_1.cs)]"
  syntax:
    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Uma da <xref href=&quot;System.Data.DataRowState&quot;> </xref> valores."
    return:
      type: System.Data.DataSet
      description: "Uma cópia filtrada do <xref href=&quot;System.Data.DataSet&quot;> </xref> que podem ter ações executadas nele e posteriormente ser mesclados em usando <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Se não houver linhas de desejado <xref href=&quot;System.Data.DataRowState&quot;> </xref> for encontrado, o método retorna <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém uma cópia do <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> para o conjunto de dados."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "O conjunto de esquema especificado."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "A copy of <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>."
  overload: System.Data.DataSet.GetDataSetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Popula um objeto de informações de serialização com os dados necessários para serializar o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Um <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> que contém os dados serializados associados a <xref href=&quot;System.Data.DataSet&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Um <xref:System.Runtime.Serialization.StreamingContext>que contém a origem e destino do fluxo serializado associados com a <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataSet.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.GetSchemaSerializable
  id: GetSchemaSerializable
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Retorna um serializável <xref:System.Xml.Schema.XMLSchema>instância.</xref:System.Xml.Schema.XMLSchema>"
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "O <xref:System.Xml.Schema.XMLSchema>instância.</xref:System.Xml.Schema.XMLSchema>"
  overload: System.Data.DataSet.GetSchemaSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Desserializa os dados da tabela do fluxo XML ou binary."
  syntax:
    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> instância."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "O contexto de streaming."
  overload: System.Data.DataSet.GetSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXml
  id: GetXml
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Retorna a representação XML dos dados armazenados no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Chamar esse método é idêntico à chamada <xref:System.Data.DataSet.WriteXml%2A>com <xref:System.Data.XmlWriteMode>definida como <xref:System.Data.XmlWriteMode>.</xref:System.Data.XmlWriteMode> </xref:System.Data.XmlWriteMode> </xref:System.Data.DataSet.WriteXml%2A>       GetXml retorna XML como uma cadeia de caracteres e, portanto, requer mais sobrecarga do que <xref:System.Data.DataSet.WriteXml%2A>para gravar o XML em um arquivo.</xref:System.Data.DataSet.WriteXml%2A>       Se você criar um <xref:System.Data.DataSet>usando inferência de esquema e serializar ele usando os serviços Web ou XML, a ordenação de coluna pode ser alterado.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_1_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_1_1.vb)]  \n  \n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \n  \n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\">New</Course>  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\">Cancelled</Department>  \n</MySchool>  \n```  \n  \n Next, create ElementsWithChildElementsxml.xml:  \n  \n```  \n<MySchool>  \n  <Course>  \n    <CourseID>C1045</CourseID>  \n    <Year>2012</Year>  \n    <Title>Calculus</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>7</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C1061</CourseID>  \n    <Year>2012</Year>  \n    <Title>Physics</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>1</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2021</CourseID>  \n    <Year>2012</Year>  \n    <Title>Composition</Title>  \n    <Credits>3</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2042</CourseID>  \n    <Year>2012</Year>  \n    <Title>Literature</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Department>  \n    <DepartmentID>1</DepartmentID>  \n    <Name>Engineering</Name>  \n    <Budget>350000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>2</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>2</DepartmentID>  \n    <Name>English</Name>  \n    <Budget>120000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>6</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>4</DepartmentID>  \n    <Name>Economics</Name>  \n    <Budget>200000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>4</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>7</DepartmentID>  \n    <Name>Mathematics</Name>  \n    <Budget>250024</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>3</Administrator>  \n  </Department>  \n</MySchool>  \n```  \n  \n Now create ElementsWithOnlyAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\" />  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\" />  \n</MySchool>  \n```  \n  \n And finally, create RepeatingElements.xml:  \n  \n```  \n<MySchool>  \n  <Course>C1045</Course>  \n  <Course>C1061</Course>  \n  <Department>Engineering</Department>   \n  <Department>Mathematics</Department>  \n</MySchool>  \n```  \n  \n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.IO;  \nusing System.Text;  \nusing System.Xml;  \n  \n// Use WriteXml method to export the dataset.  \nstatic class DataTableHelper {  \n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \n            Console.WriteLine(\"Write {0} to the File {1}.\", dataset.DataSetName, xmlFileName);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \n         writer.WriteLine(dataset.GetXml());  \n         Console.WriteLine(\"Get Xml data from {0} and write to the File {1}.\", dataset.DataSetName, xmlFileName);  \n         Console.WriteLine();  \n      }  \n   }  \n  \n   // Use ReadXml method to import the dataset from the dataset.  \n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \n         }  \n      }  \n   }  \n  \n   // Display the columns and value of DataSet.  \n   public static void ShowDataSet(DataSet dataset) {  \n      foreach (DataTable table in dataset.Tables) {  \n         Console.WriteLine(\"Table {0}:\", table.TableName);  \n         ShowDataTable(table);  \n      }  \n   }  \n  \n   // Display the columns and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n               }  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col]);  \n               }  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", \"\");  \n      }  \n   }  \n  \n   // Display the columns of DataSet.  \n   public static void ShowDataSetSchema(DataSet dataSet) {  \n      Console.WriteLine(\"{0} contains the following tables:\", dataSet.DataSetName);  \n      foreach (DataTable table in dataSet.Tables) {  \n         Console.WriteLine(\"   Table {0} contains the following columns:\", table.TableName);  \n         ShowDataTableSchema(table);  \n      }  \n   }  \n  \n   // Display the columns of DataTable  \n   private static void ShowDataTableSchema(DataTable table) {  \n      String columnString = \"\";  \n      foreach (DataColumn col in table.Columns) {  \n         columnString += col.ColumnName + \"   \";  \n      }  \n      Console.WriteLine(columnString);  \n   }  \n}  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      // Create the DataSet  \n      DataSet school = new DataSet(\"MySchool\");  \n      DataTable course = CreateCourse();  \n      DataTable department = CreateDepartment();  \n      school.Tables.Add(course);  \n      school.Tables.Add(department);  \n  \n      // Define the constraint between the tables.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      InsertDepartments(department);  \n      InsertCourses(course);  \n  \n      // Export the dataset to the XML file.  \n      Console.WriteLine(\"Data of the whole DataSet {0}\", school.DataSetName);  \n      DataTableHelper.ShowDataSet(school);  \n  \n      String xmlWithSchemaFileName = \"WriterXMLWithSchema.xml\";  \n      String xmlGetDataFileName = \"GetXML.xml\";  \n  \n      // Use two ways to export the dataset to the Xml file.  \n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \n  \n      // Import the dataset from the XML file.  \n      // Use two ways to import the dataset from the Xml file.  \n      Console.WriteLine(\"Read Xml document into a new DataSet:\");  \n      DataSet newSchool = new DataSet(\"NewSchool\");  \n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \n      DataTableHelper.ShowDataSetSchema(newSchool);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Infer a schema for a DataSet from an XML document:\");  \n      InferDataSetSchemaFromXml();  \n  \n      Console.WriteLine(\"Press any key to exit.\");  \n      Console.ReadKey();  \n   }  \n  \n   static DataTable CreateCourse() {  \n      DataTable course = new DataTable(\"Course\");  \n      DataColumn[] cols ={  \n                              new DataColumn(\"CourseID\",typeof(String)),  \n                              new DataColumn(\"Year\",typeof(Int32)),  \n                              new DataColumn(\"Title\",typeof(String)),  \n                              new DataColumn(\"Credits\",typeof(Int32)),  \n                              new DataColumn(\"DepartmentID\",typeof(Int32))};  \n      course.Columns.AddRange(cols);  \n  \n      course.PrimaryKey = new DataColumn[] { course.Columns[\"CourseID\"], course.Columns[\"Year\"] };  \n  \n      return course;  \n   }  \n  \n   static DataTable CreateDepartment() {  \n      DataTable department = new DataTable(\"Department\");  \n      DataColumn[] cols = {   \n                                new DataColumn(\"DepartmentID\", typeof(Int32)),  \n                                new DataColumn(\"Name\",typeof(String)),  \n                                new DataColumn(\"Budget\",typeof(Decimal)),  \n                                new DataColumn(\"StartDate\",typeof(DateTime)),  \n                                new DataColumn(\"Administrator\",typeof(Int32))};  \n      department.Columns.AddRange(cols);  \n  \n      department.PrimaryKey = new DataColumn[] { department.Columns[\"DepartmentID\"] };  \n  \n      return department;  \n   }  \n  \n   static void InsertDepartments(DataTable department) {  \n      Object[] rows = {   \n                            new Object[]{1,\"Engineering\",350000.00,new DateTime(2007,9,1),2},  \n                            new Object[]{2,\"English\",120000.00,new DateTime(2007,9,1),6},  \n                            new Object[]{4,\"Economics\",200000.00,new DateTime(2007,9,1),4},  \n                            new Object[]{7,\"Mathematics\",250024.00,new DateTime(2007,9,1),3}};  \n  \n      foreach (Object[] row in rows) {  \n         department.Rows.Add(row);  \n      }  \n   }  \n  \n   static void InsertCourses(DataTable course) {  \n      Object[] rows ={  \n                               new Object[]{\"C1045\",2012,\"Calculus\",4,7},  \n                               new Object[]{\"C1061\",2012,\"Physics\",4,1},  \n                               new Object[]{\"C2021\",2012,\"Composition\",3,2},  \n                               new Object[]{\"C2042\",2012,\"Literature\",4,2}};  \n  \n      foreach (Object[] row in rows) {  \n         course.Rows.Add(row);  \n      }  \n   }  \n  \n   // Display the results of inferring schema from four types of XML structures  \n   private static void InferDataSetSchemaFromXml() {  \n      String[] xmlFileNames = {   \n  \n                                    @\"ElementsWithOnlyAttributes.xml\",   \n                                    @\"ElementsWithAttributes.xml\",  \n                                    @\"RepeatingElements.xml\",   \n                                    @\"ElementsWithChildElements.xml\" };  \n  \n      foreach (String xmlFileName in xmlFileNames) {  \n         Console.WriteLine(\"Result of {0}\", Path.GetFileNameWithoutExtension(xmlFileName));  \n         DataSet newSchool = new DataSet();  \n         newSchool.InferXmlSchema(xmlFileName, null);  \n         DataTableHelper.ShowDataSetSchema(newSchool);  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public string GetXml ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia de caracteres que é uma representação dos dados armazenados no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXmlSchema
  id: GetXmlSchema
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Retorna o esquema XML para a representação XML dos dados armazenados no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Chamar esse método é idêntico ao chamar <xref:System.Data.DataSet.WriteXmlSchema%2A>, exceto que somente o esquema principal é gravado.</xref:System.Data.DataSet.WriteXmlSchema%2A>       GetXmlSchema retorna o XML como uma cadeia de caracteres e, portanto, requer mais sobrecarga do que <xref:System.Data.DataSet.WriteXmlSchema%2A>para gravar o XML em um arquivo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Se você criar um <xref:System.Data.DataSet>usando inferência de esquema e serializar ele usando os serviços Web ou XML, a ordenação de coluna pode ser alterado.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_3_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_3_1.vb)]"
  syntax:
    content: public string GetXmlSchema ();
    parameters: []
    return:
      type: System.String
      description: "O esquema XML para a representação XML dos dados armazenados na cadeia de caracteres que é o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges
  id: HasChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Data.DataSet&quot;> </xref> tem alterações, incluindo linhas novas, excluídas ou modificadas."
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_0_1.vb)]\n [!code-cs[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_0_1.cs)]"
  syntax:
    content: public bool HasChanges ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Data.DataSet&quot;> </xref> tem alterações; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  id: HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Data.DataSet&quot;> </xref> tem alterações, incluindo linhas novas, excluídas ou modificadas, filtradas por <xref href=&quot;System.Data.DataRowState&quot;> </xref>."
  remarks: "Examine o <xref:System.Data.DataSet.HasChanges%2A>propriedade o `DataSet` antes de chamar o <xref:System.Data.DataSet.GetChanges%2A>método.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet.HasChanges%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_1_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_1_1.cs)]"
  syntax:
    content: public bool HasChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Uma da <xref href=&quot;System.Data.DataRowState&quot;> </xref> valores."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Data.DataSet&quot;> </xref> tem alterações; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasErrors
  id: HasErrors
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém um valor que indica se há erros em qualquer uma da <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos dentro deste <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Cada <xref:System.Data.DataTable>em um <xref:System.Data.DataSet>também tem um <xref:System.Data.DataTable.HasErrors%2A>propriedade.</xref:System.Data.DataTable.HasErrors%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Use o `HasErrors` propriedade o `DataSet` primeiro para determinar se qualquer tabela tem erros, antes de verificar individuais <xref:System.Data.DataTable>objetos.</xref:System.Data.DataTable> Se um `DataTable` tem erros, o <xref:System.Data.DataTable.GetErrors%2A>método retorna uma matriz de <xref:System.Data.DataRow>objetos que contêm os erros.</xref:System.Data.DataRow> </xref:System.Data.DataTable.GetErrors%2A>"
  example:
  - "The following example uses the HasErrors property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \n  \n [!code-cs[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ha_1.cs)]\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se alguma tabela contiver um erro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  id: InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aplica-se o esquema XML especificado <xref:System.IO.Stream>para o <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  syntax:
    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O <xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref> do qual ler o esquema."
    - id: nsArray
      type: System.String[]
      description: "Uma matriz de cadeias de caracteres de identificador de recurso uniforme (URI) de espaço para nome a ser excluído por inferência de esquema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  id: InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aplica-se o esquema XML especificado <xref:System.IO.TextReader>para o <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  syntax:
    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "O <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> do qual ler o esquema."
    - id: nsArray
      type: System.String[]
      description: "Uma matriz de cadeias de caracteres de identificador de recurso uniforme (URI) de espaço para nome a ser excluído por inferência de esquema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  id: InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aplica-se o esquema XML do arquivo especificado para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public void InferXmlSchema (string fileName, string[] nsArray);
    parameters:
    - id: fileName
      type: System.String
      description: "O nome do arquivo (incluindo o caminho) do qual ler o esquema."
    - id: nsArray
      type: System.String[]
      description: "Uma matriz de cadeias de caracteres de identificador de recurso uniforme (URI) de espaço para nome a ser excluído por inferência de esquema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  id: InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aplica-se o esquema XML especificado <xref:System.Xml.XmlReader>para o <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  syntax:
    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref uid=&quot;langword_csharp_XMLReader&quot; name=&quot;XMLReader&quot; href=&quot;&quot;> </xref> do qual ler o esquema."
    - id: nsArray
      type: System.String[]
      description: "Uma matriz de cadeias de caracteres de identificador de recurso uniforme (URI) de espaço para nome a ser excluído por inferência de esquema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Initialized
  id: Initialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ocorre após o <xref href=&quot;System.Data.DataSet&quot;> </xref> é inicializado."
  remarks: "Para obter mais informações, consulte <xref:System.Data.DataSet.IsInitialized%2A>.</xref:System.Data.DataSet.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InitializeDerivedDataSet
  id: InitializeDerivedDataSet
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Desserialize todos os dados de tabelas do conjunto de dados do fluxo XML ou binary."
  syntax:
    content: protected virtual void InitializeDerivedDataSet ();
    parameters: []
  overload: System.Data.DataSet.InitializeDerivedDataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Verifica se o formato da representação serializada do <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Esse membro oferece suporte à infraestrutura .NET Framework e não se destina a ser usado diretamente no seu código."
  syntax:
    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "O <xref:System.Runtime.Serialization.StreamingContext>objeto.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se especificado <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> representa um <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> serializada em formato binário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> caso contrário."
  overload: System.Data.DataSet.IsBinarySerialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsInitialized
  id: IsInitialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Data.DataSet&quot;> </xref> é inicializado."
  remarks: "Retorna o status do <xref:System.Data.DataSet>enquanto ele está sendo construído, para a instância pelo Visual Studio.</xref:System.Data.DataSet> O <xref:System.Data.DataSet.BeginInit%2A>método define como `false` e <xref:System.Data.DataSet.EndInit%2A>método define como `true`.</xref:System.Data.DataSet.EndInit%2A> </xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para indicar o componente concluiu a inicialização; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Preenche uma <xref href=&quot;System.Data.DataSet&quot;> </xref> com valores de uma fonte de dados usando fornecido <xref href=&quot;System.Data.IDataReader&quot;> </xref>, usando uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias para fornecer as informações de esquema e de namespace."
  remarks: "O <xref:System.Data.DataTable.Load%2A>método fornece uma técnica para o preenchimento de um único <xref:System.Data.DataTable>com dados, recuperados de um <xref:System.Data.IDataReader>instância.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Esse método fornece a mesma funcionalidade, mas permite que você carregue vários conjuntos de resultados de uma <xref:System.Data.IDataReader>em várias tabelas em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > A operação de carregamento falhará com um <xref:System.InvalidOperationException>se qualquer uma das colunas de dados de origem na entrada `reader` são colunas computadas.</xref:System.InvalidOperationException>       O `loadOption` parâmetro permite que você especifique como deseja que os dados importados para interagir com os dados existentes e pode ser qualquer um dos valores do <xref:System.Data.LoadOption>enumeração.</xref:System.Data.LoadOption> Consulte a documentação para o <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>método para obter mais informações sobre como usar esse parâmetro.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       O `tables` parâmetro permite que você especifique uma matriz de <xref:System.Data.DataTable>instâncias, que indica a ordem das tabelas correspondentes para cada conjunto de resultados carregado de leitor.</xref:System.Data.DataTable> Os Loadmethod preenchimentos cada fornecidos <xref:System.Data.DataTable>instância com dados de um único conjunto de resultados de leitor de dados de origem.</xref:System.Data.DataTable> Depois de cada conjunto de resultados, o Loadmethod prossegue para o próximo resultado definido dentro do leitor, até que não haja não mais conjuntos de resultados.       O esquema de resolução de nome para este método é o mesmo que seguido pelo <xref:System.Data.Common.DbDataAdapter.Fill%2A>método de <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the Load method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \n  \n [!code-vb[DataWorks DataSet.LoadTables#1](~/add/codesnippet/visualbasic/54dbea54-b320-4c41-9f97-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadTables#1](~/add/codesnippet/csharp/54dbea54-b320-4c41-9f97-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Um <xref href=&quot;System.Data.IDataReader&quot;> </xref> que fornece um ou mais conjuntos de resultados."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Um valor da <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumeração que indica como linhas já está no <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias dentro de <xref href=&quot;System.Data.DataSet&quot;> </xref> serão combinadas com as linhas de entrada que compartilham a mesma chave primária."
    - id: tables
      type: System.Data.DataTable[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias, do qual o método Load recupera informações de nome e namespace. Cada uma dessas tabelas deve ser um membro do <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> contém <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Preenche uma <xref href=&quot;System.Data.DataSet&quot;> </xref> com valores de uma fonte de dados usando fornecido <xref href=&quot;System.Data.IDataReader&quot;> </xref>, usando uma matriz de cadeias de caracteres para fornecer os nomes das tabelas dentro de <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "O <xref:System.Data.DataTable.Load%2A>método fornece uma técnica para o preenchimento de um único <xref:System.Data.DataTable>com dados, recuperados de um <xref:System.Data.IDataReader>instância.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Esse método fornece a mesma funcionalidade, mas permite que você carregue vários conjuntos de resultados de uma `IDataReader` em várias tabelas em um `DataSet`.      > [!NOTE] > A operação de carregamento falhará com um <xref:System.InvalidOperationException>se qualquer uma das colunas de dados de origem na entrada `reader` são colunas computadas.</xref:System.InvalidOperationException>       O `loadOption` parâmetro permite que você especifique como deseja que os dados importados para interagir com os dados existentes e pode ser qualquer um dos valores do <xref:System.Data.LoadOption>enumeração.</xref:System.Data.LoadOption> Consulte a documentação para o <xref:System.Data.DataTable.Load%2A>método para obter mais informações sobre como usar esse parâmetro.</xref:System.Data.DataTable.Load%2A>       O `tables` parâmetro permite que você especifique uma matriz de nomes de tabela, que indica a ordem das tabelas correspondentes para cada conjunto de resultados carregado de leitor. O `Load` método tenta localizar uma tabela dentro do `DataSet` correspondente ao nome encontrado na matriz de nomes de tabela, na ordem. Se uma tabela de correspondência for encontrada, essa tabela é carregada com o conteúdo do conjunto de resultados atual. Se nenhuma tabela correspondente for encontrada, uma tabela é criada usando o nome fornecido na matriz de nomes de tabela e o novo esquema da tabela é inferido do conjunto de resultados. Depois de cada conjunto de resultados, o `Load` método prossegue para o próximo resultado definido dentro do leitor, até que não haja não mais conjuntos de resultados.       O namespace padrão associado `DataSet`, se houver, está associado com cada recém-criado `DataTable`. O esquema de resolução de nome para este método é o mesmo que seguido pelo <xref:System.Data.Common.DbDataAdapter.Fill%2A>método de <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \n  \n [!code-vb[DataWorks DataSet.LoadString#1](~/add/codesnippet/visualbasic/f903cc41-1885-430a-b43a-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadString#1](~/add/codesnippet/csharp/f903cc41-1885-430a-b43a-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Um <xref href=&quot;System.Data.IDataReader&quot;> </xref> que fornece um ou mais conjuntos de resultados."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Um valor da <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumeração que indica como linhas já está no <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias dentro de <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> serão combinadas com as linhas de entrada que compartilham a mesma chave primária."
    - id: tables
      type: System.String[]
      description: "Uma matriz de cadeias de caracteres, do qual o <xref uid=&quot;langword_csharp_Load&quot; name=&quot;Load&quot; href=&quot;&quot;> </xref> método recupera as informações de nome de tabela."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Preenche uma <xref href=&quot;System.Data.DataSet&quot;> </xref> com valores de uma fonte de dados usando fornecido <xref href=&quot;System.Data.IDataReader&quot;> </xref>, usando uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias para fornecer as informações de esquema e de namespace."
  remarks: "O <xref:System.Data.DataTable.Load%2A>método fornece uma técnica para o preenchimento de um único <xref:System.Data.DataTable>com dados, recuperados de um <xref:System.Data.IDataReader>instância.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Esse método fornece a mesma funcionalidade, mas permite que você carregue vários conjuntos de resultados de uma <xref:System.Data.IDataReader>em várias tabelas em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > A operação de carregamento falhará com um <xref:System.InvalidOperationException>se qualquer uma das colunas de dados de origem na entrada `reader` são colunas computadas.</xref:System.InvalidOperationException>       O `loadOption` parâmetro permite que você especifique como deseja que os dados importados para interagir com os dados existentes e pode ser qualquer um dos valores do <xref:System.Data.LoadOption>enumeração.</xref:System.Data.LoadOption> Consulte a documentação para o <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>método para obter mais informações sobre como usar esse parâmetro.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       O `errorHandler` parâmetro é um <xref:System.Data.FillErrorEventHandler>representante que se refere a um procedimento que é chamado quando ocorre um erro ao carregar dados.</xref:System.Data.FillErrorEventHandler> O <xref:System.Data.FillErrorEventArgs>parâmetro passado ao procedimento fornece propriedades que permitem recuperar informações sobre o erro ocorreu, a linha atual de dados, e o <xref:System.Data.DataTable>sendo preenchido.</xref:System.Data.DataTable> </xref:System.Data.FillErrorEventArgs> Usando esse mecanismo de delegado, em vez de um bloco try/catch mais simples, permite que você determine o erro, manipule a situação e continuar o processamento se desejar. O <xref:System.Data.FillErrorEventArgs>parâmetro fornece um <xref:System.Data.FillErrorEventArgs.Continue%2A>propriedade: defina essa propriedade como `true` para indicar que você manuseou o erro e quiser continuar o processamento; defina a propriedade como `false` para indicar que você deseja interromper o processamento.</xref:System.Data.FillErrorEventArgs.Continue%2A> </xref:System.Data.FillErrorEventArgs> Esteja ciente que definir a propriedade como `false` faz com que o código que disparou o problema para gerar uma exceção.       O `tables` parâmetro permite que você especifique uma matriz de <xref:System.Data.DataTable>instâncias, que indica a ordem das tabelas correspondentes para cada conjunto de resultados carregado de leitor.</xref:System.Data.DataTable> Os Loadmethod preenchimentos cada fornecidos <xref:System.Data.DataTable>instância com dados de um único conjunto de resultados de leitor de dados de origem.</xref:System.Data.DataTable> Depois de cada conjunto de resultados, o Loadmethod prossegue para o próximo resultado definido dentro do leitor, até que não haja não mais conjuntos de resultados.       O esquema de resolução de nome para este método é o mesmo que seguido pelo <xref:System.Data.Common.DbDataAdapter.Fill%2A>método de <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the Load method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \n  \n [!code-vb[DataWorks DataSet.Load#1](~/add/codesnippet/visualbasic/a22aaabc-2cbb-4c1f-aa4e-_1.vb)]\n [!code-cs[DataWorks DataSet.Load#1](~/add/codesnippet/csharp/a22aaabc-2cbb-4c1f-aa4e-_1.cs)]"
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Um <xref href=&quot;System.Data.IDataReader&quot;> </xref> que fornece um ou mais conjuntos de resultados."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Um valor da <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumeração que indica como linhas já está no <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias dentro de <xref href=&quot;System.Data.DataSet&quot;> </xref> serão combinadas com as linhas de entrada que compartilham a mesma chave primária."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "Um <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> delegado para chamar quando ocorre um erro ao carregar dados."
    - id: tables
      type: System.Data.DataTable[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> instâncias, do qual o método Load recupera informações de nome e namespace."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Locale
  id: Locale
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define as informações de localidade usadas para comparar cadeias de caracteres dentro da tabela."
  remarks: "A propriedade de localidade Especifica a localidade para a qual a classificação se aplica.       Por padrão, defina a localidade para um <xref:System.Data.DataSet>também define a localidade para cada <xref:System.Data.DataTable>objeto em que `DataSet` com o mesmo valor.</xref:System.Data.DataTable> </xref:System.Data.DataSet>      > [!NOTE] > Em colunas que contêm expressões, o <xref:System.StringComparison>é usado.</xref:System.StringComparison> O <xref:System.StringComparison>será ignorado.</xref:System.StringComparison>"
  example:
  - "The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \n  \n [!code-vb[Classic WebData DataSet.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.lo_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Um <xref:System.Globalization.CultureInfo>que contém dados sobre a localidade do usuário máquina.</xref:System.Globalization.CultureInfo> O padrão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  id: Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos em atual <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "O <xref:System.Data.DataSet.Merge%2A>método é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O <xref:System.Data.DataSet.Merge%2A>método é chamado geralmente no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e finalmente Atualizando <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente</xref:System.Data.DataSet.Merge%2A>       Em um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, com mais eficiência passado para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o <xref:System.Data.DataSet.Merge%2A>método.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando o <xref:System.Data.DataSet.Merge%2A>método for chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um <xref:System.Data.DataRowState>valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.</xref:System.Data.DataRowState>       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final de uma mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "A matriz de <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> objetos a serem mesclados a <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  id: Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e seu esquema em atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "O método de mesclagem é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O método de mesclagem normalmente é chamado no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e atualizar finalmente <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente       Em um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, mais eficiente passado de volta para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o método de mesclagem.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando o método de mesclagem é chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um `DataRowState` valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final da mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and Merge methods on a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_2_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> cujo esquema e os dados serão mesclados."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Não não possível habilitar uma ou mais restrições."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> e seu esquema em atual <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "O <xref:System.Data.DataSet.Merge%2A>método é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O <xref:System.Data.DataSet.Merge%2A>método é chamado geralmente no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e finalmente Atualizando <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente</xref:System.Data.DataSet.Merge%2A>       Em um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, mais eficiente passado de volta para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o <xref:System.Data.DataSet.Merge%2A>método.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando o <xref:System.Data.DataSet.Merge%2A>método for chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um `DataRowState` valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final da mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_1_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> cujo esquema e os dados serão mesclados."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  id: Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e seu esquema em atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, preservando ou descartar as alterações neste <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> acordo com o argumento fornecido."
  remarks: "O <xref:System.Data.DataSet.Merge%2A>método é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O <xref:System.Data.DataSet.Merge%2A>método é chamado geralmente no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e finalmente Atualizando <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente</xref:System.Data.DataSet.Merge%2A>       Em um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, mais eficiente passado de volta para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o <xref:System.Data.DataSet.Merge%2A>método.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando o <xref:System.Data.DataSet.Merge%2A>método for chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um `DataRowState` valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final da mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_0_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> cujo esquema e os dados serão mesclados."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para preservar as alterações no atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos em atual <xref href=&quot;System.Data.DataSet&quot;> </xref>, preservando ou descartar as alterações no <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> e tratamento de um esquema incompatível de acordo com os argumentos determinados."
  remarks: "O <xref:System.Data.DataSet.Merge%2A>método é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O <xref:System.Data.DataSet.Merge%2A>método é chamado geralmente no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e finalmente Atualizando <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente</xref:System.Data.DataSet.Merge%2A>       Em um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, mais eficiente passado de volta para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o <xref:System.Data.DataSet.Merge%2A>método.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Para facilitar a explicação sobre o <xref:System.Data.DataSet.Merge%2A>método, usamos &quot;destino&quot; para significar atual <xref:System.Data.DataSet>e &quot;fonte&quot; para nomear a segunda (parâmetro) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> O destino <xref:System.Data.DataSet>é chamada assim porque ele é o objeto no qual ocorre uma ação (mesclagem).</xref:System.Data.DataSet> O segundo <xref:System.Data.DataSet>é chamado de &quot;origem&quot; porque as informações que ele contém não forem alterados, mas em vez disso, são mescladas em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> atual</xref:System.Data.DataSet>       Quando o <xref:System.Data.DataSet.Merge%2A>método for chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um `DataRowState` valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final da mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "A matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos a serem mesclados a <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para preservar as alterações no <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Uma da <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valores."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e seu esquema com o atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, preservando ou descartar as alterações no atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> e tratamento de um esquema incompatível de acordo com os argumentos determinados."
  remarks: "O <xref:System.Data.DataSet.Merge%2A>método é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O <xref:System.Data.DataSet.Merge%2A>método é chamado geralmente no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e finalmente Atualizando <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente</xref:System.Data.DataSet.Merge%2A>       Em um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, mais eficiente passado de volta para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o <xref:System.Data.DataSet.Merge%2A>método.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Para facilitar a explicação sobre o <xref:System.Data.DataSet.Merge%2A>método, usamos &quot;destino&quot; para significar atual <xref:System.Data.DataSet>e &quot;fonte&quot; para nomear a segunda (parâmetro) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> O destino <xref:System.Data.DataSet>é chamada assim porque ele é o objeto no qual ocorre uma ação (mesclagem).</xref:System.Data.DataSet> O segundo <xref:System.Data.DataSet>é chamado de &quot;origem&quot; porque as informações que ele contém não forem alterados, mas em vez disso, são mescladas em <xref:System.Data.DataSet>.</xref:System.Data.DataSet> atual</xref:System.Data.DataSet>       Quando o <xref:System.Data.DataSet.Merge%2A>método for chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um `DataRowState` valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final da mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/csharp/e5f91548-401c-49b5-ab4b-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/visualbasic/e5f91548-401c-49b5-ab4b-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> cujo esquema e os dados serão mesclados."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para preservar as alterações no atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Uma da <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valores."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Mescla uma especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> e seu esquema em atual <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, preservando ou descartar as alterações no <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> e tratamento de um esquema incompatível de acordo com os argumentos determinados."
  remarks: "O <xref:System.Data.DataSet.Merge%2A>método é usado para mesclar duas <xref:System.Data.DataSet>objetos que têm esquemas em grande parte semelhantes.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Uma mesclagem normalmente é usada em um aplicativo cliente para incorporar as alterações mais recentes da fonte de dados em um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente Isso permite que o aplicativo cliente tem um atualizado <xref:System.Data.DataSet>com os dados mais recentes da fonte de dados.</xref:System.Data.DataSet>       O <xref:System.Data.DataSet.Merge%2A>método é chamado geralmente no final de uma série de procedimentos que envolvem validar alterações, reconciliando erros, atualizando a fonte de dados com as alterações e finalmente Atualizando <xref:System.Data.DataSet>.</xref:System.Data.DataSet> existente</xref:System.Data.DataSet.Merge%2A>       iOn um aplicativo cliente, é comum que haja um único botão que o usuário pode clicar que coleta os dados alterados e valida antes de enviá-la de volta para um componente de camada intermediária. Nesse cenário, o <xref:System.Data.DataSet.GetChanges%2A>método é invocado pela primeira vez.</xref:System.Data.DataSet.GetChanges%2A> Método retorna um segundo <xref:System.Data.DataSet>otimizado para validar e mesclagem.</xref:System.Data.DataSet> Este <xref:System.Data.DataSet>objeto contém apenas os <xref:System.Data.DataTable> <xref:System.Data.DataRow>objetos que foram alterados, resultando em um subconjunto de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> original</xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> de segundo Esse subconjunto é geralmente menor e, portanto, mais eficiente passado de volta para um componente de camada intermediária. O componente de camada intermediária, em seguida, atualiza a fonte de dados original com as alterações por meio de procedimentos armazenados. A camada intermediária pode enviar de volta a um novo <xref:System.Data.DataSet>que inclui dados originais e os dados mais recentes da fonte de dados (executando a consulta original novamente) ou ele pode devolver o subconjunto com todas as alterações que foram feitas a ele da fonte de dados.</xref:System.Data.DataSet> (Por exemplo, se a fonte de dados cria automaticamente os valores de chave primária exclusivos, esses valores podem ser propagados de volta para o aplicativo cliente.) Em ambos os casos, retornado <xref:System.Data.DataSet>podem ser mesclados de volta na original do aplicativo cliente <xref:System.Data.DataSet>com o <xref:System.Data.DataSet.Merge%2A>método.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando o <xref:System.Data.DataSet.Merge%2A>método for chamado, os esquemas dos dois <xref:System.Data.DataSet>objetos são comparados como é possível que os esquemas podem ter sido alterados.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Por exemplo, em um cenário de business-to-business, novas colunas podem ter foi adicionadas a um esquema XML por um processo automatizado. Se a fonte <xref:System.Data.DataSet>contém elementos de esquema (adicionado <xref:System.Data.DataColumn>objetos) que estão faltando no destino, os elementos de esquema podem ser adicionados ao destino, definindo o `missingSchemaAction` argumento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> Nesse caso, o mesclada <xref:System.Data.DataSet>contém o esquema adicionada e dados.</xref:System.Data.DataSet>       Após mesclar esquemas, os dados são mesclados.       Ao mesclar uma nova fonte de <xref:System.Data.DataSet>no destino, qualquer fonte de linhas com um <xref:System.Data.DataRowState>valor `Unchanged`, `Modified`, ou `Deleted` correspondem às linhas de destino com os mesmos valores de chave primárias.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Fonte de linhas com um `DataRowState` valor `Added` correspondem às novas linhas de destino com os mesmos valores de chave primárias que as novas linhas de origem.       Durante a mesclagem, as restrições serão desabilitadas. Se qualquer restrição não pode ser habilitada no final da mesclagem, um <xref:System.Data.ConstraintException>é gerado e os dados mesclados são mantidos enquanto as restrições são desabilitadas.</xref:System.Data.ConstraintException> Nesse caso, o <xref:System.Data.DataSet.EnforceConstraints%2A>está definida como `false`, e todas as linhas que são inválidas são marcados como em erro.</xref:System.Data.DataSet.EnforceConstraints%2A> Os erros devem ser resolvidos antes de tentar redefinir a <xref:System.Data.DataSet.EnforceConstraints%2A>propriedade `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \n  \n [!code-cs[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/csharp/a63745f5-1a9e-4fc7-9c61-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/visualbasic/a63745f5-1a9e-4fc7-9c61-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "O <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> cujo esquema e os dados serão mesclados."
    - id: preserveChanges
      type: System.Boolean
      description: "Uma da <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valores."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para preservar as alterações no <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.MergeFailed
  id: MergeFailed
  parent: System.Data.DataSet
  langs:
  - csharp
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ocorre quando uma origem e destino <xref href=&quot;System.Data.DataRow&quot;> </xref> têm o mesmo valor de chave primário, e <xref:System.Data.DataSet.EnforceConstraints*>é definido como true.</xref:System.Data.DataSet.EnforceConstraints*>"
  remarks: 'Para obter mais informações sobre a manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following example demonstrates the use of the MergeFailed event.  \n  \n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/visualbasic/e-system.data.dataset.me_1.vb)]\n [!code-cs[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/csharp/e-system.data.dataset.me_1.cs)]"
  syntax:
    content: public event System.Data.MergeFailedEventHandler MergeFailed;
    return:
      type: System.Data.MergeFailedEventHandler
      description: "A ser adicionado."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Namespace
  id: Namespace
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o namespace a <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "A propriedade Namespace é usada ao ler e gravar um XML de documento para o <xref:System.Data.DataSet>usando o <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, ou <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet>       O namespace de um documento XML é usado para definir o escopo de atributos e elementos quando lidos na <xref:System.Data.DataSet>.</xref:System.Data.DataSet> XML Por exemplo, se um <xref:System.Data.DataSet>contém um esquema que foram lidos a partir de um documento com o namespace &quot;myCompany&quot; e é feita uma tentativa de ler dados somente de um documento com um namespace diferente, quaisquer dados que não correspondem ao esquema existente serão ignorados.</xref:System.Data.DataSet>"
  example:
  - "The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.na_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.na_1.cs)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "O namespace do <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O namespace já tem dados."
  platform:
  - net462
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gera o evento OnPropertyChanging."
  remarks: 'Gerar um evento invoca o manipulador de eventos por meio de um representante. Para obter uma visão geral, consulte [NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Um <xref:System.ComponentModel.PropertyChangedEventArgs>que contém os dados de evento.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataSet.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  id: OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ocorre quando um <xref href=&quot;System.Data.DataRelation&quot;> </xref> objeto é removido de uma <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Este método deve ser substituído por subclasses para restringir as tabelas que está sendo removidas"
  syntax:
    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "O <xref href=&quot;System.Data.DataRelation&quot;> </xref> que está sendo removido."
  overload: System.Data.DataSet.OnRemoveRelation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  id: OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ocorre quando um <xref href=&quot;System.Data.DataTable&quot;> </xref> é removido de uma <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Este método pode ser substituído por subclasses para impedir que as tabelas que está sendo removido."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> with the OnRemoveTable method overridden.  \n  \n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.on_1.vb)]\n [!code-cs[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/csharp/m-system.data.dataset.on_1.cs)]"
  syntax:
    content: protected virtual void OnRemoveTable (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> que está sendo removido."
  overload: System.Data.DataSet.OnRemoveTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Prefix
  id: Prefix
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um XML prefixo esse alias de namespace do <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "A propriedade Prefix é usada em um documento XML para identificar elementos que pertencem ao namespace do <xref:System.Data.DataSet>objeto (conforme definido pelo <xref:System.Data.DataSet.Namespace%2A>propriedade).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example sets the Prefix before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.pr_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.pr_1.cs)]"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "O prefixo XML para o <xref href=&quot;System.Data.DataSet&quot;> </xref> namespace."
  overload: System.Data.DataSet.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Envia uma notificação de que o especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> propriedade está prestes a ser alterada."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome da propriedade que está prestes a ser alterada."
  overload: System.Data.DataSet.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; em seu esquema XML, como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_7_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_7_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Um objeto que deriva de <xref:System.IO.Stream>.</xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "O <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.IO.TextReader?displayProperty=fullName&gt;."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```Classes que herdam o <xref:System.IO.TextReader>classe inclui o <xref:System.IO.StreamReader>e <xref:System.IO.StringReader>classes.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_3_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_3_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "O <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> do qual ler o esquema e dados."
    return:
      type: System.Data.XmlReadMode
      description: "O <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando o arquivo especificado."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui um `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_1_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_1_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "O nome do arquivo (incluindo o caminho) do qual ler."
    return:
      type: System.Data.XmlReadMode
      description: "O <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;."
  remarks: "O método ReadXml fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui um `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar ReadXml ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName>herda de <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader></xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com ReadXml especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the ReadXml method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_2_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_2_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>do qual ler.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "O <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.IO.Stream?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       O mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Quando você usa ReadXml e você definir <xref:System.Data.XmlReadMode>para `Diffgram`, o conteúdo do destino `DataSet` e original `DataSet` pode ser diferente devido a como o diffgram é gerado e processado.</xref:System.Data.XmlReadMode> Para obter mais informações sobre diffgrams, consulte [DiffGrams](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O <xref:System.IO.Stream>do qual ler.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uma da <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valores."
    return:
      type: System.Data.XmlReadMode
      description: "O <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.IO.TextReader?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "O <xref:System.IO.TextReader>do qual ler.</xref:System.IO.TextReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uma da <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valores."
    return:
      type: System.Data.XmlReadMode
      description: "O <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  id: ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando o arquivo especificado e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui um `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "O nome do arquivo (incluindo o caminho) do qual ler."
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uma da <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valores."
    return:
      type: System.Data.XmlReadMode
      description: "O <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML e dados para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "O <xref:System.Data.DataSet.ReadXml%2A>método fornece uma maneira de dados somente de leitura ou dados e esquema em um <xref:System.Data.DataSet>de um documento XML, enquanto o <xref:System.Data.DataSet.ReadXmlSchema%2A>método lê apenas o esquema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados e esquema, use uma da `ReadXML` sobrecargas que inclui o `mode` parâmetro e defina seu valor como `ReadSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Para gravar dados XML, ou esquema e dados do `DataSet`, use o `WriteXml` método. Para gravar apenas o esquema, use o `WriteXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se for especificado um esquema embutido, o esquema embutido é usado para estender a estrutura relacional existente antes de carregar os dados. Se houver qualquer conflito (por exemplo, a mesma coluna na mesma tabela definida com diferentes tipos de dados) é gerada uma exceção.       Se nenhum esquema embutido é especificado, a estrutura relacional é estendida por meio de inferência, conforme necessário, de acordo com a estrutura do documento XML. Se o esquema não pode ser estendido por meio de inferência para expor todos os dados, uma exceção será gerada.      > [!NOTE] > O `DataSet` não associa um elemento XML correspondente `DataColumn` ou `DataTable` quando os caracteres XML válidos como (&quot;_&quot;) são ignorados no XML serializado. O `DataSet` apenas ignora os caracteres XML inválidos em nomes de elemento XML e, portanto, só pode consumir o mesmo. Quando caracteres válidos no nome do elemento XML são ignorados, o elemento será ignorado durante o processamento.       Se o esquema XML para um <xref:System.Data.DataSet>inclui um `targetNamespace`, os dados não podem ser lidos e você poderá encontrar exceções ao chamar <xref:System.Data.DataSet.ReadXml%2A>ao carregar o <xref:System.Data.DataSet>com XML que contém elementos sem namespace qualificado.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Para ler os elementos não qualificados, defina `elementFormDefault` igual a &quot;qualificado&quot; no seu esquema XML como demonstrado no exemplo a seguir.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXml%2A>especificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>do qual ler.</xref:System.Xml.XmlReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uma da <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valores."
    return:
      type: System.Data.XmlReadMode
      description: "O <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> usado para ler os dados."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML especificado <xref:System.IO.Stream>para o <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  remarks: "Use o <xref:System.Data.DataSet.ReadXmlSchema%2A>método para criar o esquema para <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método.</xref:System.Data.DataSet.WriteXmlSchema%2A>       O esquema XML é gravado usando o padrão XSD.      > [!NOTE] > Pode ocorrer corrupção de dados se a msdata:DataType e os tipos xs: Type não coincidem. Nenhuma exceção será lançada.       O <xref:System.Data.DataSet.ReadXmlSchema%2A>método é geralmente chamado antes de chamar o <xref:System.Data.DataSet.ReadXml%2A>método que é usado para preencher o <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Classes que derivam de <xref:System.IO.Stream>classe incluem <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>e <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>      > [!NOTE] > Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-cs[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_5_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_5_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "O <xref:System.IO.Stream>do qual ler.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML especificado <xref:System.IO.TextReader>para o <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  remarks: "Use o <xref:System.Data.DataSet.ReadXmlSchema%2A>método para criar o esquema para <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método.</xref:System.Data.DataSet.WriteXmlSchema%2A>       O esquema XML é gravado usando o padrão XSD.      > [!NOTE] > Pode ocorrer corrupção de dados se a msdata:DataType e os tipos xs: Type não coincidem. Nenhuma exceção será lançada.       O <xref:System.Data.DataSet.ReadXmlSchema%2A>método é geralmente chamado antes de chamar o <xref:System.Data.DataSet.ReadXml%2A>método que é usado para preencher o <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Classes que herdam o <xref:System.IO.TextReader>classe inclui o <xref:System.IO.StreamReader>e <xref:System.IO.StringReader>classes.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_8_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_8_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "O <xref:System.IO.TextReader>do qual ler.</xref:System.IO.TextReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML do arquivo especificado para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Use o <xref:System.Data.DataSet.ReadXmlSchema%2A>método para criar o esquema para <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método.</xref:System.Data.DataSet.WriteXmlSchema%2A>       O esquema XML é gravado usando o padrão XSD.      > [!NOTE] > Pode ocorrer corrupção de dados se a msdata:DataType e os tipos xs: Type não coincidem. Nenhuma exceção será lançada.       O <xref:System.Data.DataSet.ReadXmlSchema%2A>método é geralmente chamado antes de chamar o <xref:System.Data.DataSet.ReadXml%2A>método que é usado para preencher o <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>      > [!NOTE] > Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - >-
    [!code-cs[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_0_1.cs)]
     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_0_1.vb)]
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "O arquivo de nome (incluindo o caminho) do qual ler."
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Lê o esquema XML especificado <xref:System.Xml.XmlReader>para o <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  remarks: "Use o método ReadXmlSchema para criar o esquema para <xref:System.Data.DataSet>.</xref:System.Data.DataSet> O esquema inclui definições de tabela, relação e restrição.       O esquema XML é gravado usando o padrão XSD.      > [!NOTE] > Pode ocorrer corrupção de dados se a msdata:DataType e os tipos xs: Type não coincidem. Nenhuma exceção será lançada.       O método ReadXmlSchema geralmente é chamado antes de chamar o <xref:System.Data.DataSet.ReadXml%2A>método que é usado para preencher o <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A>       O <xref:System.Xml.XmlReader?displayProperty=fullName>classe é abstrata.</xref:System.Xml.XmlReader?displayProperty=fullName> Uma classe que herda de `XmlReader` é a <xref:System.Xml.XmlTextReader?displayProperty=fullName>classe.</xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Se o esquema para o <xref:System.Data.DataSet>contém elementos de mesmo nome, mas tipo diferente, no mesmo namespace, uma exceção é lançada ao tentar ler o esquema para o <xref:System.Data.DataSet>com ReadXmlSchema.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Essa exceção não ocorrerá se você estiver usando o .NET Framework versão 1.0."
  example:
  - "The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the ReadXmlSchema method.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_4_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_4_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>do qual ler.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ignora os atributos e retorna um conjunto de dados vazio."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O leitor XML especificado."
  overload: System.Data.DataSet.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RejectChanges
  id: RejectChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reverte todas as alterações feitas a <xref href=&quot;System.Data.DataSet&quot;> </xref> desde que ele foi criado, ou desde a última vez &lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt; foi chamado."
  remarks: "Invocar RejectChanges para chamar o <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>método em todos os <xref:System.Data.DataTable>objetos contidos pelo <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>       <xref:System.Data.DataRow>objetos contidos pelo <xref:System.Data.DataSet>pode cada ser definida em modo de edição, chamando o <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName>método.</xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> </xref:System.Data.DataSet></xref:System.Data.DataRow> Depois de invocar o <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>método, as alterações podem ser rejeitadas por chamar o <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>no <xref:System.Data.DataTable>ao qual o <xref:System.Data.DataRow>objetos pertence.</xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> </xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>       Quando o <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>método é chamado, quaisquer linhas ainda no modo de edição cancelar suas edições.</xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> Novas linhas são removidas. Retornará linhas excluídas e modificadas para seu estado original (`DataRowState.Unchanged`).       AcceptChanges e RejectChanges só se aplicam a <xref:System.Data.DataRow>alterações relacionadas (ou seja, `Add`, `Remove`, `Delete`, e `Modify`).</xref:System.Data.DataRow> Eles não são aplicáveis para o esquema ou alterações estruturais."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The RejectChanges event is invoked from within a function.  \n  \n [!code-cs[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_6_1.cs)]\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_6_1.vb)]"
  syntax:
    content: public virtual void RejectChanges ();
    parameters: []
  overload: System.Data.DataSet.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Relations
  id: Relations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtenha a coleção de relações de tabelas e permitir a navegação do pai tabelas para tabelas filho."
  remarks: ''
  example:
  - "The following example prints the column name of all child tables through the Relations property.  \n  \n [!code-vb[Classic WebData DataSet.Relations Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.re_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection Relations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "Um <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> que contém uma coleção de <xref href=&quot;System.Data.DataRelation&quot;> </xref> objetos. Uma coleção vazia é retornada se nenhum <xref href=&quot;System.Data.DataRelation&quot;> </xref> objetos existem."
  overload: System.Data.DataSet.Relations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usado durante a comunicação remota."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;></xref> object."
  overload: System.Data.DataSet.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Reset
  id: Reset
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Limpa todas as tabelas e remove todas as relações, restrições foreign e tabelas a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>. As subclasses devem sobrepor redefinição para restaurar um <xref href=&quot;System.Data.DataSet&quot;> </xref> para seu estado original."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataSet.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.SchemaSerializationMode
  id: SchemaSerializationMode
  parent: System.Data.DataSet
  langs:
  - csharp
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "Um <xref:System.Data.DataSet>serializa os dados de instância e esquema por padrão em cenários de comunicação remota e serviços da Web.</xref:System.Data.DataSet> Definindo a propriedade SchemaSerializationMode de um tipo `DataSet` para <xref:System.Data.SchemaSerializationMode>faz com que as informações de esquema a ser excluído da carga de serialização.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>há suporte apenas para um tipo `DataSet`.</xref:System.Data.SchemaSerializationMode> Para não digitada `DataSet` essa propriedade só pode ser definida como <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>só deve ser usado em casos onde as informações de esquema de subjacente digitadas `DataTables`, `DataRelations` e `Constraints` não foi modificado.</xref:System.Data.SchemaSerializationMode> Se tiveram de modificações de informações de esquema ocorreu e completa devem ser serializadas com <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>há suporte na versão 2.0 do .NET Framework ou posterior.</xref:System.Data.SchemaSerializationMode>       Quando <xref:System.Data.SchemaSerializationMode>for definida, somente as propriedades de tempo de execução de nível superior presentes no <xref:System.Data.DataSet>são serializadas.</xref:System.Data.DataSet> </xref:System.Data.SchemaSerializationMode> Além disso, eles são serializados somente se estejam diferentes dos valores padrão. Nenhum do `Tables`, `Relations` ou `Constraints` são serializados. As propriedades de tempo de execução serializado incluem <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>e <xref:System.Data.DataSet.CaseSensitive%2A>.</xref:System.Data.DataSet.CaseSensitive%2A> </xref:System.Data.DataSet.EnforceConstraints%2A> </xref:System.Data.DataSet.Locale%2A> </xref:System.Data.DataSet.Prefix%2A> </xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet.DataSetName%2A> Essas propriedades são serializadas para certificar-se de que a integridade dos dados de tempo de execução geral é preservada."
  syntax:
    content: public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }
    return:
      type: System.Data.SchemaSerializationMode
      description: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.SchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeRelations
  id: ShouldSerializeRelations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém um valor que indica se <xref:System.Data.DataSet.Relations*>propriedade deve ser persistida.</xref:System.Data.DataSet.Relations*>"
  remarks: "Você normalmente usa esse método se você estiver criando ou um designer para o <xref:System.Data.DataSet>, ou criar seu próprio controle incorporar <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  \n  \n [!code-cs[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_3_1.cs)]\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_3_1.vb)]"
  syntax:
    content: protected virtual bool ShouldSerializeRelations ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor da propriedade foi alterado do padrão; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeTables
  id: ShouldSerializeTables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém um valor que indica se <xref:System.Data.DataSet.Tables*>propriedade deve ser persistida.</xref:System.Data.DataSet.Tables*>"
  remarks: "Você normalmente usa esse método somente se você estiver criando ou um designer para o <xref:System.Data.DataSet>, ou criar seu próprio controle incorporar <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The ShouldSerializeTables method is called from within functions in the derived class.  \n  \n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_2_1.vb)]\n [!code-cs[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_2_1.cs)]"
  syntax:
    content: protected virtual bool ShouldSerializeTables ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor da propriedade foi alterado do padrão; Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeTables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Site
  id: Site
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Sites de associar um <xref:System.ComponentModel.Component>para um <xref:System.ComponentModel.Container>e habilitar a comunicação entre eles, bem como fornecer uma maneira para o contêiner gerenciar seus componentes.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Para obter uma descrição desse membro, consulte &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.DataSet>instância é convertida em um <xref:System.ComponentModel.IListSource>interface.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "Para obter uma descrição desse membro, consulte &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Para obter uma descrição desse membro, consulte &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.DataSet>instância é convertida em um <xref:System.ComponentModel.IListSource>interface.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Para obter uma descrição desse membro, consulte &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Para obter uma descrição desse membro, consulte &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.DataSet>instância é convertida em um <xref:System.Xml.Serialization.IXmlSerializable>interface.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Para obter uma descrição desse membro, consulte &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Para obter uma descrição desse membro, consulte &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.DataSet>instância é convertida em um <xref:System.Xml.Serialization.IXmlSerializable>interface.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Para obter uma descrição desse membro, consulte &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Esse membro é uma implementação de membro de interface explícita. Ele pode ser usado somente quando o <xref:System.Data.DataSet>instância é convertida em um <xref:System.Xml.Serialization.IXmlSerializable>interface.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Tables
  id: Tables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém a coleção de tabelas contidas no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Para adicionar tabelas à coleção, use o <xref:System.Data.DataTableCollection.Add%2A>método de <xref:System.Data.DataTableCollection>.</xref:System.Data.DataTableCollection> </xref:System.Data.DataTableCollection.Add%2A> Para remover tabelas, use o <xref:System.Data.DataTableCollection.Remove%2A>método.</xref:System.Data.DataTableCollection.Remove%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \n  \n [!code-vb[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ta_1.vb)]\n [!code-cs[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ta_1.cs)]"
  syntax:
    content: public System.Data.DataTableCollection Tables { get; }
    return:
      type: System.Data.DataTableCollection
      description: "O <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> contém <xref href=&quot;System.Data.DataSet&quot;> </xref>. Uma coleção vazia é retornada se nenhum <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos existem."
  overload: System.Data.DataSet.Tables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, use uma das sobrecargas que inclui o `mode` parâmetro e defina seu valor como `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the WriteXml method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_2_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_2_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Um <xref:System.IO.Stream>objeto usado para gravar em um arquivo.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> especificado"
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, use uma das sobrecargas que inclui o `mode` parâmetro e defina seu valor como `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "O <xref:System.IO.TextWriter>objeto com o qual gravar.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais para o <xref href=&quot;System.Data.DataSet&quot;> </xref> para o arquivo especificado."
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, use uma das sobrecargas que inclui o `mode` parâmetro e defina seu valor como `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "O arquivo de nome (incluindo o caminho) no qual gravar."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais para o <xref href=&quot;System.Data.DataSet&quot;> </xref> para <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> especificado"
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, use uma das sobrecargas que inclui o `mode` parâmetro e defina seu valor como `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O <xref:System.Xml.XmlWriter>com o qual gravar.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais e, opcionalmente, o esquema para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado &lt;xref:System.IO.Stream?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Para gravar o esquema, defina o valor para o <code> mode </code> parâmetro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, defina o `mode` parâmetro `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Um <xref:System.IO.Stream>objeto usado para gravar em um arquivo.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uma da <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valores."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais e, opcionalmente, o esquema para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado <xref:System.IO.TextWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Para gravar o esquema, defina o valor para o <code> mode </code> parâmetro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, defina o `mode` parâmetro `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_7_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_7_1.cs)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Um &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; objeto usado para gravar o documento."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uma da <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valores."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais e, opcionalmente, o esquema para o <xref href=&quot;System.Data.DataSet&quot;> </xref> para o arquivo especificado usando especificado <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Para gravar o esquema, defina o valor para o <code> mode </code> parâmetro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, defina o `mode` parâmetro `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_3_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_3_1.vb)]"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "O arquivo de nome (incluindo o caminho) no qual gravar."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uma da <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valores."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava os dados atuais e, opcionalmente, o esquema para o <xref href=&quot;System.Data.DataSet&quot;> </xref> usando especificado <xref:System.Xml.XmlWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Para gravar o esquema, defina o valor para o <code> mode </code> parâmetro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "O `WriteXml` método fornece uma maneira para gravar dados apenas, ou dados e esquema de um <xref:System.Data.DataSet>em um documento XML, enquanto o <xref:System.Data.DataSet.WriteXmlSchema%2A>método grava apenas o esquema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Para gravar dados e esquema, defina o `mode` parâmetro `WriteSchema`.       Observe que o mesmo é verdadeiro para o <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>métodos, respectivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Para ler dados XML, ou esquema e dados para o `DataSet`, use o `ReadXml` método. Para ler apenas o esquema, use o `ReadXmlSchema` método.      > [!NOTE] > Um <xref:System.InvalidOperationException>será lançada se um tipo de coluna no `DataRow` que está sendo lido ou gravado implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e não implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_1_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_1_1.vb)]"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O <xref:System.Xml.XmlWriter>com o qual gravar.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uma da <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valores."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML especificado &lt;xref:System.IO.Stream?displayProperty=fullName&gt; objeto."
  remarks: "Use o método WriteXmlSchema para gravar o esquema para um <xref:System.Data.DataSet>para um documento XML.</xref:System.Data.DataSet> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o método WriteXmlSchema.       O esquema XML é gravado usando o padrão XSD.       Para gravar os dados em um documento XML, use o <xref:System.Data.DataSet.WriteXml%2A>método.</xref:System.Data.DataSet.WriteXml%2A>       Classes que derivam de <xref:System.IO.Stream>classe incluem <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>e <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream> object that is passed to the WriteXmlSchema method to write the schema to disk.  \n  \n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_6_1.vb)]\n [!code-cs[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_6_1.cs)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Um <xref:System.IO.Stream>objeto usado para gravar em um arquivo.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML especificado <xref:System.IO.TextWriter>objeto.</xref:System.IO.TextWriter>"
  remarks: "Use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método para gravar o esquema para um <xref:System.Data.DataSet>para um documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método.</xref:System.Data.DataSet.WriteXmlSchema%2A>       O esquema XML é gravado usando o padrão XSD.       Para gravar os dados em um documento XML, use o <xref:System.Data.DataSet.WriteXml%2A>método.</xref:System.Data.DataSet.WriteXml%2A>       Classes de derivar do <xref:System.IO.TextWriter?displayProperty=fullName>classe incluem o <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>e <xref:System.IO.StringWriter?displayProperty=fullName>.</xref:System.IO.StringWriter?displayProperty=fullName> </xref:System.IO.StreamWriter?displayProperty=fullName> </xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> </xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName> </xref:System.Web.HttpWriter?displayProperty=fullName> </xref:System.IO.TextWriter?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_0_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_0_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "O <xref:System.IO.TextWriter>objeto com o qual gravar.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML para um arquivo."
  remarks: "Use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método para gravar o esquema para um <xref:System.Data.DataSet>para um documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método.</xref:System.Data.DataSet.WriteXmlSchema%2A>       O esquema XML é gravado usando o padrão XSD.       Para gravar os dados em um documento XML, use o <xref:System.Data.DataSet.WriteXml%2A>método.</xref:System.Data.DataSet.WriteXml%2A>"
  example:
  - >-
    [!code-cs[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_4_1.cs)]
     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_4_1.vb)]
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "O arquivo de nome (incluindo o caminho) no qual gravar."
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>não está definido como <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML para um <xref:System.Xml.XmlWriter>objeto.</xref:System.Xml.XmlWriter>"
  remarks: "Use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método para gravar o esquema para um <xref:System.Data.DataSet>para um documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> O esquema inclui definições de tabela, relação e restrição. Para gravar um esquema em um documento XML, use o <xref:System.Data.DataSet.WriteXmlSchema%2A>método.</xref:System.Data.DataSet.WriteXmlSchema%2A>       O esquema XML é gravado usando o padrão XSD.       Para gravar os dados em um documento XML, use o <xref:System.Data.DataSet.WriteXml%2A>método.</xref:System.Data.DataSet.WriteXml%2A>       Uma classe que herda a <xref:System.Xml.XmlWriter?displayProperty=fullName>classe é a <xref:System.Xml.XmlTextWriter?displayProperty=fullName>classe.</xref:System.Xml.XmlTextWriter?displayProperty=fullName> </xref:System.Xml.XmlWriter?displayProperty=fullName>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_5_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_5_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O <xref:System.Xml.XmlWriter>para gravar.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML especificado &lt;xref:System.IO.Stream?displayProperty=fullName&gt; objeto."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Um &lt;xref:System.IO.Stream?displayProperty=fullName&gt; objeto gravar."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Um delegado usado para converter <xref:System.Type>a cadeia de caracteres.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML para o <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> especificado"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Um <xref:System.IO.TextWriter>objeto gravasse.</xref:System.IO.TextWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Um delegado usado para converter <xref:System.Type>a cadeia de caracteres.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML para um arquivo."
  syntax:
    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: fileName
      type: System.String
      description: "O nome do arquivo para gravação."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Um delegado usado para converter <xref:System.Type>a cadeia de caracteres.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Grava o <xref href=&quot;System.Data.DataSet&quot;> </xref> estrutura como um esquema XML para o <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> especificado"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Um <xref:System.Xml.XmlWriter>objeto gravasse.</xref:System.Xml.XmlWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Um delegado usado para converter <xref:System.Type>a cadeia de caracteres.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DataSet.#ctor
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
- uid: System.Data.DataSet.#ctor(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataSet.AcceptChanges
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
- uid: System.Data.DataSet.BeginInit
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
- uid: System.Data.DataSet.CaseSensitive
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear
  parent: System.Data.DataSet
  isExternal: false
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
- uid: System.Data.DataSet.Clone
  parent: System.Data.DataSet
  isExternal: false
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataSet.Copy
  parent: System.Data.DataSet
  isExternal: false
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
- uid: System.Data.DataSet.CreateDataReader
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.DataSetName
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
- uid: System.Data.DataViewManager
  parent: System.Data
  isExternal: false
  name: DataViewManager
  nameWithType: DataViewManager
  fullName: System.Data.DataViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
- uid: System.Data.SchemaSerializationMode
  parent: System.Data
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: SchemaSerializationMode
  fullName: System.Data.SchemaSerializationMode
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.EndInit
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
- uid: System.Data.DataSet.EnforceConstraints
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataSet.GetChanges
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetSchemaSerializable
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetXml
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
- uid: System.Data.DataSet.GetXmlSchema
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
- uid: System.Data.DataSet.HasChanges
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
- uid: System.Data.DataSet.HasErrors
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
- uid: System.Data.DataSet.Initialized
  parent: System.Data.DataSet
  isExternal: false
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataSet.InitializeDerivedDataSet
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.IsInitialized
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataSet.Locale
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.MergeFailed
  parent: System.Data.DataSet
  isExternal: false
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
- uid: System.Data.MergeFailedEventHandler
  parent: System.Data
  isExternal: false
  name: MergeFailedEventHandler
  nameWithType: MergeFailedEventHandler
  fullName: System.Data.MergeFailedEventHandler
- uid: System.Data.DataSet.Namespace
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
- uid: System.Data.DataSet.Prefix
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
- uid: System.Data.DataSet.ReadXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataSet.RejectChanges
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
- uid: System.Data.DataSet.Relations
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataSet.RemotingFormat
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataSet.Reset
  parent: System.Data.DataSet
  isExternal: false
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
- uid: System.Data.DataSet.SchemaSerializationMode
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
- uid: System.Data.DataSet.ShouldSerializeTables
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
- uid: System.Data.DataSet.Site
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataSet.Tables
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
- uid: System.Data.DataTableCollection
  parent: System.Data
  isExternal: false
  name: DataTableCollection
  nameWithType: DataTableCollection
  fullName: System.Data.DataTableCollection
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataSet.WriteXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
- uid: System.Converter{System.Type,System.String}
  parent: System
  isExternal: false
  name: Converter<Type,String>
  nameWithType: Converter<Type,String>
  fullName: System.Converter<System.Type,System.String>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<System.Type,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
- uid: System.Data.DataSet.#ctor*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet
  nameWithType: DataSet.DataSet
- uid: System.Data.DataSet.AcceptChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges
  nameWithType: DataSet.AcceptChanges
- uid: System.Data.DataSet.BeginInit*
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit
  nameWithType: DataSet.BeginInit
- uid: System.Data.DataSet.CaseSensitive*
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear*
  parent: System.Data.DataSet
  isExternal: false
  name: Clear
  nameWithType: DataSet.Clear
- uid: System.Data.DataSet.Clone*
  parent: System.Data.DataSet
  isExternal: false
  name: Clone
  nameWithType: DataSet.Clone
- uid: System.Data.DataSet.Copy*
  parent: System.Data.DataSet
  isExternal: false
  name: Copy
  nameWithType: DataSet.Copy
- uid: System.Data.DataSet.CreateDataReader*
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader
  nameWithType: DataSet.CreateDataReader
- uid: System.Data.DataSet.DataSetName*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager*
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode
  nameWithType: DataSet.DetermineSchemaSerializationMode
- uid: System.Data.DataSet.EndInit*
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit
  nameWithType: DataSet.EndInit
- uid: System.Data.DataSet.EnforceConstraints*
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties*
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
- uid: System.Data.DataSet.GetChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges
  nameWithType: DataSet.GetChanges
- uid: System.Data.DataSet.GetDataSetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema
  nameWithType: DataSet.GetDataSetSchema
- uid: System.Data.DataSet.GetObjectData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData
  nameWithType: DataSet.GetObjectData
- uid: System.Data.DataSet.GetSchemaSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable
  nameWithType: DataSet.GetSchemaSerializable
- uid: System.Data.DataSet.GetSerializationData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData
  nameWithType: DataSet.GetSerializationData
- uid: System.Data.DataSet.GetXml*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml
  nameWithType: DataSet.GetXml
- uid: System.Data.DataSet.GetXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema
  nameWithType: DataSet.GetXmlSchema
- uid: System.Data.DataSet.HasChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges
  nameWithType: DataSet.HasChanges
- uid: System.Data.DataSet.HasErrors*
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema
  nameWithType: DataSet.InferXmlSchema
- uid: System.Data.DataSet.InitializeDerivedDataSet*
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet
  nameWithType: DataSet.InitializeDerivedDataSet
- uid: System.Data.DataSet.IsBinarySerialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized
  nameWithType: DataSet.IsBinarySerialized
- uid: System.Data.DataSet.IsInitialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
- uid: System.Data.DataSet.Load*
  parent: System.Data.DataSet
  isExternal: false
  name: Load
  nameWithType: DataSet.Load
- uid: System.Data.DataSet.Locale*
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
- uid: System.Data.DataSet.Merge*
  parent: System.Data.DataSet
  isExternal: false
  name: Merge
  nameWithType: DataSet.Merge
- uid: System.Data.DataSet.Namespace*
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataSet.OnPropertyChanging
- uid: System.Data.DataSet.OnRemoveRelation*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation
  nameWithType: DataSet.OnRemoveRelation
- uid: System.Data.DataSet.OnRemoveTable*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable
  nameWithType: DataSet.OnRemoveTable
- uid: System.Data.DataSet.Prefix*
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataSet.RaisePropertyChanging
- uid: System.Data.DataSet.ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml
  nameWithType: DataSet.ReadXml
- uid: System.Data.DataSet.ReadXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataSet.ReadXmlSchema
- uid: System.Data.DataSet.ReadXmlSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataSet.ReadXmlSerializable
- uid: System.Data.DataSet.RejectChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges
  nameWithType: DataSet.RejectChanges
- uid: System.Data.DataSet.Relations*
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
- uid: System.Data.DataSet.RemotingFormat*
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
- uid: System.Data.DataSet.Reset*
  parent: System.Data.DataSet
  isExternal: false
  name: Reset
  nameWithType: DataSet.Reset
- uid: System.Data.DataSet.SchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations
  nameWithType: DataSet.ShouldSerializeRelations
- uid: System.Data.DataSet.ShouldSerializeTables*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables
  nameWithType: DataSet.ShouldSerializeTables
- uid: System.Data.DataSet.Site*
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataSet.Tables*
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
- uid: System.Data.DataSet.WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml
  nameWithType: DataSet.WriteXml
- uid: System.Data.DataSet.WriteXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataSet.WriteXmlSchema
