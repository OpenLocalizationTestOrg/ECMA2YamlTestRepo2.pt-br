### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.PropertyCollection
  id: PropertyCollection
  children:
  - System.DirectoryServices.PropertyCollection.Contains(System.String)
  - System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  - System.DirectoryServices.PropertyCollection.Count
  - System.DirectoryServices.PropertyCollection.GetEnumerator
  - System.DirectoryServices.PropertyCollection.Item(System.String)
  - System.DirectoryServices.PropertyCollection.PropertyNames
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  - System.DirectoryServices.PropertyCollection.Values
  langs:
  - csharp
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
  type: Class
  summary: "A classe PropertyCollection contém as propriedades de um <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  syntax:
    content: 'public class PropertyCollection : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Determina se a propriedade especificada está nesta coleção."
  syntax:
    content: public bool Contains (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "O nome da propriedade a ser localizada."
    return:
      type: System.Boolean
      description: "O valor de retorno é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se a propriedade especificada pertence a esta coleção; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.PropertyCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  id: CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copia todos os objetos dessa coleção em uma matriz, começando no índice especificado na matriz de destino."
  syntax:
    content: public void CopyTo (System.DirectoryServices.PropertyValueCollection[] array, int index);
    parameters:
    - id: array
      type: System.DirectoryServices.PropertyValueCollection[]
      description: "A matriz de <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;> </xref> objetos que recebe os elementos desta coleção."
    - id: index
      type: System.Int32
      description: "O índice de base zero no `array` onde esse método inicia a cópia desta coleção."
  overload: System.DirectoryServices.PropertyCollection.CopyTo*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Ocorreu um erro durante a chamada para a interface subjacente."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Count
  id: Count
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém o número de propriedades na coleção."
  remarks: "Serviços de informações da Internet (IIS) e provedores de WinNT atualmente não dão contagem, para que cada um gerará um <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de propriedades na coleção."
  overload: System.DirectoryServices.PropertyCollection.Count*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Ocorreu um erro durante a chamada para a interface subjacente."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O diretório não pode relatar o número de propriedades."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Retorna um enumerador que você pode usar para percorrer a esta coleção."
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Um <xref:System.Collections.IDictionaryEnumerator>que você pode usar para percorrer a esta coleção.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.DirectoryServices.PropertyCollection.GetEnumerator*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Ocorreu um erro durante a chamada para a interface subjacente."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  id: Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém a propriedade especificada."
  remarks: "No c#, essa propriedade é o indexador de <xref:System.DirectoryServices.PropertyCollection>classe.</xref:System.DirectoryServices.PropertyCollection>       No JScript, você pode usar as propriedades indexadas padrão definidas por um tipo, mas você não pode definir explicitamente as suas próprias. No entanto, especificar que o atributo expando em uma classe fornece automaticamente um padrão propriedade com um tipo de objeto e um tipo de índice de <xref:System.String>.</xref:System.String> indexada"
  syntax:
    content: public System.DirectoryServices.PropertyValueCollection this[string propertyName] { get; }
    parameters:
    - id: propertyName
      type: System.String
      description: "O nome da propriedade a recuperar."
    return:
      type: System.DirectoryServices.PropertyValueCollection
      description: "O valor da propriedade especificada."
  overload: System.DirectoryServices.PropertyCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  id: PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém os nomes das propriedades na coleção."
  remarks: "Ao acessar membros de propriedade PropertyNames, um <xref:System.Runtime.InteropServices.COMException>pode ser gerada devido a um erro ao acessar a interface subjacente.</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection PropertyNames { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>objeto que contém os nomes das propriedades na coleção.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.PropertyNames*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copia os elementos do <xref:System.Collections.ICollection>para um <xref:System.Array>, a partir de um determinado <xref:System.Array>índice.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Unidimensional <xref:System.Array>que é o destino dos elementos copiados de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Array> O <xref:System.Array>devem ter a indexação com base em zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice de base zero no `array` no qual a cópia começa."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       o número de elementos na origem - ou - <xref:System.Collections.ICollection> é maior que o espaço disponível do <code>index</code> até o final do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo de origem <xref:System.Collections.ICollection>não pode ser convertido automaticamente para o tipo de destino <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um valor que indica se o acesso para o <xref:System.Collections.ICollection>é sincronizado (thread-safe).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Retorna um objeto, que pode ser usado para sincronizar o acesso <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       Coleta a maioria das classes de <xref:System.Collections?displayProperty=fullName>namespace também implementa um método sincronizado, que fornece um wrapper sincronizado para a coleção subjacente.</xref:System.Collections?displayProperty=fullName>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança do thread. Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções que são provenientes de alterações feitas por outros threads.       [Visual Basic, c#]       O exemplo a seguir mostra como bloquear a coleção usando o <xref:System.Collections.ICollection.SyncRoot%2A>durante toda a enumeração: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se acessar para o <xref:System.Collections.ICollection>é sincronizado (thread-safe); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um objeto que pode ser usado para sincronizar o acesso <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "Para coleções cujo repositório subjacente não está disponível publicamente, a implementação esperada é retornar a instância atual. Observe que o ponteiro para a instância atual pode não ser suficiente para coleções que agrupam outras coleções; aqueles devem retornar a propriedade de SyncRoot da coleção subjacente.       Coleta a maioria das classes de <xref:System.Collections?displayProperty=fullName>namespace também implementa um método sincronizado, que fornece um wrapper sincronizado para a coleção subjacente.</xref:System.Collections?displayProperty=fullName> No entanto, as classes derivadas podem fornecer sua própria versão sincronizada de coleção usando o <xref:System.Collections.ICollection.SyncRoot%2A>propriedade.</xref:System.Collections.ICollection.SyncRoot%2A> O código de sincronização necessário realizar operações no <xref:System.Collections.ICollection.SyncRoot%2A>da coleção, não diretamente na coleção.</xref:System.Collections.ICollection.SyncRoot%2A> Isso garante que a operação correta de coleções que são derivados de outros objetos. Especificamente, ele mantém uma sincronização adequada com outros threads que podem ser simultaneamente modificando a instância de coleção.       Na ausência de um método sincronizado em uma coleção, o uso esperado para <xref:System.Collections.ICollection.SyncRoot%2A>tem esta aparência: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` enumerando através de um conjunto não é intrinsecamente um procedimento com segurança de thread.      </xref:System.Collections.ICollection.SyncRoot%2A> Mesmo quando uma coleção é sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador lançar uma exceção. Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração ou capture as exceções resultante de alterações feitas por outros threads.       [Visual Basic, c#]       O exemplo de código a seguir mostra como bloquear a coleção usando o <xref:System.Collections.ICollection.SyncRoot%2A>durante toda a enumeração: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser usado para sincronizar o acesso <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Adiciona um elemento com a chave fornecida e o valor para o <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary>"
  remarks: "Você também pode usar o <xref:System.Collections.IDictionary.Item%2A>propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no dicionário (por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.IDictionary.Item%2A> No entanto, se a chave especificada já existe no dicionário, configurando o <xref:System.Collections.IDictionary.Item%2A>propriedade substitui o valor antigo.</xref:System.Collections.IDictionary.Item%2A> Em contraste, o <xref:System.Collections.IDictionary.Add%2A>método não modifica os elementos existentes.</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#9](~/add/codesnippet/cpp/1a38ef09-e972-4d5a-adef-_1.cpp)]\n [!code-cs[Dictionary#9](~/add/codesnippet/csharp/1a38ef09-e972-4d5a-adef-_1.cs)]\n [!code-vb[Dictionary#9](~/add/codesnippet/visualbasic/1a38ef09-e972-4d5a-adef-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "<xref:System.Object>Para usar como a chave do elemento a ser adicionado.</xref:System.Object>"
    - id: value
      type: System.Object
      description: "<xref:System.Object>Para usar como o valor do elemento a ser adicionado.</xref:System.Object>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Um elemento com a mesma chave já existe no <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref:System.Collections.IDictionary>é somente leitura.</xref:System.Collections.IDictionary>       - ou - o <xref:System.Collections.IDictionary>tem um tamanho fixo.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  id: System#Collections#IDictionary#Clear
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Remove todos os elementos do <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#8](~/add/codesnippet/cpp/473cc76e-c5f1-4b76-bd2d-_1.cpp)]\n [!code-cs[Dictionary#8](~/add/codesnippet/csharp/473cc76e-c5f1-4b76-bd2d-_1.cs)]\n [!code-vb[Dictionary#8](~/add/codesnippet/visualbasic/473cc76e-c5f1-4b76-bd2d-_1.vb)]"
  syntax:
    content: void IDictionary.Clear ();
    parameters: []
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref:System.Collections.IDictionary>objeto é somente leitura.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Determina se o <xref:System.Collections.IDictionary>objeto contém um elemento com a chave especificada.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#5](~/add/codesnippet/cpp/37011492-a9b1-4bd3-bee4-_1.cpp)]\n [!code-cs[Dictionary#5](~/add/codesnippet/csharp/37011492-a9b1-4bd3-bee4-_1.cs)]\n [!code-vb[Dictionary#5](~/add/codesnippet/visualbasic/37011492-a9b1-4bd3-bee4-_1.vb)]"
  syntax:
    content: bool IDictionary.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "A chave a ser localizado no <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Collections.IDictionary>contém um elemento com a chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um valor que indica se o <xref:System.Collections.IDictionary>objeto tem um tamanho fixo.</xref:System.Collections.IDictionary>"
  remarks: "Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos após a coleção é criada, mas permitir a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Portanto, se forem feitas alterações à coleção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete as alterações."
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#6](~/add/codesnippet/cpp/9254691a-4dee-480c-bf03-_1.cpp)]\n [!code-cs[Dictionary#6](~/add/codesnippet/csharp/9254691a-4dee-480c-bf03-_1.cs)]\n [!code-vb[Dictionary#6](~/add/codesnippet/visualbasic/9254691a-4dee-480c-bf03-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Collections.IDictionary>objeto tem um fixa tamanho; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um valor que indica se o <xref:System.Collections.IDictionary>objeto é somente leitura.</xref:System.Collections.IDictionary>"
  remarks: "Uma coleção que é somente leitura não permite a adição, remoção ou modificação de elementos após a criação da coleção."
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#4](~/add/codesnippet/cpp/758e339d-f700-4387-ac5f-_1.cpp)]\n [!code-cs[Dictionary#4](~/add/codesnippet/csharp/758e339d-f700-4387-ac5f-_1.cs)]\n [!code-vb[Dictionary#4](~/add/codesnippet/visualbasic/758e339d-f700-4387-ac5f-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Collections.IDictionary>objeto é somente leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém ou define o elemento com a chave especificada."
  remarks: "Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: `myCollection[key]`.       Você também pode usar o <xref:System.Collections.IDictionary.Item%2A>propriedade para adicionar novos elementos, definindo o valor de uma chave que não existe no dicionário (por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.IDictionary.Item%2A> No entanto, se a chave especificada já existe no dicionário, configurando o <xref:System.Collections.IDictionary.Item%2A>propriedade substitui o valor antigo.</xref:System.Collections.IDictionary.Item%2A> Em contraste, o <xref:System.Collections.IDictionary.Add%2A>método não modifica os elementos existentes.</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#13](~/add/codesnippet/cpp/f4830ad8-862c-4ae4-a8e0-_1.cpp)]\n [!code-cs[Dictionary#13](~/add/codesnippet/csharp/f4830ad8-862c-4ae4-a8e0-_1.cs)]\n [!code-vb[Dictionary#13](~/add/codesnippet/visualbasic/f4830ad8-862c-4ae4-a8e0-_1.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento a ser obtido ou definido."
    return:
      type: System.Object
      description: "O elemento com a chave especificada."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A propriedade é definida e o <xref:System.Collections.IDictionary>objeto é somente leitura.</xref:System.Collections.IDictionary>       - ou - a propriedade for definida, <code> key </code> não existe na coleção e o <xref:System.Collections.IDictionary>tem um tamanho fixo.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém um <xref:System.Collections.ICollection>objeto que contém as chaves de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  remarks: "A ordem das chaves no retornado <xref:System.Collections.ICollection>objeto não for especificado, mas é garantido para ser a mesma ordem que os valores correspondentes no <xref:System.Collections.ICollection>retornado pelo <xref:System.Collections.IDictionary.Values%2A>propriedade.</xref:System.Collections.IDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#10](~/add/codesnippet/cpp/66b18c51-f730-4ac9-89c7-_1.cpp)]\n [!code-cs[Dictionary#10](~/add/codesnippet/csharp/66b18c51-f730-4ac9-89c7-_1.cs)]\n [!code-vb[Dictionary#10](~/add/codesnippet/visualbasic/66b18c51-f730-4ac9-89c7-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>objeto que contém as chaves de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Remove o elemento com a chave especificada do <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#7](~/add/codesnippet/cpp/0e5c3e14-6952-45d5-9f38-_1.cpp)]\n [!code-cs[Dictionary#7](~/add/codesnippet/csharp/0e5c3e14-6952-45d5-9f38-_1.cs)]\n [!code-vb[Dictionary#7](~/add/codesnippet/visualbasic/0e5c3e14-6952-45d5-9f38-_1.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento a ser removido."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref:System.Collections.IDictionary>objeto é somente leitura.</xref:System.Collections.IDictionary>       - ou - o <xref:System.Collections.IDictionary>tem um tamanho fixo.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Retorna um <xref:System.Collections.IEnumerable>objeto.</xref:System.Collections.IEnumerable>"
  remarks: "[Visual Basic, c#]       O `foreach` instrução de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Portanto, usando `foreach` é recomendado em vez de manipulação direta do enumerador.       Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento na coleção. <xref:System.Collections.IEnumerator.Reset%2A>também traz o enumerador de volta para essa posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição, o <xref:System.Collections.IEnumerator.Current%2A>propriedade está definida.</xref:System.Collections.IEnumerator.Current%2A> Portanto, você deve chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Retorna o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>passa o final da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>retorna `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também retornam `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A>retornado `false`, <xref:System.Collections.IEnumerator.Current%2A>é indefinido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção novamente, você pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido pelo <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permaneça inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente e seu comportamento é indefinido.       O enumerador não tem acesso exclusivo à coleção; Portanto, enumerando através de uma coleção intrinsecamente não é um procedimento de thread-safe.  Para garantir a segurança de thread durante a enumeração, você pode bloquear a coleção durante toda a enumeração.  Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerable>.object.</xref:System.Collections.IEnumerable>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Values
  id: Values
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Obtém os valores das propriedades na coleção."
  remarks: "Ao acessar membros de propriedade de valores, um <xref:System.Runtime.InteropServices.COMException>exceção pode ser gerada devido a um erro ao acessar a interface subjacente.</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém os valores das propriedades na coleção.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
- uid: System.DirectoryServices.PropertyValueCollection[]
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection[]
  spec.csharp:
  - uid: System.DirectoryServices.PropertyValueCollection
    name: PropertyValueCollection
    nameWithType: PropertyValueCollection
    fullName: PropertyValueCollection[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.PropertyCollection.Count
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
- uid: System.DirectoryServices.PropertyValueCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
- uid: System.DirectoryServices.PropertyCollection.Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains
  nameWithType: PropertyCollection.Contains
- uid: System.DirectoryServices.PropertyCollection.CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo
  nameWithType: PropertyCollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.Count*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: PropertyCollection.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item
  nameWithType: PropertyCollection.Item
- uid: System.DirectoryServices.PropertyCollection.PropertyNames*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
