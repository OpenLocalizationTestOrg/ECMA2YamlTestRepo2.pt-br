### YamlMime:ManagedReference
items:
- uid: System.Data.DataRelation
  id: DataRelation
  children:
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
  - System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  - System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  - System.Data.DataRelation.CheckStateForProperty
  - System.Data.DataRelation.ChildColumns
  - System.Data.DataRelation.ChildKeyConstraint
  - System.Data.DataRelation.ChildTable
  - System.Data.DataRelation.DataSet
  - System.Data.DataRelation.ExtendedProperties
  - System.Data.DataRelation.Nested
  - System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataRelation.ParentColumns
  - System.Data.DataRelation.ParentKeyConstraint
  - System.Data.DataRelation.ParentTable
  - System.Data.DataRelation.RaisePropertyChanging(System.String)
  - System.Data.DataRelation.RelationName
  - System.Data.DataRelation.ToString
  langs:
  - csharp
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
  type: Class
  summary: "Representa uma relação pai/filho entre dois <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos."
  remarks: "Uma DataRelation é usada para relacionar duas <xref:System.Data.DataTable>objetos uns aos outros por meio de <xref:System.Data.DataColumn>objetos.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> Por exemplo, em uma relação de pedidos do cliente, a tabela Customers é o pai e a tabela Orders é o filho da relação. Isso é semelhante a uma relação chave primária/estrangeira chave. Para obter mais informações, consulte [DataRelations navegando](~/add/includes/ajax-current-ext-md.md).       São criadas relações entre as colunas correspondentes nas tabelas pai e filho. Ou seja, o <xref:System.Data.DataColumn.DataType%2A>valor de ambas as colunas devem ser idênticas.</xref:System.Data.DataColumn.DataType%2A>       Relações também podem colocar em cascata várias alterações do pai <xref:System.Data.DataRow>para suas linhas filho.</xref:System.Data.DataRow> Para controlar como os valores são alterados em linhas filho, adicione um <xref:System.Data.ForeignKeyConstraint>para o <xref:System.Data.ConstraintCollection>do <xref:System.Data.DataTable>objeto.</xref:System.Data.DataTable> </xref:System.Data.ConstraintCollection> </xref:System.Data.ForeignKeyConstraint> O <xref:System.Data.ConstraintCollection>determina a ação a ser tomada quando um valor em uma tabela pai é excluída ou atualizada.</xref:System.Data.ConstraintCollection>       Quando uma DataRelation é criada, ele primeiro verifica se a relação pode ser estabelecida. Depois que ele é adicionado ao <xref:System.Data.DataRelationCollection>a relação é mantida, não permitindo que as alterações que invalide o proprietário.</xref:System.Data.DataRelationCollection> Entre o período quando uma DataRelation é criada e adicionada para o <xref:System.Data.DataRelationCollection>, é possível que outras alterações sejam feitas para as linhas pai ou filho.</xref:System.Data.DataRelationCollection> Uma exceção é gerada se isso faz com que uma relação que não é mais válida.      > [!NOTE] > Pode ocorrer corrupção de dados se uma relação bidirecional é definida entre duas tabelas. Uma relação bidirecional consiste em dois `DataRelation` objetos que usam as mesmas colunas, com as funções de pai-filho alternadas. Nenhuma exceção é gerada quando o `DataRelation` objetos são salvos; no entanto, pode ocorrer corrupção de dados.       Objetos DataRelation estão contidos em um <xref:System.Data.DataRelationCollection>, que pode ser acessado por meio de <xref:System.Data.DataSet.Relations%2A>propriedade do <xref:System.Data.DataSet>e as <xref:System.Data.DataTable.ChildRelations%2A> <xref:System.Data.DataTable.ParentRelations%2A>Propriedades de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ParentRelations%2A> e</xref:System.Data.DataTable.ChildRelations%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Relations%2A> </xref:System.Data.DataRelationCollection>"
  example:
  - "The following example creates a new DataRelation and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataRelation Example#1](~/add/codesnippet/csharp/t-system.data.datarelation_1.cs)]\n [!code-vb[Classic WebData DataRelation Example#1](~/add/codesnippet/visualbasic/t-system.data.datarelation_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("RelationName")]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataRelationEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.TypeConverter(typeof(System.Data.RelationshipConverter))]

      public class DataRelation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
  id: '#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn,DataColumn)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataRelation&quot;> </xref> classe usando especificado <xref href=&quot;System.Data.DataRelation&quot;> </xref> nome e pai e filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataRelation.DataRelation#1](~/add/codesnippet/csharp/c51592f7-179d-4737-b5e5-_1.cs)]\n [!code-vb[Classic WebData DataRelation.DataRelation#1](~/add/codesnippet/visualbasic/c51592f7-179d-4737-b5e5-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn parentColumn, System.Data.DataColumn childColumn);
    parameters:
    - id: relationName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataRelation&quot;> </xref>. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;), um nome padrão será fornecido quando o objeto criado é adicionado para o <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumn
      type: System.Data.DataColumn
      description: "O pai <xref href=&quot;System.Data.DataColumn&quot;> </xref> na relação."
    - id: childColumn
      type: System.Data.DataColumn
      description: "O filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> na relação."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uma ou ambas as <xref href=&quot;System.Data.DataColumn&quot;> </xref> contém objetos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "As colunas têm tipos de dados diferentes - ou - as tabelas não pertencem à mesma <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  id: '#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn[],DataColumn[])
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[])
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[])
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataRelation&quot;> </xref> classe usando especificado <xref href=&quot;System.Data.DataRelation&quot;> </xref> matrizes correspondentes e nome do pai e filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataRelation.DataRelation2 Example#1](~/add/codesnippet/visualbasic/74c401a9-c184-4dbd-895b-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn[] parentColumns, System.Data.DataColumn[] childColumns);
    parameters:
    - id: relationName
      type: System.String
      description: "O nome da relação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;), um nome padrão será fornecido quando o objeto criado é adicionado para o <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumns
      type: System.Data.DataColumn[]
      description: "Uma matriz de pai <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
    - id: childColumns
      type: System.Data.DataColumn[]
      description: "Uma matriz de filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uma ou ambas as <xref href=&quot;System.Data.DataColumn&quot;> </xref> contém objetos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "O <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos têm dados de diferentes tipos - ou - uma ou ambas as matrizes não são compostas de colunas diferentes da mesma tabela.       - Ou - as tabelas não pertencem à mesma <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
  id: '#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn,DataColumn,Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataRelation&quot;> </xref> classe usando o nome especificado, pai e filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos e um valor que indica se é necessário criar restrições."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataRelation.DataRelation1 Example#1](~/add/codesnippet/visualbasic/6c615cfd-3655-4658-a32b-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn parentColumn, System.Data.DataColumn childColumn, bool createConstraints);
    parameters:
    - id: relationName
      type: System.String
      description: "O nome da relação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;), um nome padrão será fornecido quando o objeto criado é adicionado para o <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumn
      type: System.Data.DataColumn
      description: "O pai <xref href=&quot;System.Data.DataColumn&quot;> </xref> na relação."
    - id: childColumn
      type: System.Data.DataColumn
      description: "O filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> na relação."
    - id: createConstraints
      type: System.Boolean
      description: "Um valor que indica se as restrições são criadas. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, se as restrições são criadas. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uma ou ambas as <xref href=&quot;System.Data.DataColumn&quot;> </xref> contém objetos <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "As colunas têm tipos de dados diferentes - ou - as tabelas não pertencem à mesma <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
  id: '#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn[],DataColumn[],Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataRelation&quot;> </xref> classe usando o nome especificado, as matrizes correspondentes de pai e filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos e o valor que indica se é necessário criar restrições."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataRelation.DataRelation3 Example#1](~/add/codesnippet/visualbasic/91b51f14-3ecf-436c-8f4c-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn[] parentColumns, System.Data.DataColumn[] childColumns, bool createConstraints);
    parameters:
    - id: relationName
      type: System.String
      description: "O nome da relação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;), um nome padrão será fornecido quando o objeto criado é adicionado para o <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumns
      type: System.Data.DataColumn[]
      description: "Uma matriz de pai <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
    - id: childColumns
      type: System.Data.DataColumn[]
      description: "Uma matriz de filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
    - id: createConstraints
      type: System.Boolean
      description: "Um valor que indica se é necessário criar restrições. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, se as restrições são criadas. Caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uma ou ambas as <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "As colunas têm tipos de dados diferentes - ou - as tabelas não pertencem à mesma <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este construtor é fornecido para suporte de tempo de design no ambiente do Visual Studio."
  remarks: "Qualquer <xref:System.Data.DataRelation>objeto criado usando este construtor deve ser adicionado à coleção com o <xref:System.Data.DataRelationCollection.AddRange%2A>método dentro de um <xref:System.Data.DataTable.BeginInit%2A>e <xref:System.Data.DataTable.EndInit%2A>bloco.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A> </xref:System.Data.DataRelationCollection.AddRange%2A> </xref:System.Data.DataRelation> Se este construtor não é chamado entre <xref:System.Data.DataTable.BeginInit%2A>e <xref:System.Data.DataTable.EndInit%2A>um <xref:System.NullReferenceException>ocorrerá.</xref:System.NullReferenceException> </xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A> Além disso, as tabelas e colunas com os nomes especificados devem existir no momento em que o construtor é chamado."
  syntax:
    content: public DataRelation (string relationName, string parentTableName, string childTableName, string[] parentColumnNames, string[] childColumnNames, bool nested);
    parameters:
    - id: relationName
      type: System.String
      description: "O nome da relação. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;), um nome padrão será fornecido quando o objeto criado é adicionado para o <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentTableName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataTable&quot;> </xref> que é a tabela pai da relação."
    - id: childTableName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataTable&quot;> </xref> que é a tabela filho da relação."
    - id: parentColumnNames
      type: System.String[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> nomes no pai do objeto <xref href=&quot;System.Data.DataTable&quot;> </xref> da relação."
    - id: childColumnNames
      type: System.String[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> nomes do filho do objeto <xref href=&quot;System.Data.DataTable&quot;> </xref> da relação."
    - id: nested
      type: System.Boolean
      description: "Um valor que indica se as relações são aninhadas."
  overload: System.Data.DataRelation.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,String,String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este construtor é fornecido para suporte de tempo de design no ambiente do Visual Studio."
  remarks: "Qualquer <xref:System.Data.DataRelation>objeto criado usando este construtor, em seguida, deve ser adicionado à coleção <xref:System.Data.DataRelationCollection.AddRange%2A>.</xref:System.Data.DataRelationCollection.AddRange%2A> </xref:System.Data.DataRelation> Tabelas e colunas com os nomes especificados devem existir no momento em que o método é chamado, ou se <xref:System.Data.DataTable.BeginInit%2A>foi chamado antes de chamar este construtor, as tabelas e colunas com os nomes especificados deve existir no momento em que <xref:System.Data.DataTable.EndInit%2A>é chamado.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public DataRelation (string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, string[] parentColumnNames, string[] childColumnNames, bool nested);
    parameters:
    - id: relationName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataRelation&quot;> </xref>. Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia de caracteres vazia (&quot;&quot;), um nome padrão será fornecido quando o objeto criado é adicionado para o <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentTableName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataTable&quot;> </xref> que é a tabela pai da relação."
    - id: parentTableNamespace
      type: System.String
      description: "O nome do namespace da tabela pai."
    - id: childTableName
      type: System.String
      description: "O nome do <xref href=&quot;System.Data.DataTable&quot;> </xref> que é a tabela filho da relação."
    - id: childTableNamespace
      type: System.String
      description: "O nome do namespace de tabela filho."
    - id: parentColumnNames
      type: System.String[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> nomes no pai do objeto <xref href=&quot;System.Data.DataTable&quot;> </xref> da relação."
    - id: childColumnNames
      type: System.String[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> nomes do filho do objeto <xref href=&quot;System.Data.DataTable&quot;> </xref> da relação."
    - id: nested
      type: System.Boolean
      description: "Um valor que indica se as relações são aninhadas."
  overload: System.Data.DataRelation.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.CheckStateForProperty
  id: CheckStateForProperty
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: CheckStateForProperty()
  nameWithType: DataRelation.CheckStateForProperty()
  fullName: System.Data.DataRelation.CheckStateForProperty()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este método dá suporte à infraestrutura .NET Framework e não se destina a ser usado diretamente no seu código."
  syntax:
    content: protected void CheckStateForProperty ();
    parameters: []
  overload: System.Data.DataRelation.CheckStateForProperty*
  exceptions:
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "As tabelas pai e filho pertencem a diferentes <xref href=&quot;System.Data.DataSet&quot;> </xref> objetos.       - Ou - um ou mais pares de pai e filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos têm tipos de dados incompatíveis.       - Ou - pai e filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos são idênticos."
  platform:
  - net462
- uid: System.Data.DataRelation.ChildColumns
  id: ChildColumns
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ChildColumns
  nameWithType: DataRelation.ChildColumns
  fullName: System.Data.DataRelation.ChildColumns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o filho <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos desta relação."
  remarks: ''
  example:
  - "The following example gets the child <xref:System.Data.DataColumn> objects of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.ChildColumns Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_7_1.vb)]"
  syntax:
    content: public virtual System.Data.DataColumn[] ChildColumns { get; }
    return:
      type: System.Data.DataColumn[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos."
  overload: System.Data.DataRelation.ChildColumns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ChildKeyConstraint
  id: ChildKeyConstraint
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ChildKeyConstraint
  nameWithType: DataRelation.ChildKeyConstraint
  fullName: System.Data.DataRelation.ChildKeyConstraint
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref> para a relação."
  remarks: "Se não associados <xref:System.Data.ForeignKeyConstraint>existe para essa relação, ele será criado automaticamente e aponta para o `ChildKeyConstraint`, quando a relação é adicionada à coleção de relações.</xref:System.Data.ForeignKeyConstraint>"
  example:
  - "The following example sets the `UpdateRule`, `DeleteRule`, and `AcceptReject` rule for the `ForeignKeyConstraint` associated with the `DataRelation`.  \n  \n [!code-vb[Classic WebData DataRelation.ChildKeyConstraint Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_2_1.vb)]"
  syntax:
    content: public virtual System.Data.ForeignKeyConstraint ChildKeyConstraint { get; }
    return:
      type: System.Data.ForeignKeyConstraint
      description: "A <xref uid=&quot;langword_csharp_ForeignKeyConstraint&quot; name=&quot;ForeignKeyConstraint&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataRelation.ChildKeyConstraint*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ChildTable
  id: ChildTable
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ChildTable
  nameWithType: DataRelation.ChildTable
  fullName: System.Data.DataRelation.ChildTable
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém uma tabela filho desta relação."
  remarks: ''
  example:
  - "The following example gets the child <xref:System.Data.DataTable> of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.ChildTable Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataTable ChildTable { get; }
    return:
      type: System.Data.DataTable
      description: "Um <xref href=&quot;System.Data.DataTable&quot;> </xref> que é a tabela filho da relação."
  overload: System.Data.DataRelation.ChildTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.DataSet
  id: DataSet
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataSet
  nameWithType: DataRelation.DataSet
  fullName: System.Data.DataRelation.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o <xref href=&quot;System.Data.DataSet&quot;> </xref> ao qual o <xref href=&quot;System.Data.DataRelation&quot;> </xref> pertence."
  remarks: "O <xref:System.Data.DataRelationCollection>associado um <xref:System.Data.DataSet>é acessada por meio de <xref:System.Data.DataSet.Relations%2A>propriedade do <xref:System.Data.DataSet>objeto.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Relations%2A> </xref:System.Data.DataSet> </xref:System.Data.DataRelationCollection>"
  example:
  - "The following example gets the <xref:System.Data.DataSet> of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_1_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "Um <xref href=&quot;System.Data.DataSet&quot;> </xref> ao qual o <xref href=&quot;System.Data.DataRelation&quot;> </xref> pertence."
  overload: System.Data.DataRelation.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataRelation.ExtendedProperties
  fullName: System.Data.DataRelation.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém a coleção que armazena as propriedades personalizadas."
  remarks: "Use ExtendedProperties para adicionar informações personalizadas a um <xref:System.Data.DataRelation>objeto.</xref:System.Data.DataRelation> Adicione informações com o método Add. Recupere informações com o método de Item.       Propriedades estendidas devem ser do tipo <xref:System.String>.</xref:System.String> Propriedades que não são do tipo cadeia de caracteres não são mantidas quando o <xref:System.Data.DataRelation>é gravada como XML.</xref:System.Data.DataRelation>"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "Um <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> que contém propriedades personalizadas."
  overload: System.Data.DataRelation.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.Nested
  id: Nested
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: Nested
  nameWithType: DataRelation.Nested
  fullName: System.Data.DataRelation.Nested
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se <xref href=&quot;System.Data.DataRelation&quot;> </xref> objetos aninhados."
  remarks: "Você pode usar <xref:System.Data.DataRelation>objetos para definir relações hierárquicas, como aquelas especificadas no XML.</xref:System.Data.DataRelation> Para obter mais informações, consulte [aninhamento DataRelations](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Se o <xref:System.Data.DataTable.TableName%2A>da tabela filho na relação corresponde a <xref:System.Data.DataColumn.ColumnName%2A>de uma coluna na tabela pai na relação, a propriedade aninhada deve ser falsa.</xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataTable.TableName%2A> Isso não era exigido com o .NET Framework versão 1.0."
  syntax:
    content: public virtual bool Nested { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, se <xref href=&quot;System.Data.DataRelation&quot;> </xref> objetos são aninhadas; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRelation.Nested*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Esse membro oferece suporte à infraestrutura .NET Framework e não se destina a ser usado diretamente no seu código."
  syntax:
    content: protected void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Referência de parâmetro."
  overload: System.Data.DataRelation.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ParentColumns
  id: ParentColumns
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ParentColumns
  nameWithType: DataRelation.ParentColumns
  fullName: System.Data.DataRelation.ParentColumns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos que são as colunas pai desta <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: ''
  example:
  - "The following example gets the array of <xref:System.Data.DataColumn> objects that function as parent columns for the relation.  \n  \n [!code-vb[Classic WebData DataRelation.ParentColumns Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_5_1.vb)]"
  syntax:
    content: public virtual System.Data.DataColumn[] ParentColumns { get; }
    return:
      type: System.Data.DataColumn[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataColumn&quot;> </xref> objetos que são as colunas pai desta <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  overload: System.Data.DataRelation.ParentColumns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ParentKeyConstraint
  id: ParentKeyConstraint
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ParentKeyConstraint
  nameWithType: DataRelation.ParentKeyConstraint
  fullName: System.Data.DataRelation.ParentKeyConstraint
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref> que garante que os valores na coluna pai de um <xref href=&quot;System.Data.DataRelation&quot;> </xref> são exclusivos."
  remarks: ''
  example:
  - "The following example gets the ParentKeyConstraint of a <xref:System.Data.DataRelation> object.  \n  \n [!code-vb[Classic WebData DataRelation.ParentKeyConstraint Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_6_1.vb)]"
  syntax:
    content: public virtual System.Data.UniqueConstraint ParentKeyConstraint { get; }
    return:
      type: System.Data.UniqueConstraint
      description: "Um <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref> que garante que os valores em uma coluna pai sejam exclusivos."
  overload: System.Data.DataRelation.ParentKeyConstraint*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ParentTable
  id: ParentTable
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ParentTable
  nameWithType: DataRelation.ParentTable
  fullName: System.Data.DataRelation.ParentTable
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o pai <xref href=&quot;System.Data.DataTable&quot;> </xref> deste <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: ''
  example:
  - "The following example gets the parent <xref:System.Data.DataTable> of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.ParentTable Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_3_1.vb)]"
  syntax:
    content: public virtual System.Data.DataTable ParentTable { get; }
    return:
      type: System.Data.DataTable
      description: "Um <xref href=&quot;System.Data.DataTable&quot;> </xref> que é a tabela pai desta relação."
  overload: System.Data.DataRelation.ParentTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataRelation.RaisePropertyChanging(String)
  fullName: System.Data.DataRelation.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Esse membro oferece suporte à infraestrutura .NET Framework e não se destina a ser usado diretamente no seu código."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Referência de parâmetro."
  overload: System.Data.DataRelation.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.RelationName
  id: RelationName
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: RelationName
  nameWithType: DataRelation.RelationName
  fullName: System.Data.DataRelation.RelationName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o nome usado para recuperar um <xref href=&quot;System.Data.DataRelation&quot;> </xref> do <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
  remarks: "Use a propriedade RelationName para recuperar um <xref:System.Data.DataRelation>de <xref:System.Data.DataRelationCollection>.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataRelation>"
  example:
  - "The following example uses the RelationName property to retrieve a <xref:System.Data.DataRelation> from a <xref:System.Data.DataRelationCollection>.  \n  \n [!code-vb[Classic WebData DataRelation.RelationName Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_4_1.vb)]"
  syntax:
    content: public virtual string RelationName { get; set; }
    return:
      type: System.String
      description: "O nome da um <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  overload: System.Data.DataRelation.RelationName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>ou a cadeia de caracteres vazia (&quot;&quot;) foi passado um <xref href=&quot;System.Data.DataColumn&quot;> </xref> que é um <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "O <xref href=&quot;System.Data.DataRelation&quot;> </xref> pertence a uma coleção que já contém um <xref href=&quot;System.Data.DataRelation&quot;> </xref> com o mesmo nome."
  platform:
  - net462
- uid: System.Data.DataRelation.ToString
  id: ToString
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ToString()
  nameWithType: DataRelation.ToString()
  fullName: System.Data.DataRelation.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o <xref:System.Data.DataRelation.RelationName*>, se houver.</xref:System.Data.DataRelation.RelationName*>"
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataColumn.ToString%2A> property to return the name of the <xref:System.Data.DataRelation> object.  \n  \n [!code-vb[Classic WebData DataRelation.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datarelati_1_1.vb)]\n [!code-cs[Classic WebData DataRelation.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datarelati_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "O valor de <xref:System.Data.DataRelation.RelationName*>propriedade.</xref:System.Data.DataRelation.RelationName*>"
  overload: System.Data.DataRelation.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn,DataColumn)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn[],DataColumn[])
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[])
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[])
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn,DataColumn,Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn[],DataColumn[],Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,String,String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
- uid: System.Data.DataRelation.CheckStateForProperty
  parent: System.Data.DataRelation
  isExternal: false
  name: CheckStateForProperty()
  nameWithType: DataRelation.CheckStateForProperty()
  fullName: System.Data.DataRelation.CheckStateForProperty()
- uid: System.Data.DataRelation.ChildColumns
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildColumns
  nameWithType: DataRelation.ChildColumns
  fullName: System.Data.DataRelation.ChildColumns
- uid: System.Data.DataRelation.ChildKeyConstraint
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildKeyConstraint
  nameWithType: DataRelation.ChildKeyConstraint
  fullName: System.Data.DataRelation.ChildKeyConstraint
- uid: System.Data.ForeignKeyConstraint
  parent: System.Data
  isExternal: false
  name: ForeignKeyConstraint
  nameWithType: ForeignKeyConstraint
  fullName: System.Data.ForeignKeyConstraint
- uid: System.Data.DataRelation.ChildTable
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildTable
  nameWithType: DataRelation.ChildTable
  fullName: System.Data.DataRelation.ChildTable
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataRelation.DataSet
  parent: System.Data.DataRelation
  isExternal: false
  name: DataSet
  nameWithType: DataRelation.DataSet
  fullName: System.Data.DataRelation.DataSet
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataRelation.ExtendedProperties
  parent: System.Data.DataRelation
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataRelation.ExtendedProperties
  fullName: System.Data.DataRelation.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataRelation.Nested
  parent: System.Data.DataRelation
  isExternal: false
  name: Nested
  nameWithType: DataRelation.Nested
  fullName: System.Data.DataRelation.Nested
- uid: System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataRelation
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataRelation.ParentColumns
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentColumns
  nameWithType: DataRelation.ParentColumns
  fullName: System.Data.DataRelation.ParentColumns
- uid: System.Data.DataRelation.ParentKeyConstraint
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentKeyConstraint
  nameWithType: DataRelation.ParentKeyConstraint
  fullName: System.Data.DataRelation.ParentKeyConstraint
- uid: System.Data.UniqueConstraint
  parent: System.Data
  isExternal: false
  name: UniqueConstraint
  nameWithType: UniqueConstraint
  fullName: System.Data.UniqueConstraint
- uid: System.Data.DataRelation.ParentTable
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentTable
  nameWithType: DataRelation.ParentTable
  fullName: System.Data.DataRelation.ParentTable
- uid: System.Data.DataRelation.RaisePropertyChanging(System.String)
  parent: System.Data.DataRelation
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataRelation.RaisePropertyChanging(String)
  fullName: System.Data.DataRelation.RaisePropertyChanging(String)
- uid: System.Data.DataRelation.RelationName
  parent: System.Data.DataRelation
  isExternal: false
  name: RelationName
  nameWithType: DataRelation.RelationName
  fullName: System.Data.DataRelation.RelationName
- uid: System.Data.DataRelation.ToString
  parent: System.Data.DataRelation
  isExternal: false
  name: ToString()
  nameWithType: DataRelation.ToString()
  fullName: System.Data.DataRelation.ToString()
- uid: System.Data.DataRelation.#ctor*
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation.DataRelation
- uid: System.Data.DataRelation.CheckStateForProperty*
  parent: System.Data.DataRelation
  isExternal: false
  name: CheckStateForProperty
  nameWithType: DataRelation.CheckStateForProperty
- uid: System.Data.DataRelation.ChildColumns*
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildColumns
  nameWithType: DataRelation.ChildColumns
- uid: System.Data.DataRelation.ChildKeyConstraint*
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildKeyConstraint
  nameWithType: DataRelation.ChildKeyConstraint
- uid: System.Data.DataRelation.ChildTable*
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildTable
  nameWithType: DataRelation.ChildTable
- uid: System.Data.DataRelation.DataSet*
  parent: System.Data.DataRelation
  isExternal: false
  name: DataSet
  nameWithType: DataRelation.DataSet
- uid: System.Data.DataRelation.ExtendedProperties*
  parent: System.Data.DataRelation
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataRelation.ExtendedProperties
- uid: System.Data.DataRelation.Nested*
  parent: System.Data.DataRelation
  isExternal: false
  name: Nested
  nameWithType: DataRelation.Nested
- uid: System.Data.DataRelation.OnPropertyChanging*
  parent: System.Data.DataRelation
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataRelation.OnPropertyChanging
- uid: System.Data.DataRelation.ParentColumns*
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentColumns
  nameWithType: DataRelation.ParentColumns
- uid: System.Data.DataRelation.ParentKeyConstraint*
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentKeyConstraint
  nameWithType: DataRelation.ParentKeyConstraint
- uid: System.Data.DataRelation.ParentTable*
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentTable
  nameWithType: DataRelation.ParentTable
- uid: System.Data.DataRelation.RaisePropertyChanging*
  parent: System.Data.DataRelation
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataRelation.RaisePropertyChanging
- uid: System.Data.DataRelation.RelationName*
  parent: System.Data.DataRelation
  isExternal: false
  name: RelationName
  nameWithType: DataRelation.RelationName
- uid: System.Data.DataRelation.ToString*
  parent: System.Data.DataRelation
  isExternal: false
  name: ToString
  nameWithType: DataRelation.ToString
